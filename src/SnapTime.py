# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _SnapTime.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_SnapTime')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_SnapTime')
    _SnapTime = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SnapTime', [dirname(__file__)])
        except ImportError:
            import _SnapTime
            return _SnapTime
        try:
            _mod = imp.load_module('_SnapTime', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _SnapTime = swig_import_helper()
    del swig_import_helper
else:
    import _SnapTime
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_SnapTime.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_SnapTime.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_SnapTime.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_SnapTime.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_SnapTime.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_SnapTime.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_SnapTime.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_SnapTime.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_SnapTime.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_SnapTime.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_SnapTime.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_SnapTime.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_SnapTime.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_SnapTime.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_SnapTime.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_SnapTime.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _SnapTime.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SNAP_ALL = _SnapTime.SNAP_ALL

Version = "5.0.9-64"


def print_array(*args):
    """
    print_array(int * x, int length)

    Parameters
    ----------
    x: int *
    length: int

    print_array(int64 * x, int64 length)

    Parameters
    ----------
    x: int64 *
    length: int64

    """
    return _SnapTime.print_array(*args)

def PyTFltV(x):
    """
    PyTFltV(double [10] x) -> TFltV

    Parameters
    ----------
    x: double [10]

    """
    return _SnapTime.PyTFltV(x)

def PyToTIntV(array):
    """
    PyToTIntV(int * array) -> TIntV

    Parameters
    ----------
    array: int *

    """
    return _SnapTime.PyToTIntV(array)

def count(str, c):
    """
    count(char * str, char c) -> int

    Parameters
    ----------
    str: char *
    c: char

    """
    return _SnapTime.count(str, c)

def TIntVToPy(originalList):
    """
    TIntVToPy(TIntV originalList)

    Parameters
    ----------
    originalList: TIntV

    """
    return _SnapTime.TIntVToPy(originalList)

def PyTFlt64V(x):
    """
    PyTFlt64V(double [10] x) -> TFlt64V

    Parameters
    ----------
    x: double [10]

    """
    return _SnapTime.PyTFlt64V(x)

def PyToTInt64V(array):
    """
    PyToTInt64V(int64 * array) -> TInt64V

    Parameters
    ----------
    array: int64 *

    """
    return _SnapTime.PyToTInt64V(array)

def absolute(*args):
    """
    absolute(int64 n) -> int64

    Parameters
    ----------
    n: int64

    absolute(int n) -> int

    Parameters
    ----------
    n: int

    """
    return _SnapTime.absolute(*args)
lUndef = _SnapTime.lUndef
lUs = _SnapTime.lUs
lSi = _SnapTime.lSi

def WrNotify(CaptionCStr, NotifyCStr):
    """
    WrNotify(char const * CaptionCStr, char const * NotifyCStr)

    Parameters
    ----------
    CaptionCStr: char const *
    NotifyCStr: char const *

    """
    return _SnapTime.WrNotify(CaptionCStr, NotifyCStr)

def SaveToErrLog(MsgCStr):
    """
    SaveToErrLog(char const * MsgCStr)

    Parameters
    ----------
    MsgCStr: char const *

    """
    return _SnapTime.SaveToErrLog(MsgCStr)

def ExeStop(MsgStr, ReasonStr, CondStr, FNm, LnN):
    """
    ExeStop(char const * MsgStr, char const * ReasonStr, char const * CondStr, char const * FNm, int const & LnN)

    Parameters
    ----------
    MsgStr: char const *
    ReasonStr: char const *
    CondStr: char const *
    FNm: char const *
    LnN: int const &

    """
    return _SnapTime.ExeStop(MsgStr, ReasonStr, CondStr, FNm, LnN)
loUndef = _SnapTime.loUndef
loNot = _SnapTime.loNot
loAnd = _SnapTime.loAnd
loOr = _SnapTime.loOr
roUndef = _SnapTime.roUndef
roLs = _SnapTime.roLs
roLEq = _SnapTime.roLEq
roEq = _SnapTime.roEq
roNEq = _SnapTime.roNEq
roGEq = _SnapTime.roGEq
roGt = _SnapTime.roGt
class TCRef(object):
    """Proxy of C++ TCRef class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TCRef self) -> TCRef"""
        _SnapTime.TCRef_swiginit(self, _SnapTime.new_TCRef())
    __swig_destroy__ = _SnapTime.delete_TCRef

    def MkRef(self):
        """
        MkRef(TCRef self)

        Parameters
        ----------
        self: TCRef *

        """
        return _SnapTime.TCRef_MkRef(self)


    def UnRef(self):
        """
        UnRef(TCRef self)

        Parameters
        ----------
        self: TCRef *

        """
        return _SnapTime.TCRef_UnRef(self)


    def NoRef(self):
        """
        NoRef(TCRef self) -> bool

        Parameters
        ----------
        self: TCRef const *

        """
        return _SnapTime.TCRef_NoRef(self)


    def GetRefs(self):
        """
        GetRefs(TCRef self) -> int64

        Parameters
        ----------
        self: TCRef const *

        """
        return _SnapTime.TCRef_GetRefs(self)

TCRef.MkRef = new_instancemethod(_SnapTime.TCRef_MkRef, None, TCRef)
TCRef.UnRef = new_instancemethod(_SnapTime.TCRef_UnRef, None, TCRef)
TCRef.NoRef = new_instancemethod(_SnapTime.TCRef_NoRef, None, TCRef)
TCRef.GetRefs = new_instancemethod(_SnapTime.TCRef_GetRefs, None, TCRef)
TCRef_swigregister = _SnapTime.TCRef_swigregister
TCRef_swigregister(TCRef)

class TSStr(object):
    """Proxy of C++ TSStr class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TSStr self) -> TSStr
        __init__(TSStr self, TSStr SStr) -> TSStr

        Parameters
        ----------
        SStr: TSStr const &

        __init__(TSStr self, char const * _Bf) -> TSStr

        Parameters
        ----------
        _Bf: char const *

        """
        _SnapTime.TSStr_swiginit(self, _SnapTime.new_TSStr(*args))
    __swig_destroy__ = _SnapTime.delete_TSStr

    def CStr(self, *args):
        """
        CStr(TSStr self) -> char
        CStr(TSStr self) -> char const *

        Parameters
        ----------
        self: TSStr const *

        """
        return _SnapTime.TSStr_CStr(self, *args)


    def Empty(self):
        """
        Empty(TSStr self) -> bool

        Parameters
        ----------
        self: TSStr const *

        """
        return _SnapTime.TSStr_Empty(self)


    def Len(self):
        """
        Len(TSStr self) -> int

        Parameters
        ----------
        self: TSStr const *

        """
        return _SnapTime.TSStr_Len(self)

TSStr.CStr = new_instancemethod(_SnapTime.TSStr_CStr, None, TSStr)
TSStr.Empty = new_instancemethod(_SnapTime.TSStr_Empty, None, TSStr)
TSStr.Len = new_instancemethod(_SnapTime.TSStr_Len, None, TSStr)
TSStr_swigregister = _SnapTime.TSStr_swigregister
TSStr_swigregister(TSStr)

class TConv_Pt64Ints32(object):
    """Proxy of C++ TConv_Pt64Ints32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TConv_Pt64Ints32 self) -> TConv_Pt64Ints32
        __init__(TConv_Pt64Ints32 self, void * Pt) -> TConv_Pt64Ints32

        Parameters
        ----------
        Pt: void *

        __init__(TConv_Pt64Ints32 self, uint const & Ms, uint const & Ls) -> TConv_Pt64Ints32

        Parameters
        ----------
        Ms: uint const &
        Ls: uint const &

        """
        _SnapTime.TConv_Pt64Ints32_swiginit(self, _SnapTime.new_TConv_Pt64Ints32(*args))

    def PutPt(self, Pt):
        """
        PutPt(TConv_Pt64Ints32 self, void * Pt)

        Parameters
        ----------
        Pt: void *

        """
        return _SnapTime.TConv_Pt64Ints32_PutPt(self, Pt)


    def GetPt(self):
        """
        GetPt(TConv_Pt64Ints32 self) -> void *

        Parameters
        ----------
        self: TConv_Pt64Ints32 const *

        """
        return _SnapTime.TConv_Pt64Ints32_GetPt(self)


    def PutUInt64(self, _UInt64):
        """
        PutUInt64(TConv_Pt64Ints32 self, uint64 const & _UInt64)

        Parameters
        ----------
        _UInt64: uint64 const &

        """
        return _SnapTime.TConv_Pt64Ints32_PutUInt64(self, _UInt64)


    def GetUInt64(self):
        """
        GetUInt64(TConv_Pt64Ints32 self) -> uint64

        Parameters
        ----------
        self: TConv_Pt64Ints32 const *

        """
        return _SnapTime.TConv_Pt64Ints32_GetUInt64(self)


    def PutMsUInt32(self, Ms):
        """
        PutMsUInt32(TConv_Pt64Ints32 self, uint const & Ms)

        Parameters
        ----------
        Ms: uint const &

        """
        return _SnapTime.TConv_Pt64Ints32_PutMsUInt32(self, Ms)


    def GetMsUInt32(self):
        """
        GetMsUInt32(TConv_Pt64Ints32 self) -> uint

        Parameters
        ----------
        self: TConv_Pt64Ints32 const *

        """
        return _SnapTime.TConv_Pt64Ints32_GetMsUInt32(self)


    def PutLsUInt32(self, Ls):
        """
        PutLsUInt32(TConv_Pt64Ints32 self, uint const & Ls)

        Parameters
        ----------
        Ls: uint const &

        """
        return _SnapTime.TConv_Pt64Ints32_PutLsUInt32(self, Ls)


    def GetLsUInt32(self):
        """
        GetLsUInt32(TConv_Pt64Ints32 self) -> uint

        Parameters
        ----------
        self: TConv_Pt64Ints32 const *

        """
        return _SnapTime.TConv_Pt64Ints32_GetLsUInt32(self)

    __swig_destroy__ = _SnapTime.delete_TConv_Pt64Ints32
TConv_Pt64Ints32.PutPt = new_instancemethod(_SnapTime.TConv_Pt64Ints32_PutPt, None, TConv_Pt64Ints32)
TConv_Pt64Ints32.GetPt = new_instancemethod(_SnapTime.TConv_Pt64Ints32_GetPt, None, TConv_Pt64Ints32)
TConv_Pt64Ints32.PutUInt64 = new_instancemethod(_SnapTime.TConv_Pt64Ints32_PutUInt64, None, TConv_Pt64Ints32)
TConv_Pt64Ints32.GetUInt64 = new_instancemethod(_SnapTime.TConv_Pt64Ints32_GetUInt64, None, TConv_Pt64Ints32)
TConv_Pt64Ints32.PutMsUInt32 = new_instancemethod(_SnapTime.TConv_Pt64Ints32_PutMsUInt32, None, TConv_Pt64Ints32)
TConv_Pt64Ints32.GetMsUInt32 = new_instancemethod(_SnapTime.TConv_Pt64Ints32_GetMsUInt32, None, TConv_Pt64Ints32)
TConv_Pt64Ints32.PutLsUInt32 = new_instancemethod(_SnapTime.TConv_Pt64Ints32_PutLsUInt32, None, TConv_Pt64Ints32)
TConv_Pt64Ints32.GetLsUInt32 = new_instancemethod(_SnapTime.TConv_Pt64Ints32_GetLsUInt32, None, TConv_Pt64Ints32)
TConv_Pt64Ints32_swigregister = _SnapTime.TConv_Pt64Ints32_swigregister
TConv_Pt64Ints32_swigregister(TConv_Pt64Ints32)

class TPairHashImpl1(object):
    """Proxy of C++ TPairHashImpl1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetHashCd(hc1, hc2):
        """
        GetHashCd(int const hc1, int const hc2) -> int

        Parameters
        ----------
        hc1: int const
        hc2: int const

        """
        return _SnapTime.TPairHashImpl1_GetHashCd(hc1, hc2)

    GetHashCd = staticmethod(GetHashCd)

    def __init__(self):
        """__init__(TPairHashImpl1 self) -> TPairHashImpl1"""
        _SnapTime.TPairHashImpl1_swiginit(self, _SnapTime.new_TPairHashImpl1())
    __swig_destroy__ = _SnapTime.delete_TPairHashImpl1
TPairHashImpl1_swigregister = _SnapTime.TPairHashImpl1_swigregister
TPairHashImpl1_swigregister(TPairHashImpl1)

def TPairHashImpl1_GetHashCd(hc1, hc2):
    """
    TPairHashImpl1_GetHashCd(int const hc1, int const hc2) -> int

    Parameters
    ----------
    hc1: int const
    hc2: int const

    """
    return _SnapTime.TPairHashImpl1_GetHashCd(hc1, hc2)

class TPairHashImpl2(object):
    """Proxy of C++ TPairHashImpl2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetHashCd(hc1, hc2):
        """
        GetHashCd(int const hc1, int const hc2) -> int

        Parameters
        ----------
        hc1: int const
        hc2: int const

        """
        return _SnapTime.TPairHashImpl2_GetHashCd(hc1, hc2)

    GetHashCd = staticmethod(GetHashCd)

    def __init__(self):
        """__init__(TPairHashImpl2 self) -> TPairHashImpl2"""
        _SnapTime.TPairHashImpl2_swiginit(self, _SnapTime.new_TPairHashImpl2())
    __swig_destroy__ = _SnapTime.delete_TPairHashImpl2
TPairHashImpl2_swigregister = _SnapTime.TPairHashImpl2_swigregister
TPairHashImpl2_swigregister(TPairHashImpl2)

def TPairHashImpl2_GetHashCd(hc1, hc2):
    """
    TPairHashImpl2_GetHashCd(int const hc1, int const hc2) -> int

    Parameters
    ----------
    hc1: int const
    hc2: int const

    """
    return _SnapTime.TPairHashImpl2_GetHashCd(hc1, hc2)


def TIntVToTInt64V(Vec):
    """
    TIntVToTInt64V(TIntV Vec) -> TInt64V

    Parameters
    ----------
    Vec: TIntV

    """
    return _SnapTime.TIntVToTInt64V(Vec)

def TInt64VToTIntV(Vec):
    """
    TInt64VToTIntV(TInt64V Vec) -> TIntV

    Parameters
    ----------
    Vec: TInt64V

    """
    return _SnapTime.TInt64VToTIntV(Vec)

def TIntPr64VToTIntPrV(Vec):
    """
    TIntPr64VToTIntPrV(TIntPr64V Vec) -> TIntPrV

    Parameters
    ----------
    Vec: TIntPr64V

    """
    return _SnapTime.TIntPr64VToTIntPrV(Vec)

def TIntFltKd64VToTIntFltKdV(Vec):
    """
    TIntFltKd64VToTIntFltKdV(TIntFltKd64V Vec) -> TIntFltKdV

    Parameters
    ----------
    Vec: TIntFltKd64V

    """
    return _SnapTime.TIntFltKd64VToTIntFltKdV(Vec)

def TFltPr64VToTFltPrV(Vec):
    """
    TFltPr64VToTFltPrV(TFltPr64V Vec) -> TFltPrV

    Parameters
    ----------
    Vec: TFltPr64V

    """
    return _SnapTime.TFltPr64VToTFltPrV(Vec)
class TRnd(object):
    """Proxy of C++ TRnd class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TRnd self, int64 const & _Seed=1, int64 const & Steps=0) -> TRnd

        Parameters
        ----------
        _Seed: int64 const &
        Steps: int64 const &

        __init__(TRnd self, int64 const & _Seed=1) -> TRnd

        Parameters
        ----------
        _Seed: int64 const &

        __init__(TRnd self) -> TRnd
        __init__(TRnd self, TSIn SIn) -> TRnd

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TRnd_swiginit(self, _SnapTime.new_TRnd(*args))

    def Save(self, SOut):
        """
        Save(TRnd self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TRnd_Save(self, SOut)


    def __eq__(self, arg2):
        """
        __eq__(TRnd self, TRnd arg2) -> bool

        Parameters
        ----------
        arg2: TRnd const &

        """
        return _SnapTime.TRnd___eq__(self, arg2)


    def GetUniDev(self):
        """
        GetUniDev(TRnd self) -> double

        Parameters
        ----------
        self: TRnd *

        """
        return _SnapTime.TRnd_GetUniDev(self)


    def GetUniDevInt(self, *args):
        """
        GetUniDevInt(TRnd self, int64 const & Range=0) -> int64

        Parameters
        ----------
        Range: int64 const &

        GetUniDevInt(TRnd self) -> int64
        GetUniDevInt(TRnd self, int64 const & MnVal, int64 const & MxVal) -> int64

        Parameters
        ----------
        MnVal: int64 const &
        MxVal: int64 const &

        """
        return _SnapTime.TRnd_GetUniDevInt(self, *args)


    def GetUniDevUInt(self, Range=0):
        """
        GetUniDevUInt(TRnd self, uint64 const & Range=0) -> uint64

        Parameters
        ----------
        Range: uint64 const &

        GetUniDevUInt(TRnd self) -> uint64

        Parameters
        ----------
        self: TRnd *

        """
        return _SnapTime.TRnd_GetUniDevUInt(self, Range)


    def GetUniDevInt64(self, Range=0):
        """
        GetUniDevInt64(TRnd self, int64 const & Range=0) -> int64

        Parameters
        ----------
        Range: int64 const &

        GetUniDevInt64(TRnd self) -> int64

        Parameters
        ----------
        self: TRnd *

        """
        return _SnapTime.TRnd_GetUniDevInt64(self, Range)


    def GetUniDevUInt64(self, Range=0):
        """
        GetUniDevUInt64(TRnd self, uint64 const & Range=0) -> uint64

        Parameters
        ----------
        Range: uint64 const &

        GetUniDevUInt64(TRnd self) -> uint64

        Parameters
        ----------
        self: TRnd *

        """
        return _SnapTime.TRnd_GetUniDevUInt64(self, Range)


    def GetNrmDev(self, *args):
        """
        GetNrmDev(TRnd self) -> double
        GetNrmDev(TRnd self, double const & Mean, double const & SDev, double const & Mn, double const & Mx) -> double

        Parameters
        ----------
        Mean: double const &
        SDev: double const &
        Mn: double const &
        Mx: double const &

        """
        return _SnapTime.TRnd_GetNrmDev(self, *args)


    def GetExpDev(self, *args):
        """
        GetExpDev(TRnd self) -> double
        GetExpDev(TRnd self, double const & Lambda) -> double

        Parameters
        ----------
        Lambda: double const &

        """
        return _SnapTime.TRnd_GetExpDev(self, *args)


    def GetGammaDev(self, Order):
        """
        GetGammaDev(TRnd self, int64 const & Order) -> double

        Parameters
        ----------
        Order: int64 const &

        """
        return _SnapTime.TRnd_GetGammaDev(self, Order)


    def GetPoissonDev(self, Mean):
        """
        GetPoissonDev(TRnd self, double const & Mean) -> double

        Parameters
        ----------
        Mean: double const &

        """
        return _SnapTime.TRnd_GetPoissonDev(self, Mean)


    def GetBinomialDev(self, Prb, Trials):
        """
        GetBinomialDev(TRnd self, double const & Prb, int64 const & Trials) -> double

        Parameters
        ----------
        Prb: double const &
        Trials: int64 const &

        """
        return _SnapTime.TRnd_GetBinomialDev(self, Prb, Trials)


    def GetGeoDev(self, Prb):
        """
        GetGeoDev(TRnd self, double const & Prb) -> int64

        Parameters
        ----------
        Prb: double const &

        """
        return _SnapTime.TRnd_GetGeoDev(self, Prb)


    def GetPowerDev(self, AlphaSlope):
        """
        GetPowerDev(TRnd self, double const & AlphaSlope) -> double

        Parameters
        ----------
        AlphaSlope: double const &

        """
        return _SnapTime.TRnd_GetPowerDev(self, AlphaSlope)


    def GetRayleigh(self, Sigma):
        """
        GetRayleigh(TRnd self, double const & Sigma) -> double

        Parameters
        ----------
        Sigma: double const &

        """
        return _SnapTime.TRnd_GetRayleigh(self, Sigma)


    def GetWeibull(self, K, Lambda):
        """
        GetWeibull(TRnd self, double const & K, double const & Lambda) -> double

        Parameters
        ----------
        K: double const &
        Lambda: double const &

        """
        return _SnapTime.TRnd_GetWeibull(self, K, Lambda)


    def PutSeed(self, _Seed):
        """
        PutSeed(TRnd self, int64 const & _Seed)

        Parameters
        ----------
        _Seed: int64 const &

        """
        return _SnapTime.TRnd_PutSeed(self, _Seed)


    def GetSeed(self):
        """
        GetSeed(TRnd self) -> int64

        Parameters
        ----------
        self: TRnd const *

        """
        return _SnapTime.TRnd_GetSeed(self)


    def Randomize(self):
        """
        Randomize(TRnd self)

        Parameters
        ----------
        self: TRnd *

        """
        return _SnapTime.TRnd_Randomize(self)


    def Move(self, Steps):
        """
        Move(TRnd self, int64 const & Steps)

        Parameters
        ----------
        Steps: int64 const &

        """
        return _SnapTime.TRnd_Move(self, Steps)


    def Check(self):
        """
        Check(TRnd self) -> bool

        Parameters
        ----------
        self: TRnd *

        """
        return _SnapTime.TRnd_Check(self)


    def GetUniDevStep(Seed, Steps):
        """
        GetUniDevStep(int64 const & Seed, int64 const & Steps) -> double

        Parameters
        ----------
        Seed: int64 const &
        Steps: int64 const &

        """
        return _SnapTime.TRnd_GetUniDevStep(Seed, Steps)

    GetUniDevStep = staticmethod(GetUniDevStep)

    def GetNrmDevStep(Seed, Steps):
        """
        GetNrmDevStep(int64 const & Seed, int64 const & Steps) -> double

        Parameters
        ----------
        Seed: int64 const &
        Steps: int64 const &

        """
        return _SnapTime.TRnd_GetNrmDevStep(Seed, Steps)

    GetNrmDevStep = staticmethod(GetNrmDevStep)

    def GetExpDevStep(Seed, Steps):
        """
        GetExpDevStep(int64 const & Seed, int64 const & Steps) -> double

        Parameters
        ----------
        Seed: int64 const &
        Steps: int64 const &

        """
        return _SnapTime.TRnd_GetExpDevStep(Seed, Steps)

    GetExpDevStep = staticmethod(GetExpDevStep)

    def LoadTxt(Lx):
        """
        LoadTxt(TILx & Lx) -> TRnd

        Parameters
        ----------
        Lx: TILx &

        """
        return _SnapTime.TRnd_LoadTxt(Lx)

    LoadTxt = staticmethod(LoadTxt)

    def SaveTxt(self, Lx):
        """
        SaveTxt(TRnd self, TOLx & Lx)

        Parameters
        ----------
        Lx: TOLx &

        """
        return _SnapTime.TRnd_SaveTxt(self, Lx)

    __swig_destroy__ = _SnapTime.delete_TRnd
TRnd.Save = new_instancemethod(_SnapTime.TRnd_Save, None, TRnd)
TRnd.__eq__ = new_instancemethod(_SnapTime.TRnd___eq__, None, TRnd)
TRnd.GetUniDev = new_instancemethod(_SnapTime.TRnd_GetUniDev, None, TRnd)
TRnd.GetUniDevInt = new_instancemethod(_SnapTime.TRnd_GetUniDevInt, None, TRnd)
TRnd.GetUniDevUInt = new_instancemethod(_SnapTime.TRnd_GetUniDevUInt, None, TRnd)
TRnd.GetUniDevInt64 = new_instancemethod(_SnapTime.TRnd_GetUniDevInt64, None, TRnd)
TRnd.GetUniDevUInt64 = new_instancemethod(_SnapTime.TRnd_GetUniDevUInt64, None, TRnd)
TRnd.GetNrmDev = new_instancemethod(_SnapTime.TRnd_GetNrmDev, None, TRnd)
TRnd.GetExpDev = new_instancemethod(_SnapTime.TRnd_GetExpDev, None, TRnd)
TRnd.GetGammaDev = new_instancemethod(_SnapTime.TRnd_GetGammaDev, None, TRnd)
TRnd.GetPoissonDev = new_instancemethod(_SnapTime.TRnd_GetPoissonDev, None, TRnd)
TRnd.GetBinomialDev = new_instancemethod(_SnapTime.TRnd_GetBinomialDev, None, TRnd)
TRnd.GetGeoDev = new_instancemethod(_SnapTime.TRnd_GetGeoDev, None, TRnd)
TRnd.GetPowerDev = new_instancemethod(_SnapTime.TRnd_GetPowerDev, None, TRnd)
TRnd.GetRayleigh = new_instancemethod(_SnapTime.TRnd_GetRayleigh, None, TRnd)
TRnd.GetWeibull = new_instancemethod(_SnapTime.TRnd_GetWeibull, None, TRnd)
TRnd.PutSeed = new_instancemethod(_SnapTime.TRnd_PutSeed, None, TRnd)
TRnd.GetSeed = new_instancemethod(_SnapTime.TRnd_GetSeed, None, TRnd)
TRnd.Randomize = new_instancemethod(_SnapTime.TRnd_Randomize, None, TRnd)
TRnd.Move = new_instancemethod(_SnapTime.TRnd_Move, None, TRnd)
TRnd.Check = new_instancemethod(_SnapTime.TRnd_Check, None, TRnd)
TRnd.SaveTxt = new_instancemethod(_SnapTime.TRnd_SaveTxt, None, TRnd)
TRnd_swigregister = _SnapTime.TRnd_swigregister
TRnd_swigregister(TRnd)
cvar = _SnapTime.cvar
TRnd.RndSeed = _SnapTime.cvar.TRnd_RndSeed

def TRnd_GetUniDevStep(Seed, Steps):
    """
    TRnd_GetUniDevStep(int64 const & Seed, int64 const & Steps) -> double

    Parameters
    ----------
    Seed: int64 const &
    Steps: int64 const &

    """
    return _SnapTime.TRnd_GetUniDevStep(Seed, Steps)

def TRnd_GetNrmDevStep(Seed, Steps):
    """
    TRnd_GetNrmDevStep(int64 const & Seed, int64 const & Steps) -> double

    Parameters
    ----------
    Seed: int64 const &
    Steps: int64 const &

    """
    return _SnapTime.TRnd_GetNrmDevStep(Seed, Steps)

def TRnd_GetExpDevStep(Seed, Steps):
    """
    TRnd_GetExpDevStep(int64 const & Seed, int64 const & Steps) -> double

    Parameters
    ----------
    Seed: int64 const &
    Steps: int64 const &

    """
    return _SnapTime.TRnd_GetExpDevStep(Seed, Steps)

def TRnd_LoadTxt(Lx):
    """
    TRnd_LoadTxt(TILx & Lx) -> TRnd

    Parameters
    ----------
    Lx: TILx &

    """
    return _SnapTime.TRnd_LoadTxt(Lx)

class TMem(object):
    """Proxy of C++ TMem class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def New(*args):
        """
        New(int const & MxBfL=0) -> PMem

        Parameters
        ----------
        MxBfL: int const &

        New() -> PMem
        New(void const * Bf, int const & BfL) -> PMem

        Parameters
        ----------
        Bf: void const *
        BfL: int const &

        New(TMem Mem) -> PMem

        Parameters
        ----------
        Mem: TMem const &

        New(PMem const & Mem) -> PMem

        Parameters
        ----------
        Mem: PMem const &

        New(TStr Str) -> PMem

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TMem_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TMem

    def __init__(self, *args):
        """
        __init__(TMem self, int const & _MxBfL=0) -> TMem

        Parameters
        ----------
        _MxBfL: int const &

        __init__(TMem self) -> TMem
        __init__(TMem self, void const * _Bf, int const & _BfL) -> TMem

        Parameters
        ----------
        _Bf: void const *
        _BfL: int const &

        __init__(TMem self, TMem Mem) -> TMem

        Parameters
        ----------
        Mem: TMem const &

        __init__(TMem self, TStr Str) -> TMem

        Parameters
        ----------
        Str: TStr const &

        __init__(TMem self, TSIn SIn) -> TMem

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TMem_swiginit(self, _SnapTime.new_TMem(*args))

    def Save(self, SOut):
        """
        Save(TMem self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TMem_Save(self, SOut)


    def __call__(self):
        """
        __call__(TMem self) -> char *

        Parameters
        ----------
        self: TMem const *

        """
        return _SnapTime.TMem___call__(self)


    def __iadd__(self, *args):
        """
        __iadd__(TMem self, char const & Ch) -> TMem

        Parameters
        ----------
        Ch: char const &

        __iadd__(TMem self, TMem Mem) -> TMem

        Parameters
        ----------
        Mem: TMem const &

        __iadd__(TMem self, TStr Str) -> TMem

        Parameters
        ----------
        Str: TStr const &

        __iadd__(TMem self, PSIn const & SIn) -> TMem

        Parameters
        ----------
        SIn: PSIn const &

        """
        return _SnapTime.TMem___iadd__(self, *args)


    def GetMemUsed(self):
        """
        GetMemUsed(TMem self) -> int

        Parameters
        ----------
        self: TMem const *

        """
        return _SnapTime.TMem_GetMemUsed(self)


    def Gen(self, _BfL):
        """
        Gen(TMem self, int const & _BfL)

        Parameters
        ----------
        _BfL: int const &

        """
        return _SnapTime.TMem_Gen(self, _BfL)


    def GenZeros(self, _BfL):
        """
        GenZeros(TMem self, int const & _BfL)

        Parameters
        ----------
        _BfL: int const &

        """
        return _SnapTime.TMem_GenZeros(self, _BfL)


    def Reserve(self, _MxBfL, DoClr=True):
        """
        Reserve(TMem self, int const & _MxBfL, bool const & DoClr=True)

        Parameters
        ----------
        _MxBfL: int const &
        DoClr: bool const &

        Reserve(TMem self, int const & _MxBfL)

        Parameters
        ----------
        _MxBfL: int const &

        """
        return _SnapTime.TMem_Reserve(self, _MxBfL, DoClr)


    def Del(self, BChN, EChN):
        """
        Del(TMem self, int const & BChN, int const & EChN)

        Parameters
        ----------
        BChN: int const &
        EChN: int const &

        """
        return _SnapTime.TMem_Del(self, BChN, EChN)


    def Clr(self, DoDel=True):
        """
        Clr(TMem self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TMem self)

        Parameters
        ----------
        self: TMem *

        """
        return _SnapTime.TMem_Clr(self, DoDel)


    def Len(self):
        """
        Len(TMem self) -> int

        Parameters
        ----------
        self: TMem const *

        """
        return _SnapTime.TMem_Len(self)


    def Empty(self):
        """
        Empty(TMem self) -> bool

        Parameters
        ----------
        self: TMem const *

        """
        return _SnapTime.TMem_Empty(self)


    def Trunc(self, _BfL):
        """
        Trunc(TMem self, int const & _BfL)

        Parameters
        ----------
        _BfL: int const &

        """
        return _SnapTime.TMem_Trunc(self, _BfL)


    def Push(self, Ch):
        """
        Push(TMem self, char const & Ch)

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TMem_Push(self, Ch)


    def Pop(self):
        """
        Pop(TMem self) -> char

        Parameters
        ----------
        self: TMem *

        """
        return _SnapTime.TMem_Pop(self)


    def DoFitStr(self, Str):
        """
        DoFitStr(TMem self, TStr Str) -> bool

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TMem_DoFitStr(self, Str)


    def AddBf(self, Bf, BfL):
        """
        AddBf(TMem self, void const * Bf, int const & BfL)

        Parameters
        ----------
        Bf: void const *
        BfL: int const &

        """
        return _SnapTime.TMem_AddBf(self, Bf, BfL)


    def GetBf(self):
        """
        GetBf(TMem self) -> char *

        Parameters
        ----------
        self: TMem const *

        """
        return _SnapTime.TMem_GetBf(self)


    def GetAsStr(self, *args):
        """
        GetAsStr(TMem self, char const & NewNullCh) -> TStr

        Parameters
        ----------
        NewNullCh: char const &

        GetAsStr(TMem self) -> TStr

        Parameters
        ----------
        self: TMem const *

        """
        return _SnapTime.TMem_GetAsStr(self, *args)


    def GetSIn(self):
        """
        GetSIn(TMem self) -> PSIn

        Parameters
        ----------
        self: TMem const *

        """
        return _SnapTime.TMem_GetSIn(self)


    def LoadMem(*args):
        """
        LoadMem(PSIn const & SIn, TMem Mem)

        Parameters
        ----------
        SIn: PSIn const &
        Mem: TMem &

        LoadMem(PSIn const & SIn, PMem const & Mem)

        Parameters
        ----------
        SIn: PSIn const &
        Mem: PMem const &

        """
        return _SnapTime.TMem_LoadMem(*args)

    LoadMem = staticmethod(LoadMem)

    def SaveMem(self, SOut):
        """
        SaveMem(TMem self, PSOut const & SOut)

        Parameters
        ----------
        SOut: PSOut const &

        """
        return _SnapTime.TMem_SaveMem(self, SOut)

TMem.Save = new_instancemethod(_SnapTime.TMem_Save, None, TMem)
TMem.__call__ = new_instancemethod(_SnapTime.TMem___call__, None, TMem)
TMem.__iadd__ = new_instancemethod(_SnapTime.TMem___iadd__, None, TMem)
TMem.GetMemUsed = new_instancemethod(_SnapTime.TMem_GetMemUsed, None, TMem)
TMem.Gen = new_instancemethod(_SnapTime.TMem_Gen, None, TMem)
TMem.GenZeros = new_instancemethod(_SnapTime.TMem_GenZeros, None, TMem)
TMem.Reserve = new_instancemethod(_SnapTime.TMem_Reserve, None, TMem)
TMem.Del = new_instancemethod(_SnapTime.TMem_Del, None, TMem)
TMem.Clr = new_instancemethod(_SnapTime.TMem_Clr, None, TMem)
TMem.Len = new_instancemethod(_SnapTime.TMem_Len, None, TMem)
TMem.Empty = new_instancemethod(_SnapTime.TMem_Empty, None, TMem)
TMem.Trunc = new_instancemethod(_SnapTime.TMem_Trunc, None, TMem)
TMem.Push = new_instancemethod(_SnapTime.TMem_Push, None, TMem)
TMem.Pop = new_instancemethod(_SnapTime.TMem_Pop, None, TMem)
TMem.DoFitStr = new_instancemethod(_SnapTime.TMem_DoFitStr, None, TMem)
TMem.AddBf = new_instancemethod(_SnapTime.TMem_AddBf, None, TMem)
TMem.GetBf = new_instancemethod(_SnapTime.TMem_GetBf, None, TMem)
TMem.GetAsStr = new_instancemethod(_SnapTime.TMem_GetAsStr, None, TMem)
TMem.GetSIn = new_instancemethod(_SnapTime.TMem_GetSIn, None, TMem)
TMem.SaveMem = new_instancemethod(_SnapTime.TMem_SaveMem, None, TMem)
TMem_swigregister = _SnapTime.TMem_swigregister
TMem_swigregister(TMem)

def TMem_New(*args):
    """
    New(int const & MxBfL=0) -> PMem

    Parameters
    ----------
    MxBfL: int const &

    New() -> PMem
    New(void const * Bf, int const & BfL) -> PMem

    Parameters
    ----------
    Bf: void const *
    BfL: int const &

    New(TMem Mem) -> PMem

    Parameters
    ----------
    Mem: TMem const &

    New(PMem const & Mem) -> PMem

    Parameters
    ----------
    Mem: PMem const &

    TMem_New(TStr Str) -> PMem

    Parameters
    ----------
    Str: TStr const &

    """
    return _SnapTime.TMem_New(*args)

def TMem_LoadMem(*args):
    """
    LoadMem(PSIn const & SIn, TMem Mem)

    Parameters
    ----------
    SIn: PSIn const &
    Mem: TMem &

    TMem_LoadMem(PSIn const & SIn, PMem const & Mem)

    Parameters
    ----------
    SIn: PSIn const &
    Mem: PMem const &

    """
    return _SnapTime.TMem_LoadMem(*args)

class TMemIn(object):
    """Proxy of C++ TMemIn class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _Mem, _BfC=0):
        """
        __init__(TMemIn self, TMem _Mem, int const & _BfC=0) -> TMemIn

        Parameters
        ----------
        _Mem: TMem const &
        _BfC: int const &

        __init__(TMemIn self, TMem _Mem) -> TMemIn

        Parameters
        ----------
        _Mem: TMem const &

        """
        _SnapTime.TMemIn_swiginit(self, _SnapTime.new_TMemIn(_Mem, _BfC))

    def New(*args):
        """
        New(TMem Mem) -> PSIn

        Parameters
        ----------
        Mem: TMem const &

        New(PMem const & Mem) -> PSIn

        Parameters
        ----------
        Mem: PMem const &

        """
        return _SnapTime.TMemIn_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TMemIn

    def Eof(self):
        """
        Eof(TMemIn self) -> bool

        Parameters
        ----------
        self: TMemIn *

        """
        return _SnapTime.TMemIn_Eof(self)


    def Len(self):
        """
        Len(TMemIn self) -> int

        Parameters
        ----------
        self: TMemIn const *

        """
        return _SnapTime.TMemIn_Len(self)


    def GetCh(self):
        """
        GetCh(TMemIn self) -> char

        Parameters
        ----------
        self: TMemIn *

        """
        return _SnapTime.TMemIn_GetCh(self)


    def PeekCh(self):
        """
        PeekCh(TMemIn self) -> char

        Parameters
        ----------
        self: TMemIn *

        """
        return _SnapTime.TMemIn_PeekCh(self)


    def GetBf(self, LBf, LBfL):
        """
        GetBf(TMemIn self, void const * LBf, TSize const & LBfL) -> int

        Parameters
        ----------
        LBf: void const *
        LBfL: TSize const &

        """
        return _SnapTime.TMemIn_GetBf(self, LBf, LBfL)


    def Reset(self):
        """
        Reset(TMemIn self)

        Parameters
        ----------
        self: TMemIn *

        """
        return _SnapTime.TMemIn_Reset(self)


    def GetNextLnBf(self, LnChA):
        """
        GetNextLnBf(TMemIn self, TChA LnChA) -> bool

        Parameters
        ----------
        LnChA: TChA &

        """
        return _SnapTime.TMemIn_GetNextLnBf(self, LnChA)

TMemIn.Eof = new_instancemethod(_SnapTime.TMemIn_Eof, None, TMemIn)
TMemIn.Len = new_instancemethod(_SnapTime.TMemIn_Len, None, TMemIn)
TMemIn.GetCh = new_instancemethod(_SnapTime.TMemIn_GetCh, None, TMemIn)
TMemIn.PeekCh = new_instancemethod(_SnapTime.TMemIn_PeekCh, None, TMemIn)
TMemIn.GetBf = new_instancemethod(_SnapTime.TMemIn_GetBf, None, TMemIn)
TMemIn.Reset = new_instancemethod(_SnapTime.TMemIn_Reset, None, TMemIn)
TMemIn.GetNextLnBf = new_instancemethod(_SnapTime.TMemIn_GetNextLnBf, None, TMemIn)
TMemIn_swigregister = _SnapTime.TMemIn_swigregister
TMemIn_swigregister(TMemIn)

def TMemIn_New(*args):
    """
    New(TMem Mem) -> PSIn

    Parameters
    ----------
    Mem: TMem const &

    TMemIn_New(PMem const & Mem) -> PSIn

    Parameters
    ----------
    Mem: PMem const &

    """
    return _SnapTime.TMemIn_New(*args)

class TMemOut(object):
    """Proxy of C++ TMemOut class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _Mem):
        """
        __init__(TMemOut self, PMem const & _Mem) -> TMemOut

        Parameters
        ----------
        _Mem: PMem const &

        """
        _SnapTime.TMemOut_swiginit(self, _SnapTime.new_TMemOut(_Mem))

    def New(Mem):
        """
        New(PMem const & Mem) -> PSOut

        Parameters
        ----------
        Mem: PMem const &

        """
        return _SnapTime.TMemOut_New(Mem)

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TMemOut

    def PutCh(self, Ch):
        """
        PutCh(TMemOut self, char const & Ch) -> int

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TMemOut_PutCh(self, Ch)


    def PutBf(self, LBf, LBfL):
        """
        PutBf(TMemOut self, void const * LBf, TSize const & LBfL) -> int

        Parameters
        ----------
        LBf: void const *
        LBfL: TSize const &

        """
        return _SnapTime.TMemOut_PutBf(self, LBf, LBfL)


    def Flush(self):
        """
        Flush(TMemOut self)

        Parameters
        ----------
        self: TMemOut *

        """
        return _SnapTime.TMemOut_Flush(self)

TMemOut.PutCh = new_instancemethod(_SnapTime.TMemOut_PutCh, None, TMemOut)
TMemOut.PutBf = new_instancemethod(_SnapTime.TMemOut_PutBf, None, TMemOut)
TMemOut.Flush = new_instancemethod(_SnapTime.TMemOut_Flush, None, TMemOut)
TMemOut_swigregister = _SnapTime.TMemOut_swigregister
TMemOut_swigregister(TMemOut)

def TMemOut_New(Mem):
    """
    TMemOut_New(PMem const & Mem) -> PSOut

    Parameters
    ----------
    Mem: PMem const &

    """
    return _SnapTime.TMemOut_New(Mem)

class TChA(object):
    """Proxy of C++ TChA class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TChA

    def __init__(self, *args):
        """
        __init__(TChA self, int const & _MxBfL=256) -> TChA

        Parameters
        ----------
        _MxBfL: int const &

        __init__(TChA self) -> TChA
        __init__(TChA self, char const * CStr) -> TChA

        Parameters
        ----------
        CStr: char const *

        __init__(TChA self, char const * CStr, int const & StrLen) -> TChA

        Parameters
        ----------
        CStr: char const *
        StrLen: int const &

        __init__(TChA self, TChA ChA) -> TChA

        Parameters
        ----------
        ChA: TChA const &

        __init__(TChA self, TStr Str) -> TChA

        Parameters
        ----------
        Str: TStr const &

        __init__(TChA self, TMem Mem) -> TChA

        Parameters
        ----------
        Mem: TMem const &

        __init__(TChA self, TSIn SIn) -> TChA

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TChA_swiginit(self, _SnapTime.new_TChA(*args))

    def Load(self, SIn):
        """
        Load(TChA self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TChA_Load(self, SIn)


    def Save(self, SOut, SaveCompact=True):
        """
        Save(TChA self, TSOut SOut, bool const & SaveCompact=True)

        Parameters
        ----------
        SOut: TSOut &
        SaveCompact: bool const &

        Save(TChA self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TChA_Save(self, SOut, SaveCompact)


    def __eq__(self, *args):
        """
        __eq__(TChA self, TChA ChA) -> bool

        Parameters
        ----------
        ChA: TChA const &

        __eq__(TChA self, char const * _CStr) -> bool

        Parameters
        ----------
        _CStr: char const *

        __eq__(TChA self, char const & Ch) -> bool

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TChA___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(TChA self, TChA ChA) -> bool

        Parameters
        ----------
        ChA: TChA const &

        __ne__(TChA self, char const * _CStr) -> bool

        Parameters
        ----------
        _CStr: char const *

        __ne__(TChA self, char const & Ch) -> bool

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TChA___ne__(self, *args)


    def __lt__(self, ChA):
        """
        __lt__(TChA self, TChA ChA) -> bool

        Parameters
        ----------
        ChA: TChA const &

        """
        return _SnapTime.TChA___lt__(self, ChA)


    def __iadd__(self, *args):
        """
        __iadd__(TChA self, TMem Mem) -> TChA

        Parameters
        ----------
        Mem: TMem const &

        __iadd__(TChA self, TChA ChA) -> TChA

        Parameters
        ----------
        ChA: TChA const &

        __iadd__(TChA self, TStr Str) -> TChA

        Parameters
        ----------
        Str: TStr const &

        __iadd__(TChA self, char const * CStr) -> TChA

        Parameters
        ----------
        CStr: char const *

        __iadd__(TChA self, char const & Ch) -> TChA

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TChA___iadd__(self, *args)


    def GetMemUsed(self):
        """
        GetMemUsed(TChA self) -> int

        Parameters
        ----------
        self: TChA const *

        """
        return _SnapTime.TChA_GetMemUsed(self)


    def __call__(self, *args):
        """
        __call__(TChA self) -> char
        __call__(TChA self) -> char const *

        Parameters
        ----------
        self: TChA const *

        """
        return _SnapTime.TChA___call__(self, *args)


    def CStr(self, *args):
        """
        CStr(TChA self) -> char
        CStr(TChA self) -> char const *

        Parameters
        ----------
        self: TChA const *

        """
        return _SnapTime.TChA_CStr(self, *args)


    def Clr(self):
        """
        Clr(TChA self)

        Parameters
        ----------
        self: TChA *

        """
        return _SnapTime.TChA_Clr(self)


    def Len(self):
        """
        Len(TChA self) -> int

        Parameters
        ----------
        self: TChA const *

        """
        return _SnapTime.TChA_Len(self)


    def Empty(self):
        """
        Empty(TChA self) -> bool

        Parameters
        ----------
        self: TChA const *

        """
        return _SnapTime.TChA_Empty(self)


    def Ins(self, BChN, CStr):
        """
        Ins(TChA self, int const & BChN, char const * CStr)

        Parameters
        ----------
        BChN: int const &
        CStr: char const *

        """
        return _SnapTime.TChA_Ins(self, BChN, CStr)


    def Del(self, ChN):
        """
        Del(TChA self, int const & ChN)

        Parameters
        ----------
        ChN: int const &

        """
        return _SnapTime.TChA_Del(self, ChN)


    def DelLastCh(self):
        """
        DelLastCh(TChA self)

        Parameters
        ----------
        self: TChA *

        """
        return _SnapTime.TChA_DelLastCh(self)


    def Push(self, Ch):
        """
        Push(TChA self, char const & Ch)

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TChA_Push(self, Ch)


    def Pop(self):
        """
        Pop(TChA self) -> char

        Parameters
        ----------
        self: TChA *

        """
        return _SnapTime.TChA_Pop(self)


    def Trunc(self, *args):
        """
        Trunc(TChA self)
        Trunc(TChA self, int const & _BfL)

        Parameters
        ----------
        _BfL: int const &

        """
        return _SnapTime.TChA_Trunc(self, *args)


    def Reverse(self):
        """
        Reverse(TChA self)

        Parameters
        ----------
        self: TChA *

        """
        return _SnapTime.TChA_Reverse(self)


    def AddCh(self, Ch, MxLen=-1):
        """
        AddCh(TChA self, char const & Ch, int const & MxLen=-1)

        Parameters
        ----------
        Ch: char const &
        MxLen: int const &

        AddCh(TChA self, char const & Ch)

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TChA_AddCh(self, Ch, MxLen)


    def AddChTo(self, Ch, ToChN):
        """
        AddChTo(TChA self, char const & Ch, int const & ToChN)

        Parameters
        ----------
        Ch: char const &
        ToChN: int const &

        """
        return _SnapTime.TChA_AddChTo(self, Ch, ToChN)


    def AddBf(self, NewBf, BfS):
        """
        AddBf(TChA self, char * NewBf, int const & BfS)

        Parameters
        ----------
        NewBf: char *
        BfS: int const &

        """
        return _SnapTime.TChA_AddBf(self, NewBf, BfS)


    def PutCh(self, ChN, Ch):
        """
        PutCh(TChA self, int const & ChN, char const & Ch)

        Parameters
        ----------
        ChN: int const &
        Ch: char const &

        """
        return _SnapTime.TChA_PutCh(self, ChN, Ch)


    def GetCh(self, ChN):
        """
        GetCh(TChA self, int const & ChN) -> char

        Parameters
        ----------
        ChN: int const &

        """
        return _SnapTime.TChA_GetCh(self, ChN)


    def LastCh(self):
        """
        LastCh(TChA self) -> char

        Parameters
        ----------
        self: TChA const *

        """
        return _SnapTime.TChA_LastCh(self)


    def LastLastCh(self):
        """
        LastLastCh(TChA self) -> char

        Parameters
        ----------
        self: TChA const *

        """
        return _SnapTime.TChA_LastLastCh(self)


    def GetSubStr(self, BChN, EChN):
        """
        GetSubStr(TChA self, int const & BChN, int const & EChN) -> TChA

        Parameters
        ----------
        BChN: int const &
        EChN: int const &

        """
        return _SnapTime.TChA_GetSubStr(self, BChN, EChN)


    def CountCh(self, Ch, BChN=0):
        """
        CountCh(TChA self, char const & Ch, int const & BChN=0) -> int

        Parameters
        ----------
        Ch: char const &
        BChN: int const &

        CountCh(TChA self, char const & Ch) -> int

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TChA_CountCh(self, Ch, BChN)


    def SearchCh(self, Ch, BChN=0):
        """
        SearchCh(TChA self, char const & Ch, int const & BChN=0) -> int

        Parameters
        ----------
        Ch: char const &
        BChN: int const &

        SearchCh(TChA self, char const & Ch) -> int

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TChA_SearchCh(self, Ch, BChN)


    def SearchChBack(self, Ch, BChN=-1):
        """
        SearchChBack(TChA self, char const & Ch, int BChN=-1) -> int

        Parameters
        ----------
        Ch: char const &
        BChN: int

        SearchChBack(TChA self, char const & Ch) -> int

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TChA_SearchChBack(self, Ch, BChN)


    def SearchStr(self, *args):
        """
        SearchStr(TChA self, TChA Str, int const & BChN=0) -> int

        Parameters
        ----------
        Str: TChA const &
        BChN: int const &

        SearchStr(TChA self, TChA Str) -> int

        Parameters
        ----------
        Str: TChA const &

        SearchStr(TChA self, TStr Str, int const & BChN=0) -> int

        Parameters
        ----------
        Str: TStr const &
        BChN: int const &

        SearchStr(TChA self, TStr Str) -> int

        Parameters
        ----------
        Str: TStr const &

        SearchStr(TChA self, char const * CStr, int const & BChN=0) -> int

        Parameters
        ----------
        CStr: char const *
        BChN: int const &

        SearchStr(TChA self, char const * CStr) -> int

        Parameters
        ----------
        CStr: char const *

        """
        return _SnapTime.TChA_SearchStr(self, *args)


    def IsStrIn(self, Str):
        """
        IsStrIn(TChA self, TStr Str) -> bool

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TChA_IsStrIn(self, Str)


    def IsPrefix(self, *args):
        """
        IsPrefix(TChA self, char const * CStr, int const & BChN=0) -> bool

        Parameters
        ----------
        CStr: char const *
        BChN: int const &

        IsPrefix(TChA self, char const * CStr) -> bool

        Parameters
        ----------
        CStr: char const *

        IsPrefix(TChA self, TStr Str) -> bool

        Parameters
        ----------
        Str: TStr const &

        IsPrefix(TChA self, TChA Str) -> bool

        Parameters
        ----------
        Str: TChA const &

        """
        return _SnapTime.TChA_IsPrefix(self, *args)


    def IsSuffix(self, *args):
        """
        IsSuffix(TChA self, char const * CStr) -> bool

        Parameters
        ----------
        CStr: char const *

        IsSuffix(TChA self, TStr Str) -> bool

        Parameters
        ----------
        Str: TStr const &

        IsSuffix(TChA self, TChA Str) -> bool

        Parameters
        ----------
        Str: TChA const &

        """
        return _SnapTime.TChA_IsSuffix(self, *args)


    def IsChIn(self, Ch):
        """
        IsChIn(TChA self, char const & Ch) -> bool

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TChA_IsChIn(self, Ch)


    def ChangeCh(self, SrcCh, DstCh):
        """
        ChangeCh(TChA self, char const & SrcCh, char const & DstCh)

        Parameters
        ----------
        SrcCh: char const &
        DstCh: char const &

        """
        return _SnapTime.TChA_ChangeCh(self, SrcCh, DstCh)


    def ToUc(self):
        """
        ToUc(TChA self) -> TChA

        Parameters
        ----------
        self: TChA *

        """
        return _SnapTime.TChA_ToUc(self)


    def ToLc(self):
        """
        ToLc(TChA self) -> TChA

        Parameters
        ----------
        self: TChA *

        """
        return _SnapTime.TChA_ToLc(self)


    def ToTrunc(self):
        """
        ToTrunc(TChA self) -> TChA

        Parameters
        ----------
        self: TChA *

        """
        return _SnapTime.TChA_ToTrunc(self)


    def CompressWs(self):
        """
        CompressWs(TChA self)

        Parameters
        ----------
        self: TChA *

        """
        return _SnapTime.TChA_CompressWs(self)


    def Swap(self, *args):
        """
        Swap(TChA self, int const & ChN1, int const & ChN2)

        Parameters
        ----------
        ChN1: int const &
        ChN2: int const &

        Swap(TChA self, TChA ChA)

        Parameters
        ----------
        ChA: TChA &

        """
        return _SnapTime.TChA_Swap(self, *args)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TChA self) -> int

        Parameters
        ----------
        self: TChA const *

        """
        return _SnapTime.TChA_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TChA self) -> int

        Parameters
        ----------
        self: TChA const *

        """
        return _SnapTime.TChA_GetSecHashCd(self)


    def LoadTxt(SIn, ChA):
        """
        LoadTxt(PSIn const & SIn, TChA ChA)

        Parameters
        ----------
        SIn: PSIn const &
        ChA: TChA &

        """
        return _SnapTime.TChA_LoadTxt(SIn, ChA)

    LoadTxt = staticmethod(LoadTxt)

    def SaveTxt(self, SOut):
        """
        SaveTxt(TChA self, PSOut const & SOut)

        Parameters
        ----------
        SOut: PSOut const &

        """
        return _SnapTime.TChA_SaveTxt(self, SOut)

TChA.Load = new_instancemethod(_SnapTime.TChA_Load, None, TChA)
TChA.Save = new_instancemethod(_SnapTime.TChA_Save, None, TChA)
TChA.__eq__ = new_instancemethod(_SnapTime.TChA___eq__, None, TChA)
TChA.__ne__ = new_instancemethod(_SnapTime.TChA___ne__, None, TChA)
TChA.__lt__ = new_instancemethod(_SnapTime.TChA___lt__, None, TChA)
TChA.__iadd__ = new_instancemethod(_SnapTime.TChA___iadd__, None, TChA)
TChA.GetMemUsed = new_instancemethod(_SnapTime.TChA_GetMemUsed, None, TChA)
TChA.__call__ = new_instancemethod(_SnapTime.TChA___call__, None, TChA)
TChA.CStr = new_instancemethod(_SnapTime.TChA_CStr, None, TChA)
TChA.Clr = new_instancemethod(_SnapTime.TChA_Clr, None, TChA)
TChA.Len = new_instancemethod(_SnapTime.TChA_Len, None, TChA)
TChA.Empty = new_instancemethod(_SnapTime.TChA_Empty, None, TChA)
TChA.Ins = new_instancemethod(_SnapTime.TChA_Ins, None, TChA)
TChA.Del = new_instancemethod(_SnapTime.TChA_Del, None, TChA)
TChA.DelLastCh = new_instancemethod(_SnapTime.TChA_DelLastCh, None, TChA)
TChA.Push = new_instancemethod(_SnapTime.TChA_Push, None, TChA)
TChA.Pop = new_instancemethod(_SnapTime.TChA_Pop, None, TChA)
TChA.Trunc = new_instancemethod(_SnapTime.TChA_Trunc, None, TChA)
TChA.Reverse = new_instancemethod(_SnapTime.TChA_Reverse, None, TChA)
TChA.AddCh = new_instancemethod(_SnapTime.TChA_AddCh, None, TChA)
TChA.AddChTo = new_instancemethod(_SnapTime.TChA_AddChTo, None, TChA)
TChA.AddBf = new_instancemethod(_SnapTime.TChA_AddBf, None, TChA)
TChA.PutCh = new_instancemethod(_SnapTime.TChA_PutCh, None, TChA)
TChA.GetCh = new_instancemethod(_SnapTime.TChA_GetCh, None, TChA)
TChA.LastCh = new_instancemethod(_SnapTime.TChA_LastCh, None, TChA)
TChA.LastLastCh = new_instancemethod(_SnapTime.TChA_LastLastCh, None, TChA)
TChA.GetSubStr = new_instancemethod(_SnapTime.TChA_GetSubStr, None, TChA)
TChA.CountCh = new_instancemethod(_SnapTime.TChA_CountCh, None, TChA)
TChA.SearchCh = new_instancemethod(_SnapTime.TChA_SearchCh, None, TChA)
TChA.SearchChBack = new_instancemethod(_SnapTime.TChA_SearchChBack, None, TChA)
TChA.SearchStr = new_instancemethod(_SnapTime.TChA_SearchStr, None, TChA)
TChA.IsStrIn = new_instancemethod(_SnapTime.TChA_IsStrIn, None, TChA)
TChA.IsPrefix = new_instancemethod(_SnapTime.TChA_IsPrefix, None, TChA)
TChA.IsSuffix = new_instancemethod(_SnapTime.TChA_IsSuffix, None, TChA)
TChA.IsChIn = new_instancemethod(_SnapTime.TChA_IsChIn, None, TChA)
TChA.ChangeCh = new_instancemethod(_SnapTime.TChA_ChangeCh, None, TChA)
TChA.ToUc = new_instancemethod(_SnapTime.TChA_ToUc, None, TChA)
TChA.ToLc = new_instancemethod(_SnapTime.TChA_ToLc, None, TChA)
TChA.ToTrunc = new_instancemethod(_SnapTime.TChA_ToTrunc, None, TChA)
TChA.CompressWs = new_instancemethod(_SnapTime.TChA_CompressWs, None, TChA)
TChA.Swap = new_instancemethod(_SnapTime.TChA_Swap, None, TChA)
TChA.GetPrimHashCd = new_instancemethod(_SnapTime.TChA_GetPrimHashCd, None, TChA)
TChA.GetSecHashCd = new_instancemethod(_SnapTime.TChA_GetSecHashCd, None, TChA)
TChA.SaveTxt = new_instancemethod(_SnapTime.TChA_SaveTxt, None, TChA)
TChA_swigregister = _SnapTime.TChA_swigregister
TChA_swigregister(TChA)

def TChA_LoadTxt(SIn, ChA):
    """
    TChA_LoadTxt(PSIn const & SIn, TChA ChA)

    Parameters
    ----------
    SIn: PSIn const &
    ChA: TChA &

    """
    return _SnapTime.TChA_LoadTxt(SIn, ChA)

class TChAIn(object):
    """Proxy of C++ TChAIn class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, ChA, _BfC=0):
        """
        __init__(TChAIn self, TChA ChA, int const & _BfC=0) -> TChAIn

        Parameters
        ----------
        ChA: TChA const &
        _BfC: int const &

        __init__(TChAIn self, TChA ChA) -> TChAIn

        Parameters
        ----------
        ChA: TChA const &

        """
        _SnapTime.TChAIn_swiginit(self, _SnapTime.new_TChAIn(ChA, _BfC))

    def New(ChA):
        """
        New(TChA ChA) -> PSIn

        Parameters
        ----------
        ChA: TChA const &

        """
        return _SnapTime.TChAIn_New(ChA)

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TChAIn

    def Eof(self):
        """
        Eof(TChAIn self) -> bool

        Parameters
        ----------
        self: TChAIn *

        """
        return _SnapTime.TChAIn_Eof(self)


    def Len(self):
        """
        Len(TChAIn self) -> int

        Parameters
        ----------
        self: TChAIn const *

        """
        return _SnapTime.TChAIn_Len(self)


    def GetCh(self):
        """
        GetCh(TChAIn self) -> char

        Parameters
        ----------
        self: TChAIn *

        """
        return _SnapTime.TChAIn_GetCh(self)


    def PeekCh(self):
        """
        PeekCh(TChAIn self) -> char

        Parameters
        ----------
        self: TChAIn *

        """
        return _SnapTime.TChAIn_PeekCh(self)


    def GetBf(self, LBf, LBfL):
        """
        GetBf(TChAIn self, void const * LBf, TSize const & LBfL) -> int

        Parameters
        ----------
        LBf: void const *
        LBfL: TSize const &

        """
        return _SnapTime.TChAIn_GetBf(self, LBf, LBfL)


    def Reset(self):
        """
        Reset(TChAIn self)

        Parameters
        ----------
        self: TChAIn *

        """
        return _SnapTime.TChAIn_Reset(self)


    def GetNextLnBf(self, LnChA):
        """
        GetNextLnBf(TChAIn self, TChA LnChA) -> bool

        Parameters
        ----------
        LnChA: TChA &

        """
        return _SnapTime.TChAIn_GetNextLnBf(self, LnChA)

TChAIn.Eof = new_instancemethod(_SnapTime.TChAIn_Eof, None, TChAIn)
TChAIn.Len = new_instancemethod(_SnapTime.TChAIn_Len, None, TChAIn)
TChAIn.GetCh = new_instancemethod(_SnapTime.TChAIn_GetCh, None, TChAIn)
TChAIn.PeekCh = new_instancemethod(_SnapTime.TChAIn_PeekCh, None, TChAIn)
TChAIn.GetBf = new_instancemethod(_SnapTime.TChAIn_GetBf, None, TChAIn)
TChAIn.Reset = new_instancemethod(_SnapTime.TChAIn_Reset, None, TChAIn)
TChAIn.GetNextLnBf = new_instancemethod(_SnapTime.TChAIn_GetNextLnBf, None, TChAIn)
TChAIn_swigregister = _SnapTime.TChAIn_swigregister
TChAIn_swigregister(TChAIn)

def TChAIn_New(ChA):
    """
    TChAIn_New(TChA ChA) -> PSIn

    Parameters
    ----------
    ChA: TChA const &

    """
    return _SnapTime.TChAIn_New(ChA)

class TStr(object):
    """Proxy of C++ TStr class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TStr

    def BegI(self):
        """
        BegI(TStr self) -> TStr::TIter

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_BegI(self)


    def begin(self):
        """
        begin(TStr self) -> TStr::TIter

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_begin(self)


    def EndI(self):
        """
        EndI(TStr self) -> TStr::TIter

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_EndI(self)


    def end(self):
        """
        end(TStr self) -> TStr::TIter

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_end(self)


    def GetI(self, ValN):
        """
        GetI(TStr self, int const ValN) -> TStr::TIter

        Parameters
        ----------
        ValN: int const

        """
        return _SnapTime.TStr_GetI(self, ValN)


    def __init__(self, *args):
        """
        __init__(TStr self) -> TStr
        __init__(TStr self, char const * CStr) -> TStr

        Parameters
        ----------
        CStr: char const *

        __init__(TStr self, char const & Ch) -> TStr

        Parameters
        ----------
        Ch: char const &

        __init__(TStr self, TStr Str) -> TStr

        Parameters
        ----------
        Str: TStr const &

        __init__(TStr self, TStr Str) -> TStr

        Parameters
        ----------
        Str: TStr &&

        __init__(TStr self, TChA ChA) -> TStr

        Parameters
        ----------
        ChA: TChA const &

        __init__(TStr self, TMem Mem) -> TStr

        Parameters
        ----------
        Mem: TMem const &

        __init__(TStr self, TSStr SStr) -> TStr

        Parameters
        ----------
        SStr: TSStr const &

        __init__(TStr self, PSIn const & SIn) -> TStr

        Parameters
        ----------
        SIn: PSIn const &

        __init__(TStr self, TSIn SIn, bool const & IsSmall=False) -> TStr

        Parameters
        ----------
        SIn: TSIn &
        IsSmall: bool const &

        __init__(TStr self, TSIn SIn) -> TStr

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TStr_swiginit(self, _SnapTime.new_TStr(*args))

    def Load(self, SIn, IsSmall=False):
        """
        Load(TStr self, TSIn SIn, bool const & IsSmall=False)

        Parameters
        ----------
        SIn: TSIn &
        IsSmall: bool const &

        Load(TStr self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TStr_Load(self, SIn, IsSmall)


    def Save(self, SOut, IsSmall=False):
        """
        Save(TStr self, TSOut SOut, bool const & IsSmall=False)

        Parameters
        ----------
        SOut: TSOut &
        IsSmall: bool const &

        Save(TStr self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TStr_Save(self, SOut, IsSmall)


    def __iadd__(self, *args):
        """
        __iadd__(TStr self, TStr Str) -> TStr

        Parameters
        ----------
        Str: TStr const &

        __iadd__(TStr self, char const * _CStr) -> TStr

        Parameters
        ----------
        _CStr: char const *

        __iadd__(TStr self, char const Ch) -> TStr

        Parameters
        ----------
        Ch: char const

        """
        return _SnapTime.TStr___iadd__(self, *args)


    def __eq__(self, *args):
        """
        __eq__(TStr self, char const * _CStr) -> bool

        Parameters
        ----------
        _CStr: char const *

        __eq__(TStr self, TStr Str) -> bool

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TStr___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(TStr self, TStr Str) -> bool

        Parameters
        ----------
        Str: TStr const &

        __ne__(TStr self, char const * CStr) -> bool

        Parameters
        ----------
        CStr: char const *

        """
        return _SnapTime.TStr___ne__(self, *args)


    def __lt__(self, Str):
        """
        __lt__(TStr self, TStr Str) -> bool

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TStr___lt__(self, Str)


    def CStr(self):
        """
        CStr(TStr self) -> char const *

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_CStr(self)


    def __call__(self):
        """
        __call__(TStr self) -> char const *

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr___call__(self)


    def CloneCStr(self):
        """
        CloneCStr(TStr self) -> char *

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_CloneCStr(self)


    def GetNullStr():
        """GetNullStr() -> TStr"""
        return _SnapTime.TStr_GetNullStr()

    GetNullStr = staticmethod(GetNullStr)

    def PutCh(self, ChN, Ch):
        """
        PutCh(TStr self, int const & ChN, char const & Ch)

        Parameters
        ----------
        ChN: int const &
        Ch: char const &

        """
        return _SnapTime.TStr_PutCh(self, ChN, Ch)


    def GetCh(self, ChN):
        """
        GetCh(TStr self, int const & ChN) -> char

        Parameters
        ----------
        ChN: int const &

        """
        return _SnapTime.TStr_GetCh(self, ChN)


    def LastCh(self):
        """
        LastCh(TStr self) -> char

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_LastCh(self)


    def Len(self):
        """
        Len(TStr self) -> int

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_Len(self)


    def Empty(self):
        """
        Empty(TStr self) -> bool

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_Empty(self)


    def Clr(self):
        """
        Clr(TStr self)

        Parameters
        ----------
        self: TStr *

        """
        return _SnapTime.TStr_Clr(self)


    def GetMemUsed(self):
        """
        GetMemUsed(TStr self) -> int

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_GetMemUsed(self)


    def CmpI(self, *args):
        """
        CmpI(TStr self, char const * p, char const * r) -> int

        Parameters
        ----------
        p: char const *
        r: char const *

        CmpI(TStr self, TStr Str) -> int

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TStr_CmpI(self, *args)


    def EqI(self, Str):
        """
        EqI(TStr self, TStr Str) -> bool

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TStr_EqI(self, Str)


    def IsUc(self):
        """
        IsUc(TStr self) -> bool

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_IsUc(self)


    def ToUc(self):
        """
        ToUc(TStr self) -> TStr

        Parameters
        ----------
        self: TStr *

        """
        return _SnapTime.TStr_ToUc(self)


    def GetUc(self):
        """
        GetUc(TStr self) -> TStr

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_GetUc(self)


    def IsLc(self):
        """
        IsLc(TStr self) -> bool

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_IsLc(self)


    def ToLc(self):
        """
        ToLc(TStr self) -> TStr

        Parameters
        ----------
        self: TStr *

        """
        return _SnapTime.TStr_ToLc(self)


    def GetLc(self):
        """
        GetLc(TStr self) -> TStr

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_GetLc(self)


    def ToCap(self):
        """
        ToCap(TStr self) -> TStr

        Parameters
        ----------
        self: TStr *

        """
        return _SnapTime.TStr_ToCap(self)


    def GetCap(self):
        """
        GetCap(TStr self) -> TStr

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_GetCap(self)


    def ToTrunc(self):
        """
        ToTrunc(TStr self) -> TStr

        Parameters
        ----------
        self: TStr *

        """
        return _SnapTime.TStr_ToTrunc(self)


    def GetTrunc(self):
        """
        GetTrunc(TStr self) -> TStr

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_GetTrunc(self)


    def ToHex(self):
        """
        ToHex(TStr self) -> TStr

        Parameters
        ----------
        self: TStr *

        """
        return _SnapTime.TStr_ToHex(self)


    def GetHex(self):
        """
        GetHex(TStr self) -> TStr

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_GetHex(self)


    def FromHex(self):
        """
        FromHex(TStr self) -> TStr

        Parameters
        ----------
        self: TStr *

        """
        return _SnapTime.TStr_FromHex(self)


    def GetFromHex(self):
        """
        GetFromHex(TStr self) -> TStr

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_GetFromHex(self)


    def GetSubStr(self, *args):
        """
        GetSubStr(TStr self, int const & BChN, int const & EChN) -> TStr

        Parameters
        ----------
        BChN: int const &
        EChN: int const &

        GetSubStr(TStr self, int const & BChN) -> TStr

        Parameters
        ----------
        BChN: int const &

        """
        return _SnapTime.TStr_GetSubStr(self, *args)


    def GetSubStrSafe(self, *args):
        """
        GetSubStrSafe(TStr self, int const & BChN, int const & EChN) -> TStr

        Parameters
        ----------
        BChN: int const &
        EChN: int const &

        GetSubStrSafe(TStr self, int const & BChN) -> TStr

        Parameters
        ----------
        BChN: int const &

        """
        return _SnapTime.TStr_GetSubStrSafe(self, *args)


    def InsStr(self, BChN, Str):
        """
        InsStr(TStr self, int const & BChN, TStr Str)

        Parameters
        ----------
        BChN: int const &
        Str: TStr const &

        """
        return _SnapTime.TStr_InsStr(self, BChN, Str)


    def DelChAll(self, Ch):
        """
        DelChAll(TStr self, char const & Ch)

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TStr_DelChAll(self, Ch)


    def DelSubStr(self, BChN, EChN):
        """
        DelSubStr(TStr self, int const & BChN, int const & EChN)

        Parameters
        ----------
        BChN: int const &
        EChN: int const &

        """
        return _SnapTime.TStr_DelSubStr(self, BChN, EChN)


    def DelStr(self, Str):
        """
        DelStr(TStr self, TStr Str) -> bool

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TStr_DelStr(self, Str)


    def DelStrAll(self, Str):
        """
        DelStrAll(TStr self, TStr Str) -> int

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TStr_DelStrAll(self, Str)


    def LeftOf(self, SplitCh):
        """
        LeftOf(TStr self, char const & SplitCh) -> TStr

        Parameters
        ----------
        SplitCh: char const &

        """
        return _SnapTime.TStr_LeftOf(self, SplitCh)


    def LeftOfLast(self, SplitCh):
        """
        LeftOfLast(TStr self, char const & SplitCh) -> TStr

        Parameters
        ----------
        SplitCh: char const &

        """
        return _SnapTime.TStr_LeftOfLast(self, SplitCh)


    def RightOf(self, SplitCh):
        """
        RightOf(TStr self, char const & SplitCh) -> TStr

        Parameters
        ----------
        SplitCh: char const &

        """
        return _SnapTime.TStr_RightOf(self, SplitCh)


    def RightOfLast(self, SplitCh):
        """
        RightOfLast(TStr self, char const & SplitCh) -> TStr

        Parameters
        ----------
        SplitCh: char const &

        """
        return _SnapTime.TStr_RightOfLast(self, SplitCh)


    def TrimLeft(self, StartStr):
        """
        TrimLeft(TStr self, TStr StartStr) -> TStr

        Parameters
        ----------
        StartStr: TStr const &

        """
        return _SnapTime.TStr_TrimLeft(self, StartStr)


    def TrimRight(self, EndStr):
        """
        TrimRight(TStr self, TStr EndStr) -> TStr

        Parameters
        ----------
        EndStr: TStr const &

        """
        return _SnapTime.TStr_TrimRight(self, EndStr)


    def SplitLeftOfRightOf(self, LStr, LeftOfChN, RightOfChN, RStr):
        """
        SplitLeftOfRightOf(TStr self, TStr LStr, int const & LeftOfChN, int const & RightOfChN, TStr RStr)

        Parameters
        ----------
        LStr: TStr &
        LeftOfChN: int const &
        RightOfChN: int const &
        RStr: TStr &

        """
        return _SnapTime.TStr_SplitLeftOfRightOf(self, LStr, LeftOfChN, RightOfChN, RStr)


    def SplitOnChN(self, LStr, ChN, RStr):
        """
        SplitOnChN(TStr self, TStr LStr, int const & ChN, TStr RStr)

        Parameters
        ----------
        LStr: TStr &
        ChN: int const &
        RStr: TStr &

        """
        return _SnapTime.TStr_SplitOnChN(self, LStr, ChN, RStr)


    def SplitOnCh(self, LStr, SplitCh, RStr):
        """
        SplitOnCh(TStr self, TStr LStr, char const & SplitCh, TStr RStr)

        Parameters
        ----------
        LStr: TStr &
        SplitCh: char const &
        RStr: TStr &

        """
        return _SnapTime.TStr_SplitOnCh(self, LStr, SplitCh, RStr)


    def SplitOnLastCh(self, LStr, SplitCh, RStr):
        """
        SplitOnLastCh(TStr self, TStr LStr, char const & SplitCh, TStr RStr)

        Parameters
        ----------
        LStr: TStr &
        SplitCh: char const &
        RStr: TStr &

        """
        return _SnapTime.TStr_SplitOnLastCh(self, LStr, SplitCh, RStr)


    def SplitOnAllCh(self, SplitCh, StrV, SkipEmpty=True):
        """
        SplitOnAllCh(TStr self, char const & SplitCh, TStrV StrV, bool const & SkipEmpty=True)

        Parameters
        ----------
        SplitCh: char const &
        StrV: TStrV &
        SkipEmpty: bool const &

        SplitOnAllCh(TStr self, char const & SplitCh, TStrV StrV)

        Parameters
        ----------
        SplitCh: char const &
        StrV: TStrV &

        """
        return _SnapTime.TStr_SplitOnAllCh(self, SplitCh, StrV, SkipEmpty)


    def SplitOnAllAnyCh(self, SplitChStr, StrV, SkipEmpty=True):
        """
        SplitOnAllAnyCh(TStr self, TStr SplitChStr, TStrV StrV, bool const & SkipEmpty=True)

        Parameters
        ----------
        SplitChStr: TStr const &
        StrV: TStrV &
        SkipEmpty: bool const &

        SplitOnAllAnyCh(TStr self, TStr SplitChStr, TStrV StrV)

        Parameters
        ----------
        SplitChStr: TStr const &
        StrV: TStrV &

        """
        return _SnapTime.TStr_SplitOnAllAnyCh(self, SplitChStr, StrV, SkipEmpty)


    def SplitOnWs(self, StrV):
        """
        SplitOnWs(TStr self, TStrV StrV)

        Parameters
        ----------
        StrV: TStrV &

        """
        return _SnapTime.TStr_SplitOnWs(self, StrV)


    def SplitOnNonAlNum(self, StrV):
        """
        SplitOnNonAlNum(TStr self, TStrV StrV)

        Parameters
        ----------
        StrV: TStrV &

        """
        return _SnapTime.TStr_SplitOnNonAlNum(self, StrV)


    def SplitOnStr(self, *args):
        """
        SplitOnStr(TStr self, TStr LStr, TStr SplitStr, TStr RStr)

        Parameters
        ----------
        LStr: TStr &
        SplitStr: TStr const &
        RStr: TStr &

        SplitOnStr(TStr self, TStr SplitStr, TStrV StrV)

        Parameters
        ----------
        SplitStr: TStr const &
        StrV: TStrV &

        """
        return _SnapTime.TStr_SplitOnStr(self, *args)


    def Left(self, EChN):
        """
        Left(TStr self, int const & EChN) -> TStr

        Parameters
        ----------
        EChN: int const &

        """
        return _SnapTime.TStr_Left(self, EChN)


    def Right(self, BChN):
        """
        Right(TStr self, int const & BChN) -> TStr

        Parameters
        ----------
        BChN: int const &

        """
        return _SnapTime.TStr_Right(self, BChN)


    def CountCh(self, Ch, BChN=0):
        """
        CountCh(TStr self, char const & Ch, int const & BChN=0) -> int

        Parameters
        ----------
        Ch: char const &
        BChN: int const &

        CountCh(TStr self, char const & Ch) -> int

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TStr_CountCh(self, Ch, BChN)


    def SearchCh(self, Ch, BChN=0):
        """
        SearchCh(TStr self, char const & Ch, int const & BChN=0) -> int

        Parameters
        ----------
        Ch: char const &
        BChN: int const &

        SearchCh(TStr self, char const & Ch) -> int

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TStr_SearchCh(self, Ch, BChN)


    def SearchChBack(self, Ch, BChN=-1):
        """
        SearchChBack(TStr self, char const & Ch, int BChN=-1) -> int

        Parameters
        ----------
        Ch: char const &
        BChN: int

        SearchChBack(TStr self, char const & Ch) -> int

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TStr_SearchChBack(self, Ch, BChN)


    def SearchStr(self, Str, BChN=0):
        """
        SearchStr(TStr self, TStr Str, int const & BChN=0) -> int

        Parameters
        ----------
        Str: TStr const &
        BChN: int const &

        SearchStr(TStr self, TStr Str) -> int

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TStr_SearchStr(self, Str, BChN)


    def IsChIn(self, Ch):
        """
        IsChIn(TStr self, char const & Ch) -> bool

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TStr_IsChIn(self, Ch)


    def IsStrIn(self, Str):
        """
        IsStrIn(TStr self, TStr Str) -> bool

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TStr_IsStrIn(self, Str)


    def StartsWith(self, *args):
        """
        StartsWith(TStr self, char const * Str) -> bool

        Parameters
        ----------
        Str: char const *

        StartsWith(TStr self, TStr Str) -> bool

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TStr_StartsWith(self, *args)


    def EndsWith(self, *args):
        """
        EndsWith(TStr self, char const * Str) -> bool

        Parameters
        ----------
        Str: char const *

        EndsWith(TStr self, TStr Str) -> bool

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TStr_EndsWith(self, *args)


    def ChangeCh(self, SrcCh, DstCh, BChN=0):
        """
        ChangeCh(TStr self, char const & SrcCh, char const & DstCh, int const & BChN=0) -> int

        Parameters
        ----------
        SrcCh: char const &
        DstCh: char const &
        BChN: int const &

        ChangeCh(TStr self, char const & SrcCh, char const & DstCh) -> int

        Parameters
        ----------
        SrcCh: char const &
        DstCh: char const &

        """
        return _SnapTime.TStr_ChangeCh(self, SrcCh, DstCh, BChN)


    def ChangeChAll(self, SrcCh, DstCh):
        """
        ChangeChAll(TStr self, char const & SrcCh, char const & DstCh) -> int

        Parameters
        ----------
        SrcCh: char const &
        DstCh: char const &

        """
        return _SnapTime.TStr_ChangeChAll(self, SrcCh, DstCh)


    def ChangeStr(self, SrcStr, DstStr, BChN=0):
        """
        ChangeStr(TStr self, TStr SrcStr, TStr DstStr, int const & BChN=0) -> int

        Parameters
        ----------
        SrcStr: TStr const &
        DstStr: TStr const &
        BChN: int const &

        ChangeStr(TStr self, TStr SrcStr, TStr DstStr) -> int

        Parameters
        ----------
        SrcStr: TStr const &
        DstStr: TStr const &

        """
        return _SnapTime.TStr_ChangeStr(self, SrcStr, DstStr, BChN)


    def ChangeStrAll(self, SrcStr, DstStr):
        """
        ChangeStrAll(TStr self, TStr SrcStr, TStr DstStr) -> int

        Parameters
        ----------
        SrcStr: TStr const &
        DstStr: TStr const &

        """
        return _SnapTime.TStr_ChangeStrAll(self, SrcStr, DstStr)


    def Reverse(self):
        """
        Reverse(TStr self) -> TStr

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_Reverse(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TStr self) -> int

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TStr self) -> int

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_GetSecHashCd(self)


    def IsBool(self, Val):
        """
        IsBool(TStr self, bool & Val) -> bool

        Parameters
        ----------
        Val: bool &

        """
        return _SnapTime.TStr_IsBool(self, Val)


    def IsInt(self, *args):
        """
        IsInt(TStr self, bool const & Check, int const & MnVal, int const & MxVal, int & Val) -> bool

        Parameters
        ----------
        Check: bool const &
        MnVal: int const &
        MxVal: int const &
        Val: int &

        IsInt(TStr self, int & Val) -> bool

        Parameters
        ----------
        Val: int &

        IsInt(TStr self) -> bool

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_IsInt(self, *args)


    def GetInt(self, *args):
        """
        GetInt(TStr self) -> int
        GetInt(TStr self, int const & DfVal) -> int

        Parameters
        ----------
        DfVal: int const &

        """
        return _SnapTime.TStr_GetInt(self, *args)


    def IsUInt(self, *args):
        """
        IsUInt(TStr self, bool const & Check, uint const & MnVal, uint const & MxVal, uint & Val) -> bool

        Parameters
        ----------
        Check: bool const &
        MnVal: uint const &
        MxVal: uint const &
        Val: uint &

        IsUInt(TStr self, uint & Val) -> bool

        Parameters
        ----------
        Val: uint &

        IsUInt(TStr self) -> bool

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_IsUInt(self, *args)


    def GetUInt(self, *args):
        """
        GetUInt(TStr self) -> uint
        GetUInt(TStr self, uint const & DfVal) -> uint

        Parameters
        ----------
        DfVal: uint const &

        """
        return _SnapTime.TStr_GetUInt(self, *args)


    def IsInt64(self, *args):
        """
        IsInt64(TStr self, bool const & Check, int64 const & MnVal, int64 const & MxVal, int64 & Val) -> bool

        Parameters
        ----------
        Check: bool const &
        MnVal: int64 const &
        MxVal: int64 const &
        Val: int64 &

        IsInt64(TStr self, int64 & Val) -> bool

        Parameters
        ----------
        Val: int64 &

        IsInt64(TStr self) -> bool

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_IsInt64(self, *args)


    def GetInt64(self, *args):
        """
        GetInt64(TStr self) -> int64
        GetInt64(TStr self, int64 const & DfVal) -> int64

        Parameters
        ----------
        DfVal: int64 const &

        """
        return _SnapTime.TStr_GetInt64(self, *args)


    def IsUInt64(self, *args):
        """
        IsUInt64(TStr self, bool const & Check, uint64 const & MnVal, uint64 const & MxVal, uint64 & Val) -> bool

        Parameters
        ----------
        Check: bool const &
        MnVal: uint64 const &
        MxVal: uint64 const &
        Val: uint64 &

        IsUInt64(TStr self, uint64 & Val) -> bool

        Parameters
        ----------
        Val: uint64 &

        IsUInt64(TStr self) -> bool

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_IsUInt64(self, *args)


    def GetUInt64(self, *args):
        """
        GetUInt64(TStr self) -> uint64
        GetUInt64(TStr self, uint64 const & DfVal) -> uint64

        Parameters
        ----------
        DfVal: uint64 const &

        """
        return _SnapTime.TStr_GetUInt64(self, *args)


    def IsHexInt(self, *args):
        """
        IsHexInt(TStr self, bool const & Check, int const & MnVal, int const & MxVal, int & Val) -> bool

        Parameters
        ----------
        Check: bool const &
        MnVal: int const &
        MxVal: int const &
        Val: int &

        IsHexInt(TStr self, int & Val) -> bool

        Parameters
        ----------
        Val: int &

        IsHexInt(TStr self) -> bool

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_IsHexInt(self, *args)


    def GetHexInt(self, *args):
        """
        GetHexInt(TStr self) -> int
        GetHexInt(TStr self, int const & DfVal) -> int

        Parameters
        ----------
        DfVal: int const &

        """
        return _SnapTime.TStr_GetHexInt(self, *args)


    def IsHexInt64(self, *args):
        """
        IsHexInt64(TStr self, bool const & Check, int64 const & MnVal, int64 const & MxVal, int64 & Val) -> bool

        Parameters
        ----------
        Check: bool const &
        MnVal: int64 const &
        MxVal: int64 const &
        Val: int64 &

        IsHexInt64(TStr self, int64 & Val) -> bool

        Parameters
        ----------
        Val: int64 &

        IsHexInt64(TStr self) -> bool

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_IsHexInt64(self, *args)


    def GetHexInt64(self, *args):
        """
        GetHexInt64(TStr self) -> int64
        GetHexInt64(TStr self, int64 const & DfVal) -> int64

        Parameters
        ----------
        DfVal: int64 const &

        """
        return _SnapTime.TStr_GetHexInt64(self, *args)


    def IsFlt(self, *args):
        """
        IsFlt(TStr self, bool const & Check, double const & MnVal, double const & MxVal, double & Val, char const & DecDelimCh) -> bool

        Parameters
        ----------
        Check: bool const &
        MnVal: double const &
        MxVal: double const &
        Val: double &
        DecDelimCh: char const &

        IsFlt(TStr self, bool const & Check, double const & MnVal, double const & MxVal, double & Val) -> bool

        Parameters
        ----------
        Check: bool const &
        MnVal: double const &
        MxVal: double const &
        Val: double &

        IsFlt(TStr self, double & Val) -> bool

        Parameters
        ----------
        Val: double &

        IsFlt(TStr self) -> bool

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_IsFlt(self, *args)


    def GetFlt(self, *args):
        """
        GetFlt(TStr self) -> double
        GetFlt(TStr self, double const & DfVal) -> double

        Parameters
        ----------
        DfVal: double const &

        """
        return _SnapTime.TStr_GetFlt(self, *args)


    def IsWord(self, WsPrefixP=True, FirstUcAllowedP=True):
        """
        IsWord(TStr self, bool const & WsPrefixP=True, bool const & FirstUcAllowedP=True) -> bool

        Parameters
        ----------
        WsPrefixP: bool const &
        FirstUcAllowedP: bool const &

        IsWord(TStr self, bool const & WsPrefixP=True) -> bool

        Parameters
        ----------
        WsPrefixP: bool const &

        IsWord(TStr self) -> bool

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_IsWord(self, WsPrefixP, FirstUcAllowedP)


    def IsWs(self):
        """
        IsWs(TStr self) -> bool

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_IsWs(self)


    def IsWcMatch(self, *args):
        """
        IsWcMatch(TStr self, int const & StrBChN, TStr WcStr, int const & WcStrBChN, TStrV StarStrV, char const & StarCh, char const & QuestCh) -> bool

        Parameters
        ----------
        StrBChN: int const &
        WcStr: TStr const &
        WcStrBChN: int const &
        StarStrV: TStrV &
        StarCh: char const &
        QuestCh: char const &

        IsWcMatch(TStr self, int const & StrBChN, TStr WcStr, int const & WcStrBChN, TStrV StarStrV, char const & StarCh) -> bool

        Parameters
        ----------
        StrBChN: int const &
        WcStr: TStr const &
        WcStrBChN: int const &
        StarStrV: TStrV &
        StarCh: char const &

        IsWcMatch(TStr self, int const & StrBChN, TStr WcStr, int const & WcStrBChN, TStrV StarStrV) -> bool

        Parameters
        ----------
        StrBChN: int const &
        WcStr: TStr const &
        WcStrBChN: int const &
        StarStrV: TStrV &

        IsWcMatch(TStr self, TStr WcStr, TStrV StarStrV, char const & StarCh, char const & QuestCh) -> bool

        Parameters
        ----------
        WcStr: TStr const &
        StarStrV: TStrV &
        StarCh: char const &
        QuestCh: char const &

        IsWcMatch(TStr self, TStr WcStr, TStrV StarStrV, char const & StarCh) -> bool

        Parameters
        ----------
        WcStr: TStr const &
        StarStrV: TStrV &
        StarCh: char const &

        IsWcMatch(TStr self, TStr WcStr, TStrV StarStrV) -> bool

        Parameters
        ----------
        WcStr: TStr const &
        StarStrV: TStrV &

        IsWcMatch(TStr self, TStr WcStr, char const & StarCh, char const & QuestCh) -> bool

        Parameters
        ----------
        WcStr: TStr const &
        StarCh: char const &
        QuestCh: char const &

        IsWcMatch(TStr self, TStr WcStr, int const & StarStrN, TStr StarStr) -> bool

        Parameters
        ----------
        WcStr: TStr const &
        StarStrN: int const &
        StarStr: TStr &

        IsWcMatch(TStr self, TStr WcStr) -> bool

        Parameters
        ----------
        WcStr: TStr const &

        """
        return _SnapTime.TStr_IsWcMatch(self, *args)


    def GetWcMatch(self, WcStr, StarStrN=0):
        """
        GetWcMatch(TStr self, TStr WcStr, int const & StarStrN=0) -> TStr

        Parameters
        ----------
        WcStr: TStr const &
        StarStrN: int const &

        GetWcMatch(TStr self, TStr WcStr) -> TStr

        Parameters
        ----------
        WcStr: TStr const &

        """
        return _SnapTime.TStr_GetWcMatch(self, WcStr, StarStrN)


    def GetFPath(self):
        """
        GetFPath(TStr self) -> TStr

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_GetFPath(self)


    def GetFBase(self):
        """
        GetFBase(TStr self) -> TStr

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_GetFBase(self)


    def GetFMid(self):
        """
        GetFMid(TStr self) -> TStr

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_GetFMid(self)


    def GetFExt(self):
        """
        GetFExt(TStr self) -> TStr

        Parameters
        ----------
        self: TStr const *

        """
        return _SnapTime.TStr_GetFExt(self)


    def GetNrFPath(FPath):
        """
        GetNrFPath(TStr FPath) -> TStr

        Parameters
        ----------
        FPath: TStr const &

        """
        return _SnapTime.TStr_GetNrFPath(FPath)

    GetNrFPath = staticmethod(GetNrFPath)

    def GetNrFMid(FMid):
        """
        GetNrFMid(TStr FMid) -> TStr

        Parameters
        ----------
        FMid: TStr const &

        """
        return _SnapTime.TStr_GetNrFMid(FMid)

    GetNrFMid = staticmethod(GetNrFMid)

    def GetNrFExt(FExt):
        """
        GetNrFExt(TStr FExt) -> TStr

        Parameters
        ----------
        FExt: TStr const &

        """
        return _SnapTime.TStr_GetNrFExt(FExt)

    GetNrFExt = staticmethod(GetNrFExt)

    def GetNrNumFExt(FExtN, MinLen=3):
        """
        GetNrNumFExt(int const & FExtN, int const & MinLen=3) -> TStr

        Parameters
        ----------
        FExtN: int const &
        MinLen: int const &

        GetNrNumFExt(int const & FExtN) -> TStr

        Parameters
        ----------
        FExtN: int const &

        """
        return _SnapTime.TStr_GetNrNumFExt(FExtN, MinLen)

    GetNrNumFExt = staticmethod(GetNrNumFExt)

    def GetNrFNm(FNm):
        """
        GetNrFNm(TStr FNm) -> TStr

        Parameters
        ----------
        FNm: TStr const &

        """
        return _SnapTime.TStr_GetNrFNm(FNm)

    GetNrFNm = staticmethod(GetNrFNm)

    def GetNrAbsFPath(*args):
        """
        GetNrAbsFPath(TStr FPath, TStr BaseFPath) -> TStr

        Parameters
        ----------
        FPath: TStr const &
        BaseFPath: TStr const &

        GetNrAbsFPath(TStr FPath) -> TStr

        Parameters
        ----------
        FPath: TStr const &

        """
        return _SnapTime.TStr_GetNrAbsFPath(*args)

    GetNrAbsFPath = staticmethod(GetNrAbsFPath)

    def IsAbsFPath(FPath):
        """
        IsAbsFPath(TStr FPath) -> bool

        Parameters
        ----------
        FPath: TStr const &

        """
        return _SnapTime.TStr_IsAbsFPath(FPath)

    IsAbsFPath = staticmethod(IsAbsFPath)

    def PutFExt(FNm, FExt):
        """
        PutFExt(TStr FNm, TStr FExt) -> TStr

        Parameters
        ----------
        FNm: TStr const &
        FExt: TStr const &

        """
        return _SnapTime.TStr_PutFExt(FNm, FExt)

    PutFExt = staticmethod(PutFExt)

    def PutFExtIfEmpty(FNm, FExt):
        """
        PutFExtIfEmpty(TStr FNm, TStr FExt) -> TStr

        Parameters
        ----------
        FNm: TStr const &
        FExt: TStr const &

        """
        return _SnapTime.TStr_PutFExtIfEmpty(FNm, FExt)

    PutFExtIfEmpty = staticmethod(PutFExtIfEmpty)

    def PutFBase(FNm, FBase):
        """
        PutFBase(TStr FNm, TStr FBase) -> TStr

        Parameters
        ----------
        FNm: TStr const &
        FBase: TStr const &

        """
        return _SnapTime.TStr_PutFBase(FNm, FBase)

    PutFBase = staticmethod(PutFBase)

    def PutFBaseIfEmpty(FNm, FBase):
        """
        PutFBaseIfEmpty(TStr FNm, TStr FBase) -> TStr

        Parameters
        ----------
        FNm: TStr const &
        FBase: TStr const &

        """
        return _SnapTime.TStr_PutFBaseIfEmpty(FNm, FBase)

    PutFBaseIfEmpty = staticmethod(PutFBaseIfEmpty)

    def AddToFMid(FNm, ExtFMid):
        """
        AddToFMid(TStr FNm, TStr ExtFMid) -> TStr

        Parameters
        ----------
        FNm: TStr const &
        ExtFMid: TStr const &

        """
        return _SnapTime.TStr_AddToFMid(FNm, ExtFMid)

    AddToFMid = staticmethod(AddToFMid)

    def GetNumFNm(FNm, Num):
        """
        GetNumFNm(TStr FNm, int const & Num) -> TStr

        Parameters
        ----------
        FNm: TStr const &
        Num: int const &

        """
        return _SnapTime.TStr_GetNumFNm(FNm, Num)

    GetNumFNm = staticmethod(GetNumFNm)

    def GetFNmStr(Str, AlNumOnlyP=True):
        """
        GetFNmStr(TStr Str, bool const & AlNumOnlyP=True) -> TStr

        Parameters
        ----------
        Str: TStr const &
        AlNumOnlyP: bool const &

        GetFNmStr(TStr Str) -> TStr

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TStr_GetFNmStr(Str, AlNumOnlyP)

    GetFNmStr = staticmethod(GetFNmStr)

    def LoadTxt(*args):
        """
        LoadTxt(PSIn const & SIn) -> TStr

        Parameters
        ----------
        SIn: PSIn const &

        LoadTxt(TStr FNm) -> TStr

        Parameters
        ----------
        FNm: TStr const &

        """
        return _SnapTime.TStr_LoadTxt(*args)

    LoadTxt = staticmethod(LoadTxt)

    def SaveTxt(self, *args):
        """
        SaveTxt(TStr self, PSOut const & SOut)

        Parameters
        ----------
        SOut: PSOut const &

        SaveTxt(TStr self, TStr FNm)

        Parameters
        ----------
        FNm: TStr const &

        """
        return _SnapTime.TStr_SaveTxt(self, *args)


    def GetStr(*args):
        """
        GetStr() -> TStr
        GetStr(TStr Str, char const * FmtStr) -> TStr

        Parameters
        ----------
        Str: TStr const &
        FmtStr: char const *

        GetStr(TStr Str, TStr FmtStr) -> TStr

        Parameters
        ----------
        Str: TStr const &
        FmtStr: TStr const &

        GetStr(TStrV StrV, TStr DelimiterStr) -> TStr

        Parameters
        ----------
        StrV: TStrV const &
        DelimiterStr: TStr const &

        """
        return _SnapTime.TStr_GetStr(*args)

    GetStr = staticmethod(GetStr)

    def Fmt(FmtStr):
        """
        Fmt(char const * FmtStr) -> TStr

        Parameters
        ----------
        FmtStr: char const *

        """
        return _SnapTime.TStr_Fmt(FmtStr)

    Fmt = staticmethod(Fmt)

    def GetSpaceStr(Spaces):
        """
        GetSpaceStr(int const & Spaces) -> TStr

        Parameters
        ----------
        Spaces: int const &

        """
        return _SnapTime.TStr_GetSpaceStr(Spaces)

    GetSpaceStr = staticmethod(GetSpaceStr)

    def Base64Encode(Bf, BfL):
        """
        Base64Encode(void const * Bf, int const BfL) -> TStr

        Parameters
        ----------
        Bf: void const *
        BfL: int const

        """
        return _SnapTime.TStr_Base64Encode(Bf, BfL)

    Base64Encode = staticmethod(Base64Encode)

    def Base64Decode(In, Mem):
        """
        Base64Decode(TStr In, TMem Mem)

        Parameters
        ----------
        In: TStr const &
        Mem: TMem &

        """
        return _SnapTime.TStr_Base64Decode(In, Mem)

    Base64Decode = staticmethod(Base64Decode)
TStr.BegI = new_instancemethod(_SnapTime.TStr_BegI, None, TStr)
TStr.begin = new_instancemethod(_SnapTime.TStr_begin, None, TStr)
TStr.EndI = new_instancemethod(_SnapTime.TStr_EndI, None, TStr)
TStr.end = new_instancemethod(_SnapTime.TStr_end, None, TStr)
TStr.GetI = new_instancemethod(_SnapTime.TStr_GetI, None, TStr)
TStr.Load = new_instancemethod(_SnapTime.TStr_Load, None, TStr)
TStr.Save = new_instancemethod(_SnapTime.TStr_Save, None, TStr)
TStr.__iadd__ = new_instancemethod(_SnapTime.TStr___iadd__, None, TStr)
TStr.__eq__ = new_instancemethod(_SnapTime.TStr___eq__, None, TStr)
TStr.__ne__ = new_instancemethod(_SnapTime.TStr___ne__, None, TStr)
TStr.__lt__ = new_instancemethod(_SnapTime.TStr___lt__, None, TStr)
TStr.CStr = new_instancemethod(_SnapTime.TStr_CStr, None, TStr)
TStr.__call__ = new_instancemethod(_SnapTime.TStr___call__, None, TStr)
TStr.CloneCStr = new_instancemethod(_SnapTime.TStr_CloneCStr, None, TStr)
TStr.PutCh = new_instancemethod(_SnapTime.TStr_PutCh, None, TStr)
TStr.GetCh = new_instancemethod(_SnapTime.TStr_GetCh, None, TStr)
TStr.LastCh = new_instancemethod(_SnapTime.TStr_LastCh, None, TStr)
TStr.Len = new_instancemethod(_SnapTime.TStr_Len, None, TStr)
TStr.Empty = new_instancemethod(_SnapTime.TStr_Empty, None, TStr)
TStr.Clr = new_instancemethod(_SnapTime.TStr_Clr, None, TStr)
TStr.GetMemUsed = new_instancemethod(_SnapTime.TStr_GetMemUsed, None, TStr)
TStr.CmpI = new_instancemethod(_SnapTime.TStr_CmpI, None, TStr)
TStr.EqI = new_instancemethod(_SnapTime.TStr_EqI, None, TStr)
TStr.IsUc = new_instancemethod(_SnapTime.TStr_IsUc, None, TStr)
TStr.ToUc = new_instancemethod(_SnapTime.TStr_ToUc, None, TStr)
TStr.GetUc = new_instancemethod(_SnapTime.TStr_GetUc, None, TStr)
TStr.IsLc = new_instancemethod(_SnapTime.TStr_IsLc, None, TStr)
TStr.ToLc = new_instancemethod(_SnapTime.TStr_ToLc, None, TStr)
TStr.GetLc = new_instancemethod(_SnapTime.TStr_GetLc, None, TStr)
TStr.ToCap = new_instancemethod(_SnapTime.TStr_ToCap, None, TStr)
TStr.GetCap = new_instancemethod(_SnapTime.TStr_GetCap, None, TStr)
TStr.ToTrunc = new_instancemethod(_SnapTime.TStr_ToTrunc, None, TStr)
TStr.GetTrunc = new_instancemethod(_SnapTime.TStr_GetTrunc, None, TStr)
TStr.ToHex = new_instancemethod(_SnapTime.TStr_ToHex, None, TStr)
TStr.GetHex = new_instancemethod(_SnapTime.TStr_GetHex, None, TStr)
TStr.FromHex = new_instancemethod(_SnapTime.TStr_FromHex, None, TStr)
TStr.GetFromHex = new_instancemethod(_SnapTime.TStr_GetFromHex, None, TStr)
TStr.GetSubStr = new_instancemethod(_SnapTime.TStr_GetSubStr, None, TStr)
TStr.GetSubStrSafe = new_instancemethod(_SnapTime.TStr_GetSubStrSafe, None, TStr)
TStr.InsStr = new_instancemethod(_SnapTime.TStr_InsStr, None, TStr)
TStr.DelChAll = new_instancemethod(_SnapTime.TStr_DelChAll, None, TStr)
TStr.DelSubStr = new_instancemethod(_SnapTime.TStr_DelSubStr, None, TStr)
TStr.DelStr = new_instancemethod(_SnapTime.TStr_DelStr, None, TStr)
TStr.DelStrAll = new_instancemethod(_SnapTime.TStr_DelStrAll, None, TStr)
TStr.LeftOf = new_instancemethod(_SnapTime.TStr_LeftOf, None, TStr)
TStr.LeftOfLast = new_instancemethod(_SnapTime.TStr_LeftOfLast, None, TStr)
TStr.RightOf = new_instancemethod(_SnapTime.TStr_RightOf, None, TStr)
TStr.RightOfLast = new_instancemethod(_SnapTime.TStr_RightOfLast, None, TStr)
TStr.TrimLeft = new_instancemethod(_SnapTime.TStr_TrimLeft, None, TStr)
TStr.TrimRight = new_instancemethod(_SnapTime.TStr_TrimRight, None, TStr)
TStr.SplitLeftOfRightOf = new_instancemethod(_SnapTime.TStr_SplitLeftOfRightOf, None, TStr)
TStr.SplitOnChN = new_instancemethod(_SnapTime.TStr_SplitOnChN, None, TStr)
TStr.SplitOnCh = new_instancemethod(_SnapTime.TStr_SplitOnCh, None, TStr)
TStr.SplitOnLastCh = new_instancemethod(_SnapTime.TStr_SplitOnLastCh, None, TStr)
TStr.SplitOnAllCh = new_instancemethod(_SnapTime.TStr_SplitOnAllCh, None, TStr)
TStr.SplitOnAllAnyCh = new_instancemethod(_SnapTime.TStr_SplitOnAllAnyCh, None, TStr)
TStr.SplitOnWs = new_instancemethod(_SnapTime.TStr_SplitOnWs, None, TStr)
TStr.SplitOnNonAlNum = new_instancemethod(_SnapTime.TStr_SplitOnNonAlNum, None, TStr)
TStr.SplitOnStr = new_instancemethod(_SnapTime.TStr_SplitOnStr, None, TStr)
TStr.Left = new_instancemethod(_SnapTime.TStr_Left, None, TStr)
TStr.Right = new_instancemethod(_SnapTime.TStr_Right, None, TStr)
TStr.CountCh = new_instancemethod(_SnapTime.TStr_CountCh, None, TStr)
TStr.SearchCh = new_instancemethod(_SnapTime.TStr_SearchCh, None, TStr)
TStr.SearchChBack = new_instancemethod(_SnapTime.TStr_SearchChBack, None, TStr)
TStr.SearchStr = new_instancemethod(_SnapTime.TStr_SearchStr, None, TStr)
TStr.IsChIn = new_instancemethod(_SnapTime.TStr_IsChIn, None, TStr)
TStr.IsStrIn = new_instancemethod(_SnapTime.TStr_IsStrIn, None, TStr)
TStr.StartsWith = new_instancemethod(_SnapTime.TStr_StartsWith, None, TStr)
TStr.EndsWith = new_instancemethod(_SnapTime.TStr_EndsWith, None, TStr)
TStr.ChangeCh = new_instancemethod(_SnapTime.TStr_ChangeCh, None, TStr)
TStr.ChangeChAll = new_instancemethod(_SnapTime.TStr_ChangeChAll, None, TStr)
TStr.ChangeStr = new_instancemethod(_SnapTime.TStr_ChangeStr, None, TStr)
TStr.ChangeStrAll = new_instancemethod(_SnapTime.TStr_ChangeStrAll, None, TStr)
TStr.Reverse = new_instancemethod(_SnapTime.TStr_Reverse, None, TStr)
TStr.GetPrimHashCd = new_instancemethod(_SnapTime.TStr_GetPrimHashCd, None, TStr)
TStr.GetSecHashCd = new_instancemethod(_SnapTime.TStr_GetSecHashCd, None, TStr)
TStr.IsBool = new_instancemethod(_SnapTime.TStr_IsBool, None, TStr)
TStr.IsInt = new_instancemethod(_SnapTime.TStr_IsInt, None, TStr)
TStr.GetInt = new_instancemethod(_SnapTime.TStr_GetInt, None, TStr)
TStr.IsUInt = new_instancemethod(_SnapTime.TStr_IsUInt, None, TStr)
TStr.GetUInt = new_instancemethod(_SnapTime.TStr_GetUInt, None, TStr)
TStr.IsInt64 = new_instancemethod(_SnapTime.TStr_IsInt64, None, TStr)
TStr.GetInt64 = new_instancemethod(_SnapTime.TStr_GetInt64, None, TStr)
TStr.IsUInt64 = new_instancemethod(_SnapTime.TStr_IsUInt64, None, TStr)
TStr.GetUInt64 = new_instancemethod(_SnapTime.TStr_GetUInt64, None, TStr)
TStr.IsHexInt = new_instancemethod(_SnapTime.TStr_IsHexInt, None, TStr)
TStr.GetHexInt = new_instancemethod(_SnapTime.TStr_GetHexInt, None, TStr)
TStr.IsHexInt64 = new_instancemethod(_SnapTime.TStr_IsHexInt64, None, TStr)
TStr.GetHexInt64 = new_instancemethod(_SnapTime.TStr_GetHexInt64, None, TStr)
TStr.IsFlt = new_instancemethod(_SnapTime.TStr_IsFlt, None, TStr)
TStr.GetFlt = new_instancemethod(_SnapTime.TStr_GetFlt, None, TStr)
TStr.IsWord = new_instancemethod(_SnapTime.TStr_IsWord, None, TStr)
TStr.IsWs = new_instancemethod(_SnapTime.TStr_IsWs, None, TStr)
TStr.IsWcMatch = new_instancemethod(_SnapTime.TStr_IsWcMatch, None, TStr)
TStr.GetWcMatch = new_instancemethod(_SnapTime.TStr_GetWcMatch, None, TStr)
TStr.GetFPath = new_instancemethod(_SnapTime.TStr_GetFPath, None, TStr)
TStr.GetFBase = new_instancemethod(_SnapTime.TStr_GetFBase, None, TStr)
TStr.GetFMid = new_instancemethod(_SnapTime.TStr_GetFMid, None, TStr)
TStr.GetFExt = new_instancemethod(_SnapTime.TStr_GetFExt, None, TStr)
TStr.SaveTxt = new_instancemethod(_SnapTime.TStr_SaveTxt, None, TStr)
TStr_swigregister = _SnapTime.TStr_swigregister
TStr_swigregister(TStr)

def TStr_GetNullStr():
    """TStr_GetNullStr() -> TStr"""
    return _SnapTime.TStr_GetNullStr()

def TStr_GetNrFPath(FPath):
    """
    TStr_GetNrFPath(TStr FPath) -> TStr

    Parameters
    ----------
    FPath: TStr const &

    """
    return _SnapTime.TStr_GetNrFPath(FPath)

def TStr_GetNrFMid(FMid):
    """
    TStr_GetNrFMid(TStr FMid) -> TStr

    Parameters
    ----------
    FMid: TStr const &

    """
    return _SnapTime.TStr_GetNrFMid(FMid)

def TStr_GetNrFExt(FExt):
    """
    TStr_GetNrFExt(TStr FExt) -> TStr

    Parameters
    ----------
    FExt: TStr const &

    """
    return _SnapTime.TStr_GetNrFExt(FExt)

def TStr_GetNrNumFExt(FExtN, MinLen=3):
    """
    GetNrNumFExt(int const & FExtN, int const & MinLen=3) -> TStr

    Parameters
    ----------
    FExtN: int const &
    MinLen: int const &

    TStr_GetNrNumFExt(int const & FExtN) -> TStr

    Parameters
    ----------
    FExtN: int const &

    """
    return _SnapTime.TStr_GetNrNumFExt(FExtN, MinLen)

def TStr_GetNrFNm(FNm):
    """
    TStr_GetNrFNm(TStr FNm) -> TStr

    Parameters
    ----------
    FNm: TStr const &

    """
    return _SnapTime.TStr_GetNrFNm(FNm)

def TStr_GetNrAbsFPath(*args):
    """
    GetNrAbsFPath(TStr FPath, TStr BaseFPath) -> TStr

    Parameters
    ----------
    FPath: TStr const &
    BaseFPath: TStr const &

    TStr_GetNrAbsFPath(TStr FPath) -> TStr

    Parameters
    ----------
    FPath: TStr const &

    """
    return _SnapTime.TStr_GetNrAbsFPath(*args)

def TStr_IsAbsFPath(FPath):
    """
    TStr_IsAbsFPath(TStr FPath) -> bool

    Parameters
    ----------
    FPath: TStr const &

    """
    return _SnapTime.TStr_IsAbsFPath(FPath)

def TStr_PutFExt(FNm, FExt):
    """
    TStr_PutFExt(TStr FNm, TStr FExt) -> TStr

    Parameters
    ----------
    FNm: TStr const &
    FExt: TStr const &

    """
    return _SnapTime.TStr_PutFExt(FNm, FExt)

def TStr_PutFExtIfEmpty(FNm, FExt):
    """
    TStr_PutFExtIfEmpty(TStr FNm, TStr FExt) -> TStr

    Parameters
    ----------
    FNm: TStr const &
    FExt: TStr const &

    """
    return _SnapTime.TStr_PutFExtIfEmpty(FNm, FExt)

def TStr_PutFBase(FNm, FBase):
    """
    TStr_PutFBase(TStr FNm, TStr FBase) -> TStr

    Parameters
    ----------
    FNm: TStr const &
    FBase: TStr const &

    """
    return _SnapTime.TStr_PutFBase(FNm, FBase)

def TStr_PutFBaseIfEmpty(FNm, FBase):
    """
    TStr_PutFBaseIfEmpty(TStr FNm, TStr FBase) -> TStr

    Parameters
    ----------
    FNm: TStr const &
    FBase: TStr const &

    """
    return _SnapTime.TStr_PutFBaseIfEmpty(FNm, FBase)

def TStr_AddToFMid(FNm, ExtFMid):
    """
    TStr_AddToFMid(TStr FNm, TStr ExtFMid) -> TStr

    Parameters
    ----------
    FNm: TStr const &
    ExtFMid: TStr const &

    """
    return _SnapTime.TStr_AddToFMid(FNm, ExtFMid)

def TStr_GetNumFNm(FNm, Num):
    """
    TStr_GetNumFNm(TStr FNm, int const & Num) -> TStr

    Parameters
    ----------
    FNm: TStr const &
    Num: int const &

    """
    return _SnapTime.TStr_GetNumFNm(FNm, Num)

def TStr_GetFNmStr(Str, AlNumOnlyP=True):
    """
    GetFNmStr(TStr Str, bool const & AlNumOnlyP=True) -> TStr

    Parameters
    ----------
    Str: TStr const &
    AlNumOnlyP: bool const &

    TStr_GetFNmStr(TStr Str) -> TStr

    Parameters
    ----------
    Str: TStr const &

    """
    return _SnapTime.TStr_GetFNmStr(Str, AlNumOnlyP)

def TStr_LoadTxt(*args):
    """
    LoadTxt(PSIn const & SIn) -> TStr

    Parameters
    ----------
    SIn: PSIn const &

    TStr_LoadTxt(TStr FNm) -> TStr

    Parameters
    ----------
    FNm: TStr const &

    """
    return _SnapTime.TStr_LoadTxt(*args)

def TStr_GetStr(*args):
    """
    GetStr() -> TStr
    GetStr(TStr Str, char const * FmtStr) -> TStr

    Parameters
    ----------
    Str: TStr const &
    FmtStr: char const *

    GetStr(TStr Str, TStr FmtStr) -> TStr

    Parameters
    ----------
    Str: TStr const &
    FmtStr: TStr const &

    TStr_GetStr(TStrV StrV, TStr DelimiterStr) -> TStr

    Parameters
    ----------
    StrV: TStrV const &
    DelimiterStr: TStr const &

    """
    return _SnapTime.TStr_GetStr(*args)

def TStr_Fmt(FmtStr):
    """
    TStr_Fmt(char const * FmtStr) -> TStr

    Parameters
    ----------
    FmtStr: char const *

    """
    return _SnapTime.TStr_Fmt(FmtStr)

def TStr_GetSpaceStr(Spaces):
    """
    TStr_GetSpaceStr(int const & Spaces) -> TStr

    Parameters
    ----------
    Spaces: int const &

    """
    return _SnapTime.TStr_GetSpaceStr(Spaces)

def TStr_Base64Encode(Bf, BfL):
    """
    TStr_Base64Encode(void const * Bf, int const BfL) -> TStr

    Parameters
    ----------
    Bf: void const *
    BfL: int const

    """
    return _SnapTime.TStr_Base64Encode(Bf, BfL)

def TStr_Base64Decode(In, Mem):
    """
    TStr_Base64Decode(TStr In, TMem Mem)

    Parameters
    ----------
    In: TStr const &
    Mem: TMem &

    """
    return _SnapTime.TStr_Base64Decode(In, Mem)

class TStrIn(object):
    """Proxy of C++ TStrIn class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Str, MakeCopyP=True):
        """
        __init__(TStrIn self, TStr Str, bool const & MakeCopyP=True) -> TStrIn

        Parameters
        ----------
        Str: TStr const &
        MakeCopyP: bool const &

        __init__(TStrIn self, TStr Str) -> TStrIn

        Parameters
        ----------
        Str: TStr const &

        """
        _SnapTime.TStrIn_swiginit(self, _SnapTime.new_TStrIn(Str, MakeCopyP))

    def New(Str, MakeCopyP=True):
        """
        New(TStr Str, bool const & MakeCopyP=True) -> PSIn

        Parameters
        ----------
        Str: TStr const &
        MakeCopyP: bool const &

        New(TStr Str) -> PSIn

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TStrIn_New(Str, MakeCopyP)

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TStrIn

    def Eof(self):
        """
        Eof(TStrIn self) -> bool

        Parameters
        ----------
        self: TStrIn *

        """
        return _SnapTime.TStrIn_Eof(self)


    def Len(self):
        """
        Len(TStrIn self) -> int

        Parameters
        ----------
        self: TStrIn const *

        """
        return _SnapTime.TStrIn_Len(self)


    def GetCh(self):
        """
        GetCh(TStrIn self) -> char

        Parameters
        ----------
        self: TStrIn *

        """
        return _SnapTime.TStrIn_GetCh(self)


    def PeekCh(self):
        """
        PeekCh(TStrIn self) -> char

        Parameters
        ----------
        self: TStrIn *

        """
        return _SnapTime.TStrIn_PeekCh(self)


    def GetBf(self, LBf, LBfL):
        """
        GetBf(TStrIn self, void const * LBf, TSize const & LBfL) -> int

        Parameters
        ----------
        LBf: void const *
        LBfL: TSize const &

        """
        return _SnapTime.TStrIn_GetBf(self, LBf, LBfL)


    def Reset(self):
        """
        Reset(TStrIn self)

        Parameters
        ----------
        self: TStrIn *

        """
        return _SnapTime.TStrIn_Reset(self)


    def GetNextLnBf(self, LnChA):
        """
        GetNextLnBf(TStrIn self, TChA LnChA) -> bool

        Parameters
        ----------
        LnChA: TChA &

        """
        return _SnapTime.TStrIn_GetNextLnBf(self, LnChA)


    def GetSNm(self):
        """
        GetSNm(TStrIn self) -> TStr

        Parameters
        ----------
        self: TStrIn const *

        """
        return _SnapTime.TStrIn_GetSNm(self)

TStrIn.Eof = new_instancemethod(_SnapTime.TStrIn_Eof, None, TStrIn)
TStrIn.Len = new_instancemethod(_SnapTime.TStrIn_Len, None, TStrIn)
TStrIn.GetCh = new_instancemethod(_SnapTime.TStrIn_GetCh, None, TStrIn)
TStrIn.PeekCh = new_instancemethod(_SnapTime.TStrIn_PeekCh, None, TStrIn)
TStrIn.GetBf = new_instancemethod(_SnapTime.TStrIn_GetBf, None, TStrIn)
TStrIn.Reset = new_instancemethod(_SnapTime.TStrIn_Reset, None, TStrIn)
TStrIn.GetNextLnBf = new_instancemethod(_SnapTime.TStrIn_GetNextLnBf, None, TStrIn)
TStrIn.GetSNm = new_instancemethod(_SnapTime.TStrIn_GetSNm, None, TStrIn)
TStrIn_swigregister = _SnapTime.TStrIn_swigregister
TStrIn_swigregister(TStrIn)

def TStrIn_New(Str, MakeCopyP=True):
    """
    New(TStr Str, bool const & MakeCopyP=True) -> PSIn

    Parameters
    ----------
    Str: TStr const &
    MakeCopyP: bool const &

    TStrIn_New(TStr Str) -> PSIn

    Parameters
    ----------
    Str: TStr const &

    """
    return _SnapTime.TStrIn_New(Str, MakeCopyP)

class TDbStr(object):
    """Proxy of C++ TDbStr class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Str1 = _swig_property(_SnapTime.TDbStr_Str1_get, _SnapTime.TDbStr_Str1_set)
    Str2 = _swig_property(_SnapTime.TDbStr_Str2_get, _SnapTime.TDbStr_Str2_set)

    def __init__(self, *args):
        """
        __init__(TDbStr self) -> TDbStr
        __init__(TDbStr self, TDbStr DbStr) -> TDbStr

        Parameters
        ----------
        DbStr: TDbStr const &

        __init__(TDbStr self, TStr _Str1) -> TDbStr

        Parameters
        ----------
        _Str1: TStr const &

        __init__(TDbStr self, TStr _Str1, TStr _Str2) -> TDbStr

        Parameters
        ----------
        _Str1: TStr const &
        _Str2: TStr const &

        __init__(TDbStr self, TSIn SIn) -> TDbStr

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TDbStr_swiginit(self, _SnapTime.new_TDbStr(*args))

    def Save(self, SOut):
        """
        Save(TDbStr self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TDbStr_Save(self, SOut)


    def __eq__(self, DbStr):
        """
        __eq__(TDbStr self, TDbStr DbStr) -> bool

        Parameters
        ----------
        DbStr: TDbStr const &

        """
        return _SnapTime.TDbStr___eq__(self, DbStr)


    def __lt__(self, DbStr):
        """
        __lt__(TDbStr self, TDbStr DbStr) -> bool

        Parameters
        ----------
        DbStr: TDbStr const &

        """
        return _SnapTime.TDbStr___lt__(self, DbStr)


    def GetStr(self, *args):
        """
        GetStr(TDbStr self, TStr MidStr) -> TStr

        Parameters
        ----------
        MidStr: TStr const &

        GetStr(TDbStr self) -> TStr

        Parameters
        ----------
        self: TDbStr const *

        """
        return _SnapTime.TDbStr_GetStr(self, *args)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TDbStr self) -> int

        Parameters
        ----------
        self: TDbStr const *

        """
        return _SnapTime.TDbStr_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TDbStr self) -> int

        Parameters
        ----------
        self: TDbStr const *

        """
        return _SnapTime.TDbStr_GetSecHashCd(self)


    def Empty(self):
        """
        Empty(TDbStr self) -> bool

        Parameters
        ----------
        self: TDbStr const *

        """
        return _SnapTime.TDbStr_Empty(self)


    def Filled(self):
        """
        Filled(TDbStr self) -> bool

        Parameters
        ----------
        self: TDbStr const *

        """
        return _SnapTime.TDbStr_Filled(self)

    __swig_destroy__ = _SnapTime.delete_TDbStr
TDbStr.Save = new_instancemethod(_SnapTime.TDbStr_Save, None, TDbStr)
TDbStr.__eq__ = new_instancemethod(_SnapTime.TDbStr___eq__, None, TDbStr)
TDbStr.__lt__ = new_instancemethod(_SnapTime.TDbStr___lt__, None, TDbStr)
TDbStr.GetStr = new_instancemethod(_SnapTime.TDbStr_GetStr, None, TDbStr)
TDbStr.GetPrimHashCd = new_instancemethod(_SnapTime.TDbStr_GetPrimHashCd, None, TDbStr)
TDbStr.GetSecHashCd = new_instancemethod(_SnapTime.TDbStr_GetSecHashCd, None, TDbStr)
TDbStr.Empty = new_instancemethod(_SnapTime.TDbStr_Empty, None, TDbStr)
TDbStr.Filled = new_instancemethod(_SnapTime.TDbStr_Filled, None, TDbStr)
TDbStr_swigregister = _SnapTime.TDbStr_swigregister
TDbStr_swigregister(TDbStr)

class TStrPool(object):
    """Proxy of C++ TStrPool class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TStrPool self, uint const & MxBfLen=0, uint const & _GrowBy=16) -> TStrPool

        Parameters
        ----------
        MxBfLen: uint const &
        _GrowBy: uint const &

        __init__(TStrPool self, uint const & MxBfLen=0) -> TStrPool

        Parameters
        ----------
        MxBfLen: uint const &

        __init__(TStrPool self) -> TStrPool
        __init__(TStrPool self, TSIn SIn, bool LoadCompact=True) -> TStrPool

        Parameters
        ----------
        SIn: TSIn &
        LoadCompact: bool

        __init__(TStrPool self, TSIn SIn) -> TStrPool

        Parameters
        ----------
        SIn: TSIn &

        __init__(TStrPool self, TStrPool Pool) -> TStrPool

        Parameters
        ----------
        Pool: TStrPool const &

        """
        _SnapTime.TStrPool_swiginit(self, _SnapTime.new_TStrPool(*args))
    __swig_destroy__ = _SnapTime.delete_TStrPool

    def New(*args):
        """
        New(uint const & _MxBfLen=0, uint const & _GrowBy=16) -> PStrPool

        Parameters
        ----------
        _MxBfLen: uint const &
        _GrowBy: uint const &

        New(uint const & _MxBfLen=0) -> PStrPool

        Parameters
        ----------
        _MxBfLen: uint const &

        New() -> PStrPool
        New(TSIn SIn) -> PStrPool

        Parameters
        ----------
        SIn: TSIn &

        New(TStr fileName) -> PStrPool

        Parameters
        ----------
        fileName: TStr const &

        """
        return _SnapTime.TStrPool_New(*args)

    New = staticmethod(New)

    def Load(SIn, LoadCompacted=True):
        """
        Load(TSIn SIn, bool LoadCompacted=True) -> PStrPool

        Parameters
        ----------
        SIn: TSIn &
        LoadCompacted: bool

        Load(TSIn SIn) -> PStrPool

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TStrPool_Load(SIn, LoadCompacted)

    Load = staticmethod(Load)

    def Save(self, *args):
        """
        Save(TStrPool self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        Save(TStrPool self, TStr FNm)

        Parameters
        ----------
        FNm: TStr const &

        """
        return _SnapTime.TStrPool_Save(self, *args)


    def Len(self):
        """
        Len(TStrPool self) -> uint

        Parameters
        ----------
        self: TStrPool const *

        """
        return _SnapTime.TStrPool_Len(self)


    def Size(self):
        """
        Size(TStrPool self) -> uint

        Parameters
        ----------
        self: TStrPool const *

        """
        return _SnapTime.TStrPool_Size(self)


    def Empty(self):
        """
        Empty(TStrPool self) -> bool

        Parameters
        ----------
        self: TStrPool const *

        """
        return _SnapTime.TStrPool_Empty(self)


    def __call__(self):
        """
        __call__(TStrPool self) -> char *

        Parameters
        ----------
        self: TStrPool const *

        """
        return _SnapTime.TStrPool___call__(self)


    def GetMemUsed(self):
        """
        GetMemUsed(TStrPool self) -> ::TSize

        Parameters
        ----------
        self: TStrPool *

        """
        return _SnapTime.TStrPool_GetMemUsed(self)


    def AddStr(self, *args):
        """
        AddStr(TStrPool self, char const * Str, uint const & Len) -> uint

        Parameters
        ----------
        Str: char const *
        Len: uint const &

        AddStr(TStrPool self, char const * Str) -> uint

        Parameters
        ----------
        Str: char const *

        AddStr(TStrPool self, TStr Str) -> uint

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TStrPool_AddStr(self, *args)


    def GetStr(self, Offset):
        """
        GetStr(TStrPool self, uint const & Offset) -> TStr

        Parameters
        ----------
        Offset: uint const &

        """
        return _SnapTime.TStrPool_GetStr(self, Offset)


    def GetCStr(self, Offset):
        """
        GetCStr(TStrPool self, uint const & Offset) -> char const *

        Parameters
        ----------
        Offset: uint const &

        """
        return _SnapTime.TStrPool_GetCStr(self, Offset)


    def Clr(self, DoDel=False):
        """
        Clr(TStrPool self, bool DoDel=False)

        Parameters
        ----------
        DoDel: bool

        Clr(TStrPool self)

        Parameters
        ----------
        self: TStrPool *

        """
        return _SnapTime.TStrPool_Clr(self, DoDel)


    def Cmp(self, Offset, Str):
        """
        Cmp(TStrPool self, uint const & Offset, char const * Str) -> int

        Parameters
        ----------
        Offset: uint const &
        Str: char const *

        """
        return _SnapTime.TStrPool_Cmp(self, Offset, Str)


    def GetPrimHashCd(self, *args):
        """
        GetPrimHashCd(TStrPool self, char const * CStr) -> int

        Parameters
        ----------
        CStr: char const *

        GetPrimHashCd(TStrPool self, uint const & Offset) -> int

        Parameters
        ----------
        Offset: uint const &

        """
        return _SnapTime.TStrPool_GetPrimHashCd(self, *args)


    def GetSecHashCd(self, *args):
        """
        GetSecHashCd(TStrPool self, char const * CStr) -> int

        Parameters
        ----------
        CStr: char const *

        GetSecHashCd(TStrPool self, uint const & Offset) -> int

        Parameters
        ----------
        Offset: uint const &

        """
        return _SnapTime.TStrPool_GetSecHashCd(self, *args)


    def LoadShM(SIn):
        """
        LoadShM(TSIn SIn) -> PStrPool

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TStrPool_LoadShM(SIn)

    LoadShM = staticmethod(LoadShM)
TStrPool.Save = new_instancemethod(_SnapTime.TStrPool_Save, None, TStrPool)
TStrPool.Len = new_instancemethod(_SnapTime.TStrPool_Len, None, TStrPool)
TStrPool.Size = new_instancemethod(_SnapTime.TStrPool_Size, None, TStrPool)
TStrPool.Empty = new_instancemethod(_SnapTime.TStrPool_Empty, None, TStrPool)
TStrPool.__call__ = new_instancemethod(_SnapTime.TStrPool___call__, None, TStrPool)
TStrPool.GetMemUsed = new_instancemethod(_SnapTime.TStrPool_GetMemUsed, None, TStrPool)
TStrPool.AddStr = new_instancemethod(_SnapTime.TStrPool_AddStr, None, TStrPool)
TStrPool.GetStr = new_instancemethod(_SnapTime.TStrPool_GetStr, None, TStrPool)
TStrPool.GetCStr = new_instancemethod(_SnapTime.TStrPool_GetCStr, None, TStrPool)
TStrPool.Clr = new_instancemethod(_SnapTime.TStrPool_Clr, None, TStrPool)
TStrPool.Cmp = new_instancemethod(_SnapTime.TStrPool_Cmp, None, TStrPool)
TStrPool.GetPrimHashCd = new_instancemethod(_SnapTime.TStrPool_GetPrimHashCd, None, TStrPool)
TStrPool.GetSecHashCd = new_instancemethod(_SnapTime.TStrPool_GetSecHashCd, None, TStrPool)
TStrPool_swigregister = _SnapTime.TStrPool_swigregister
TStrPool_swigregister(TStrPool)

def TStrPool_New(*args):
    """
    New(uint const & _MxBfLen=0, uint const & _GrowBy=16) -> PStrPool

    Parameters
    ----------
    _MxBfLen: uint const &
    _GrowBy: uint const &

    New(uint const & _MxBfLen=0) -> PStrPool

    Parameters
    ----------
    _MxBfLen: uint const &

    New() -> PStrPool
    New(TSIn SIn) -> PStrPool

    Parameters
    ----------
    SIn: TSIn &

    TStrPool_New(TStr fileName) -> PStrPool

    Parameters
    ----------
    fileName: TStr const &

    """
    return _SnapTime.TStrPool_New(*args)

def TStrPool_Load(SIn, LoadCompacted=True):
    """
    Load(TSIn SIn, bool LoadCompacted=True) -> PStrPool

    Parameters
    ----------
    SIn: TSIn &
    LoadCompacted: bool

    TStrPool_Load(TSIn SIn) -> PStrPool

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TStrPool_Load(SIn, LoadCompacted)

def TStrPool_LoadShM(SIn):
    """
    TStrPool_LoadShM(TSIn SIn) -> PStrPool

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TStrPool_LoadShM(SIn)

class TStrPool64(object):
    """Proxy of C++ TStrPool64 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TStrPool64 self, ::TSize _MxBfL=0, ::TSize _GrowBy=16) -> TStrPool64

        Parameters
        ----------
        _MxBfL: ::TSize
        _GrowBy: ::TSize

        __init__(TStrPool64 self, ::TSize _MxBfL=0) -> TStrPool64

        Parameters
        ----------
        _MxBfL: ::TSize

        __init__(TStrPool64 self) -> TStrPool64
        __init__(TStrPool64 self, TStrPool64 StrPool) -> TStrPool64

        Parameters
        ----------
        StrPool: TStrPool64 const &

        __init__(TStrPool64 self, TSIn SIn, bool LoadCompact=True) -> TStrPool64

        Parameters
        ----------
        SIn: TSIn &
        LoadCompact: bool

        __init__(TStrPool64 self, TSIn SIn) -> TStrPool64

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TStrPool64_swiginit(self, _SnapTime.new_TStrPool64(*args))
    __swig_destroy__ = _SnapTime.delete_TStrPool64

    def Save(self, SOut):
        """
        Save(TStrPool64 self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TStrPool64_Save(self, SOut)


    def New(MxBfL=0, GrowBy=16):
        """
        New(::TSize MxBfL=0, ::TSize GrowBy=16) -> PStrPool64

        Parameters
        ----------
        MxBfL: ::TSize
        GrowBy: ::TSize

        New(::TSize MxBfL=0) -> PStrPool64

        Parameters
        ----------
        MxBfL: ::TSize

        New() -> PStrPool64
        """
        return _SnapTime.TStrPool64_New(MxBfL, GrowBy)

    New = staticmethod(New)

    def Load(SIn, LoadCompact=True):
        """
        Load(TSIn SIn, bool LoadCompact=True) -> PStrPool64

        Parameters
        ----------
        SIn: TSIn &
        LoadCompact: bool

        Load(TSIn SIn) -> PStrPool64

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TStrPool64_Load(SIn, LoadCompact)

    Load = staticmethod(Load)

    def GetMemUsed(self):
        """
        GetMemUsed(TStrPool64 self) -> uint64

        Parameters
        ----------
        self: TStrPool64 const *

        """
        return _SnapTime.TStrPool64_GetMemUsed(self)


    def Empty(self):
        """
        Empty(TStrPool64 self) -> bool

        Parameters
        ----------
        self: TStrPool64 const *

        """
        return _SnapTime.TStrPool64_Empty(self)


    def Len(self):
        """
        Len(TStrPool64 self) -> uint64

        Parameters
        ----------
        self: TStrPool64 const *

        """
        return _SnapTime.TStrPool64_Len(self)


    def Reserved(self):
        """
        Reserved(TStrPool64 self) -> uint64

        Parameters
        ----------
        self: TStrPool64 const *

        """
        return _SnapTime.TStrPool64_Reserved(self)


    def Clr(self, DoDel=False):
        """
        Clr(TStrPool64 self, bool DoDel=False)

        Parameters
        ----------
        DoDel: bool

        Clr(TStrPool64 self)

        Parameters
        ----------
        self: TStrPool64 *

        """
        return _SnapTime.TStrPool64_Clr(self, DoDel)


    def Cmp(self, Offset, Str):
        """
        Cmp(TStrPool64 self, uint64 Offset, char const * Str) -> int

        Parameters
        ----------
        Offset: uint64
        Str: char const *

        """
        return _SnapTime.TStrPool64_Cmp(self, Offset, Str)


    def AddStr(self, Str):
        """
        AddStr(TStrPool64 self, TStr Str) -> uint64

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TStrPool64_AddStr(self, Str)


    def GetStr(self, StrId):
        """
        GetStr(TStrPool64 self, uint64 const & StrId) -> TStr

        Parameters
        ----------
        StrId: uint64 const &

        """
        return _SnapTime.TStrPool64_GetStr(self, StrId)

TStrPool64.Save = new_instancemethod(_SnapTime.TStrPool64_Save, None, TStrPool64)
TStrPool64.GetMemUsed = new_instancemethod(_SnapTime.TStrPool64_GetMemUsed, None, TStrPool64)
TStrPool64.Empty = new_instancemethod(_SnapTime.TStrPool64_Empty, None, TStrPool64)
TStrPool64.Len = new_instancemethod(_SnapTime.TStrPool64_Len, None, TStrPool64)
TStrPool64.Reserved = new_instancemethod(_SnapTime.TStrPool64_Reserved, None, TStrPool64)
TStrPool64.Clr = new_instancemethod(_SnapTime.TStrPool64_Clr, None, TStrPool64)
TStrPool64.Cmp = new_instancemethod(_SnapTime.TStrPool64_Cmp, None, TStrPool64)
TStrPool64.AddStr = new_instancemethod(_SnapTime.TStrPool64_AddStr, None, TStrPool64)
TStrPool64.GetStr = new_instancemethod(_SnapTime.TStrPool64_GetStr, None, TStrPool64)
TStrPool64_swigregister = _SnapTime.TStrPool64_swigregister
TStrPool64_swigregister(TStrPool64)

def TStrPool64_New(MxBfL=0, GrowBy=16):
    """
    New(::TSize MxBfL=0, ::TSize GrowBy=16) -> PStrPool64

    Parameters
    ----------
    MxBfL: ::TSize
    GrowBy: ::TSize

    New(::TSize MxBfL=0) -> PStrPool64

    Parameters
    ----------
    MxBfL: ::TSize

    TStrPool64_New() -> PStrPool64
    """
    return _SnapTime.TStrPool64_New(MxBfL, GrowBy)

def TStrPool64_Load(SIn, LoadCompact=True):
    """
    Load(TSIn SIn, bool LoadCompact=True) -> PStrPool64

    Parameters
    ----------
    SIn: TSIn &
    LoadCompact: bool

    TStrPool64_Load(TSIn SIn) -> PStrPool64

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TStrPool64_Load(SIn, LoadCompact)

class TInt(object):
    """Proxy of C++ TInt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_SnapTime.TInt_Val_get, _SnapTime.TInt_Val_set)
    Rnd = _swig_property(_SnapTime.TInt_Rnd_get, _SnapTime.TInt_Rnd_set)

    def __init__(self, *args):
        """
        __init__(TInt self) -> TInt
        __init__(TInt self, int const & _Val) -> TInt

        Parameters
        ----------
        _Val: int const &

        __init__(TInt self, TSIn SIn) -> TInt

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TInt_swiginit(self, _SnapTime.new_TInt(*args))

    def Load(self, SIn):
        """
        Load(TInt self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TInt_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TInt self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TInt_Save(self, SOut)


    def __eq__(self, *args):
        """
        __eq__(TInt self, TInt Int) -> bool

        Parameters
        ----------
        Int: TInt const &

        __eq__(TInt self, int const & Int) -> bool

        Parameters
        ----------
        Int: int const &

        """
        return _SnapTime.TInt___eq__(self, *args)


    def __ne__(self, Int):
        """
        __ne__(TInt self, int const & Int) -> bool

        Parameters
        ----------
        Int: int const &

        """
        return _SnapTime.TInt___ne__(self, Int)


    def __lt__(self, *args):
        """
        __lt__(TInt self, TInt Int) -> bool

        Parameters
        ----------
        Int: TInt const &

        __lt__(TInt self, int const & Int) -> bool

        Parameters
        ----------
        Int: int const &

        """
        return _SnapTime.TInt___lt__(self, *args)


    def __call__(self):
        """
        __call__(TInt self) -> int

        Parameters
        ----------
        self: TInt const *

        """
        return _SnapTime.TInt___call__(self)


    def __iadd__(self, Int):
        """
        __iadd__(TInt self, int const & Int) -> TInt

        Parameters
        ----------
        Int: int const &

        """
        return _SnapTime.TInt___iadd__(self, Int)


    def __isub__(self, Int):
        """
        __isub__(TInt self, int const & Int) -> TInt

        Parameters
        ----------
        Int: int const &

        """
        return _SnapTime.TInt___isub__(self, Int)


    def GetMemUsed(self):
        """
        GetMemUsed(TInt self) -> int

        Parameters
        ----------
        self: TInt const *

        """
        return _SnapTime.TInt_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TInt self) -> int

        Parameters
        ----------
        self: TInt const *

        """
        return _SnapTime.TInt_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TInt self) -> int

        Parameters
        ----------
        self: TInt const *

        """
        return _SnapTime.TInt_GetSecHashCd(self)


    def Abs(Int):
        """
        Abs(int const & Int) -> int

        Parameters
        ----------
        Int: int const &

        """
        return _SnapTime.TInt_Abs(Int)

    Abs = staticmethod(Abs)

    def Sign(Int):
        """
        Sign(int const & Int) -> int

        Parameters
        ----------
        Int: int const &

        """
        return _SnapTime.TInt_Sign(Int)

    Sign = staticmethod(Sign)

    def Swap(Int1, Int2):
        """
        Swap(int & Int1, int & Int2)

        Parameters
        ----------
        Int1: int &
        Int2: int &

        """
        return _SnapTime.TInt_Swap(Int1, Int2)

    Swap = staticmethod(Swap)

    def GetRnd(Range=0):
        """
        GetRnd(int const & Range=0) -> int

        Parameters
        ----------
        Range: int const &

        GetRnd() -> int
        """
        return _SnapTime.TInt_GetRnd(Range)

    GetRnd = staticmethod(GetRnd)

    def IsOdd(Int):
        """
        IsOdd(int const & Int) -> bool

        Parameters
        ----------
        Int: int const &

        """
        return _SnapTime.TInt_IsOdd(Int)

    IsOdd = staticmethod(IsOdd)

    def IsEven(Int):
        """
        IsEven(int const & Int) -> bool

        Parameters
        ----------
        Int: int const &

        """
        return _SnapTime.TInt_IsEven(Int)

    IsEven = staticmethod(IsEven)

    def GetMn(*args):
        """
        GetMn(int const & Int1, int const & Int2) -> int

        Parameters
        ----------
        Int1: int const &
        Int2: int const &

        GetMn(int const & Int1, int const & Int2, int const & Int3) -> int

        Parameters
        ----------
        Int1: int const &
        Int2: int const &
        Int3: int const &

        GetMn(int const & Int1, int const & Int2, int const & Int3, int const & Int4) -> int

        Parameters
        ----------
        Int1: int const &
        Int2: int const &
        Int3: int const &
        Int4: int const &

        """
        return _SnapTime.TInt_GetMn(*args)

    GetMn = staticmethod(GetMn)

    def GetMx(*args):
        """
        GetMx(int const & Int1, int const & Int2) -> int

        Parameters
        ----------
        Int1: int const &
        Int2: int const &

        GetMx(int const & Int1, int const & Int2, int const & Int3) -> int

        Parameters
        ----------
        Int1: int const &
        Int2: int const &
        Int3: int const &

        GetMx(int const & Int1, int const & Int2, int const & Int3, int const & Int4) -> int

        Parameters
        ----------
        Int1: int const &
        Int2: int const &
        Int3: int const &
        Int4: int const &

        """
        return _SnapTime.TInt_GetMx(*args)

    GetMx = staticmethod(GetMx)

    def GetInRng(Val, Mn, Mx):
        """
        GetInRng(int const & Val, int const & Mn, int const & Mx) -> int

        Parameters
        ----------
        Val: int const &
        Mn: int const &
        Mx: int const &

        """
        return _SnapTime.TInt_GetInRng(Val, Mn, Mx)

    GetInRng = staticmethod(GetInRng)

    def GetStr(*args):
        """
        GetStr() -> TStr
        GetStr(int const & Val) -> TStr

        Parameters
        ----------
        Val: int const &

        GetStr(TInt Int) -> TStr

        Parameters
        ----------
        Int: TInt const &

        GetStr(int const & Val, char const * FmtStr) -> TStr

        Parameters
        ----------
        Val: int const &
        FmtStr: char const *

        GetStr(int const & Val, TStr FmtStr) -> TStr

        Parameters
        ----------
        Val: int const &
        FmtStr: TStr const &

        GetStr(uint const & Val) -> TStr

        Parameters
        ----------
        Val: uint const &

        GetStr(int64 const & Val) -> TStr

        Parameters
        ----------
        Val: int64 const &

        GetStr(uint64 const & Val) -> TStr

        Parameters
        ----------
        Val: uint64 const &

        """
        return _SnapTime.TInt_GetStr(*args)

    GetStr = staticmethod(GetStr)

    def GetHexStr(*args):
        """
        GetHexStr(int const & Val) -> TStr

        Parameters
        ----------
        Val: int const &

        GetHexStr(TInt Int) -> TStr

        Parameters
        ----------
        Int: TInt const &

        """
        return _SnapTime.TInt_GetHexStr(*args)

    GetHexStr = staticmethod(GetHexStr)

    def GetKiloStr(Val):
        """
        GetKiloStr(int const & Val) -> TStr

        Parameters
        ----------
        Val: int const &

        """
        return _SnapTime.TInt_GetKiloStr(Val)

    GetKiloStr = staticmethod(GetKiloStr)

    def GetMegaStr(Val):
        """
        GetMegaStr(int const & Val) -> TStr

        Parameters
        ----------
        Val: int const &

        """
        return _SnapTime.TInt_GetMegaStr(Val)

    GetMegaStr = staticmethod(GetMegaStr)

    def SaveFrugalInt(pDest, i):
        """
        SaveFrugalInt(char * pDest, int i) -> char *

        Parameters
        ----------
        pDest: char *
        i: int

        """
        return _SnapTime.TInt_SaveFrugalInt(pDest, i)

    SaveFrugalInt = staticmethod(SaveFrugalInt)

    def LoadFrugalInt(pSrc, i):
        """
        LoadFrugalInt(char * pSrc, int & i) -> char *

        Parameters
        ----------
        pSrc: char *
        i: int &

        """
        return _SnapTime.TInt_LoadFrugalInt(pSrc, i)

    LoadFrugalInt = staticmethod(LoadFrugalInt)

    def TestFrugalInt():
        """TestFrugalInt()"""
        return _SnapTime.TInt_TestFrugalInt()

    TestFrugalInt = staticmethod(TestFrugalInt)

    def SaveFrugalIntV(SOut, IntV):
        """
        SaveFrugalIntV(TSOut SOut, TIntV IntV)

        Parameters
        ----------
        SOut: TSOut &
        IntV: TVec< TInt,int > const &

        """
        return _SnapTime.TInt_SaveFrugalIntV(SOut, IntV)

    SaveFrugalIntV = staticmethod(SaveFrugalIntV)

    def LoadFrugalIntV(SIn, IntV, ClrP=True):
        """
        LoadFrugalIntV(TSIn SIn, TIntV IntV, bool ClrP=True)

        Parameters
        ----------
        SIn: TSIn &
        IntV: TVec< TInt,int > &
        ClrP: bool

        LoadFrugalIntV(TSIn SIn, TIntV IntV)

        Parameters
        ----------
        SIn: TSIn &
        IntV: TVec< TInt,int > &

        """
        return _SnapTime.TInt_LoadFrugalIntV(SIn, IntV, ClrP)

    LoadFrugalIntV = staticmethod(LoadFrugalIntV)
    __swig_destroy__ = _SnapTime.delete_TInt
TInt.Load = new_instancemethod(_SnapTime.TInt_Load, None, TInt)
TInt.Save = new_instancemethod(_SnapTime.TInt_Save, None, TInt)
TInt.__eq__ = new_instancemethod(_SnapTime.TInt___eq__, None, TInt)
TInt.__ne__ = new_instancemethod(_SnapTime.TInt___ne__, None, TInt)
TInt.__lt__ = new_instancemethod(_SnapTime.TInt___lt__, None, TInt)
TInt.__call__ = new_instancemethod(_SnapTime.TInt___call__, None, TInt)
TInt.__iadd__ = new_instancemethod(_SnapTime.TInt___iadd__, None, TInt)
TInt.__isub__ = new_instancemethod(_SnapTime.TInt___isub__, None, TInt)
TInt.GetMemUsed = new_instancemethod(_SnapTime.TInt_GetMemUsed, None, TInt)
TInt.GetPrimHashCd = new_instancemethod(_SnapTime.TInt_GetPrimHashCd, None, TInt)
TInt.GetSecHashCd = new_instancemethod(_SnapTime.TInt_GetSecHashCd, None, TInt)
TInt_swigregister = _SnapTime.TInt_swigregister
TInt_swigregister(TInt)
TInt.Mn = _SnapTime.cvar.TInt_Mn
TInt.Mx = _SnapTime.cvar.TInt_Mx
TInt.Kilo = _SnapTime.cvar.TInt_Kilo
TInt.Mega = _SnapTime.cvar.TInt_Mega
TInt.Giga = _SnapTime.cvar.TInt_Giga

def TInt_Abs(Int):
    """
    TInt_Abs(int const & Int) -> int

    Parameters
    ----------
    Int: int const &

    """
    return _SnapTime.TInt_Abs(Int)

def TInt_Sign(Int):
    """
    TInt_Sign(int const & Int) -> int

    Parameters
    ----------
    Int: int const &

    """
    return _SnapTime.TInt_Sign(Int)

def TInt_Swap(Int1, Int2):
    """
    TInt_Swap(int & Int1, int & Int2)

    Parameters
    ----------
    Int1: int &
    Int2: int &

    """
    return _SnapTime.TInt_Swap(Int1, Int2)

def TInt_GetRnd(Range=0):
    """
    GetRnd(int const & Range=0) -> int

    Parameters
    ----------
    Range: int const &

    TInt_GetRnd() -> int
    """
    return _SnapTime.TInt_GetRnd(Range)

def TInt_IsOdd(Int):
    """
    TInt_IsOdd(int const & Int) -> bool

    Parameters
    ----------
    Int: int const &

    """
    return _SnapTime.TInt_IsOdd(Int)

def TInt_IsEven(Int):
    """
    TInt_IsEven(int const & Int) -> bool

    Parameters
    ----------
    Int: int const &

    """
    return _SnapTime.TInt_IsEven(Int)

def TInt_GetMn(*args):
    """
    GetMn(int const & Int1, int const & Int2) -> int

    Parameters
    ----------
    Int1: int const &
    Int2: int const &

    GetMn(int const & Int1, int const & Int2, int const & Int3) -> int

    Parameters
    ----------
    Int1: int const &
    Int2: int const &
    Int3: int const &

    TInt_GetMn(int const & Int1, int const & Int2, int const & Int3, int const & Int4) -> int

    Parameters
    ----------
    Int1: int const &
    Int2: int const &
    Int3: int const &
    Int4: int const &

    """
    return _SnapTime.TInt_GetMn(*args)

def TInt_GetMx(*args):
    """
    GetMx(int const & Int1, int const & Int2) -> int

    Parameters
    ----------
    Int1: int const &
    Int2: int const &

    GetMx(int const & Int1, int const & Int2, int const & Int3) -> int

    Parameters
    ----------
    Int1: int const &
    Int2: int const &
    Int3: int const &

    TInt_GetMx(int const & Int1, int const & Int2, int const & Int3, int const & Int4) -> int

    Parameters
    ----------
    Int1: int const &
    Int2: int const &
    Int3: int const &
    Int4: int const &

    """
    return _SnapTime.TInt_GetMx(*args)

def TInt_GetInRng(Val, Mn, Mx):
    """
    TInt_GetInRng(int const & Val, int const & Mn, int const & Mx) -> int

    Parameters
    ----------
    Val: int const &
    Mn: int const &
    Mx: int const &

    """
    return _SnapTime.TInt_GetInRng(Val, Mn, Mx)

def TInt_GetStr(*args):
    """
    GetStr() -> TStr
    GetStr(int const & Val) -> TStr

    Parameters
    ----------
    Val: int const &

    GetStr(TInt Int) -> TStr

    Parameters
    ----------
    Int: TInt const &

    GetStr(int const & Val, char const * FmtStr) -> TStr

    Parameters
    ----------
    Val: int const &
    FmtStr: char const *

    GetStr(int const & Val, TStr FmtStr) -> TStr

    Parameters
    ----------
    Val: int const &
    FmtStr: TStr const &

    GetStr(uint const & Val) -> TStr

    Parameters
    ----------
    Val: uint const &

    GetStr(int64 const & Val) -> TStr

    Parameters
    ----------
    Val: int64 const &

    TInt_GetStr(uint64 const & Val) -> TStr

    Parameters
    ----------
    Val: uint64 const &

    """
    return _SnapTime.TInt_GetStr(*args)

def TInt_GetHexStr(*args):
    """
    GetHexStr(int const & Val) -> TStr

    Parameters
    ----------
    Val: int const &

    TInt_GetHexStr(TInt Int) -> TStr

    Parameters
    ----------
    Int: TInt const &

    """
    return _SnapTime.TInt_GetHexStr(*args)

def TInt_GetKiloStr(Val):
    """
    TInt_GetKiloStr(int const & Val) -> TStr

    Parameters
    ----------
    Val: int const &

    """
    return _SnapTime.TInt_GetKiloStr(Val)

def TInt_GetMegaStr(Val):
    """
    TInt_GetMegaStr(int const & Val) -> TStr

    Parameters
    ----------
    Val: int const &

    """
    return _SnapTime.TInt_GetMegaStr(Val)

def TInt_SaveFrugalInt(pDest, i):
    """
    TInt_SaveFrugalInt(char * pDest, int i) -> char *

    Parameters
    ----------
    pDest: char *
    i: int

    """
    return _SnapTime.TInt_SaveFrugalInt(pDest, i)

def TInt_LoadFrugalInt(pSrc, i):
    """
    TInt_LoadFrugalInt(char * pSrc, int & i) -> char *

    Parameters
    ----------
    pSrc: char *
    i: int &

    """
    return _SnapTime.TInt_LoadFrugalInt(pSrc, i)

def TInt_TestFrugalInt():
    """TInt_TestFrugalInt()"""
    return _SnapTime.TInt_TestFrugalInt()

def TInt_SaveFrugalIntV(SOut, IntV):
    """
    TInt_SaveFrugalIntV(TSOut SOut, TIntV IntV)

    Parameters
    ----------
    SOut: TSOut &
    IntV: TVec< TInt,int > const &

    """
    return _SnapTime.TInt_SaveFrugalIntV(SOut, IntV)

def TInt_LoadFrugalIntV(SIn, IntV, ClrP=True):
    """
    LoadFrugalIntV(TSIn SIn, TIntV IntV, bool ClrP=True)

    Parameters
    ----------
    SIn: TSIn &
    IntV: TVec< TInt,int > &
    ClrP: bool

    TInt_LoadFrugalIntV(TSIn SIn, TIntV IntV)

    Parameters
    ----------
    SIn: TSIn &
    IntV: TVec< TInt,int > &

    """
    return _SnapTime.TInt_LoadFrugalIntV(SIn, IntV, ClrP)

class TInt64(object):
    """Proxy of C++ TInt64 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_SnapTime.TInt64_Val_get, _SnapTime.TInt64_Val_set)
    Rnd = _swig_property(_SnapTime.TInt64_Rnd_get, _SnapTime.TInt64_Rnd_set)

    def GetRnd(Range=0):
        """
        GetRnd(int64 const & Range=0) -> int64

        Parameters
        ----------
        Range: int64 const &

        GetRnd() -> int64
        """
        return _SnapTime.TInt64_GetRnd(Range)

    GetRnd = staticmethod(GetRnd)

    def __init__(self, *args):
        """
        __init__(TInt64 self) -> TInt64
        __init__(TInt64 self, TInt64 Int) -> TInt64

        Parameters
        ----------
        Int: TInt64 const &

        __init__(TInt64 self, long const & Int) -> TInt64

        Parameters
        ----------
        Int: long const &

        __init__(TInt64 self, int64 const & Int) -> TInt64

        Parameters
        ----------
        Int: int64 const &

        __init__(TInt64 self, uint64 const & Int) -> TInt64

        Parameters
        ----------
        Int: uint64 const &

        __init__(TInt64 self, TInt Int) -> TInt64

        Parameters
        ----------
        Int: TInt const &

        __init__(TInt64 self, int const & Int) -> TInt64

        Parameters
        ----------
        Int: int const &

        __init__(TInt64 self, TSIn SIn) -> TInt64

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TInt64_swiginit(self, _SnapTime.new_TInt64(*args))

    def Load(self, SIn):
        """
        Load(TInt64 self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TInt64_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TInt64 self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TInt64_Save(self, SOut)


    def __iadd__(self, Int):
        """
        __iadd__(TInt64 self, TInt64 Int) -> TInt64

        Parameters
        ----------
        Int: TInt64 const &

        """
        return _SnapTime.TInt64___iadd__(self, Int)


    def __isub__(self, Int):
        """
        __isub__(TInt64 self, TInt64 Int) -> TInt64

        Parameters
        ----------
        Int: TInt64 const &

        """
        return _SnapTime.TInt64___isub__(self, Int)


    def __call__(self):
        """
        __call__(TInt64 self) -> int64

        Parameters
        ----------
        self: TInt64 const *

        """
        return _SnapTime.TInt64___call__(self)


    def GetMemUsed(self):
        """
        GetMemUsed(TInt64 self) -> int64

        Parameters
        ----------
        self: TInt64 const *

        """
        return _SnapTime.TInt64_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TInt64 self) -> int64

        Parameters
        ----------
        self: TInt64 const *

        """
        return _SnapTime.TInt64_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TInt64 self) -> int64

        Parameters
        ----------
        self: TInt64 const *

        """
        return _SnapTime.TInt64_GetSecHashCd(self)


    def Abs(Int):
        """
        Abs(int64 const & Int) -> int64

        Parameters
        ----------
        Int: int64 const &

        """
        return _SnapTime.TInt64_Abs(Int)

    Abs = staticmethod(Abs)

    def Sign(Int):
        """
        Sign(int64 const & Int) -> int64

        Parameters
        ----------
        Int: int64 const &

        """
        return _SnapTime.TInt64_Sign(Int)

    Sign = staticmethod(Sign)

    def Swap(Int1, Int2):
        """
        Swap(int64 & Int1, int64 & Int2)

        Parameters
        ----------
        Int1: int64 &
        Int2: int64 &

        """
        return _SnapTime.TInt64_Swap(Int1, Int2)

    Swap = staticmethod(Swap)

    def IsOdd(Int):
        """
        IsOdd(int64 const & Int) -> bool

        Parameters
        ----------
        Int: int64 const &

        """
        return _SnapTime.TInt64_IsOdd(Int)

    IsOdd = staticmethod(IsOdd)

    def IsEven(Int):
        """
        IsEven(int64 const & Int) -> bool

        Parameters
        ----------
        Int: int64 const &

        """
        return _SnapTime.TInt64_IsEven(Int)

    IsEven = staticmethod(IsEven)

    def GetMn(*args):
        """
        GetMn(int64 const & Int1, int64 const & Int2) -> int64

        Parameters
        ----------
        Int1: int64 const &
        Int2: int64 const &

        GetMn(int64 const & Int1, int64 const & Int2, int64 const & Int3) -> int64

        Parameters
        ----------
        Int1: int64 const &
        Int2: int64 const &
        Int3: int64 const &

        GetMn(int64 const & Int1, int64 const & Int2, int64 const & Int3, int64 const & Int4) -> int64

        Parameters
        ----------
        Int1: int64 const &
        Int2: int64 const &
        Int3: int64 const &
        Int4: int64 const &

        """
        return _SnapTime.TInt64_GetMn(*args)

    GetMn = staticmethod(GetMn)

    def GetMx(*args):
        """
        GetMx(int64 const & Int1, int64 const & Int2) -> int64

        Parameters
        ----------
        Int1: int64 const &
        Int2: int64 const &

        GetMx(int64 const & Int1, int64 const & Int2, int64 const & Int3) -> int64

        Parameters
        ----------
        Int1: int64 const &
        Int2: int64 const &
        Int3: int64 const &

        GetMx(int64 const & Int1, int64 const & Int2, int64 const & Int3, int64 const & Int4) -> int64

        Parameters
        ----------
        Int1: int64 const &
        Int2: int64 const &
        Int3: int64 const &
        Int4: int64 const &

        """
        return _SnapTime.TInt64_GetMx(*args)

    GetMx = staticmethod(GetMx)

    def GetInRng(Val, Mn, Mx):
        """
        GetInRng(int64 const & Val, int64 const & Mn, int64 const & Mx) -> int64

        Parameters
        ----------
        Val: int64 const &
        Mn: int64 const &
        Mx: int64 const &

        """
        return _SnapTime.TInt64_GetInRng(Val, Mn, Mx)

    GetInRng = staticmethod(GetInRng)

    def GetHexStr(Int):
        """
        GetHexStr(TInt64 Int) -> TStr

        Parameters
        ----------
        Int: TInt64 const &

        """
        return _SnapTime.TInt64_GetHexStr(Int)

    GetHexStr = staticmethod(GetHexStr)

    def GetKiloStr(Val):
        """
        GetKiloStr(int64 const & Val) -> TStr

        Parameters
        ----------
        Val: int64 const &

        """
        return _SnapTime.TInt64_GetKiloStr(Val)

    GetKiloStr = staticmethod(GetKiloStr)

    def GetMegaStr(Val):
        """
        GetMegaStr(int64 const & Val) -> TStr

        Parameters
        ----------
        Val: int64 const &

        """
        return _SnapTime.TInt64_GetMegaStr(Val)

    GetMegaStr = staticmethod(GetMegaStr)

    def GetFromBufSafe(Bf):
        """
        GetFromBufSafe(char const * Bf) -> int64

        Parameters
        ----------
        Bf: char const *

        """
        return _SnapTime.TInt64_GetFromBufSafe(Bf)

    GetFromBufSafe = staticmethod(GetFromBufSafe)
    __swig_destroy__ = _SnapTime.delete_TInt64
TInt64.Load = new_instancemethod(_SnapTime.TInt64_Load, None, TInt64)
TInt64.Save = new_instancemethod(_SnapTime.TInt64_Save, None, TInt64)
TInt64.__iadd__ = new_instancemethod(_SnapTime.TInt64___iadd__, None, TInt64)
TInt64.__isub__ = new_instancemethod(_SnapTime.TInt64___isub__, None, TInt64)
TInt64.__call__ = new_instancemethod(_SnapTime.TInt64___call__, None, TInt64)
TInt64.GetMemUsed = new_instancemethod(_SnapTime.TInt64_GetMemUsed, None, TInt64)
TInt64.GetPrimHashCd = new_instancemethod(_SnapTime.TInt64_GetPrimHashCd, None, TInt64)
TInt64.GetSecHashCd = new_instancemethod(_SnapTime.TInt64_GetSecHashCd, None, TInt64)
TInt64_swigregister = _SnapTime.TInt64_swigregister
TInt64_swigregister(TInt64)
TInt64.Mn = _SnapTime.cvar.TInt64_Mn
TInt64.Mx = _SnapTime.cvar.TInt64_Mx

def TInt64_GetRnd(Range=0):
    """
    GetRnd(int64 const & Range=0) -> int64

    Parameters
    ----------
    Range: int64 const &

    TInt64_GetRnd() -> int64
    """
    return _SnapTime.TInt64_GetRnd(Range)

def TInt64_Abs(Int):
    """
    TInt64_Abs(int64 const & Int) -> int64

    Parameters
    ----------
    Int: int64 const &

    """
    return _SnapTime.TInt64_Abs(Int)

def TInt64_Sign(Int):
    """
    TInt64_Sign(int64 const & Int) -> int64

    Parameters
    ----------
    Int: int64 const &

    """
    return _SnapTime.TInt64_Sign(Int)

def TInt64_Swap(Int1, Int2):
    """
    TInt64_Swap(int64 & Int1, int64 & Int2)

    Parameters
    ----------
    Int1: int64 &
    Int2: int64 &

    """
    return _SnapTime.TInt64_Swap(Int1, Int2)

def TInt64_IsOdd(Int):
    """
    TInt64_IsOdd(int64 const & Int) -> bool

    Parameters
    ----------
    Int: int64 const &

    """
    return _SnapTime.TInt64_IsOdd(Int)

def TInt64_IsEven(Int):
    """
    TInt64_IsEven(int64 const & Int) -> bool

    Parameters
    ----------
    Int: int64 const &

    """
    return _SnapTime.TInt64_IsEven(Int)

def TInt64_GetMn(*args):
    """
    GetMn(int64 const & Int1, int64 const & Int2) -> int64

    Parameters
    ----------
    Int1: int64 const &
    Int2: int64 const &

    GetMn(int64 const & Int1, int64 const & Int2, int64 const & Int3) -> int64

    Parameters
    ----------
    Int1: int64 const &
    Int2: int64 const &
    Int3: int64 const &

    TInt64_GetMn(int64 const & Int1, int64 const & Int2, int64 const & Int3, int64 const & Int4) -> int64

    Parameters
    ----------
    Int1: int64 const &
    Int2: int64 const &
    Int3: int64 const &
    Int4: int64 const &

    """
    return _SnapTime.TInt64_GetMn(*args)

def TInt64_GetMx(*args):
    """
    GetMx(int64 const & Int1, int64 const & Int2) -> int64

    Parameters
    ----------
    Int1: int64 const &
    Int2: int64 const &

    GetMx(int64 const & Int1, int64 const & Int2, int64 const & Int3) -> int64

    Parameters
    ----------
    Int1: int64 const &
    Int2: int64 const &
    Int3: int64 const &

    TInt64_GetMx(int64 const & Int1, int64 const & Int2, int64 const & Int3, int64 const & Int4) -> int64

    Parameters
    ----------
    Int1: int64 const &
    Int2: int64 const &
    Int3: int64 const &
    Int4: int64 const &

    """
    return _SnapTime.TInt64_GetMx(*args)

def TInt64_GetInRng(Val, Mn, Mx):
    """
    TInt64_GetInRng(int64 const & Val, int64 const & Mn, int64 const & Mx) -> int64

    Parameters
    ----------
    Val: int64 const &
    Mn: int64 const &
    Mx: int64 const &

    """
    return _SnapTime.TInt64_GetInRng(Val, Mn, Mx)

def TInt64_GetHexStr(Int):
    """
    TInt64_GetHexStr(TInt64 Int) -> TStr

    Parameters
    ----------
    Int: TInt64 const &

    """
    return _SnapTime.TInt64_GetHexStr(Int)

def TInt64_GetKiloStr(Val):
    """
    TInt64_GetKiloStr(int64 const & Val) -> TStr

    Parameters
    ----------
    Val: int64 const &

    """
    return _SnapTime.TInt64_GetKiloStr(Val)

def TInt64_GetMegaStr(Val):
    """
    TInt64_GetMegaStr(int64 const & Val) -> TStr

    Parameters
    ----------
    Val: int64 const &

    """
    return _SnapTime.TInt64_GetMegaStr(Val)

def TInt64_GetFromBufSafe(Bf):
    """
    TInt64_GetFromBufSafe(char const * Bf) -> int64

    Parameters
    ----------
    Bf: char const *

    """
    return _SnapTime.TInt64_GetFromBufSafe(Bf)

class TVoid(object):
    """Proxy of C++ TVoid class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TVoid self) -> TVoid
        __init__(TVoid self, TSIn arg2) -> TVoid

        Parameters
        ----------
        arg2: TSIn &

        """
        _SnapTime.TVoid_swiginit(self, _SnapTime.new_TVoid(*args))

    def Save(self, arg2):
        """
        Save(TVoid self, TSOut arg2)

        Parameters
        ----------
        arg2: TSOut &

        """
        return _SnapTime.TVoid_Save(self, arg2)


    def __eq__(self, arg2):
        """
        __eq__(TVoid self, TVoid arg2) -> bool

        Parameters
        ----------
        arg2: TVoid const &

        """
        return _SnapTime.TVoid___eq__(self, arg2)


    def __lt__(self, arg2):
        """
        __lt__(TVoid self, TVoid arg2) -> bool

        Parameters
        ----------
        arg2: TVoid const &

        """
        return _SnapTime.TVoid___lt__(self, arg2)


    def GetMemUsed(self):
        """
        GetMemUsed(TVoid self) -> int

        Parameters
        ----------
        self: TVoid const *

        """
        return _SnapTime.TVoid_GetMemUsed(self)

    __swig_destroy__ = _SnapTime.delete_TVoid
TVoid.Save = new_instancemethod(_SnapTime.TVoid_Save, None, TVoid)
TVoid.__eq__ = new_instancemethod(_SnapTime.TVoid___eq__, None, TVoid)
TVoid.__lt__ = new_instancemethod(_SnapTime.TVoid___lt__, None, TVoid)
TVoid.GetMemUsed = new_instancemethod(_SnapTime.TVoid_GetMemUsed, None, TVoid)
TVoid_swigregister = _SnapTime.TVoid_swigregister
TVoid_swigregister(TVoid)

class TBool(object):
    """Proxy of C++ TBool class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_SnapTime.TBool_Val_get, _SnapTime.TBool_Val_set)
    Rnd = _swig_property(_SnapTime.TBool_Rnd_get, _SnapTime.TBool_Rnd_set)

    def __nonzero__(self):
        return _SnapTime.TBool___nonzero__(self)
    __bool__ = __nonzero__



    def __init__(self, *args):
        """
        __init__(TBool self) -> TBool
        __init__(TBool self, bool const & _Val) -> TBool

        Parameters
        ----------
        _Val: bool const &

        __init__(TBool self, TSIn SIn) -> TBool

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TBool_swiginit(self, _SnapTime.new_TBool(*args))

    def Load(self, SIn):
        """
        Load(TBool self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TBool_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TBool self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TBool_Save(self, SOut)


    def __eq__(self, Bool):
        """
        __eq__(TBool self, TBool Bool) -> bool

        Parameters
        ----------
        Bool: TBool const &

        """
        return _SnapTime.TBool___eq__(self, Bool)


    def __lt__(self, Bool):
        """
        __lt__(TBool self, TBool Bool) -> bool

        Parameters
        ----------
        Bool: TBool const &

        """
        return _SnapTime.TBool___lt__(self, Bool)


    def __call__(self):
        """
        __call__(TBool self) -> bool

        Parameters
        ----------
        self: TBool const *

        """
        return _SnapTime.TBool___call__(self)


    def GetMemUsed(self):
        """
        GetMemUsed(TBool self) -> int

        Parameters
        ----------
        self: TBool const *

        """
        return _SnapTime.TBool_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TBool self) -> int

        Parameters
        ----------
        self: TBool const *

        """
        return _SnapTime.TBool_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TBool self) -> int

        Parameters
        ----------
        self: TBool const *

        """
        return _SnapTime.TBool_GetSecHashCd(self)


    def GetRnd():
        """GetRnd() -> bool"""
        return _SnapTime.TBool_GetRnd()

    GetRnd = staticmethod(GetRnd)

    def GetStr(*args):
        """
        GetStr(bool const & Val) -> TStr

        Parameters
        ----------
        Val: bool const &

        GetStr(TBool Bool) -> TStr

        Parameters
        ----------
        Bool: TBool const &

        """
        return _SnapTime.TBool_GetStr(*args)

    GetStr = staticmethod(GetStr)

    def GetYNStr(Val):
        """
        GetYNStr(bool const & Val) -> TStr

        Parameters
        ----------
        Val: bool const &

        """
        return _SnapTime.TBool_GetYNStr(Val)

    GetYNStr = staticmethod(GetYNStr)

    def GetYesNoStr(Val):
        """
        GetYesNoStr(bool const & Val) -> TStr

        Parameters
        ----------
        Val: bool const &

        """
        return _SnapTime.TBool_GetYesNoStr(Val)

    GetYesNoStr = staticmethod(GetYesNoStr)

    def Get01Str(Val):
        """
        Get01Str(bool const & Val) -> TStr

        Parameters
        ----------
        Val: bool const &

        """
        return _SnapTime.TBool_Get01Str(Val)

    Get01Str = staticmethod(Get01Str)

    def IsValStr(Str):
        """
        IsValStr(TStr Str) -> bool

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TBool_IsValStr(Str)

    IsValStr = staticmethod(IsValStr)

    def GetValFromStr(*args):
        """
        GetValFromStr(TStr Str) -> bool

        Parameters
        ----------
        Str: TStr const &

        GetValFromStr(TStr Str, bool const & DfVal) -> bool

        Parameters
        ----------
        Str: TStr const &
        DfVal: bool const &

        """
        return _SnapTime.TBool_GetValFromStr(*args)

    GetValFromStr = staticmethod(GetValFromStr)
    __swig_destroy__ = _SnapTime.delete_TBool
TBool.Load = new_instancemethod(_SnapTime.TBool_Load, None, TBool)
TBool.Save = new_instancemethod(_SnapTime.TBool_Save, None, TBool)
TBool.__eq__ = new_instancemethod(_SnapTime.TBool___eq__, None, TBool)
TBool.__lt__ = new_instancemethod(_SnapTime.TBool___lt__, None, TBool)
TBool.__call__ = new_instancemethod(_SnapTime.TBool___call__, None, TBool)
TBool.GetMemUsed = new_instancemethod(_SnapTime.TBool_GetMemUsed, None, TBool)
TBool.GetPrimHashCd = new_instancemethod(_SnapTime.TBool_GetPrimHashCd, None, TBool)
TBool.GetSecHashCd = new_instancemethod(_SnapTime.TBool_GetSecHashCd, None, TBool)
TBool_swigregister = _SnapTime.TBool_swigregister
TBool_swigregister(TBool)
TBool.Mn = _SnapTime.cvar.TBool_Mn
TBool.Mx = _SnapTime.cvar.TBool_Mx
TBool.Vals = _SnapTime.cvar.TBool_Vals
TBool.FalseStr = _SnapTime.cvar.TBool_FalseStr
TBool.TrueStr = _SnapTime.cvar.TBool_TrueStr
TBool.NStr = _SnapTime.cvar.TBool_NStr
TBool.YStr = _SnapTime.cvar.TBool_YStr
TBool.NoStr = _SnapTime.cvar.TBool_NoStr
TBool.YesStr = _SnapTime.cvar.TBool_YesStr

def TBool_GetRnd():
    """TBool_GetRnd() -> bool"""
    return _SnapTime.TBool_GetRnd()

def TBool_GetStr(*args):
    """
    GetStr(bool const & Val) -> TStr

    Parameters
    ----------
    Val: bool const &

    TBool_GetStr(TBool Bool) -> TStr

    Parameters
    ----------
    Bool: TBool const &

    """
    return _SnapTime.TBool_GetStr(*args)

def TBool_GetYNStr(Val):
    """
    TBool_GetYNStr(bool const & Val) -> TStr

    Parameters
    ----------
    Val: bool const &

    """
    return _SnapTime.TBool_GetYNStr(Val)

def TBool_GetYesNoStr(Val):
    """
    TBool_GetYesNoStr(bool const & Val) -> TStr

    Parameters
    ----------
    Val: bool const &

    """
    return _SnapTime.TBool_GetYesNoStr(Val)

def TBool_Get01Str(Val):
    """
    TBool_Get01Str(bool const & Val) -> TStr

    Parameters
    ----------
    Val: bool const &

    """
    return _SnapTime.TBool_Get01Str(Val)

def TBool_IsValStr(Str):
    """
    TBool_IsValStr(TStr Str) -> bool

    Parameters
    ----------
    Str: TStr const &

    """
    return _SnapTime.TBool_IsValStr(Str)

def TBool_GetValFromStr(*args):
    """
    GetValFromStr(TStr Str) -> bool

    Parameters
    ----------
    Str: TStr const &

    TBool_GetValFromStr(TStr Str, bool const & DfVal) -> bool

    Parameters
    ----------
    Str: TStr const &
    DfVal: bool const &

    """
    return _SnapTime.TBool_GetValFromStr(*args)

class TCh(object):
    """Proxy of C++ TCh class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_SnapTime.TCh_Val_get, _SnapTime.TCh_Val_set)

    def __init__(self, *args):
        """
        __init__(TCh self) -> TCh
        __init__(TCh self, char const & _Val) -> TCh

        Parameters
        ----------
        _Val: char const &

        __init__(TCh self, TSIn SIn) -> TCh

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TCh_swiginit(self, _SnapTime.new_TCh(*args))

    def Load(self, SIn):
        """
        Load(TCh self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TCh_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TCh self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TCh_Save(self, SOut)


    def __eq__(self, Ch):
        """
        __eq__(TCh self, TCh Ch) -> bool

        Parameters
        ----------
        Ch: TCh const &

        """
        return _SnapTime.TCh___eq__(self, Ch)


    def __lt__(self, Ch):
        """
        __lt__(TCh self, TCh Ch) -> bool

        Parameters
        ----------
        Ch: TCh const &

        """
        return _SnapTime.TCh___lt__(self, Ch)


    def __call__(self):
        """
        __call__(TCh self) -> char

        Parameters
        ----------
        self: TCh const *

        """
        return _SnapTime.TCh___call__(self)


    def GetMemUsed(self):
        """
        GetMemUsed(TCh self) -> int

        Parameters
        ----------
        self: TCh const *

        """
        return _SnapTime.TCh_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TCh self) -> int

        Parameters
        ----------
        self: TCh const *

        """
        return _SnapTime.TCh_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TCh self) -> int

        Parameters
        ----------
        self: TCh const *

        """
        return _SnapTime.TCh_GetSecHashCd(self)


    def IsHashCh(Ch):
        """
        IsHashCh(char const & Ch) -> bool

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TCh_IsHashCh(Ch)

    IsHashCh = staticmethod(IsHashCh)

    def IsWs(Ch):
        """
        IsWs(char const & Ch) -> bool

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TCh_IsWs(Ch)

    IsWs = staticmethod(IsWs)

    def IsAlpha(Ch):
        """
        IsAlpha(char const & Ch) -> bool

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TCh_IsAlpha(Ch)

    IsAlpha = staticmethod(IsAlpha)

    def IsNum(Ch):
        """
        IsNum(char const & Ch) -> bool

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TCh_IsNum(Ch)

    IsNum = staticmethod(IsNum)

    def IsAlNum(Ch):
        """
        IsAlNum(char const & Ch) -> bool

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TCh_IsAlNum(Ch)

    IsAlNum = staticmethod(IsAlNum)

    def GetNum(Ch):
        """
        GetNum(char const & Ch) -> int

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TCh_GetNum(Ch)

    GetNum = staticmethod(GetNum)

    def IsHex(Ch):
        """
        IsHex(char const & Ch) -> bool

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TCh_IsHex(Ch)

    IsHex = staticmethod(IsHex)

    def GetHex(Ch):
        """
        GetHex(char const & Ch) -> int

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TCh_GetHex(Ch)

    GetHex = staticmethod(GetHex)

    def GetHexCh(Val):
        """
        GetHexCh(int const & Val) -> char

        Parameters
        ----------
        Val: int const &

        """
        return _SnapTime.TCh_GetHexCh(Val)

    GetHexCh = staticmethod(GetHexCh)

    def IsUc(Ch):
        """
        IsUc(char const & Ch) -> char

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TCh_IsUc(Ch)

    IsUc = staticmethod(IsUc)

    def GetUc(Ch):
        """
        GetUc(char const & Ch) -> char

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TCh_GetUc(Ch)

    GetUc = staticmethod(GetUc)

    def GetUsFromYuAscii(Ch):
        """
        GetUsFromYuAscii(char const & Ch) -> char

        Parameters
        ----------
        Ch: char const &

        """
        return _SnapTime.TCh_GetUsFromYuAscii(Ch)

    GetUsFromYuAscii = staticmethod(GetUsFromYuAscii)

    def GetStr(Ch):
        """
        GetStr(TCh Ch) -> TStr

        Parameters
        ----------
        Ch: TCh const &

        """
        return _SnapTime.TCh_GetStr(Ch)

    GetStr = staticmethod(GetStr)
    __swig_destroy__ = _SnapTime.delete_TCh
TCh.Load = new_instancemethod(_SnapTime.TCh_Load, None, TCh)
TCh.Save = new_instancemethod(_SnapTime.TCh_Save, None, TCh)
TCh.__eq__ = new_instancemethod(_SnapTime.TCh___eq__, None, TCh)
TCh.__lt__ = new_instancemethod(_SnapTime.TCh___lt__, None, TCh)
TCh.__call__ = new_instancemethod(_SnapTime.TCh___call__, None, TCh)
TCh.GetMemUsed = new_instancemethod(_SnapTime.TCh_GetMemUsed, None, TCh)
TCh.GetPrimHashCd = new_instancemethod(_SnapTime.TCh_GetPrimHashCd, None, TCh)
TCh.GetSecHashCd = new_instancemethod(_SnapTime.TCh_GetSecHashCd, None, TCh)
TCh_swigregister = _SnapTime.TCh_swigregister
TCh_swigregister(TCh)
TCh.Mn = _SnapTime.cvar.TCh_Mn
TCh.Mx = _SnapTime.cvar.TCh_Mx
TCh.Vals = _SnapTime.cvar.TCh_Vals
TCh.NullCh = _SnapTime.cvar.TCh_NullCh
TCh.TabCh = _SnapTime.cvar.TCh_TabCh
TCh.LfCh = _SnapTime.cvar.TCh_LfCh
TCh.CrCh = _SnapTime.cvar.TCh_CrCh
TCh.EofCh = _SnapTime.cvar.TCh_EofCh
TCh.HashCh = _SnapTime.cvar.TCh_HashCh

def TCh_IsHashCh(Ch):
    """
    TCh_IsHashCh(char const & Ch) -> bool

    Parameters
    ----------
    Ch: char const &

    """
    return _SnapTime.TCh_IsHashCh(Ch)

def TCh_IsWs(Ch):
    """
    TCh_IsWs(char const & Ch) -> bool

    Parameters
    ----------
    Ch: char const &

    """
    return _SnapTime.TCh_IsWs(Ch)

def TCh_IsAlpha(Ch):
    """
    TCh_IsAlpha(char const & Ch) -> bool

    Parameters
    ----------
    Ch: char const &

    """
    return _SnapTime.TCh_IsAlpha(Ch)

def TCh_IsNum(Ch):
    """
    TCh_IsNum(char const & Ch) -> bool

    Parameters
    ----------
    Ch: char const &

    """
    return _SnapTime.TCh_IsNum(Ch)

def TCh_IsAlNum(Ch):
    """
    TCh_IsAlNum(char const & Ch) -> bool

    Parameters
    ----------
    Ch: char const &

    """
    return _SnapTime.TCh_IsAlNum(Ch)

def TCh_GetNum(Ch):
    """
    TCh_GetNum(char const & Ch) -> int

    Parameters
    ----------
    Ch: char const &

    """
    return _SnapTime.TCh_GetNum(Ch)

def TCh_IsHex(Ch):
    """
    TCh_IsHex(char const & Ch) -> bool

    Parameters
    ----------
    Ch: char const &

    """
    return _SnapTime.TCh_IsHex(Ch)

def TCh_GetHex(Ch):
    """
    TCh_GetHex(char const & Ch) -> int

    Parameters
    ----------
    Ch: char const &

    """
    return _SnapTime.TCh_GetHex(Ch)

def TCh_GetHexCh(Val):
    """
    TCh_GetHexCh(int const & Val) -> char

    Parameters
    ----------
    Val: int const &

    """
    return _SnapTime.TCh_GetHexCh(Val)

def TCh_IsUc(Ch):
    """
    TCh_IsUc(char const & Ch) -> char

    Parameters
    ----------
    Ch: char const &

    """
    return _SnapTime.TCh_IsUc(Ch)

def TCh_GetUc(Ch):
    """
    TCh_GetUc(char const & Ch) -> char

    Parameters
    ----------
    Ch: char const &

    """
    return _SnapTime.TCh_GetUc(Ch)

def TCh_GetUsFromYuAscii(Ch):
    """
    TCh_GetUsFromYuAscii(char const & Ch) -> char

    Parameters
    ----------
    Ch: char const &

    """
    return _SnapTime.TCh_GetUsFromYuAscii(Ch)

def TCh_GetStr(Ch):
    """
    TCh_GetStr(TCh Ch) -> TStr

    Parameters
    ----------
    Ch: TCh const &

    """
    return _SnapTime.TCh_GetStr(Ch)

class TUCh(object):
    """Proxy of C++ TUCh class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_SnapTime.TUCh_Val_get, _SnapTime.TUCh_Val_set)

    def __init__(self, *args):
        """
        __init__(TUCh self) -> TUCh
        __init__(TUCh self, uchar const & _Val) -> TUCh

        Parameters
        ----------
        _Val: uchar const &

        __init__(TUCh self, TSIn SIn) -> TUCh

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TUCh_swiginit(self, _SnapTime.new_TUCh(*args))

    def Save(self, SOut):
        """
        Save(TUCh self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TUCh_Save(self, SOut)


    def __eq__(self, UCh):
        """
        __eq__(TUCh self, TUCh UCh) -> bool

        Parameters
        ----------
        UCh: TUCh const &

        """
        return _SnapTime.TUCh___eq__(self, UCh)


    def __lt__(self, UCh):
        """
        __lt__(TUCh self, TUCh UCh) -> bool

        Parameters
        ----------
        UCh: TUCh const &

        """
        return _SnapTime.TUCh___lt__(self, UCh)


    def __call__(self):
        """
        __call__(TUCh self) -> uchar

        Parameters
        ----------
        self: TUCh const *

        """
        return _SnapTime.TUCh___call__(self)


    def GetMemUsed(self):
        """
        GetMemUsed(TUCh self) -> int

        Parameters
        ----------
        self: TUCh const *

        """
        return _SnapTime.TUCh_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TUCh self) -> int

        Parameters
        ----------
        self: TUCh const *

        """
        return _SnapTime.TUCh_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TUCh self) -> int

        Parameters
        ----------
        self: TUCh const *

        """
        return _SnapTime.TUCh_GetSecHashCd(self)

    __swig_destroy__ = _SnapTime.delete_TUCh
TUCh.Save = new_instancemethod(_SnapTime.TUCh_Save, None, TUCh)
TUCh.__eq__ = new_instancemethod(_SnapTime.TUCh___eq__, None, TUCh)
TUCh.__lt__ = new_instancemethod(_SnapTime.TUCh___lt__, None, TUCh)
TUCh.__call__ = new_instancemethod(_SnapTime.TUCh___call__, None, TUCh)
TUCh.GetMemUsed = new_instancemethod(_SnapTime.TUCh_GetMemUsed, None, TUCh)
TUCh.GetPrimHashCd = new_instancemethod(_SnapTime.TUCh_GetPrimHashCd, None, TUCh)
TUCh.GetSecHashCd = new_instancemethod(_SnapTime.TUCh_GetSecHashCd, None, TUCh)
TUCh_swigregister = _SnapTime.TUCh_swigregister
TUCh_swigregister(TUCh)
TUCh.Mn = _SnapTime.cvar.TUCh_Mn
TUCh.Mx = _SnapTime.cvar.TUCh_Mx
TUCh.Vals = _SnapTime.cvar.TUCh_Vals

class TSInt(object):
    """Proxy of C++ TSInt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_SnapTime.TSInt_Val_get, _SnapTime.TSInt_Val_set)

    def __init__(self, *args):
        """
        __init__(TSInt self) -> TSInt
        __init__(TSInt self, int16 const & _Val) -> TSInt

        Parameters
        ----------
        _Val: int16 const &

        __init__(TSInt self, TSIn SIn) -> TSInt

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TSInt_swiginit(self, _SnapTime.new_TSInt(*args))

    def Load(self, SIn):
        """
        Load(TSInt self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TSInt_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TSInt self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TSInt_Save(self, SOut)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TSInt self) -> int

        Parameters
        ----------
        self: TSInt const *

        """
        return _SnapTime.TSInt_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TSInt self) -> int

        Parameters
        ----------
        self: TSInt const *

        """
        return _SnapTime.TSInt_GetSecHashCd(self)

    __swig_destroy__ = _SnapTime.delete_TSInt
TSInt.Load = new_instancemethod(_SnapTime.TSInt_Load, None, TSInt)
TSInt.Save = new_instancemethod(_SnapTime.TSInt_Save, None, TSInt)
TSInt.GetPrimHashCd = new_instancemethod(_SnapTime.TSInt_GetPrimHashCd, None, TSInt)
TSInt.GetSecHashCd = new_instancemethod(_SnapTime.TSInt_GetSecHashCd, None, TSInt)
TSInt_swigregister = _SnapTime.TSInt_swigregister
TSInt_swigregister(TSInt)

class TUInt(object):
    """Proxy of C++ TUInt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_SnapTime.TUInt_Val_get, _SnapTime.TUInt_Val_set)
    Rnd = _swig_property(_SnapTime.TUInt_Rnd_get, _SnapTime.TUInt_Rnd_set)

    def __init__(self, *args):
        """
        __init__(TUInt self) -> TUInt
        __init__(TUInt self, uint const & _Val) -> TUInt

        Parameters
        ----------
        _Val: uint const &

        __init__(TUInt self, TSIn SIn) -> TUInt

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TUInt_swiginit(self, _SnapTime.new_TUInt(*args))

    def Load(self, SIn):
        """
        Load(TUInt self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TUInt_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TUInt self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TUInt_Save(self, SOut)


    def __iadd__(self, *args):
        """
        __iadd__(TUInt self, uint const & UInt) -> TUInt

        Parameters
        ----------
        UInt: uint const &

        __iadd__(TUInt self, TUInt UInt) -> TUInt

        Parameters
        ----------
        UInt: TUInt const &

        """
        return _SnapTime.TUInt___iadd__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(TUInt self, uint const & UInt) -> TUInt

        Parameters
        ----------
        UInt: uint const &

        __isub__(TUInt self, TUInt UInt) -> TUInt

        Parameters
        ----------
        UInt: TUInt const &

        """
        return _SnapTime.TUInt___isub__(self, *args)


    def __call__(self, *args):
        """
        __call__(TUInt self) -> uint
        __call__(TUInt self) -> uint &

        Parameters
        ----------
        self: TUInt *

        """
        return _SnapTime.TUInt___call__(self, *args)


    def __invert__(self):
        """
        __invert__(TUInt self) -> TUInt

        Parameters
        ----------
        self: TUInt *

        """
        return _SnapTime.TUInt___invert__(self)


    def __iand__(self, UInt):
        """
        __iand__(TUInt self, TUInt UInt) -> TUInt

        Parameters
        ----------
        UInt: TUInt const &

        """
        return _SnapTime.TUInt___iand__(self, UInt)


    def __ior__(self, UInt):
        """
        __ior__(TUInt self, TUInt UInt) -> TUInt

        Parameters
        ----------
        UInt: TUInt const &

        """
        return _SnapTime.TUInt___ior__(self, UInt)


    def __ixor__(self, UInt):
        """
        __ixor__(TUInt self, TUInt UInt) -> TUInt

        Parameters
        ----------
        UInt: TUInt const &

        """
        return _SnapTime.TUInt___ixor__(self, UInt)


    def __irshift__(self, ShiftBits):
        """
        __irshift__(TUInt self, int const & ShiftBits) -> TUInt

        Parameters
        ----------
        ShiftBits: int const &

        """
        return _SnapTime.TUInt___irshift__(self, ShiftBits)


    def __ilshift__(self, ShiftBits):
        """
        __ilshift__(TUInt self, int const & ShiftBits) -> TUInt

        Parameters
        ----------
        ShiftBits: int const &

        """
        return _SnapTime.TUInt___ilshift__(self, ShiftBits)


    def GetMemUsed(self):
        """
        GetMemUsed(TUInt self) -> int

        Parameters
        ----------
        self: TUInt const *

        """
        return _SnapTime.TUInt_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TUInt self) -> int

        Parameters
        ----------
        self: TUInt const *

        """
        return _SnapTime.TUInt_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TUInt self) -> int

        Parameters
        ----------
        self: TUInt const *

        """
        return _SnapTime.TUInt_GetSecHashCd(self)


    def GetRnd(Range=0):
        """
        GetRnd(uint const & Range=0) -> uint

        Parameters
        ----------
        Range: uint const &

        GetRnd() -> uint
        """
        return _SnapTime.TUInt_GetRnd(Range)

    GetRnd = staticmethod(GetRnd)

    def GetStr(*args):
        """
        GetStr() -> TStr
        GetStr(uint const & Val) -> TStr

        Parameters
        ----------
        Val: uint const &

        GetStr(TUInt UInt) -> TStr

        Parameters
        ----------
        UInt: TUInt const &

        GetStr(uint const & Val, char const * FmtStr) -> TStr

        Parameters
        ----------
        Val: uint const &
        FmtStr: char const *

        GetStr(uint const & Val, TStr FmtStr) -> TStr

        Parameters
        ----------
        Val: uint const &
        FmtStr: TStr const &

        """
        return _SnapTime.TUInt_GetStr(*args)

    GetStr = staticmethod(GetStr)

    def GetKiloStr(Val):
        """
        GetKiloStr(uint const & Val) -> TStr

        Parameters
        ----------
        Val: uint const &

        """
        return _SnapTime.TUInt_GetKiloStr(Val)

    GetKiloStr = staticmethod(GetKiloStr)

    def GetMegaStr(Val):
        """
        GetMegaStr(uint const & Val) -> TStr

        Parameters
        ----------
        Val: uint const &

        """
        return _SnapTime.TUInt_GetMegaStr(Val)

    GetMegaStr = staticmethod(GetMegaStr)

    def JavaUIntToCppUInt(JavaUInt):
        """
        JavaUIntToCppUInt(uint const & JavaUInt) -> uint

        Parameters
        ----------
        JavaUInt: uint const &

        """
        return _SnapTime.TUInt_JavaUIntToCppUInt(JavaUInt)

    JavaUIntToCppUInt = staticmethod(JavaUIntToCppUInt)

    def IsIpStr(*args):
        """
        IsIpStr(TStr IpStr, uint & Ip, char const & SplitCh) -> bool

        Parameters
        ----------
        IpStr: TStr const &
        Ip: uint &
        SplitCh: char const &

        IsIpStr(TStr IpStr, uint & Ip) -> bool

        Parameters
        ----------
        IpStr: TStr const &
        Ip: uint &

        IsIpStr(TStr IpStr, char const & SplitCh) -> bool

        Parameters
        ----------
        IpStr: TStr const &
        SplitCh: char const &

        IsIpStr(TStr IpStr) -> bool

        Parameters
        ----------
        IpStr: TStr const &

        """
        return _SnapTime.TUInt_IsIpStr(*args)

    IsIpStr = staticmethod(IsIpStr)

    def GetUIntFromIpStr(*args):
        """
        GetUIntFromIpStr(TStr IpStr, char const & SplitCh) -> uint

        Parameters
        ----------
        IpStr: TStr const &
        SplitCh: char const &

        GetUIntFromIpStr(TStr IpStr) -> uint

        Parameters
        ----------
        IpStr: TStr const &

        """
        return _SnapTime.TUInt_GetUIntFromIpStr(*args)

    GetUIntFromIpStr = staticmethod(GetUIntFromIpStr)

    def GetStrFromIpUInt(Ip):
        """
        GetStrFromIpUInt(uint const & Ip) -> TStr

        Parameters
        ----------
        Ip: uint const &

        """
        return _SnapTime.TUInt_GetStrFromIpUInt(Ip)

    GetStrFromIpUInt = staticmethod(GetStrFromIpUInt)

    def IsIpv6Str(*args):
        """
        IsIpv6Str(TStr IpStr, char const & SplitCh) -> bool

        Parameters
        ----------
        IpStr: TStr const &
        SplitCh: char const &

        IsIpv6Str(TStr IpStr) -> bool

        Parameters
        ----------
        IpStr: TStr const &

        """
        return _SnapTime.TUInt_IsIpv6Str(*args)

    IsIpv6Str = staticmethod(IsIpv6Str)
    __swig_destroy__ = _SnapTime.delete_TUInt
TUInt.Load = new_instancemethod(_SnapTime.TUInt_Load, None, TUInt)
TUInt.Save = new_instancemethod(_SnapTime.TUInt_Save, None, TUInt)
TUInt.__iadd__ = new_instancemethod(_SnapTime.TUInt___iadd__, None, TUInt)
TUInt.__isub__ = new_instancemethod(_SnapTime.TUInt___isub__, None, TUInt)
TUInt.__call__ = new_instancemethod(_SnapTime.TUInt___call__, None, TUInt)
TUInt.__invert__ = new_instancemethod(_SnapTime.TUInt___invert__, None, TUInt)
TUInt.__iand__ = new_instancemethod(_SnapTime.TUInt___iand__, None, TUInt)
TUInt.__ior__ = new_instancemethod(_SnapTime.TUInt___ior__, None, TUInt)
TUInt.__ixor__ = new_instancemethod(_SnapTime.TUInt___ixor__, None, TUInt)
TUInt.__irshift__ = new_instancemethod(_SnapTime.TUInt___irshift__, None, TUInt)
TUInt.__ilshift__ = new_instancemethod(_SnapTime.TUInt___ilshift__, None, TUInt)
TUInt.GetMemUsed = new_instancemethod(_SnapTime.TUInt_GetMemUsed, None, TUInt)
TUInt.GetPrimHashCd = new_instancemethod(_SnapTime.TUInt_GetPrimHashCd, None, TUInt)
TUInt.GetSecHashCd = new_instancemethod(_SnapTime.TUInt_GetSecHashCd, None, TUInt)
TUInt_swigregister = _SnapTime.TUInt_swigregister
TUInt_swigregister(TUInt)
TUInt.Mn = _SnapTime.cvar.TUInt_Mn
TUInt.Mx = _SnapTime.cvar.TUInt_Mx

def TUInt_GetRnd(Range=0):
    """
    GetRnd(uint const & Range=0) -> uint

    Parameters
    ----------
    Range: uint const &

    TUInt_GetRnd() -> uint
    """
    return _SnapTime.TUInt_GetRnd(Range)

def TUInt_GetStr(*args):
    """
    GetStr() -> TStr
    GetStr(uint const & Val) -> TStr

    Parameters
    ----------
    Val: uint const &

    GetStr(TUInt UInt) -> TStr

    Parameters
    ----------
    UInt: TUInt const &

    GetStr(uint const & Val, char const * FmtStr) -> TStr

    Parameters
    ----------
    Val: uint const &
    FmtStr: char const *

    TUInt_GetStr(uint const & Val, TStr FmtStr) -> TStr

    Parameters
    ----------
    Val: uint const &
    FmtStr: TStr const &

    """
    return _SnapTime.TUInt_GetStr(*args)

def TUInt_GetKiloStr(Val):
    """
    TUInt_GetKiloStr(uint const & Val) -> TStr

    Parameters
    ----------
    Val: uint const &

    """
    return _SnapTime.TUInt_GetKiloStr(Val)

def TUInt_GetMegaStr(Val):
    """
    TUInt_GetMegaStr(uint const & Val) -> TStr

    Parameters
    ----------
    Val: uint const &

    """
    return _SnapTime.TUInt_GetMegaStr(Val)

def TUInt_JavaUIntToCppUInt(JavaUInt):
    """
    TUInt_JavaUIntToCppUInt(uint const & JavaUInt) -> uint

    Parameters
    ----------
    JavaUInt: uint const &

    """
    return _SnapTime.TUInt_JavaUIntToCppUInt(JavaUInt)

def TUInt_IsIpStr(*args):
    """
    IsIpStr(TStr IpStr, uint & Ip, char const & SplitCh) -> bool

    Parameters
    ----------
    IpStr: TStr const &
    Ip: uint &
    SplitCh: char const &

    IsIpStr(TStr IpStr, uint & Ip) -> bool

    Parameters
    ----------
    IpStr: TStr const &
    Ip: uint &

    IsIpStr(TStr IpStr, char const & SplitCh) -> bool

    Parameters
    ----------
    IpStr: TStr const &
    SplitCh: char const &

    TUInt_IsIpStr(TStr IpStr) -> bool

    Parameters
    ----------
    IpStr: TStr const &

    """
    return _SnapTime.TUInt_IsIpStr(*args)

def TUInt_GetUIntFromIpStr(*args):
    """
    GetUIntFromIpStr(TStr IpStr, char const & SplitCh) -> uint

    Parameters
    ----------
    IpStr: TStr const &
    SplitCh: char const &

    TUInt_GetUIntFromIpStr(TStr IpStr) -> uint

    Parameters
    ----------
    IpStr: TStr const &

    """
    return _SnapTime.TUInt_GetUIntFromIpStr(*args)

def TUInt_GetStrFromIpUInt(Ip):
    """
    TUInt_GetStrFromIpUInt(uint const & Ip) -> TStr

    Parameters
    ----------
    Ip: uint const &

    """
    return _SnapTime.TUInt_GetStrFromIpUInt(Ip)

def TUInt_IsIpv6Str(*args):
    """
    IsIpv6Str(TStr IpStr, char const & SplitCh) -> bool

    Parameters
    ----------
    IpStr: TStr const &
    SplitCh: char const &

    TUInt_IsIpv6Str(TStr IpStr) -> bool

    Parameters
    ----------
    IpStr: TStr const &

    """
    return _SnapTime.TUInt_IsIpv6Str(*args)

class TUInt64(object):
    """Proxy of C++ TUInt64 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_SnapTime.TUInt64_Val_get, _SnapTime.TUInt64_Val_set)

    def __init__(self, *args):
        """
        __init__(TUInt64 self) -> TUInt64
        __init__(TUInt64 self, TUInt64 Int) -> TUInt64

        Parameters
        ----------
        Int: TUInt64 const &

        __init__(TUInt64 self, uint64 const & Int) -> TUInt64

        Parameters
        ----------
        Int: uint64 const &

        __init__(TUInt64 self, uint const & MsVal, uint const & LsVal) -> TUInt64

        Parameters
        ----------
        MsVal: uint const &
        LsVal: uint const &

        __init__(TUInt64 self, void * Pt) -> TUInt64

        Parameters
        ----------
        Pt: void *

        __init__(TUInt64 self, TSIn SIn) -> TUInt64

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TUInt64_swiginit(self, _SnapTime.new_TUInt64(*args))

    def Load(self, SIn):
        """
        Load(TUInt64 self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TUInt64_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TUInt64 self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TUInt64_Save(self, SOut)


    def __iadd__(self, Int):
        """
        __iadd__(TUInt64 self, TUInt64 Int) -> TUInt64

        Parameters
        ----------
        Int: TUInt64 const &

        """
        return _SnapTime.TUInt64___iadd__(self, Int)


    def __isub__(self, Int):
        """
        __isub__(TUInt64 self, TUInt64 Int) -> TUInt64

        Parameters
        ----------
        Int: TUInt64 const &

        """
        return _SnapTime.TUInt64___isub__(self, Int)


    def __imul__(self, Int):
        """
        __imul__(TUInt64 self, TUInt64 Int) -> TUInt64

        Parameters
        ----------
        Int: TUInt64 const &

        """
        return _SnapTime.TUInt64___imul__(self, Int)


    def GetMemUsed(self):
        """
        GetMemUsed(TUInt64 self) -> int

        Parameters
        ----------
        self: TUInt64 const *

        """
        return _SnapTime.TUInt64_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TUInt64 self) -> int

        Parameters
        ----------
        self: TUInt64 const *

        """
        return _SnapTime.TUInt64_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TUInt64 self) -> int

        Parameters
        ----------
        self: TUInt64 const *

        """
        return _SnapTime.TUInt64_GetSecHashCd(self)


    def GetMsVal(self):
        """
        GetMsVal(TUInt64 self) -> uint

        Parameters
        ----------
        self: TUInt64 const *

        """
        return _SnapTime.TUInt64_GetMsVal(self)


    def GetLsVal(self):
        """
        GetLsVal(TUInt64 self) -> uint

        Parameters
        ----------
        self: TUInt64 const *

        """
        return _SnapTime.TUInt64_GetLsVal(self)


    def GetStr(*args):
        """
        GetStr() -> TStr
        GetStr(TUInt64 Int) -> TStr

        Parameters
        ----------
        Int: TUInt64 const &

        """
        return _SnapTime.TUInt64_GetStr(*args)

    GetStr = staticmethod(GetStr)

    def GetHexStr(Int):
        """
        GetHexStr(TUInt64 Int) -> TStr

        Parameters
        ----------
        Int: TUInt64 const &

        """
        return _SnapTime.TUInt64_GetHexStr(Int)

    GetHexStr = staticmethod(GetHexStr)

    def GetKiloStr(Val):
        """
        GetKiloStr(uint64 const & Val) -> TStr

        Parameters
        ----------
        Val: uint64 const &

        """
        return _SnapTime.TUInt64_GetKiloStr(Val)

    GetKiloStr = staticmethod(GetKiloStr)

    def GetMegaStr(Val):
        """
        GetMegaStr(uint64 const & Val) -> TStr

        Parameters
        ----------
        Val: uint64 const &

        """
        return _SnapTime.TUInt64_GetMegaStr(Val)

    GetMegaStr = staticmethod(GetMegaStr)
    __swig_destroy__ = _SnapTime.delete_TUInt64
TUInt64.Load = new_instancemethod(_SnapTime.TUInt64_Load, None, TUInt64)
TUInt64.Save = new_instancemethod(_SnapTime.TUInt64_Save, None, TUInt64)
TUInt64.__iadd__ = new_instancemethod(_SnapTime.TUInt64___iadd__, None, TUInt64)
TUInt64.__isub__ = new_instancemethod(_SnapTime.TUInt64___isub__, None, TUInt64)
TUInt64.__imul__ = new_instancemethod(_SnapTime.TUInt64___imul__, None, TUInt64)
TUInt64.GetMemUsed = new_instancemethod(_SnapTime.TUInt64_GetMemUsed, None, TUInt64)
TUInt64.GetPrimHashCd = new_instancemethod(_SnapTime.TUInt64_GetPrimHashCd, None, TUInt64)
TUInt64.GetSecHashCd = new_instancemethod(_SnapTime.TUInt64_GetSecHashCd, None, TUInt64)
TUInt64.GetMsVal = new_instancemethod(_SnapTime.TUInt64_GetMsVal, None, TUInt64)
TUInt64.GetLsVal = new_instancemethod(_SnapTime.TUInt64_GetLsVal, None, TUInt64)
TUInt64_swigregister = _SnapTime.TUInt64_swigregister
TUInt64_swigregister(TUInt64)
TUInt64.Mn = _SnapTime.cvar.TUInt64_Mn
TUInt64.Mx = _SnapTime.cvar.TUInt64_Mx

def TUInt64_GetStr(*args):
    """
    GetStr() -> TStr
    TUInt64_GetStr(TUInt64 Int) -> TStr

    Parameters
    ----------
    Int: TUInt64 const &

    """
    return _SnapTime.TUInt64_GetStr(*args)

def TUInt64_GetHexStr(Int):
    """
    TUInt64_GetHexStr(TUInt64 Int) -> TStr

    Parameters
    ----------
    Int: TUInt64 const &

    """
    return _SnapTime.TUInt64_GetHexStr(Int)

def TUInt64_GetKiloStr(Val):
    """
    TUInt64_GetKiloStr(uint64 const & Val) -> TStr

    Parameters
    ----------
    Val: uint64 const &

    """
    return _SnapTime.TUInt64_GetKiloStr(Val)

def TUInt64_GetMegaStr(Val):
    """
    TUInt64_GetMegaStr(uint64 const & Val) -> TStr

    Parameters
    ----------
    Val: uint64 const &

    """
    return _SnapTime.TUInt64_GetMegaStr(Val)

class TFlt(object):
    """Proxy of C++ TFlt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_SnapTime.TFlt_Val_get, _SnapTime.TFlt_Val_set)
    Rnd = _swig_property(_SnapTime.TFlt_Rnd_get, _SnapTime.TFlt_Rnd_set)

    def __init__(self, *args):
        """
        __init__(TFlt self) -> TFlt
        __init__(TFlt self, double const & _Val) -> TFlt

        Parameters
        ----------
        _Val: double const &

        __init__(TFlt self, TSIn SIn) -> TFlt

        Parameters
        ----------
        SIn: TSIn &

        __init__(TFlt self, TSIn SIn, bool const & IsTxt) -> TFlt

        Parameters
        ----------
        SIn: TSIn &
        IsTxt: bool const &

        """
        _SnapTime.TFlt_swiginit(self, _SnapTime.new_TFlt(*args))

    def Load(self, SIn):
        """
        Load(TFlt self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TFlt_Load(self, SIn)


    def Save(self, *args):
        """
        Save(TFlt self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        Save(TFlt self, TSOut SOut, bool const & IsTxt)

        Parameters
        ----------
        SOut: TSOut &
        IsTxt: bool const &

        """
        return _SnapTime.TFlt_Save(self, *args)


    def __eq__(self, *args):
        """
        __eq__(TFlt self, TFlt Flt) -> bool

        Parameters
        ----------
        Flt: TFlt const &

        __eq__(TFlt self, double const & Flt) -> bool

        Parameters
        ----------
        Flt: double const &

        """
        return _SnapTime.TFlt___eq__(self, *args)


    def __ne__(self, Flt):
        """
        __ne__(TFlt self, double const & Flt) -> bool

        Parameters
        ----------
        Flt: double const &

        """
        return _SnapTime.TFlt___ne__(self, Flt)


    def __call__(self):
        """
        __call__(TFlt self) -> double

        Parameters
        ----------
        self: TFlt const *

        """
        return _SnapTime.TFlt___call__(self)


    def __iadd__(self, Flt):
        """
        __iadd__(TFlt self, double const & Flt) -> TFlt

        Parameters
        ----------
        Flt: double const &

        """
        return _SnapTime.TFlt___iadd__(self, Flt)


    def __isub__(self, Flt):
        """
        __isub__(TFlt self, double const & Flt) -> TFlt

        Parameters
        ----------
        Flt: double const &

        """
        return _SnapTime.TFlt___isub__(self, Flt)


    def __imul__(self, Flt):
        """
        __imul__(TFlt self, double const & Flt) -> TFlt

        Parameters
        ----------
        Flt: double const &

        """
        return _SnapTime.TFlt___imul__(self, Flt)


    def __itruediv__(self, *args):
        return _SnapTime.TFlt___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def GetMemUsed(self):
        """
        GetMemUsed(TFlt self) -> int

        Parameters
        ----------
        self: TFlt const *

        """
        return _SnapTime.TFlt_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TFlt self) -> int

        Parameters
        ----------
        self: TFlt const *

        """
        return _SnapTime.TFlt_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TFlt self) -> int

        Parameters
        ----------
        self: TFlt const *

        """
        return _SnapTime.TFlt_GetSecHashCd(self)


    def Abs(Flt):
        """
        Abs(double const & Flt) -> double

        Parameters
        ----------
        Flt: double const &

        """
        return _SnapTime.TFlt_Abs(Flt)

    Abs = staticmethod(Abs)

    def Sign(Flt):
        """
        Sign(double const & Flt) -> int

        Parameters
        ----------
        Flt: double const &

        """
        return _SnapTime.TFlt_Sign(Flt)

    Sign = staticmethod(Sign)

    def Round(Flt):
        """
        Round(double const & Flt) -> int

        Parameters
        ----------
        Flt: double const &

        """
        return _SnapTime.TFlt_Round(Flt)

    Round = staticmethod(Round)

    def GetRnd():
        """GetRnd() -> double"""
        return _SnapTime.TFlt_GetRnd()

    GetRnd = staticmethod(GetRnd)

    def Eq6(LFlt, RFlt):
        """
        Eq6(double const & LFlt, double const & RFlt) -> bool

        Parameters
        ----------
        LFlt: double const &
        RFlt: double const &

        """
        return _SnapTime.TFlt_Eq6(LFlt, RFlt)

    Eq6 = staticmethod(Eq6)

    def GetMn(*args):
        """
        GetMn(double const & Flt1, double const & Flt2) -> double

        Parameters
        ----------
        Flt1: double const &
        Flt2: double const &

        GetMn(double const & Flt1, double const & Flt2, double const & Flt3) -> double

        Parameters
        ----------
        Flt1: double const &
        Flt2: double const &
        Flt3: double const &

        GetMn(double const & Flt1, double const & Flt2, double const & Flt3, double const & Flt4) -> double

        Parameters
        ----------
        Flt1: double const &
        Flt2: double const &
        Flt3: double const &
        Flt4: double const &

        """
        return _SnapTime.TFlt_GetMn(*args)

    GetMn = staticmethod(GetMn)

    def GetMx(*args):
        """
        GetMx(double const & Flt1, double const & Flt2) -> double

        Parameters
        ----------
        Flt1: double const &
        Flt2: double const &

        GetMx(double const & Flt1, double const & Flt2, double const Flt3) -> double

        Parameters
        ----------
        Flt1: double const &
        Flt2: double const &
        Flt3: double const

        GetMx(double const & Flt1, double const & Flt2, double const Flt3, double const & Flt4) -> double

        Parameters
        ----------
        Flt1: double const &
        Flt2: double const &
        Flt3: double const
        Flt4: double const &

        """
        return _SnapTime.TFlt_GetMx(*args)

    GetMx = staticmethod(GetMx)

    def GetInRng(Val, Mn, Mx):
        """
        GetInRng(double const & Val, double const & Mn, double const & Mx) -> double

        Parameters
        ----------
        Val: double const &
        Mn: double const &
        Mx: double const &

        """
        return _SnapTime.TFlt_GetInRng(Val, Mn, Mx)

    GetInRng = staticmethod(GetInRng)

    def IsNum(self, *args):
        """
        IsNum(TFlt self, double const & Val) -> bool

        Parameters
        ----------
        Val: double const &

        IsNum(TFlt self) -> bool

        Parameters
        ----------
        self: TFlt const *

        """
        return _SnapTime.TFlt_IsNum(self, *args)


    def IsNan(self, *args):
        """
        IsNan(TFlt self, double const & Val) -> bool

        Parameters
        ----------
        Val: double const &

        IsNan(TFlt self) -> bool

        Parameters
        ----------
        self: TFlt const *

        """
        return _SnapTime.TFlt_IsNan(self, *args)


    def GetStr(*args):
        """
        GetStr() -> TStr
        GetStr(double const & Val, int const & Width=-1, int const & Prec=-1) -> TStr

        Parameters
        ----------
        Val: double const &
        Width: int const &
        Prec: int const &

        GetStr(double const & Val, int const & Width=-1) -> TStr

        Parameters
        ----------
        Val: double const &
        Width: int const &

        GetStr(double const & Val) -> TStr

        Parameters
        ----------
        Val: double const &

        GetStr(TFlt Flt, int const & Width=-1, int const & Prec=-1) -> TStr

        Parameters
        ----------
        Flt: TFlt const &
        Width: int const &
        Prec: int const &

        GetStr(TFlt Flt, int const & Width=-1) -> TStr

        Parameters
        ----------
        Flt: TFlt const &
        Width: int const &

        GetStr(TFlt Flt) -> TStr

        Parameters
        ----------
        Flt: TFlt const &

        GetStr(double const & Val, char const * FmtStr) -> TStr

        Parameters
        ----------
        Val: double const &
        FmtStr: char const *

        GetStr(double const & Val, TStr FmtStr) -> TStr

        Parameters
        ----------
        Val: double const &
        FmtStr: TStr const &

        """
        return _SnapTime.TFlt_GetStr(*args)

    GetStr = staticmethod(GetStr)

    def GetPrcStr(RelVal, FullVal):
        """
        GetPrcStr(double const & RelVal, double const & FullVal) -> TStr

        Parameters
        ----------
        RelVal: double const &
        FullVal: double const &

        """
        return _SnapTime.TFlt_GetPrcStr(RelVal, FullVal)

    GetPrcStr = staticmethod(GetPrcStr)

    def GetKiloStr(Val):
        """
        GetKiloStr(double const & Val) -> TStr

        Parameters
        ----------
        Val: double const &

        """
        return _SnapTime.TFlt_GetKiloStr(Val)

    GetKiloStr = staticmethod(GetKiloStr)

    def GetMegaStr(Val):
        """
        GetMegaStr(double const & Val) -> TStr

        Parameters
        ----------
        Val: double const &

        """
        return _SnapTime.TFlt_GetMegaStr(Val)

    GetMegaStr = staticmethod(GetMegaStr)

    def GetGigaStr(Val):
        """
        GetGigaStr(double const & Val) -> TStr

        Parameters
        ----------
        Val: double const &

        """
        return _SnapTime.TFlt_GetGigaStr(Val)

    GetGigaStr = staticmethod(GetGigaStr)
    __swig_destroy__ = _SnapTime.delete_TFlt
TFlt.Load = new_instancemethod(_SnapTime.TFlt_Load, None, TFlt)
TFlt.Save = new_instancemethod(_SnapTime.TFlt_Save, None, TFlt)
TFlt.__eq__ = new_instancemethod(_SnapTime.TFlt___eq__, None, TFlt)
TFlt.__ne__ = new_instancemethod(_SnapTime.TFlt___ne__, None, TFlt)
TFlt.__call__ = new_instancemethod(_SnapTime.TFlt___call__, None, TFlt)
TFlt.__iadd__ = new_instancemethod(_SnapTime.TFlt___iadd__, None, TFlt)
TFlt.__isub__ = new_instancemethod(_SnapTime.TFlt___isub__, None, TFlt)
TFlt.__imul__ = new_instancemethod(_SnapTime.TFlt___imul__, None, TFlt)
TFlt.GetMemUsed = new_instancemethod(_SnapTime.TFlt_GetMemUsed, None, TFlt)
TFlt.GetPrimHashCd = new_instancemethod(_SnapTime.TFlt_GetPrimHashCd, None, TFlt)
TFlt.GetSecHashCd = new_instancemethod(_SnapTime.TFlt_GetSecHashCd, None, TFlt)
TFlt.IsNum = new_instancemethod(_SnapTime.TFlt_IsNum, None, TFlt)
TFlt.IsNan = new_instancemethod(_SnapTime.TFlt_IsNan, None, TFlt)
TFlt_swigregister = _SnapTime.TFlt_swigregister
TFlt_swigregister(TFlt)
TFlt.Mn = _SnapTime.cvar.TFlt_Mn
TFlt.Mx = _SnapTime.cvar.TFlt_Mx
TFlt.NInf = _SnapTime.cvar.TFlt_NInf
TFlt.PInf = _SnapTime.cvar.TFlt_PInf
TFlt.Eps = _SnapTime.cvar.TFlt_Eps
TFlt.EpsHalf = _SnapTime.cvar.TFlt_EpsHalf

def TFlt_Abs(Flt):
    """
    TFlt_Abs(double const & Flt) -> double

    Parameters
    ----------
    Flt: double const &

    """
    return _SnapTime.TFlt_Abs(Flt)

def TFlt_Sign(Flt):
    """
    TFlt_Sign(double const & Flt) -> int

    Parameters
    ----------
    Flt: double const &

    """
    return _SnapTime.TFlt_Sign(Flt)

def TFlt_Round(Flt):
    """
    TFlt_Round(double const & Flt) -> int

    Parameters
    ----------
    Flt: double const &

    """
    return _SnapTime.TFlt_Round(Flt)

def TFlt_GetRnd():
    """TFlt_GetRnd() -> double"""
    return _SnapTime.TFlt_GetRnd()

def TFlt_Eq6(LFlt, RFlt):
    """
    TFlt_Eq6(double const & LFlt, double const & RFlt) -> bool

    Parameters
    ----------
    LFlt: double const &
    RFlt: double const &

    """
    return _SnapTime.TFlt_Eq6(LFlt, RFlt)

def TFlt_GetMn(*args):
    """
    GetMn(double const & Flt1, double const & Flt2) -> double

    Parameters
    ----------
    Flt1: double const &
    Flt2: double const &

    GetMn(double const & Flt1, double const & Flt2, double const & Flt3) -> double

    Parameters
    ----------
    Flt1: double const &
    Flt2: double const &
    Flt3: double const &

    TFlt_GetMn(double const & Flt1, double const & Flt2, double const & Flt3, double const & Flt4) -> double

    Parameters
    ----------
    Flt1: double const &
    Flt2: double const &
    Flt3: double const &
    Flt4: double const &

    """
    return _SnapTime.TFlt_GetMn(*args)

def TFlt_GetMx(*args):
    """
    GetMx(double const & Flt1, double const & Flt2) -> double

    Parameters
    ----------
    Flt1: double const &
    Flt2: double const &

    GetMx(double const & Flt1, double const & Flt2, double const Flt3) -> double

    Parameters
    ----------
    Flt1: double const &
    Flt2: double const &
    Flt3: double const

    TFlt_GetMx(double const & Flt1, double const & Flt2, double const Flt3, double const & Flt4) -> double

    Parameters
    ----------
    Flt1: double const &
    Flt2: double const &
    Flt3: double const
    Flt4: double const &

    """
    return _SnapTime.TFlt_GetMx(*args)

def TFlt_GetInRng(Val, Mn, Mx):
    """
    TFlt_GetInRng(double const & Val, double const & Mn, double const & Mx) -> double

    Parameters
    ----------
    Val: double const &
    Mn: double const &
    Mx: double const &

    """
    return _SnapTime.TFlt_GetInRng(Val, Mn, Mx)

def TFlt_GetStr(*args):
    """
    GetStr() -> TStr
    GetStr(double const & Val, int const & Width=-1, int const & Prec=-1) -> TStr

    Parameters
    ----------
    Val: double const &
    Width: int const &
    Prec: int const &

    GetStr(double const & Val, int const & Width=-1) -> TStr

    Parameters
    ----------
    Val: double const &
    Width: int const &

    GetStr(double const & Val) -> TStr

    Parameters
    ----------
    Val: double const &

    GetStr(TFlt Flt, int const & Width=-1, int const & Prec=-1) -> TStr

    Parameters
    ----------
    Flt: TFlt const &
    Width: int const &
    Prec: int const &

    GetStr(TFlt Flt, int const & Width=-1) -> TStr

    Parameters
    ----------
    Flt: TFlt const &
    Width: int const &

    GetStr(TFlt Flt) -> TStr

    Parameters
    ----------
    Flt: TFlt const &

    GetStr(double const & Val, char const * FmtStr) -> TStr

    Parameters
    ----------
    Val: double const &
    FmtStr: char const *

    TFlt_GetStr(double const & Val, TStr FmtStr) -> TStr

    Parameters
    ----------
    Val: double const &
    FmtStr: TStr const &

    """
    return _SnapTime.TFlt_GetStr(*args)

def TFlt_GetPrcStr(RelVal, FullVal):
    """
    TFlt_GetPrcStr(double const & RelVal, double const & FullVal) -> TStr

    Parameters
    ----------
    RelVal: double const &
    FullVal: double const &

    """
    return _SnapTime.TFlt_GetPrcStr(RelVal, FullVal)

def TFlt_GetKiloStr(Val):
    """
    TFlt_GetKiloStr(double const & Val) -> TStr

    Parameters
    ----------
    Val: double const &

    """
    return _SnapTime.TFlt_GetKiloStr(Val)

def TFlt_GetMegaStr(Val):
    """
    TFlt_GetMegaStr(double const & Val) -> TStr

    Parameters
    ----------
    Val: double const &

    """
    return _SnapTime.TFlt_GetMegaStr(Val)

def TFlt_GetGigaStr(Val):
    """
    TFlt_GetGigaStr(double const & Val) -> TStr

    Parameters
    ----------
    Val: double const &

    """
    return _SnapTime.TFlt_GetGigaStr(Val)

class TAscFlt(TFlt):
    """Proxy of C++ TAscFlt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TAscFlt self) -> TAscFlt
        __init__(TAscFlt self, double const & Val) -> TAscFlt

        Parameters
        ----------
        Val: double const &

        __init__(TAscFlt self, TSIn SIn) -> TAscFlt

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TAscFlt_swiginit(self, _SnapTime.new_TAscFlt(*args))

    def Save(self, SOut):
        """
        Save(TAscFlt self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TAscFlt_Save(self, SOut)

    __swig_destroy__ = _SnapTime.delete_TAscFlt
TAscFlt.Save = new_instancemethod(_SnapTime.TAscFlt_Save, None, TAscFlt)
TAscFlt_swigregister = _SnapTime.TAscFlt_swigregister
TAscFlt_swigregister(TAscFlt)

class TSFlt(object):
    """Proxy of C++ TSFlt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_SnapTime.TSFlt_Val_get, _SnapTime.TSFlt_Val_set)

    def __init__(self, *args):
        """
        __init__(TSFlt self) -> TSFlt
        __init__(TSFlt self, sdouble const & _Val) -> TSFlt

        Parameters
        ----------
        _Val: sdouble const &

        __init__(TSFlt self, TSIn SIn) -> TSFlt

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TSFlt_swiginit(self, _SnapTime.new_TSFlt(*args))

    def Save(self, SOut):
        """
        Save(TSFlt self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TSFlt_Save(self, SOut)


    def __eq__(self, *args):
        """
        __eq__(TSFlt self, TSFlt SFlt) -> bool

        Parameters
        ----------
        SFlt: TSFlt const &

        __eq__(TSFlt self, double const & Flt) -> bool

        Parameters
        ----------
        Flt: double const &

        """
        return _SnapTime.TSFlt___eq__(self, *args)


    def __ne__(self, Flt):
        """
        __ne__(TSFlt self, double const & Flt) -> bool

        Parameters
        ----------
        Flt: double const &

        """
        return _SnapTime.TSFlt___ne__(self, Flt)


    def __lt__(self, SFlt):
        """
        __lt__(TSFlt self, TSFlt SFlt) -> bool

        Parameters
        ----------
        SFlt: TSFlt const &

        """
        return _SnapTime.TSFlt___lt__(self, SFlt)


    def __call__(self):
        """
        __call__(TSFlt self) -> sdouble

        Parameters
        ----------
        self: TSFlt const *

        """
        return _SnapTime.TSFlt___call__(self)


    def __iadd__(self, SFlt):
        """
        __iadd__(TSFlt self, double const & SFlt) -> TSFlt

        Parameters
        ----------
        SFlt: double const &

        """
        return _SnapTime.TSFlt___iadd__(self, SFlt)


    def __isub__(self, SFlt):
        """
        __isub__(TSFlt self, double const & SFlt) -> TSFlt

        Parameters
        ----------
        SFlt: double const &

        """
        return _SnapTime.TSFlt___isub__(self, SFlt)


    def __imul__(self, SFlt):
        """
        __imul__(TSFlt self, double const & SFlt) -> TSFlt

        Parameters
        ----------
        SFlt: double const &

        """
        return _SnapTime.TSFlt___imul__(self, SFlt)


    def __itruediv__(self, *args):
        return _SnapTime.TSFlt___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def GetMemUsed(self):
        """
        GetMemUsed(TSFlt self) -> int

        Parameters
        ----------
        self: TSFlt const *

        """
        return _SnapTime.TSFlt_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TSFlt self) -> int

        Parameters
        ----------
        self: TSFlt const *

        """
        return _SnapTime.TSFlt_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TSFlt self) -> int

        Parameters
        ----------
        self: TSFlt const *

        """
        return _SnapTime.TSFlt_GetSecHashCd(self)

    __swig_destroy__ = _SnapTime.delete_TSFlt
TSFlt.Save = new_instancemethod(_SnapTime.TSFlt_Save, None, TSFlt)
TSFlt.__eq__ = new_instancemethod(_SnapTime.TSFlt___eq__, None, TSFlt)
TSFlt.__ne__ = new_instancemethod(_SnapTime.TSFlt___ne__, None, TSFlt)
TSFlt.__lt__ = new_instancemethod(_SnapTime.TSFlt___lt__, None, TSFlt)
TSFlt.__call__ = new_instancemethod(_SnapTime.TSFlt___call__, None, TSFlt)
TSFlt.__iadd__ = new_instancemethod(_SnapTime.TSFlt___iadd__, None, TSFlt)
TSFlt.__isub__ = new_instancemethod(_SnapTime.TSFlt___isub__, None, TSFlt)
TSFlt.__imul__ = new_instancemethod(_SnapTime.TSFlt___imul__, None, TSFlt)
TSFlt.GetMemUsed = new_instancemethod(_SnapTime.TSFlt_GetMemUsed, None, TSFlt)
TSFlt.GetPrimHashCd = new_instancemethod(_SnapTime.TSFlt_GetPrimHashCd, None, TSFlt)
TSFlt.GetSecHashCd = new_instancemethod(_SnapTime.TSFlt_GetSecHashCd, None, TSFlt)
TSFlt_swigregister = _SnapTime.TSFlt_swigregister
TSFlt_swigregister(TSFlt)
TSFlt.Mn = _SnapTime.cvar.TSFlt_Mn
TSFlt.Mx = _SnapTime.cvar.TSFlt_Mx

class TLFlt(object):
    """Proxy of C++ TLFlt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_SnapTime.TLFlt_Val_get, _SnapTime.TLFlt_Val_set)

    def __init__(self, *args):
        """
        __init__(TLFlt self) -> TLFlt
        __init__(TLFlt self, ldouble const & _Val) -> TLFlt

        Parameters
        ----------
        _Val: ldouble const &

        __init__(TLFlt self, TSIn SIn) -> TLFlt

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TLFlt_swiginit(self, _SnapTime.new_TLFlt(*args))

    def Save(self, SOut):
        """
        Save(TLFlt self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TLFlt_Save(self, SOut)


    def __eq__(self, *args):
        """
        __eq__(TLFlt self, TLFlt LFlt) -> bool

        Parameters
        ----------
        LFlt: TLFlt const &

        __eq__(TLFlt self, ldouble const & LFlt) -> bool

        Parameters
        ----------
        LFlt: ldouble const &

        """
        return _SnapTime.TLFlt___eq__(self, *args)


    def __ne__(self, LFlt):
        """
        __ne__(TLFlt self, ldouble const & LFlt) -> bool

        Parameters
        ----------
        LFlt: ldouble const &

        """
        return _SnapTime.TLFlt___ne__(self, LFlt)


    def __lt__(self, LFlt):
        """
        __lt__(TLFlt self, TLFlt LFlt) -> bool

        Parameters
        ----------
        LFlt: TLFlt const &

        """
        return _SnapTime.TLFlt___lt__(self, LFlt)


    def __call__(self):
        """
        __call__(TLFlt self) -> ldouble

        Parameters
        ----------
        self: TLFlt const *

        """
        return _SnapTime.TLFlt___call__(self)


    def __iadd__(self, LFlt):
        """
        __iadd__(TLFlt self, ldouble const & LFlt) -> TLFlt

        Parameters
        ----------
        LFlt: ldouble const &

        """
        return _SnapTime.TLFlt___iadd__(self, LFlt)


    def __isub__(self, LFlt):
        """
        __isub__(TLFlt self, ldouble const & LFlt) -> TLFlt

        Parameters
        ----------
        LFlt: ldouble const &

        """
        return _SnapTime.TLFlt___isub__(self, LFlt)


    def GetMemUsed(self):
        """
        GetMemUsed(TLFlt self) -> int

        Parameters
        ----------
        self: TLFlt const *

        """
        return _SnapTime.TLFlt_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TLFlt self) -> int

        Parameters
        ----------
        self: TLFlt const *

        """
        return _SnapTime.TLFlt_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TLFlt self) -> int

        Parameters
        ----------
        self: TLFlt const *

        """
        return _SnapTime.TLFlt_GetSecHashCd(self)


    def GetStr(*args):
        """
        GetStr(ldouble const & Val, int const & Width=-1, int const & Prec=-1) -> TStr

        Parameters
        ----------
        Val: ldouble const &
        Width: int const &
        Prec: int const &

        GetStr(ldouble const & Val, int const & Width=-1) -> TStr

        Parameters
        ----------
        Val: ldouble const &
        Width: int const &

        GetStr(ldouble const & Val) -> TStr

        Parameters
        ----------
        Val: ldouble const &

        GetStr(TLFlt LFlt, int const & Width=-1, int const & Prec=-1) -> TStr

        Parameters
        ----------
        LFlt: TLFlt const &
        Width: int const &
        Prec: int const &

        GetStr(TLFlt LFlt, int const & Width=-1) -> TStr

        Parameters
        ----------
        LFlt: TLFlt const &
        Width: int const &

        GetStr(TLFlt LFlt) -> TStr

        Parameters
        ----------
        LFlt: TLFlt const &

        GetStr(ldouble const & Val, char const * FmtStr) -> TStr

        Parameters
        ----------
        Val: ldouble const &
        FmtStr: char const *

        GetStr(ldouble const & Val, TStr FmtStr) -> TStr

        Parameters
        ----------
        Val: ldouble const &
        FmtStr: TStr const &

        """
        return _SnapTime.TLFlt_GetStr(*args)

    GetStr = staticmethod(GetStr)
    __swig_destroy__ = _SnapTime.delete_TLFlt
TLFlt.Save = new_instancemethod(_SnapTime.TLFlt_Save, None, TLFlt)
TLFlt.__eq__ = new_instancemethod(_SnapTime.TLFlt___eq__, None, TLFlt)
TLFlt.__ne__ = new_instancemethod(_SnapTime.TLFlt___ne__, None, TLFlt)
TLFlt.__lt__ = new_instancemethod(_SnapTime.TLFlt___lt__, None, TLFlt)
TLFlt.__call__ = new_instancemethod(_SnapTime.TLFlt___call__, None, TLFlt)
TLFlt.__iadd__ = new_instancemethod(_SnapTime.TLFlt___iadd__, None, TLFlt)
TLFlt.__isub__ = new_instancemethod(_SnapTime.TLFlt___isub__, None, TLFlt)
TLFlt.GetMemUsed = new_instancemethod(_SnapTime.TLFlt_GetMemUsed, None, TLFlt)
TLFlt.GetPrimHashCd = new_instancemethod(_SnapTime.TLFlt_GetPrimHashCd, None, TLFlt)
TLFlt.GetSecHashCd = new_instancemethod(_SnapTime.TLFlt_GetSecHashCd, None, TLFlt)
TLFlt_swigregister = _SnapTime.TLFlt_swigregister
TLFlt_swigregister(TLFlt)
TLFlt.Mn = _SnapTime.cvar.TLFlt_Mn
TLFlt.Mx = _SnapTime.cvar.TLFlt_Mx

def TLFlt_GetStr(*args):
    """
    GetStr(ldouble const & Val, int const & Width=-1, int const & Prec=-1) -> TStr

    Parameters
    ----------
    Val: ldouble const &
    Width: int const &
    Prec: int const &

    GetStr(ldouble const & Val, int const & Width=-1) -> TStr

    Parameters
    ----------
    Val: ldouble const &
    Width: int const &

    GetStr(ldouble const & Val) -> TStr

    Parameters
    ----------
    Val: ldouble const &

    GetStr(TLFlt LFlt, int const & Width=-1, int const & Prec=-1) -> TStr

    Parameters
    ----------
    LFlt: TLFlt const &
    Width: int const &
    Prec: int const &

    GetStr(TLFlt LFlt, int const & Width=-1) -> TStr

    Parameters
    ----------
    LFlt: TLFlt const &
    Width: int const &

    GetStr(TLFlt LFlt) -> TStr

    Parameters
    ----------
    LFlt: TLFlt const &

    GetStr(ldouble const & Val, char const * FmtStr) -> TStr

    Parameters
    ----------
    Val: ldouble const &
    FmtStr: char const *

    TLFlt_GetStr(ldouble const & Val, TStr FmtStr) -> TStr

    Parameters
    ----------
    Val: ldouble const &
    FmtStr: TStr const &

    """
    return _SnapTime.TLFlt_GetStr(*args)

class TFltRect(object):
    """Proxy of C++ TFltRect class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MnX = _swig_property(_SnapTime.TFltRect_MnX_get, _SnapTime.TFltRect_MnX_set)
    MnY = _swig_property(_SnapTime.TFltRect_MnY_get, _SnapTime.TFltRect_MnY_set)
    MxX = _swig_property(_SnapTime.TFltRect_MxX_get, _SnapTime.TFltRect_MxX_set)
    MxY = _swig_property(_SnapTime.TFltRect_MxY_get, _SnapTime.TFltRect_MxY_set)

    def __init__(self, *args):
        """
        __init__(TFltRect self) -> TFltRect
        __init__(TFltRect self, TFltRect FltRect) -> TFltRect

        Parameters
        ----------
        FltRect: TFltRect const &

        __init__(TFltRect self, double const & _MnX, double const & _MnY, double const & _MxX, double const & _MxY) -> TFltRect

        Parameters
        ----------
        _MnX: double const &
        _MnY: double const &
        _MxX: double const &
        _MxY: double const &

        __init__(TFltRect self, TSIn SIn) -> TFltRect

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TFltRect_swiginit(self, _SnapTime.new_TFltRect(*args))

    def Save(self, SOut):
        """
        Save(TFltRect self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TFltRect_Save(self, SOut)


    def GetMnX(self):
        """
        GetMnX(TFltRect self) -> double

        Parameters
        ----------
        self: TFltRect const *

        """
        return _SnapTime.TFltRect_GetMnX(self)


    def GetMnY(self):
        """
        GetMnY(TFltRect self) -> double

        Parameters
        ----------
        self: TFltRect const *

        """
        return _SnapTime.TFltRect_GetMnY(self)


    def GetMxX(self):
        """
        GetMxX(TFltRect self) -> double

        Parameters
        ----------
        self: TFltRect const *

        """
        return _SnapTime.TFltRect_GetMxX(self)


    def GetMxY(self):
        """
        GetMxY(TFltRect self) -> double

        Parameters
        ----------
        self: TFltRect const *

        """
        return _SnapTime.TFltRect_GetMxY(self)


    def GetXLen(self):
        """
        GetXLen(TFltRect self) -> double

        Parameters
        ----------
        self: TFltRect const *

        """
        return _SnapTime.TFltRect_GetXLen(self)


    def GetYLen(self):
        """
        GetYLen(TFltRect self) -> double

        Parameters
        ----------
        self: TFltRect const *

        """
        return _SnapTime.TFltRect_GetYLen(self)


    def GetXCenter(self):
        """
        GetXCenter(TFltRect self) -> double

        Parameters
        ----------
        self: TFltRect const *

        """
        return _SnapTime.TFltRect_GetXCenter(self)


    def GetYCenter(self):
        """
        GetYCenter(TFltRect self) -> double

        Parameters
        ----------
        self: TFltRect const *

        """
        return _SnapTime.TFltRect_GetYCenter(self)


    def IsXYIn(self, X, Y):
        """
        IsXYIn(TFltRect self, double const & X, double const & Y) -> bool

        Parameters
        ----------
        X: double const &
        Y: double const &

        """
        return _SnapTime.TFltRect_IsXYIn(self, X, Y)


    def Intersection(Rect1, Rect2):
        """
        Intersection(TFltRect Rect1, TFltRect Rect2) -> bool

        Parameters
        ----------
        Rect1: TFltRect const &
        Rect2: TFltRect const &

        """
        return _SnapTime.TFltRect_Intersection(Rect1, Rect2)

    Intersection = staticmethod(Intersection)

    def GetStr(self):
        """
        GetStr(TFltRect self) -> TStr

        Parameters
        ----------
        self: TFltRect const *

        """
        return _SnapTime.TFltRect_GetStr(self)

    __swig_destroy__ = _SnapTime.delete_TFltRect
TFltRect.Save = new_instancemethod(_SnapTime.TFltRect_Save, None, TFltRect)
TFltRect.GetMnX = new_instancemethod(_SnapTime.TFltRect_GetMnX, None, TFltRect)
TFltRect.GetMnY = new_instancemethod(_SnapTime.TFltRect_GetMnY, None, TFltRect)
TFltRect.GetMxX = new_instancemethod(_SnapTime.TFltRect_GetMxX, None, TFltRect)
TFltRect.GetMxY = new_instancemethod(_SnapTime.TFltRect_GetMxY, None, TFltRect)
TFltRect.GetXLen = new_instancemethod(_SnapTime.TFltRect_GetXLen, None, TFltRect)
TFltRect.GetYLen = new_instancemethod(_SnapTime.TFltRect_GetYLen, None, TFltRect)
TFltRect.GetXCenter = new_instancemethod(_SnapTime.TFltRect_GetXCenter, None, TFltRect)
TFltRect.GetYCenter = new_instancemethod(_SnapTime.TFltRect_GetYCenter, None, TFltRect)
TFltRect.IsXYIn = new_instancemethod(_SnapTime.TFltRect_IsXYIn, None, TFltRect)
TFltRect.GetStr = new_instancemethod(_SnapTime.TFltRect_GetStr, None, TFltRect)
TFltRect_swigregister = _SnapTime.TFltRect_swigregister
TFltRect_swigregister(TFltRect)

def TFltRect_Intersection(Rect1, Rect2):
    """
    TFltRect_Intersection(TFltRect Rect1, TFltRect Rect2) -> bool

    Parameters
    ----------
    Rect1: TFltRect const &
    Rect2: TFltRect const &

    """
    return _SnapTime.TFltRect_Intersection(Rect1, Rect2)

class TCs(object):
    """Proxy of C++ TCs class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TCs self) -> TCs
        __init__(TCs self, TCs Cs) -> TCs

        Parameters
        ----------
        Cs: TCs const &

        __init__(TCs self, int const & Int) -> TCs

        Parameters
        ----------
        Int: int const &

        """
        _SnapTime.TCs_swiginit(self, _SnapTime.new_TCs(*args))

    def __eq__(self, Cs):
        """
        __eq__(TCs self, TCs Cs) -> bool

        Parameters
        ----------
        Cs: TCs const &

        """
        return _SnapTime.TCs___eq__(self, Cs)


    def __iadd__(self, *args):
        """
        __iadd__(TCs self, TCs Cs) -> TCs

        Parameters
        ----------
        Cs: TCs const &

        __iadd__(TCs self, char const & Ch) -> TCs

        Parameters
        ----------
        Ch: char const &

        __iadd__(TCs self, int const & Int) -> TCs

        Parameters
        ----------
        Int: int const &

        """
        return _SnapTime.TCs___iadd__(self, *args)


    def Get(self):
        """
        Get(TCs self) -> int

        Parameters
        ----------
        self: TCs const *

        """
        return _SnapTime.TCs_Get(self)


    def GetCsFromBf(Bf, BfL):
        """
        GetCsFromBf(char * Bf, int const & BfL) -> TCs

        Parameters
        ----------
        Bf: char *
        BfL: int const &

        """
        return _SnapTime.TCs_GetCsFromBf(Bf, BfL)

    GetCsFromBf = staticmethod(GetCsFromBf)
    __swig_destroy__ = _SnapTime.delete_TCs
TCs.__eq__ = new_instancemethod(_SnapTime.TCs___eq__, None, TCs)
TCs.__iadd__ = new_instancemethod(_SnapTime.TCs___iadd__, None, TCs)
TCs.Get = new_instancemethod(_SnapTime.TCs_Get, None, TCs)
TCs_swigregister = _SnapTime.TCs_swigregister
TCs_swigregister(TCs)

def TCs_GetCsFromBf(Bf, BfL):
    """
    TCs_GetCsFromBf(char * Bf, int const & BfL) -> TCs

    Parameters
    ----------
    Bf: char *
    BfL: int const &

    """
    return _SnapTime.TCs_GetCsFromBf(Bf, BfL)

class TSOutMnp(object):
    """Proxy of C++ TSOutMnp class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def __call__(self, SOut):
        """
        __call__(TSOutMnp self, TSOut SOut) -> TSOut

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TSOutMnp___call__(self, SOut)

    __swig_destroy__ = _SnapTime.delete_TSOutMnp
TSOutMnp.__call__ = new_instancemethod(_SnapTime.TSOutMnp___call__, None, TSOutMnp)
TSOutMnp_swigregister = _SnapTime.TSOutMnp_swigregister
TSOutMnp_swigregister(TSOutMnp)

class TSBase(object):
    """Proxy of C++ TSBase class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Nm):
        """
        __init__(TSBase self, TSStr Nm) -> TSBase

        Parameters
        ----------
        Nm: TSStr const &

        """
        _SnapTime.TSBase_swiginit(self, _SnapTime.new_TSBase(Nm))
    __swig_destroy__ = _SnapTime.delete_TSBase

    def GetSNm(self):
        """
        GetSNm(TSBase self) -> TStr

        Parameters
        ----------
        self: TSBase const *

        """
        return _SnapTime.TSBase_GetSNm(self)

TSBase.GetSNm = new_instancemethod(_SnapTime.TSBase_GetSNm, None, TSBase)
TSBase_swigregister = _SnapTime.TSBase_swigregister
TSBase_swigregister(TSBase)

class TSIn(TSBase):
    """Proxy of C++ TSIn class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TSIn

    def Eof(self):
        """
        Eof(TSIn self) -> bool

        Parameters
        ----------
        self: TSIn *

        """
        return _SnapTime.TSIn_Eof(self)


    def Len(self):
        """
        Len(TSIn self) -> int

        Parameters
        ----------
        self: TSIn const *

        """
        return _SnapTime.TSIn_Len(self)


    def GetCh(self):
        """
        GetCh(TSIn self) -> char

        Parameters
        ----------
        self: TSIn *

        """
        return _SnapTime.TSIn_GetCh(self)


    def PeekCh(self):
        """
        PeekCh(TSIn self) -> char

        Parameters
        ----------
        self: TSIn *

        """
        return _SnapTime.TSIn_PeekCh(self)


    def GetBf(self, Bf, BfL):
        """
        GetBf(TSIn self, void const * Bf, TSize const & BfL) -> int

        Parameters
        ----------
        Bf: void const *
        BfL: TSize const &

        """
        return _SnapTime.TSIn_GetBf(self, Bf, BfL)


    def GetNextLnBf(self, LnChA):
        """
        GetNextLnBf(TSIn self, TChA LnChA) -> bool

        Parameters
        ----------
        LnChA: TChA &

        """
        return _SnapTime.TSIn_GetNextLnBf(self, LnChA)


    def Reset(self):
        """
        Reset(TSIn self)

        Parameters
        ----------
        self: TSIn *

        """
        return _SnapTime.TSIn_Reset(self)


    def IsFastMode(self):
        """
        IsFastMode(TSIn self) -> bool

        Parameters
        ----------
        self: TSIn const *

        """
        return _SnapTime.TSIn_IsFastMode(self)


    def SetFastMode(self, _FastMode):
        """
        SetFastMode(TSIn self, bool const & _FastMode)

        Parameters
        ----------
        _FastMode: bool const &

        """
        return _SnapTime.TSIn_SetFastMode(self, _FastMode)


    def LoadCs(self):
        """
        LoadCs(TSIn self)

        Parameters
        ----------
        self: TSIn *

        """
        return _SnapTime.TSIn_LoadCs(self)


    def LoadBf(self, Bf, BfL):
        """
        LoadBf(TSIn self, void const * Bf, TSize const & BfL)

        Parameters
        ----------
        Bf: void const *
        BfL: TSize const &

        """
        return _SnapTime.TSIn_LoadBf(self, Bf, BfL)


    def LoadNewBf(self, BfL):
        """
        LoadNewBf(TSIn self, int const & BfL) -> void *

        Parameters
        ----------
        BfL: int const &

        """
        return _SnapTime.TSIn_LoadNewBf(self, BfL)


    def Load(self, *args):
        """
        Load(TSIn self, bool & Bool)

        Parameters
        ----------
        Bool: bool &

        Load(TSIn self, uchar & UCh)

        Parameters
        ----------
        UCh: uchar &

        Load(TSIn self, char & Ch)

        Parameters
        ----------
        Ch: char &

        Load(TSIn self, short & Short)

        Parameters
        ----------
        Short: short &

        Load(TSIn self, ushort & UShort)

        Parameters
        ----------
        UShort: ushort &

        Load(TSIn self, int & Int)

        Parameters
        ----------
        Int: int &

        Load(TSIn self, uint & UInt)

        Parameters
        ----------
        UInt: uint &

        Load(TSIn self, int64 & Int)

        Parameters
        ----------
        Int: int64 &

        Load(TSIn self, uint64 & UInt)

        Parameters
        ----------
        UInt: uint64 &

        Load(TSIn self, double & Flt)

        Parameters
        ----------
        Flt: double &

        Load(TSIn self, sdouble & SFlt)

        Parameters
        ----------
        SFlt: sdouble &

        Load(TSIn self, ldouble & LFlt)

        Parameters
        ----------
        LFlt: ldouble &

        Load(TSIn self, char *& CStr, int const & MxCStrLen, int const & CStrLen)

        Parameters
        ----------
        CStr: char *&
        MxCStrLen: int const &
        CStrLen: int const &

        Load(TSIn self, char *& CStr)

        Parameters
        ----------
        CStr: char *&

        """
        return _SnapTime.TSIn_Load(self, *args)


    def __rshift__(self, *args):
        """
        __rshift__(TSIn self, bool & Bool) -> TSIn

        Parameters
        ----------
        Bool: bool &

        __rshift__(TSIn self, uchar & UCh) -> TSIn

        Parameters
        ----------
        UCh: uchar &

        __rshift__(TSIn self, char & Ch) -> TSIn

        Parameters
        ----------
        Ch: char &

        __rshift__(TSIn self, short & Sh) -> TSIn

        Parameters
        ----------
        Sh: short &

        __rshift__(TSIn self, ushort & USh) -> TSIn

        Parameters
        ----------
        USh: ushort &

        __rshift__(TSIn self, int & Int) -> TSIn

        Parameters
        ----------
        Int: int &

        __rshift__(TSIn self, uint & UInt) -> TSIn

        Parameters
        ----------
        UInt: uint &

        __rshift__(TSIn self, int64 & Int) -> TSIn

        Parameters
        ----------
        Int: int64 &

        __rshift__(TSIn self, uint64 & UInt) -> TSIn

        Parameters
        ----------
        UInt: uint64 &

        __rshift__(TSIn self, float & Flt) -> TSIn

        Parameters
        ----------
        Flt: float &

        __rshift__(TSIn self, double & Double) -> TSIn

        Parameters
        ----------
        Double: double &

        __rshift__(TSIn self, long double & LDouble) -> TSIn

        Parameters
        ----------
        LDouble: long double &

        """
        return _SnapTime.TSIn___rshift__(self, *args)


    def GetNextLn(self, *args):
        """
        GetNextLn(TSIn self, TStr LnStr) -> bool

        Parameters
        ----------
        LnStr: TStr &

        GetNextLn(TSIn self, TChA LnChA) -> bool

        Parameters
        ----------
        LnChA: TChA &

        """
        return _SnapTime.TSIn_GetNextLn(self, *args)

TSIn.Eof = new_instancemethod(_SnapTime.TSIn_Eof, None, TSIn)
TSIn.Len = new_instancemethod(_SnapTime.TSIn_Len, None, TSIn)
TSIn.GetCh = new_instancemethod(_SnapTime.TSIn_GetCh, None, TSIn)
TSIn.PeekCh = new_instancemethod(_SnapTime.TSIn_PeekCh, None, TSIn)
TSIn.GetBf = new_instancemethod(_SnapTime.TSIn_GetBf, None, TSIn)
TSIn.GetNextLnBf = new_instancemethod(_SnapTime.TSIn_GetNextLnBf, None, TSIn)
TSIn.Reset = new_instancemethod(_SnapTime.TSIn_Reset, None, TSIn)
TSIn.IsFastMode = new_instancemethod(_SnapTime.TSIn_IsFastMode, None, TSIn)
TSIn.SetFastMode = new_instancemethod(_SnapTime.TSIn_SetFastMode, None, TSIn)
TSIn.LoadCs = new_instancemethod(_SnapTime.TSIn_LoadCs, None, TSIn)
TSIn.LoadBf = new_instancemethod(_SnapTime.TSIn_LoadBf, None, TSIn)
TSIn.LoadNewBf = new_instancemethod(_SnapTime.TSIn_LoadNewBf, None, TSIn)
TSIn.Load = new_instancemethod(_SnapTime.TSIn_Load, None, TSIn)
TSIn.__rshift__ = new_instancemethod(_SnapTime.TSIn___rshift__, None, TSIn)
TSIn.GetNextLn = new_instancemethod(_SnapTime.TSIn_GetNextLn, None, TSIn)
TSIn_swigregister = _SnapTime.TSIn_swigregister
TSIn_swigregister(TSIn)
TSIn.StdIn = _SnapTime.cvar.TSIn_StdIn

class TSOut(TSBase):
    """Proxy of C++ TSOut class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TSOut

    def EnableLnTrunc(self, _MxLnLen):
        """
        EnableLnTrunc(TSOut self, int const & _MxLnLen)

        Parameters
        ----------
        _MxLnLen: int const &

        """
        return _SnapTime.TSOut_EnableLnTrunc(self, _MxLnLen)


    def DisableLnTrunc(self):
        """
        DisableLnTrunc(TSOut self)

        Parameters
        ----------
        self: TSOut *

        """
        return _SnapTime.TSOut_DisableLnTrunc(self)


    def PutBf(self, LBf, LBfL):
        """
        PutBf(TSOut self, void const * LBf, TSize const & LBfL) -> int

        Parameters
        ----------
        LBf: void const *
        LBfL: TSize const &

        """
        return _SnapTime.TSOut_PutBf(self, LBf, LBfL)


    def Flush(self):
        """
        Flush(TSOut self)

        Parameters
        ----------
        self: TSOut *

        """
        return _SnapTime.TSOut_Flush(self)


    def GetFileId(self):
        """
        GetFileId(TSOut self) -> TFileId

        Parameters
        ----------
        self: TSOut const *

        """
        return _SnapTime.TSOut_GetFileId(self)


    def PutMem(self, Mem):
        """
        PutMem(TSOut self, TMem Mem) -> int

        Parameters
        ----------
        Mem: TMem const &

        """
        return _SnapTime.TSOut_PutMem(self, Mem)


    def PutCh(self, *args):
        """
        PutCh(TSOut self, char const & Ch) -> int

        Parameters
        ----------
        Ch: char const &

        PutCh(TSOut self, char const & Ch, int const & Chs) -> int

        Parameters
        ----------
        Ch: char const &
        Chs: int const &

        """
        return _SnapTime.TSOut_PutCh(self, *args)


    def PutBool(self, Bool):
        """
        PutBool(TSOut self, bool const & Bool) -> int

        Parameters
        ----------
        Bool: bool const &

        """
        return _SnapTime.TSOut_PutBool(self, Bool)


    def PutInt(self, *args):
        """
        PutInt(TSOut self, int const & Int) -> int

        Parameters
        ----------
        Int: int const &

        PutInt(TSOut self, int const & Int, char const * FmtStr) -> int

        Parameters
        ----------
        Int: int const &
        FmtStr: char const *

        """
        return _SnapTime.TSOut_PutInt(self, *args)


    def PutUInt(self, *args):
        """
        PutUInt(TSOut self, uint const & Int) -> int

        Parameters
        ----------
        Int: uint const &

        PutUInt(TSOut self, uint const & Int, char const * FmtStr) -> int

        Parameters
        ----------
        Int: uint const &
        FmtStr: char const *

        """
        return _SnapTime.TSOut_PutUInt(self, *args)


    def PutFlt(self, *args):
        """
        PutFlt(TSOut self, double const & Flt) -> int

        Parameters
        ----------
        Flt: double const &

        PutFlt(TSOut self, double const & Flt, char const * FmtStr) -> int

        Parameters
        ----------
        Flt: double const &
        FmtStr: char const *

        """
        return _SnapTime.TSOut_PutFlt(self, *args)


    def PutStr(self, *args):
        """
        PutStr(TSOut self, char const * CStr) -> int

        Parameters
        ----------
        CStr: char const *

        PutStr(TSOut self, TChA ChA) -> int

        Parameters
        ----------
        ChA: TChA const &

        PutStr(TSOut self, TStr Str, char const * FmtStr) -> int

        Parameters
        ----------
        Str: TStr const &
        FmtStr: char const *

        PutStr(TSOut self, TStr Str, bool const & ForceInLn=False) -> int

        Parameters
        ----------
        Str: TStr const &
        ForceInLn: bool const &

        PutStr(TSOut self, TStr Str) -> int

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TSOut_PutStr(self, *args)


    def PutStrLn(self, Str, ForceInLn=False):
        """
        PutStrLn(TSOut self, TStr Str, bool const & ForceInLn=False) -> int

        Parameters
        ----------
        Str: TStr const &
        ForceInLn: bool const &

        PutStrLn(TSOut self, TStr Str) -> int

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TSOut_PutStrLn(self, Str, ForceInLn)


    def PutStrFmt(self, FmtStr):
        """
        PutStrFmt(TSOut self, char const * FmtStr) -> int

        Parameters
        ----------
        FmtStr: char const *

        """
        return _SnapTime.TSOut_PutStrFmt(self, FmtStr)


    def PutStrFmtLn(self, FmtStr):
        """
        PutStrFmtLn(TSOut self, char const * FmtStr) -> int

        Parameters
        ----------
        FmtStr: char const *

        """
        return _SnapTime.TSOut_PutStrFmtLn(self, FmtStr)


    def PutIndent(self, IndentLev=1):
        """
        PutIndent(TSOut self, int const & IndentLev=1) -> int

        Parameters
        ----------
        IndentLev: int const &

        PutIndent(TSOut self) -> int

        Parameters
        ----------
        self: TSOut *

        """
        return _SnapTime.TSOut_PutIndent(self, IndentLev)


    def PutLn(self, Lns=1):
        """
        PutLn(TSOut self, int const & Lns=1) -> int

        Parameters
        ----------
        Lns: int const &

        PutLn(TSOut self) -> int

        Parameters
        ----------
        self: TSOut *

        """
        return _SnapTime.TSOut_PutLn(self, Lns)


    def PutDosLn(self, Lns=1):
        """
        PutDosLn(TSOut self, int const & Lns=1) -> int

        Parameters
        ----------
        Lns: int const &

        PutDosLn(TSOut self) -> int

        Parameters
        ----------
        self: TSOut *

        """
        return _SnapTime.TSOut_PutDosLn(self, Lns)


    def PutSep(self, NextStrLen=0):
        """
        PutSep(TSOut self, int const & NextStrLen=0) -> int

        Parameters
        ----------
        NextStrLen: int const &

        PutSep(TSOut self) -> int

        Parameters
        ----------
        self: TSOut *

        """
        return _SnapTime.TSOut_PutSep(self, NextStrLen)


    def PutSepLn(self, Lns=0):
        """
        PutSepLn(TSOut self, int const & Lns=0) -> int

        Parameters
        ----------
        Lns: int const &

        PutSepLn(TSOut self) -> int

        Parameters
        ----------
        self: TSOut *

        """
        return _SnapTime.TSOut_PutSepLn(self, Lns)


    def SaveCs(self):
        """
        SaveCs(TSOut self)

        Parameters
        ----------
        self: TSOut *

        """
        return _SnapTime.TSOut_SaveCs(self)


    def SaveBf(self, Bf, BfL):
        """
        SaveBf(TSOut self, void const * Bf, TSize const & BfL)

        Parameters
        ----------
        Bf: void const *
        BfL: TSize const &

        """
        return _SnapTime.TSOut_SaveBf(self, Bf, BfL)


    def Save(self, *args):
        """
        Save(TSOut self, bool const & Bool)

        Parameters
        ----------
        Bool: bool const &

        Save(TSOut self, char const & Ch)

        Parameters
        ----------
        Ch: char const &

        Save(TSOut self, uchar const & UCh)

        Parameters
        ----------
        UCh: uchar const &

        Save(TSOut self, short const & Short)

        Parameters
        ----------
        Short: short const &

        Save(TSOut self, ushort const & UShort)

        Parameters
        ----------
        UShort: ushort const &

        Save(TSOut self, int const & Int)

        Parameters
        ----------
        Int: int const &

        Save(TSOut self, uint const & UInt)

        Parameters
        ----------
        UInt: uint const &

        Save(TSOut self, int64 const & Int)

        Parameters
        ----------
        Int: int64 const &

        Save(TSOut self, uint64 const & UInt)

        Parameters
        ----------
        UInt: uint64 const &

        Save(TSOut self, double const & Flt)

        Parameters
        ----------
        Flt: double const &

        Save(TSOut self, sdouble const & SFlt)

        Parameters
        ----------
        SFlt: sdouble const &

        Save(TSOut self, ldouble const & LFlt)

        Parameters
        ----------
        LFlt: ldouble const &

        Save(TSOut self, char const * CStr, TSize const & CStrLen)

        Parameters
        ----------
        CStr: char const *
        CStrLen: TSize const &

        Save(TSOut self, char const * CStr)

        Parameters
        ----------
        CStr: char const *

        Save(TSOut self, TSIn SIn, TSize const & BfL=-1)

        Parameters
        ----------
        SIn: TSIn &
        BfL: TSize const &

        Save(TSOut self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        Save(TSOut self, PSIn const & SIn, TSize const & BfL=-1)

        Parameters
        ----------
        SIn: PSIn const &
        BfL: TSize const &

        Save(TSOut self, PSIn const & SIn)

        Parameters
        ----------
        SIn: PSIn const &

        Save(TSOut self, void const * Bf, TSize const & BfL)

        Parameters
        ----------
        Bf: void const *
        BfL: TSize const &

        """
        return _SnapTime.TSOut_Save(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(TSOut self, bool const & Bool) -> TSOut

        Parameters
        ----------
        Bool: bool const &

        __lshift__(TSOut self, uchar const & UCh) -> TSOut

        Parameters
        ----------
        UCh: uchar const &

        __lshift__(TSOut self, char const & Ch) -> TSOut

        Parameters
        ----------
        Ch: char const &

        __lshift__(TSOut self, short const & Sh) -> TSOut

        Parameters
        ----------
        Sh: short const &

        __lshift__(TSOut self, ushort const & USh) -> TSOut

        Parameters
        ----------
        USh: ushort const &

        __lshift__(TSOut self, int const & Int) -> TSOut

        Parameters
        ----------
        Int: int const &

        __lshift__(TSOut self, uint const & Int) -> TSOut

        Parameters
        ----------
        Int: uint const &

        __lshift__(TSOut self, int64 const & Int) -> TSOut

        Parameters
        ----------
        Int: int64 const &

        __lshift__(TSOut self, uint64 const & UInt) -> TSOut

        Parameters
        ----------
        UInt: uint64 const &

        __lshift__(TSOut self, float const & Flt) -> TSOut

        Parameters
        ----------
        Flt: float const &

        __lshift__(TSOut self, double const & Double) -> TSOut

        Parameters
        ----------
        Double: double const &

        __lshift__(TSOut self, long double const & LDouble) -> TSOut

        Parameters
        ----------
        LDouble: long double const &

        __lshift__(TSOut self, TSOutMnp Mnp) -> TSOut

        Parameters
        ----------
        Mnp: TSOutMnp const &

        __lshift__(TSOut self, TSOut &(*)(TSOut &) FuncPt) -> TSOut

        Parameters
        ----------
        FuncPt: TSOut &(*)(TSOut &)

        __lshift__(TSOut self, TSIn SIn) -> TSOut

        Parameters
        ----------
        SIn: TSIn &

        __lshift__(TSOut self, PSIn & SIn) -> TSOut

        Parameters
        ----------
        SIn: PSIn &

        """
        return _SnapTime.TSOut___lshift__(self, *args)

TSOut.EnableLnTrunc = new_instancemethod(_SnapTime.TSOut_EnableLnTrunc, None, TSOut)
TSOut.DisableLnTrunc = new_instancemethod(_SnapTime.TSOut_DisableLnTrunc, None, TSOut)
TSOut.PutBf = new_instancemethod(_SnapTime.TSOut_PutBf, None, TSOut)
TSOut.Flush = new_instancemethod(_SnapTime.TSOut_Flush, None, TSOut)
TSOut.GetFileId = new_instancemethod(_SnapTime.TSOut_GetFileId, None, TSOut)
TSOut.PutMem = new_instancemethod(_SnapTime.TSOut_PutMem, None, TSOut)
TSOut.PutCh = new_instancemethod(_SnapTime.TSOut_PutCh, None, TSOut)
TSOut.PutBool = new_instancemethod(_SnapTime.TSOut_PutBool, None, TSOut)
TSOut.PutInt = new_instancemethod(_SnapTime.TSOut_PutInt, None, TSOut)
TSOut.PutUInt = new_instancemethod(_SnapTime.TSOut_PutUInt, None, TSOut)
TSOut.PutFlt = new_instancemethod(_SnapTime.TSOut_PutFlt, None, TSOut)
TSOut.PutStr = new_instancemethod(_SnapTime.TSOut_PutStr, None, TSOut)
TSOut.PutStrLn = new_instancemethod(_SnapTime.TSOut_PutStrLn, None, TSOut)
TSOut.PutStrFmt = new_instancemethod(_SnapTime.TSOut_PutStrFmt, None, TSOut)
TSOut.PutStrFmtLn = new_instancemethod(_SnapTime.TSOut_PutStrFmtLn, None, TSOut)
TSOut.PutIndent = new_instancemethod(_SnapTime.TSOut_PutIndent, None, TSOut)
TSOut.PutLn = new_instancemethod(_SnapTime.TSOut_PutLn, None, TSOut)
TSOut.PutDosLn = new_instancemethod(_SnapTime.TSOut_PutDosLn, None, TSOut)
TSOut.PutSep = new_instancemethod(_SnapTime.TSOut_PutSep, None, TSOut)
TSOut.PutSepLn = new_instancemethod(_SnapTime.TSOut_PutSepLn, None, TSOut)
TSOut.SaveCs = new_instancemethod(_SnapTime.TSOut_SaveCs, None, TSOut)
TSOut.SaveBf = new_instancemethod(_SnapTime.TSOut_SaveBf, None, TSOut)
TSOut.Save = new_instancemethod(_SnapTime.TSOut_Save, None, TSOut)
TSOut.__lshift__ = new_instancemethod(_SnapTime.TSOut___lshift__, None, TSOut)
TSOut_swigregister = _SnapTime.TSOut_swigregister
TSOut_swigregister(TSOut)
TSOut.StdOut = _SnapTime.cvar.TSOut_StdOut

class TSInOut(TSIn, TSOut):
    """Proxy of C++ TSInOut class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TSInOut

    def SetPos(self, Pos):
        """
        SetPos(TSInOut self, int const & Pos)

        Parameters
        ----------
        Pos: int const &

        """
        return _SnapTime.TSInOut_SetPos(self, Pos)


    def MovePos(self, DPos):
        """
        MovePos(TSInOut self, int const & DPos)

        Parameters
        ----------
        DPos: int const &

        """
        return _SnapTime.TSInOut_MovePos(self, DPos)


    def GetPos(self):
        """
        GetPos(TSInOut self) -> int

        Parameters
        ----------
        self: TSInOut const *

        """
        return _SnapTime.TSInOut_GetPos(self)


    def GetSize(self):
        """
        GetSize(TSInOut self) -> int

        Parameters
        ----------
        self: TSInOut const *

        """
        return _SnapTime.TSInOut_GetSize(self)


    def Clr(self):
        """
        Clr(TSInOut self)

        Parameters
        ----------
        self: TSInOut *

        """
        return _SnapTime.TSInOut_Clr(self)

TSInOut.SetPos = new_instancemethod(_SnapTime.TSInOut_SetPos, None, TSInOut)
TSInOut.MovePos = new_instancemethod(_SnapTime.TSInOut_MovePos, None, TSInOut)
TSInOut.GetPos = new_instancemethod(_SnapTime.TSInOut_GetPos, None, TSInOut)
TSInOut.GetSize = new_instancemethod(_SnapTime.TSInOut_GetSize, None, TSInOut)
TSInOut.Clr = new_instancemethod(_SnapTime.TSInOut_Clr, None, TSInOut)
TSInOut_swigregister = _SnapTime.TSInOut_swigregister
TSInOut_swigregister(TSInOut)

class TStdIn(TSIn):
    """Proxy of C++ TStdIn class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TStdIn self) -> TStdIn"""
        _SnapTime.TStdIn_swiginit(self, _SnapTime.new_TStdIn())

    def New():
        """New() -> TPt< TSIn >"""
        return _SnapTime.TStdIn_New()

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TStdIn
TStdIn_swigregister = _SnapTime.TStdIn_swigregister
TStdIn_swigregister(TStdIn)

def TStdIn_New():
    """TStdIn_New() -> TPt< TSIn >"""
    return _SnapTime.TStdIn_New()

class TStdOut(TSOut):
    """Proxy of C++ TStdOut class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TStdOut self) -> TStdOut"""
        _SnapTime.TStdOut_swiginit(self, _SnapTime.new_TStdOut())

    def New():
        """New() -> TPt< TSOut >"""
        return _SnapTime.TStdOut_New()

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TStdOut
TStdOut_swigregister = _SnapTime.TStdOut_swigregister
TStdOut_swigregister(TStdOut)

def TStdOut_New():
    """TStdOut_New() -> TPt< TSOut >"""
    return _SnapTime.TStdOut_New()

class TFIn(TSIn):
    """Proxy of C++ TFIn class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TFIn self, TStr FNm) -> TFIn

        Parameters
        ----------
        FNm: TStr const &

        __init__(TFIn self, TStr FNm, bool & OpenedP) -> TFIn

        Parameters
        ----------
        FNm: TStr const &
        OpenedP: bool &

        """
        _SnapTime.TFIn_swiginit(self, _SnapTime.new_TFIn(*args))

    def New(*args):
        """
        New(TStr FNm) -> PSIn

        Parameters
        ----------
        FNm: TStr const &

        New(TStr FNm, bool & OpenedP) -> PSIn

        Parameters
        ----------
        FNm: TStr const &
        OpenedP: bool &

        """
        return _SnapTime.TFIn_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TFIn
TFIn_swigregister = _SnapTime.TFIn_swigregister
TFIn_swigregister(TFIn)

def TFIn_New(*args):
    """
    New(TStr FNm) -> PSIn

    Parameters
    ----------
    FNm: TStr const &

    TFIn_New(TStr FNm, bool & OpenedP) -> PSIn

    Parameters
    ----------
    FNm: TStr const &
    OpenedP: bool &

    """
    return _SnapTime.TFIn_New(*args)

class TFOut(TSOut):
    """Proxy of C++ TFOut class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TFOut self, TStr _FNm, bool const & Append=False) -> TFOut

        Parameters
        ----------
        _FNm: TStr const &
        Append: bool const &

        __init__(TFOut self, TStr _FNm) -> TFOut

        Parameters
        ----------
        _FNm: TStr const &

        __init__(TFOut self, TStr _FNm, bool const & Append, bool & OpenedP) -> TFOut

        Parameters
        ----------
        _FNm: TStr const &
        Append: bool const &
        OpenedP: bool &

        """
        _SnapTime.TFOut_swiginit(self, _SnapTime.new_TFOut(*args))

    def New(*args):
        """
        New(TStr FNm, bool const & Append=False) -> PSOut

        Parameters
        ----------
        FNm: TStr const &
        Append: bool const &

        New(TStr FNm) -> PSOut

        Parameters
        ----------
        FNm: TStr const &

        New(TStr FNm, bool const & Append, bool & OpenedP) -> PSOut

        Parameters
        ----------
        FNm: TStr const &
        Append: bool const &
        OpenedP: bool &

        """
        return _SnapTime.TFOut_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TFOut
TFOut_swigregister = _SnapTime.TFOut_swigregister
TFOut_swigregister(TFOut)

def TFOut_New(*args):
    """
    New(TStr FNm, bool const & Append=False) -> PSOut

    Parameters
    ----------
    FNm: TStr const &
    Append: bool const &

    New(TStr FNm) -> PSOut

    Parameters
    ----------
    FNm: TStr const &

    TFOut_New(TStr FNm, bool const & Append, bool & OpenedP) -> PSOut

    Parameters
    ----------
    FNm: TStr const &
    Append: bool const &
    OpenedP: bool &

    """
    return _SnapTime.TFOut_New(*args)

faUndef = _SnapTime.faUndef
faCreate = _SnapTime.faCreate
faUpdate = _SnapTime.faUpdate
faAppend = _SnapTime.faAppend
faRdOnly = _SnapTime.faRdOnly
faRestore = _SnapTime.faRestore
class TShMIn(TSIn):
    """Proxy of C++ TShMIn class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TShMIn self, TStr Str) -> TShMIn

        Parameters
        ----------
        Str: TStr const &

        __init__(TShMIn self, void * _Bf, TSize const & _BfL) -> TShMIn

        Parameters
        ----------
        _Bf: void *
        _BfL: TSize const &

        """
        _SnapTime.TShMIn_swiginit(self, _SnapTime.new_TShMIn(*args))
    __swig_destroy__ = _SnapTime.delete_TShMIn

    def getCursor(self):
        """
        getCursor(TShMIn self) -> char *

        Parameters
        ----------
        self: TShMIn *

        """
        return _SnapTime.TShMIn_getCursor(self)


    def LoadAndAdvance(self, Dest, ElemSize):
        """
        LoadAndAdvance(TShMIn self, void * Dest, TSize ElemSize)

        Parameters
        ----------
        Dest: void *
        ElemSize: TSize

        """
        return _SnapTime.TShMIn_LoadAndAdvance(self, Dest, ElemSize)


    def AdvanceCursor(self, N):
        """
        AdvanceCursor(TShMIn self, TSize N) -> char *

        Parameters
        ----------
        N: TSize

        """
        return _SnapTime.TShMIn_AdvanceCursor(self, N)


    def CloseMapping(self):
        """
        CloseMapping(TShMIn self)

        Parameters
        ----------
        self: TShMIn *

        """
        return _SnapTime.TShMIn_CloseMapping(self)

TShMIn.getCursor = new_instancemethod(_SnapTime.TShMIn_getCursor, None, TShMIn)
TShMIn.LoadAndAdvance = new_instancemethod(_SnapTime.TShMIn_LoadAndAdvance, None, TShMIn)
TShMIn.AdvanceCursor = new_instancemethod(_SnapTime.TShMIn_AdvanceCursor, None, TShMIn)
TShMIn.CloseMapping = new_instancemethod(_SnapTime.TShMIn_CloseMapping, None, TShMIn)
TShMIn_swigregister = _SnapTime.TShMIn_swigregister
TShMIn_swigregister(TShMIn)

class TMIn(TSIn):
    """Proxy of C++ TMIn class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TMIn self, void const * _Bf, uint64 const & _BfL, bool const & TakeBf=False) -> TMIn

        Parameters
        ----------
        _Bf: void const *
        _BfL: uint64 const &
        TakeBf: bool const &

        __init__(TMIn self, void const * _Bf, uint64 const & _BfL) -> TMIn

        Parameters
        ----------
        _Bf: void const *
        _BfL: uint64 const &

        __init__(TMIn self, TSIn SIn) -> TMIn

        Parameters
        ----------
        SIn: TSIn &

        __init__(TMIn self, char const * CStr) -> TMIn

        Parameters
        ----------
        CStr: char const *

        __init__(TMIn self, TStr Str, bool FromFile) -> TMIn

        Parameters
        ----------
        Str: TStr const &
        FromFile: bool

        __init__(TMIn self, TChA ChA) -> TMIn

        Parameters
        ----------
        ChA: TChA const &

        """
        _SnapTime.TMIn_swiginit(self, _SnapTime.new_TMIn(*args))

    def New(*args):
        """
        New(void const * _Bf, uint64 const & _BfL, bool const & TakeBf=False) -> PSIn

        Parameters
        ----------
        _Bf: void const *
        _BfL: uint64 const &
        TakeBf: bool const &

        New(void const * _Bf, uint64 const & _BfL) -> PSIn

        Parameters
        ----------
        _Bf: void const *
        _BfL: uint64 const &

        New(char const * CStr) -> PSIn

        Parameters
        ----------
        CStr: char const *

        New(TStr Str) -> PSIn

        Parameters
        ----------
        Str: TStr const &

        New(TChA ChA) -> PSIn

        Parameters
        ----------
        ChA: TChA const &

        New(TStr Str, bool FromFile) -> TPt< TMIn >

        Parameters
        ----------
        Str: TStr const &
        FromFile: bool

        """
        return _SnapTime.TMIn_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TMIn

    def GetBfC(self):
        """
        GetBfC(TMIn self) -> uint64

        Parameters
        ----------
        self: TMIn *

        """
        return _SnapTime.TMIn_GetBfC(self)


    def GetBfL(self):
        """
        GetBfL(TMIn self) -> uint64

        Parameters
        ----------
        self: TMIn *

        """
        return _SnapTime.TMIn_GetBfL(self)


    def SetBfC(self, Pos):
        """
        SetBfC(TMIn self, uint64 Pos)

        Parameters
        ----------
        Pos: uint64

        """
        return _SnapTime.TMIn_SetBfC(self, Pos)


    def CountNewLinesInRange(self, Lb, Ub):
        """
        CountNewLinesInRange(TMIn self, uint64 Lb, uint64 Ub) -> uint64

        Parameters
        ----------
        Lb: uint64
        Ub: uint64

        """
        return _SnapTime.TMIn_CountNewLinesInRange(self, Lb, Ub)


    def GetLineStartPos(self, Ind):
        """
        GetLineStartPos(TMIn self, uint64 Ind) -> uint64

        Parameters
        ----------
        Ind: uint64

        """
        return _SnapTime.TMIn_GetLineStartPos(self, Ind)


    def GetLineEndPos(self, Ind):
        """
        GetLineEndPos(TMIn self, uint64 Ind) -> uint64

        Parameters
        ----------
        Ind: uint64

        """
        return _SnapTime.TMIn_GetLineEndPos(self, Ind)


    def GetLine(self, Ind):
        """
        GetLine(TMIn self, uint64 Ind) -> char *

        Parameters
        ----------
        Ind: uint64

        """
        return _SnapTime.TMIn_GetLine(self, Ind)


    def SkipCommentLines(self):
        """
        SkipCommentLines(TMIn self)

        Parameters
        ----------
        self: TMIn *

        """
        return _SnapTime.TMIn_SkipCommentLines(self)


    def GetBfAddr(self):
        """
        GetBfAddr(TMIn self) -> char *

        Parameters
        ----------
        self: TMIn *

        """
        return _SnapTime.TMIn_GetBfAddr(self)

TMIn.GetBfC = new_instancemethod(_SnapTime.TMIn_GetBfC, None, TMIn)
TMIn.GetBfL = new_instancemethod(_SnapTime.TMIn_GetBfL, None, TMIn)
TMIn.SetBfC = new_instancemethod(_SnapTime.TMIn_SetBfC, None, TMIn)
TMIn.CountNewLinesInRange = new_instancemethod(_SnapTime.TMIn_CountNewLinesInRange, None, TMIn)
TMIn.GetLineStartPos = new_instancemethod(_SnapTime.TMIn_GetLineStartPos, None, TMIn)
TMIn.GetLineEndPos = new_instancemethod(_SnapTime.TMIn_GetLineEndPos, None, TMIn)
TMIn.GetLine = new_instancemethod(_SnapTime.TMIn_GetLine, None, TMIn)
TMIn.SkipCommentLines = new_instancemethod(_SnapTime.TMIn_SkipCommentLines, None, TMIn)
TMIn.GetBfAddr = new_instancemethod(_SnapTime.TMIn_GetBfAddr, None, TMIn)
TMIn_swigregister = _SnapTime.TMIn_swigregister
TMIn_swigregister(TMIn)

def TMIn_New(*args):
    """
    New(void const * _Bf, uint64 const & _BfL, bool const & TakeBf=False) -> PSIn

    Parameters
    ----------
    _Bf: void const *
    _BfL: uint64 const &
    TakeBf: bool const &

    New(void const * _Bf, uint64 const & _BfL) -> PSIn

    Parameters
    ----------
    _Bf: void const *
    _BfL: uint64 const &

    New(char const * CStr) -> PSIn

    Parameters
    ----------
    CStr: char const *

    New(TStr Str) -> PSIn

    Parameters
    ----------
    Str: TStr const &

    New(TChA ChA) -> PSIn

    Parameters
    ----------
    ChA: TChA const &

    TMIn_New(TStr Str, bool FromFile) -> TPt< TMIn >

    Parameters
    ----------
    Str: TStr const &
    FromFile: bool

    """
    return _SnapTime.TMIn_New(*args)

class TMOut(TSOut):
    """Proxy of C++ TMOut class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def New(MxBfL=1024):
        """
        New(int const & MxBfL=1024) -> PSOut

        Parameters
        ----------
        MxBfL: int const &

        New() -> PSOut
        """
        return _SnapTime.TMOut_New(MxBfL)

    New = staticmethod(New)

    def __init__(self, *args):
        """
        __init__(TMOut self, int const & _MxBfL=1024) -> TMOut

        Parameters
        ----------
        _MxBfL: int const &

        __init__(TMOut self) -> TMOut
        __init__(TMOut self, char * _Bf, int const & _MxBfL) -> TMOut

        Parameters
        ----------
        _Bf: char *
        _MxBfL: int const &

        """
        _SnapTime.TMOut_swiginit(self, _SnapTime.new_TMOut(*args))
    __swig_destroy__ = _SnapTime.delete_TMOut

    def AppendBf(self, LBf, LBfL):
        """
        AppendBf(TMOut self, void const * LBf, TSize const & LBfL)

        Parameters
        ----------
        LBf: void const *
        LBfL: TSize const &

        """
        return _SnapTime.TMOut_AppendBf(self, LBf, LBfL)


    def Len(self):
        """
        Len(TMOut self) -> int

        Parameters
        ----------
        self: TMOut const *

        """
        return _SnapTime.TMOut_Len(self)


    def Clr(self):
        """
        Clr(TMOut self)

        Parameters
        ----------
        self: TMOut *

        """
        return _SnapTime.TMOut_Clr(self)


    def GetCh(self, ChN):
        """
        GetCh(TMOut self, int const & ChN) -> char

        Parameters
        ----------
        ChN: int const &

        """
        return _SnapTime.TMOut_GetCh(self, ChN)


    def GetAsStr(self):
        """
        GetAsStr(TMOut self) -> TStr

        Parameters
        ----------
        self: TMOut const *

        """
        return _SnapTime.TMOut_GetAsStr(self)


    def CutBf(self, CutBfL):
        """
        CutBf(TMOut self, int const & CutBfL)

        Parameters
        ----------
        CutBfL: int const &

        """
        return _SnapTime.TMOut_CutBf(self, CutBfL)


    def GetSIn(self, IsCut=True, CutBfL=-1):
        """
        GetSIn(TMOut self, bool const & IsCut=True, int const & CutBfL=-1) -> PSIn

        Parameters
        ----------
        IsCut: bool const &
        CutBfL: int const &

        GetSIn(TMOut self, bool const & IsCut=True) -> PSIn

        Parameters
        ----------
        IsCut: bool const &

        GetSIn(TMOut self) -> PSIn

        Parameters
        ----------
        self: TMOut *

        """
        return _SnapTime.TMOut_GetSIn(self, IsCut, CutBfL)


    def GetBfAddr(self):
        """
        GetBfAddr(TMOut self) -> char *

        Parameters
        ----------
        self: TMOut const *

        """
        return _SnapTime.TMOut_GetBfAddr(self)


    def IsCrLfLn(self):
        """
        IsCrLfLn(TMOut self) -> bool

        Parameters
        ----------
        self: TMOut const *

        """
        return _SnapTime.TMOut_IsCrLfLn(self)


    def GetCrLfLn(self):
        """
        GetCrLfLn(TMOut self) -> TStr

        Parameters
        ----------
        self: TMOut *

        """
        return _SnapTime.TMOut_GetCrLfLn(self)


    def IsEolnLn(self):
        """
        IsEolnLn(TMOut self) -> bool

        Parameters
        ----------
        self: TMOut const *

        """
        return _SnapTime.TMOut_IsEolnLn(self)


    def GetEolnLn(self, DoAddEoln, DoCutBf):
        """
        GetEolnLn(TMOut self, bool const & DoAddEoln, bool const & DoCutBf) -> TStr

        Parameters
        ----------
        DoAddEoln: bool const &
        DoCutBf: bool const &

        """
        return _SnapTime.TMOut_GetEolnLn(self, DoAddEoln, DoCutBf)


    def MkEolnLn(self):
        """
        MkEolnLn(TMOut self)

        Parameters
        ----------
        self: TMOut *

        """
        return _SnapTime.TMOut_MkEolnLn(self)

TMOut.AppendBf = new_instancemethod(_SnapTime.TMOut_AppendBf, None, TMOut)
TMOut.Len = new_instancemethod(_SnapTime.TMOut_Len, None, TMOut)
TMOut.Clr = new_instancemethod(_SnapTime.TMOut_Clr, None, TMOut)
TMOut.GetCh = new_instancemethod(_SnapTime.TMOut_GetCh, None, TMOut)
TMOut.GetAsStr = new_instancemethod(_SnapTime.TMOut_GetAsStr, None, TMOut)
TMOut.CutBf = new_instancemethod(_SnapTime.TMOut_CutBf, None, TMOut)
TMOut.GetSIn = new_instancemethod(_SnapTime.TMOut_GetSIn, None, TMOut)
TMOut.GetBfAddr = new_instancemethod(_SnapTime.TMOut_GetBfAddr, None, TMOut)
TMOut.IsCrLfLn = new_instancemethod(_SnapTime.TMOut_IsCrLfLn, None, TMOut)
TMOut.GetCrLfLn = new_instancemethod(_SnapTime.TMOut_GetCrLfLn, None, TMOut)
TMOut.IsEolnLn = new_instancemethod(_SnapTime.TMOut_IsEolnLn, None, TMOut)
TMOut.GetEolnLn = new_instancemethod(_SnapTime.TMOut_GetEolnLn, None, TMOut)
TMOut.MkEolnLn = new_instancemethod(_SnapTime.TMOut_MkEolnLn, None, TMOut)
TMOut_swigregister = _SnapTime.TMOut_swigregister
TMOut_swigregister(TMOut)

def TMOut_New(MxBfL=1024):
    """
    New(int const & MxBfL=1024) -> PSOut

    Parameters
    ----------
    MxBfL: int const &

    TMOut_New() -> PSOut
    """
    return _SnapTime.TMOut_New(MxBfL)

class TChRet(object):
    """Proxy of C++ TChRet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _SIn, _EofCh=0):
        """
        __init__(TChRet self, PSIn const & _SIn, char const & _EofCh=0) -> TChRet

        Parameters
        ----------
        _SIn: PSIn const &
        _EofCh: char const &

        __init__(TChRet self, PSIn const & _SIn) -> TChRet

        Parameters
        ----------
        _SIn: PSIn const &

        """
        _SnapTime.TChRet_swiginit(self, _SnapTime.new_TChRet(_SIn, _EofCh))

    def Eof(self):
        """
        Eof(TChRet self) -> bool

        Parameters
        ----------
        self: TChRet const *

        """
        return _SnapTime.TChRet_Eof(self)


    def GetCh(self):
        """
        GetCh(TChRet self) -> char

        Parameters
        ----------
        self: TChRet *

        """
        return _SnapTime.TChRet_GetCh(self)


    def __call__(self):
        """
        __call__(TChRet self) -> char

        Parameters
        ----------
        self: TChRet *

        """
        return _SnapTime.TChRet___call__(self)

    __swig_destroy__ = _SnapTime.delete_TChRet
TChRet.Eof = new_instancemethod(_SnapTime.TChRet_Eof, None, TChRet)
TChRet.GetCh = new_instancemethod(_SnapTime.TChRet_GetCh, None, TChRet)
TChRet.__call__ = new_instancemethod(_SnapTime.TChRet___call__, None, TChRet)
TChRet_swigregister = _SnapTime.TChRet_swigregister
TChRet_swigregister(TChRet)

class TLnRet(object):
    """Proxy of C++ TLnRet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _SIn):
        """
        __init__(TLnRet self, PSIn const & _SIn) -> TLnRet

        Parameters
        ----------
        _SIn: PSIn const &

        """
        _SnapTime.TLnRet_swiginit(self, _SnapTime.new_TLnRet(_SIn))

    def NextLn(self, LnStr):
        """
        NextLn(TLnRet self, TStr LnStr) -> bool

        Parameters
        ----------
        LnStr: TStr &

        """
        return _SnapTime.TLnRet_NextLn(self, LnStr)

    __swig_destroy__ = _SnapTime.delete_TLnRet
TLnRet.NextLn = new_instancemethod(_SnapTime.TLnRet_NextLn, None, TLnRet)
TLnRet_swigregister = _SnapTime.TLnRet_swigregister
TLnRet_swigregister(TLnRet)

class TFile(object):
    """Proxy of C++ TFile class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Exists(FNm):
        """
        Exists(TStr FNm) -> bool

        Parameters
        ----------
        FNm: TStr const &

        """
        return _SnapTime.TFile_Exists(FNm)

    Exists = staticmethod(Exists)

    def Del(FNm, ThrowExceptP=True):
        """
        Del(TStr FNm, bool const & ThrowExceptP=True)

        Parameters
        ----------
        FNm: TStr const &
        ThrowExceptP: bool const &

        Del(TStr FNm)

        Parameters
        ----------
        FNm: TStr const &

        """
        return _SnapTime.TFile_Del(FNm, ThrowExceptP)

    Del = staticmethod(Del)

    def DelWc(WcStr, RecurseDirP=False):
        """
        DelWc(TStr WcStr, bool const & RecurseDirP=False)

        Parameters
        ----------
        WcStr: TStr const &
        RecurseDirP: bool const &

        DelWc(TStr WcStr)

        Parameters
        ----------
        WcStr: TStr const &

        """
        return _SnapTime.TFile_DelWc(WcStr, RecurseDirP)

    DelWc = staticmethod(DelWc)

    def Rename(SrcFNm, DstFNm):
        """
        Rename(TStr SrcFNm, TStr DstFNm)

        Parameters
        ----------
        SrcFNm: TStr const &
        DstFNm: TStr const &

        """
        return _SnapTime.TFile_Rename(SrcFNm, DstFNm)

    Rename = staticmethod(Rename)

    def GetUniqueFNm(FNm):
        """
        GetUniqueFNm(TStr FNm) -> TStr

        Parameters
        ----------
        FNm: TStr const &

        """
        return _SnapTime.TFile_GetUniqueFNm(FNm)

    GetUniqueFNm = staticmethod(GetUniqueFNm)

    def __init__(self):
        """__init__(TFile self) -> TFile"""
        _SnapTime.TFile_swiginit(self, _SnapTime.new_TFile())
    __swig_destroy__ = _SnapTime.delete_TFile
TFile_swigregister = _SnapTime.TFile_swigregister
TFile_swigregister(TFile)
TFile.TxtFExt = _SnapTime.cvar.TFile_TxtFExt
TFile.HtmlFExt = _SnapTime.cvar.TFile_HtmlFExt
TFile.HtmFExt = _SnapTime.cvar.TFile_HtmFExt
TFile.GifFExt = _SnapTime.cvar.TFile_GifFExt
TFile.JarFExt = _SnapTime.cvar.TFile_JarFExt

def TFile_Exists(FNm):
    """
    TFile_Exists(TStr FNm) -> bool

    Parameters
    ----------
    FNm: TStr const &

    """
    return _SnapTime.TFile_Exists(FNm)

def TFile_Del(FNm, ThrowExceptP=True):
    """
    Del(TStr FNm, bool const & ThrowExceptP=True)

    Parameters
    ----------
    FNm: TStr const &
    ThrowExceptP: bool const &

    TFile_Del(TStr FNm)

    Parameters
    ----------
    FNm: TStr const &

    """
    return _SnapTime.TFile_Del(FNm, ThrowExceptP)

def TFile_DelWc(WcStr, RecurseDirP=False):
    """
    DelWc(TStr WcStr, bool const & RecurseDirP=False)

    Parameters
    ----------
    WcStr: TStr const &
    RecurseDirP: bool const &

    TFile_DelWc(TStr WcStr)

    Parameters
    ----------
    WcStr: TStr const &

    """
    return _SnapTime.TFile_DelWc(WcStr, RecurseDirP)

def TFile_Rename(SrcFNm, DstFNm):
    """
    TFile_Rename(TStr SrcFNm, TStr DstFNm)

    Parameters
    ----------
    SrcFNm: TStr const &
    DstFNm: TStr const &

    """
    return _SnapTime.TFile_Rename(SrcFNm, DstFNm)

def TFile_GetUniqueFNm(FNm):
    """
    TFile_GetUniqueFNm(TStr FNm) -> TStr

    Parameters
    ----------
    FNm: TStr const &

    """
    return _SnapTime.TFile_GetUniqueFNm(FNm)


def InfoNotify(*args):
    """
    InfoNotify(char const * NotifyCStr)

    Parameters
    ----------
    NotifyCStr: char const *

    InfoNotify(TStr MsgStr)

    Parameters
    ----------
    MsgStr: TStr const &

    """
    return _SnapTime.InfoNotify(*args)

def WarnNotify(*args):
    """
    WarnNotify(char const * NotifyCStr)

    Parameters
    ----------
    NotifyCStr: char const *

    WarnNotify(TStr MsgStr)

    Parameters
    ----------
    MsgStr: TStr const &

    """
    return _SnapTime.WarnNotify(*args)

def ErrNotify(*args):
    """
    ErrNotify(char const * NotifyCStr)

    Parameters
    ----------
    NotifyCStr: char const *

    ErrNotify(TStr MsgStr)

    Parameters
    ----------
    MsgStr: TStr const &

    """
    return _SnapTime.ErrNotify(*args)

def StatNotify(*args):
    """
    StatNotify(char const * NotifyCStr)

    Parameters
    ----------
    NotifyCStr: char const *

    StatNotify(TStr MsgStr)

    Parameters
    ----------
    MsgStr: TStr const &

    """
    return _SnapTime.StatNotify(*args)
ntInfo = _SnapTime.ntInfo
ntWarn = _SnapTime.ntWarn
ntErr = _SnapTime.ntErr
ntStat = _SnapTime.ntStat
class TNotify(object):
    """Proxy of C++ TNotify class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TNotify self) -> TNotify"""
        _SnapTime.TNotify_swiginit(self, _SnapTime.new_TNotify())
    __swig_destroy__ = _SnapTime.delete_TNotify

    def OnNotifyFmt(self, Type, FmtStr):
        """
        OnNotifyFmt(TNotify self, TNotifyType const & Type, char const * FmtStr)

        Parameters
        ----------
        Type: TNotifyType const &
        FmtStr: char const *

        """
        return _SnapTime.TNotify_OnNotifyFmt(self, Type, FmtStr)


    def OnStatusFmt(self, FmtStr):
        """
        OnStatusFmt(TNotify self, char const * FmtStr)

        Parameters
        ----------
        FmtStr: char const *

        """
        return _SnapTime.TNotify_OnStatusFmt(self, FmtStr)


    def OnLnFmt(self, FmtStr):
        """
        OnLnFmt(TNotify self, char const * FmtStr)

        Parameters
        ----------
        FmtStr: char const *

        """
        return _SnapTime.TNotify_OnLnFmt(self, FmtStr)


    def OnTxtFmt(self, FmtStr):
        """
        OnTxtFmt(TNotify self, char const * FmtStr)

        Parameters
        ----------
        FmtStr: char const *

        """
        return _SnapTime.TNotify_OnTxtFmt(self, FmtStr)


    def GetTypeStr(Type, Brief=True):
        """
        GetTypeStr(TNotifyType const & Type, bool const & Brief=True) -> TStr

        Parameters
        ----------
        Type: TNotifyType const &
        Brief: bool const &

        GetTypeStr(TNotifyType const & Type) -> TStr

        Parameters
        ----------
        Type: TNotifyType const &

        """
        return _SnapTime.TNotify_GetTypeStr(Type, Brief)

    GetTypeStr = staticmethod(GetTypeStr)

    def OnNotify(*args):
        """
        OnNotify(TNotifyType const & arg2, TStr arg3)

        Parameters
        ----------
        arg2: TNotifyType const &
        arg3: TStr const &

        OnNotify(PNotify const & Notify, TNotifyType const & Type, TStr MsgStr)

        Parameters
        ----------
        Notify: PNotify const &
        Type: TNotifyType const &
        MsgStr: TStr const &

        """
        return _SnapTime.TNotify_OnNotify(*args)

    OnNotify = staticmethod(OnNotify)

    def OnStatus(*args):
        """
        OnStatus(TStr arg2)

        Parameters
        ----------
        arg2: TStr const &

        OnStatus(PNotify const & Notify, TStr MsgStr)

        Parameters
        ----------
        Notify: PNotify const &
        MsgStr: TStr const &

        """
        return _SnapTime.TNotify_OnStatus(*args)

    OnStatus = staticmethod(OnStatus)

    def OnLn(*args):
        """
        OnLn(TStr arg2)

        Parameters
        ----------
        arg2: TStr const &

        OnLn(PNotify const & Notify, TStr MsgStr)

        Parameters
        ----------
        Notify: PNotify const &
        MsgStr: TStr const &

        """
        return _SnapTime.TNotify_OnLn(*args)

    OnLn = staticmethod(OnLn)

    def OnTxt(*args):
        """
        OnTxt(TStr arg2)

        Parameters
        ----------
        arg2: TStr const &

        OnTxt(PNotify const & Notify, TStr MsgStr)

        Parameters
        ----------
        Notify: PNotify const &
        MsgStr: TStr const &

        """
        return _SnapTime.TNotify_OnTxt(*args)

    OnTxt = staticmethod(OnTxt)

    def DfOnNotify(Type, MsgStr):
        """
        DfOnNotify(TNotifyType const & Type, TStr MsgStr)

        Parameters
        ----------
        Type: TNotifyType const &
        MsgStr: TStr const &

        """
        return _SnapTime.TNotify_DfOnNotify(Type, MsgStr)

    DfOnNotify = staticmethod(DfOnNotify)
TNotify.OnNotifyFmt = new_instancemethod(_SnapTime.TNotify_OnNotifyFmt, None, TNotify)
TNotify.OnStatusFmt = new_instancemethod(_SnapTime.TNotify_OnStatusFmt, None, TNotify)
TNotify.OnLnFmt = new_instancemethod(_SnapTime.TNotify_OnLnFmt, None, TNotify)
TNotify.OnTxtFmt = new_instancemethod(_SnapTime.TNotify_OnTxtFmt, None, TNotify)
TNotify_swigregister = _SnapTime.TNotify_swigregister
TNotify_swigregister(TNotify)

def TNotify_GetTypeStr(Type, Brief=True):
    """
    GetTypeStr(TNotifyType const & Type, bool const & Brief=True) -> TStr

    Parameters
    ----------
    Type: TNotifyType const &
    Brief: bool const &

    TNotify_GetTypeStr(TNotifyType const & Type) -> TStr

    Parameters
    ----------
    Type: TNotifyType const &

    """
    return _SnapTime.TNotify_GetTypeStr(Type, Brief)

def TNotify_OnNotify(*args):
    """
    OnNotify(TNotifyType const & arg2, TStr arg3)

    Parameters
    ----------
    arg2: TNotifyType const &
    arg3: TStr const &

    TNotify_OnNotify(PNotify const & Notify, TNotifyType const & Type, TStr MsgStr)

    Parameters
    ----------
    Notify: PNotify const &
    Type: TNotifyType const &
    MsgStr: TStr const &

    """
    return _SnapTime.TNotify_OnNotify(*args)

def TNotify_OnStatus(*args):
    """
    OnStatus(TStr arg2)

    Parameters
    ----------
    arg2: TStr const &

    TNotify_OnStatus(PNotify const & Notify, TStr MsgStr)

    Parameters
    ----------
    Notify: PNotify const &
    MsgStr: TStr const &

    """
    return _SnapTime.TNotify_OnStatus(*args)

def TNotify_OnLn(*args):
    """
    OnLn(TStr arg2)

    Parameters
    ----------
    arg2: TStr const &

    TNotify_OnLn(PNotify const & Notify, TStr MsgStr)

    Parameters
    ----------
    Notify: PNotify const &
    MsgStr: TStr const &

    """
    return _SnapTime.TNotify_OnLn(*args)

def TNotify_OnTxt(*args):
    """
    OnTxt(TStr arg2)

    Parameters
    ----------
    arg2: TStr const &

    TNotify_OnTxt(PNotify const & Notify, TStr MsgStr)

    Parameters
    ----------
    Notify: PNotify const &
    MsgStr: TStr const &

    """
    return _SnapTime.TNotify_OnTxt(*args)

def TNotify_DfOnNotify(Type, MsgStr):
    """
    TNotify_DfOnNotify(TNotifyType const & Type, TStr MsgStr)

    Parameters
    ----------
    Type: TNotifyType const &
    MsgStr: TStr const &

    """
    return _SnapTime.TNotify_DfOnNotify(Type, MsgStr)
TNotify.NullNotify = _SnapTime.cvar.TNotify_NullNotify
TNotify.StdNotify = _SnapTime.cvar.TNotify_StdNotify
TNotify.StdErrNotify = _SnapTime.cvar.TNotify_StdErrNotify

class TNullNotify(TNotify):
    """Proxy of C++ TNullNotify class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TNullNotify self) -> TNullNotify"""
        _SnapTime.TNullNotify_swiginit(self, _SnapTime.new_TNullNotify())

    def New():
        """New() -> PNotify"""
        return _SnapTime.TNullNotify_New()

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TNullNotify
TNullNotify_swigregister = _SnapTime.TNullNotify_swigregister
TNullNotify_swigregister(TNullNotify)

def TNullNotify_New():
    """TNullNotify_New() -> PNotify"""
    return _SnapTime.TNullNotify_New()

class TCallbackNotify(TNotify):
    """Proxy of C++ TCallbackNotify class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _CallbackF):
        """
        __init__(TCallbackNotify self, TCallbackF const & _CallbackF) -> TCallbackNotify

        Parameters
        ----------
        _CallbackF: TCallbackF const &

        """
        _SnapTime.TCallbackNotify_swiginit(self, _SnapTime.new_TCallbackNotify(_CallbackF))

    def New(CallbackF):
        """
        New(TCallbackF const & CallbackF) -> PNotify

        Parameters
        ----------
        CallbackF: TCallbackF const &

        """
        return _SnapTime.TCallbackNotify_New(CallbackF)

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TCallbackNotify
TCallbackNotify_swigregister = _SnapTime.TCallbackNotify_swigregister
TCallbackNotify_swigregister(TCallbackNotify)

def TCallbackNotify_New(CallbackF):
    """
    TCallbackNotify_New(TCallbackF const & CallbackF) -> PNotify

    Parameters
    ----------
    CallbackF: TCallbackF const &

    """
    return _SnapTime.TCallbackNotify_New(CallbackF)

class TNativeCallbackNotify(TNotify):
    """Proxy of C++ TNativeCallbackNotify class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _CallbackF):
        """
        __init__(TNativeCallbackNotify self, TNativeCallbackF const & _CallbackF) -> TNativeCallbackNotify

        Parameters
        ----------
        _CallbackF: TNativeCallbackF const &

        """
        _SnapTime.TNativeCallbackNotify_swiginit(self, _SnapTime.new_TNativeCallbackNotify(_CallbackF))

    def New(CallbackF):
        """
        New(TNativeCallbackF const & CallbackF) -> PNotify

        Parameters
        ----------
        CallbackF: TNativeCallbackF const &

        """
        return _SnapTime.TNativeCallbackNotify_New(CallbackF)

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TNativeCallbackNotify
TNativeCallbackNotify_swigregister = _SnapTime.TNativeCallbackNotify_swigregister
TNativeCallbackNotify_swigregister(TNativeCallbackNotify)

def TNativeCallbackNotify_New(CallbackF):
    """
    TNativeCallbackNotify_New(TNativeCallbackF const & CallbackF) -> PNotify

    Parameters
    ----------
    CallbackF: TNativeCallbackF const &

    """
    return _SnapTime.TNativeCallbackNotify_New(CallbackF)

class TStdNotify(TNotify):
    """Proxy of C++ TStdNotify class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TStdNotify self) -> TStdNotify"""
        _SnapTime.TStdNotify_swiginit(self, _SnapTime.new_TStdNotify())

    def New():
        """New() -> PNotify"""
        return _SnapTime.TStdNotify_New()

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TStdNotify
TStdNotify_swigregister = _SnapTime.TStdNotify_swigregister
TStdNotify_swigregister(TStdNotify)

def TStdNotify_New():
    """TStdNotify_New() -> PNotify"""
    return _SnapTime.TStdNotify_New()

class TStdErrNotify(TNotify):
    """Proxy of C++ TStdErrNotify class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TStdErrNotify self) -> TStdErrNotify"""
        _SnapTime.TStdErrNotify_swiginit(self, _SnapTime.new_TStdErrNotify())

    def New():
        """New() -> PNotify"""
        return _SnapTime.TStdErrNotify_New()

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TStdErrNotify
TStdErrNotify_swigregister = _SnapTime.TStdErrNotify_swigregister
TStdErrNotify_swigregister(TStdErrNotify)

def TStdErrNotify_New():
    """TStdErrNotify_New() -> PNotify"""
    return _SnapTime.TStdErrNotify_New()

class TLogNotify(TNotify):
    """Proxy of C++ TLogNotify class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _Notify):
        """
        __init__(TLogNotify self, PNotify const & _Notify) -> TLogNotify

        Parameters
        ----------
        _Notify: PNotify const &

        """
        _SnapTime.TLogNotify_swiginit(self, _SnapTime.new_TLogNotify(_Notify))

    def New(Notify):
        """
        New(PNotify const & Notify) -> PNotify

        Parameters
        ----------
        Notify: PNotify const &

        """
        return _SnapTime.TLogNotify_New(Notify)

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TLogNotify
TLogNotify_swigregister = _SnapTime.TLogNotify_swigregister
TLogNotify_swigregister(TLogNotify)

def TLogNotify_New(Notify):
    """
    TLogNotify_New(PNotify const & Notify) -> PNotify

    Parameters
    ----------
    Notify: PNotify const &

    """
    return _SnapTime.TLogNotify_New(Notify)

class TExcept(object):
    """Proxy of C++ TExcept class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TExcept self, TStr _MsgStr) -> TExcept

        Parameters
        ----------
        _MsgStr: TStr const &

        __init__(TExcept self, TStr _MsgStr, TStr _LocStr) -> TExcept

        Parameters
        ----------
        _MsgStr: TStr const &
        _LocStr: TStr const &

        """
        _SnapTime.TExcept_swiginit(self, _SnapTime.new_TExcept(*args))

    def New(*args):
        """
        New(TStr MsgStr, TStr LocStr) -> PExcept

        Parameters
        ----------
        MsgStr: TStr const &
        LocStr: TStr const &

        New(TStr MsgStr) -> PExcept

        Parameters
        ----------
        MsgStr: TStr const &

        """
        return _SnapTime.TExcept_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_TExcept

    def GetMsgStr(self):
        """
        GetMsgStr(TExcept self) -> TStr

        Parameters
        ----------
        self: TExcept const *

        """
        return _SnapTime.TExcept_GetMsgStr(self)


    def GetLocStr(self):
        """
        GetLocStr(TExcept self) -> TStr

        Parameters
        ----------
        self: TExcept const *

        """
        return _SnapTime.TExcept_GetLocStr(self)


    def GetStr(self):
        """
        GetStr(TExcept self) -> TStr

        Parameters
        ----------
        self: TExcept const *

        """
        return _SnapTime.TExcept_GetStr(self)

    OnExceptF = _swig_property(_SnapTime.TExcept_OnExceptF_get, _SnapTime.TExcept_OnExceptF_set)

    def IsOnExceptF():
        """IsOnExceptF() -> bool"""
        return _SnapTime.TExcept_IsOnExceptF()

    IsOnExceptF = staticmethod(IsOnExceptF)

    def PutOnExceptF(_OnExceptF):
        """
        PutOnExceptF(TExcept::TOnExceptF _OnExceptF)

        Parameters
        ----------
        _OnExceptF: TExcept::TOnExceptF

        """
        return _SnapTime.TExcept_PutOnExceptF(_OnExceptF)

    PutOnExceptF = staticmethod(PutOnExceptF)

    def GetOnExceptF():
        """GetOnExceptF() -> TExcept::TOnExceptF"""
        return _SnapTime.TExcept_GetOnExceptF()

    GetOnExceptF = staticmethod(GetOnExceptF)

    def Throw(*args):
        """
        Throw(TStr MsgStr)

        Parameters
        ----------
        MsgStr: TStr const &

        Throw(TStr MsgStr, TStr ArgStr)

        Parameters
        ----------
        MsgStr: TStr const &
        ArgStr: TStr const &

        Throw(TStr MsgStr, TStr ArgStr1, TStr ArgStr2)

        Parameters
        ----------
        MsgStr: TStr const &
        ArgStr1: TStr const &
        ArgStr2: TStr const &

        """
        return _SnapTime.TExcept_Throw(*args)

    Throw = staticmethod(Throw)

    def ThrowFull(MsgStr, LocStr):
        """
        ThrowFull(TStr MsgStr, TStr LocStr)

        Parameters
        ----------
        MsgStr: TStr const &
        LocStr: TStr const &

        """
        return _SnapTime.TExcept_ThrowFull(MsgStr, LocStr)

    ThrowFull = staticmethod(ThrowFull)
TExcept.GetMsgStr = new_instancemethod(_SnapTime.TExcept_GetMsgStr, None, TExcept)
TExcept.GetLocStr = new_instancemethod(_SnapTime.TExcept_GetLocStr, None, TExcept)
TExcept.GetStr = new_instancemethod(_SnapTime.TExcept_GetStr, None, TExcept)
TExcept_swigregister = _SnapTime.TExcept_swigregister
TExcept_swigregister(TExcept)

def TExcept_New(*args):
    """
    New(TStr MsgStr, TStr LocStr) -> PExcept

    Parameters
    ----------
    MsgStr: TStr const &
    LocStr: TStr const &

    TExcept_New(TStr MsgStr) -> PExcept

    Parameters
    ----------
    MsgStr: TStr const &

    """
    return _SnapTime.TExcept_New(*args)

def TExcept_IsOnExceptF():
    """TExcept_IsOnExceptF() -> bool"""
    return _SnapTime.TExcept_IsOnExceptF()

def TExcept_PutOnExceptF(_OnExceptF):
    """
    TExcept_PutOnExceptF(TExcept::TOnExceptF _OnExceptF)

    Parameters
    ----------
    _OnExceptF: TExcept::TOnExceptF

    """
    return _SnapTime.TExcept_PutOnExceptF(_OnExceptF)

def TExcept_GetOnExceptF():
    """TExcept_GetOnExceptF() -> TExcept::TOnExceptF"""
    return _SnapTime.TExcept_GetOnExceptF()

def TExcept_Throw(*args):
    """
    Throw(TStr MsgStr)

    Parameters
    ----------
    MsgStr: TStr const &

    Throw(TStr MsgStr, TStr ArgStr)

    Parameters
    ----------
    MsgStr: TStr const &
    ArgStr: TStr const &

    TExcept_Throw(TStr MsgStr, TStr ArgStr1, TStr ArgStr2)

    Parameters
    ----------
    MsgStr: TStr const &
    ArgStr1: TStr const &
    ArgStr2: TStr const &

    """
    return _SnapTime.TExcept_Throw(*args)

def TExcept_ThrowFull(MsgStr, LocStr):
    """
    TExcept_ThrowFull(TStr MsgStr, TStr LocStr)

    Parameters
    ----------
    MsgStr: TStr const &
    LocStr: TStr const &

    """
    return _SnapTime.TExcept_ThrowFull(MsgStr, LocStr)

gfUndef = _SnapTime.gfUndef
gfDirected = _SnapTime.gfDirected
gfMultiGraph = _SnapTime.gfMultiGraph
gfNodeDat = _SnapTime.gfNodeDat
gfEdgeDat = _SnapTime.gfEdgeDat
gfSources = _SnapTime.gfSources
gfBipart = _SnapTime.gfBipart
gfMx = _SnapTime.gfMx
atInt = _SnapTime.atInt
atFlt = _SnapTime.atFlt
atStr = _SnapTime.atStr

def GetFlagStr(GraphFlag):
    """
    GetFlagStr(TGraphFlag const & GraphFlag) -> TStr

    Parameters
    ----------
    GraphFlag: TGraphFlag const &

    """
    return _SnapTime.GetFlagStr(GraphFlag)
class TUnionFind(object):
    """Proxy of C++ TUnionFind class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Parent(self, Key):
        """
        Parent(TUnionFind self, int64 const & Key) -> TInt64

        Parameters
        ----------
        Key: int64 const &

        """
        return _SnapTime.TUnionFind_Parent(self, Key)


    def Rank(self, Key):
        """
        Rank(TUnionFind self, int64 const & Key) -> TInt64

        Parameters
        ----------
        Key: int64 const &

        """
        return _SnapTime.TUnionFind_Rank(self, Key)


    def __init__(self, *args):
        """
        __init__(TUnionFind self) -> TUnionFind
        __init__(TUnionFind self, int64 const & ExpectKeys) -> TUnionFind

        Parameters
        ----------
        ExpectKeys: int64 const &

        __init__(TUnionFind self, TUnionFind UnionFind) -> TUnionFind

        Parameters
        ----------
        UnionFind: TUnionFind const &

        """
        _SnapTime.TUnionFind_swiginit(self, _SnapTime.new_TUnionFind(*args))

    def Len(self):
        """
        Len(TUnionFind self) -> int64

        Parameters
        ----------
        self: TUnionFind const *

        """
        return _SnapTime.TUnionFind_Len(self)


    def IsKey(self, Key):
        """
        IsKey(TUnionFind self, int64 const & Key) -> bool

        Parameters
        ----------
        Key: int64 const &

        """
        return _SnapTime.TUnionFind_IsKey(self, Key)


    def GetKeyI(self, KeyN):
        """
        GetKeyI(TUnionFind self, int64 const & KeyN) -> int64

        Parameters
        ----------
        KeyN: int64 const &

        """
        return _SnapTime.TUnionFind_GetKeyI(self, KeyN)


    def Find(self, Key):
        """
        Find(TUnionFind self, int64 const & Key) -> int64

        Parameters
        ----------
        Key: int64 const &

        """
        return _SnapTime.TUnionFind_Find(self, Key)


    def Add(self, Key):
        """
        Add(TUnionFind self, int64 const & Key) -> int64

        Parameters
        ----------
        Key: int64 const &

        """
        return _SnapTime.TUnionFind_Add(self, Key)


    def Union(self, Key1, Key2):
        """
        Union(TUnionFind self, int64 const & Key1, int64 const & Key2)

        Parameters
        ----------
        Key1: int64 const &
        Key2: int64 const &

        """
        return _SnapTime.TUnionFind_Union(self, Key1, Key2)


    def IsSameSet(self, Key1, Key2):
        """
        IsSameSet(TUnionFind self, int64 const & Key1, int64 const & Key2) -> bool

        Parameters
        ----------
        Key1: int64 const &
        Key2: int64 const &

        """
        return _SnapTime.TUnionFind_IsSameSet(self, Key1, Key2)


    def Dump(self):
        """
        Dump(TUnionFind self)

        Parameters
        ----------
        self: TUnionFind *

        """
        return _SnapTime.TUnionFind_Dump(self)

    __swig_destroy__ = _SnapTime.delete_TUnionFind
TUnionFind.Parent = new_instancemethod(_SnapTime.TUnionFind_Parent, None, TUnionFind)
TUnionFind.Rank = new_instancemethod(_SnapTime.TUnionFind_Rank, None, TUnionFind)
TUnionFind.Len = new_instancemethod(_SnapTime.TUnionFind_Len, None, TUnionFind)
TUnionFind.IsKey = new_instancemethod(_SnapTime.TUnionFind_IsKey, None, TUnionFind)
TUnionFind.GetKeyI = new_instancemethod(_SnapTime.TUnionFind_GetKeyI, None, TUnionFind)
TUnionFind.Find = new_instancemethod(_SnapTime.TUnionFind_Find, None, TUnionFind)
TUnionFind.Add = new_instancemethod(_SnapTime.TUnionFind_Add, None, TUnionFind)
TUnionFind.Union = new_instancemethod(_SnapTime.TUnionFind_Union, None, TUnionFind)
TUnionFind.IsSameSet = new_instancemethod(_SnapTime.TUnionFind_IsSameSet, None, TUnionFind)
TUnionFind.Dump = new_instancemethod(_SnapTime.TUnionFind_Dump, None, TUnionFind)
TUnionFind_swigregister = _SnapTime.TUnionFind_swigregister
TUnionFind_swigregister(TUnionFind)

class TGUtil(object):
    """Proxy of C++ TGUtil class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetCdf(*args):
        """
        GetCdf(TIntPr64V PdfV, TIntPr64V CdfV)

        Parameters
        ----------
        PdfV: TIntPr64V const &
        CdfV: TIntPr64V &

        GetCdf(TFltPr64V PdfV, TFltPr64V CdfV)

        Parameters
        ----------
        PdfV: TFltPr64V const &
        CdfV: TFltPr64V &

        GetCdf(TIntFltKd64V PdfV, TIntFltKd64V CdfV)

        Parameters
        ----------
        PdfV: TIntFltKd64V const &
        CdfV: TIntFltKd64V &

        GetCdf(TIntPr64V PdfV) -> TIntPr64V

        Parameters
        ----------
        PdfV: TIntPr64V const &

        GetCdf(TFltPr64V PdfV) -> TFltPr64V

        Parameters
        ----------
        PdfV: TFltPr64V const &

        """
        return _SnapTime.TGUtil_GetCdf(*args)

    GetCdf = staticmethod(GetCdf)

    def GetCCdf(*args):
        """
        GetCCdf(TIntPr64V PdfV, TIntPr64V CCdfV)

        Parameters
        ----------
        PdfV: TIntPr64V const &
        CCdfV: TIntPr64V &

        GetCCdf(TFltPr64V PdfV, TFltPr64V CCdfV)

        Parameters
        ----------
        PdfV: TFltPr64V const &
        CCdfV: TFltPr64V &

        GetCCdf(TIntFltKd64V PdfV, TIntFltKd64V CCdfV)

        Parameters
        ----------
        PdfV: TIntFltKd64V const &
        CCdfV: TIntFltKd64V &

        GetCCdf(TIntPr64V PdfV) -> TIntPr64V

        Parameters
        ----------
        PdfV: TIntPr64V const &

        GetCCdf(TFltPr64V PdfV) -> TFltPr64V

        Parameters
        ----------
        PdfV: TFltPr64V const &

        """
        return _SnapTime.TGUtil_GetCCdf(*args)

    GetCCdf = staticmethod(GetCCdf)

    def GetPdf(*args):
        """
        GetPdf(TIntPr64V CdfV, TIntPr64V PdfV)

        Parameters
        ----------
        CdfV: TIntPr64V const &
        PdfV: TIntPr64V &

        GetPdf(TFltPr64V CdfV, TFltPr64V PdfV)

        Parameters
        ----------
        CdfV: TFltPr64V const &
        PdfV: TFltPr64V &

        GetPdf(TIntFltKd64V CdfV, TIntFltKd64V PdfV)

        Parameters
        ----------
        CdfV: TIntFltKd64V const &
        PdfV: TIntFltKd64V &

        """
        return _SnapTime.TGUtil_GetPdf(*args)

    GetPdf = staticmethod(GetPdf)

    def Normalize(*args):
        """
        Normalize(TFltPr64V PdfV)

        Parameters
        ----------
        PdfV: TFltPr64V &

        Normalize(TIntFltKd64V PdfV)

        Parameters
        ----------
        PdfV: TIntFltKd64V &

        """
        return _SnapTime.TGUtil_Normalize(*args)

    Normalize = staticmethod(Normalize)

    def MakeExpBins(*args):
        """
        MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV, double const & BinFactor=2, double const & MinYVal=1)

        Parameters
        ----------
        XYValV: TFltPrV const &
        ExpXYValV: TFltPrV &
        BinFactor: double const &
        MinYVal: double const &

        MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV, double const & BinFactor=2)

        Parameters
        ----------
        XYValV: TFltPrV const &
        ExpXYValV: TFltPrV &
        BinFactor: double const &

        MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV)

        Parameters
        ----------
        XYValV: TFltPrV const &
        ExpXYValV: TFltPrV &

        MakeExpBins(TFltKdV const & XYValV, TFltKdV & ExpXYValV, double const & BinFactor=2, double const & MinYVal=1)

        Parameters
        ----------
        XYValV: TFltKdV const &
        ExpXYValV: TFltKdV &
        BinFactor: double const &
        MinYVal: double const &

        MakeExpBins(TFltKdV const & XYValV, TFltKdV & ExpXYValV, double const & BinFactor=2)

        Parameters
        ----------
        XYValV: TFltKdV const &
        ExpXYValV: TFltKdV &
        BinFactor: double const &

        MakeExpBins(TFltKdV const & XYValV, TFltKdV & ExpXYValV)

        Parameters
        ----------
        XYValV: TFltKdV const &
        ExpXYValV: TFltKdV &

        MakeExpBins(TFltV YValV, TFltV ExpYValV, double const & BinFactor=1.01)

        Parameters
        ----------
        YValV: TFltV const &
        ExpYValV: TFltV &
        BinFactor: double const &

        MakeExpBins(TFltV YValV, TFltV ExpYValV)

        Parameters
        ----------
        YValV: TFltV const &
        ExpYValV: TFltV &

        MakeExpBins(TIntV YValV, TIntV ExpYValV, double const & BinFactor=1.01)

        Parameters
        ----------
        YValV: TIntV const &
        ExpYValV: TIntV &
        BinFactor: double const &

        MakeExpBins(TIntV YValV, TIntV ExpYValV)

        Parameters
        ----------
        YValV: TIntV const &
        ExpYValV: TIntV &

        """
        return _SnapTime.TGUtil_MakeExpBins(*args)

    MakeExpBins = staticmethod(MakeExpBins)

    def __init__(self):
        """__init__(TGUtil self) -> TGUtil"""
        _SnapTime.TGUtil_swiginit(self, _SnapTime.new_TGUtil())
    __swig_destroy__ = _SnapTime.delete_TGUtil
TGUtil_swigregister = _SnapTime.TGUtil_swigregister
TGUtil_swigregister(TGUtil)

def TGUtil_GetCdf(*args):
    """
    GetCdf(TIntPr64V PdfV, TIntPr64V CdfV)

    Parameters
    ----------
    PdfV: TIntPr64V const &
    CdfV: TIntPr64V &

    GetCdf(TFltPr64V PdfV, TFltPr64V CdfV)

    Parameters
    ----------
    PdfV: TFltPr64V const &
    CdfV: TFltPr64V &

    GetCdf(TIntFltKd64V PdfV, TIntFltKd64V CdfV)

    Parameters
    ----------
    PdfV: TIntFltKd64V const &
    CdfV: TIntFltKd64V &

    GetCdf(TIntPr64V PdfV) -> TIntPr64V

    Parameters
    ----------
    PdfV: TIntPr64V const &

    TGUtil_GetCdf(TFltPr64V PdfV) -> TFltPr64V

    Parameters
    ----------
    PdfV: TFltPr64V const &

    """
    return _SnapTime.TGUtil_GetCdf(*args)

def TGUtil_GetCCdf(*args):
    """
    GetCCdf(TIntPr64V PdfV, TIntPr64V CCdfV)

    Parameters
    ----------
    PdfV: TIntPr64V const &
    CCdfV: TIntPr64V &

    GetCCdf(TFltPr64V PdfV, TFltPr64V CCdfV)

    Parameters
    ----------
    PdfV: TFltPr64V const &
    CCdfV: TFltPr64V &

    GetCCdf(TIntFltKd64V PdfV, TIntFltKd64V CCdfV)

    Parameters
    ----------
    PdfV: TIntFltKd64V const &
    CCdfV: TIntFltKd64V &

    GetCCdf(TIntPr64V PdfV) -> TIntPr64V

    Parameters
    ----------
    PdfV: TIntPr64V const &

    TGUtil_GetCCdf(TFltPr64V PdfV) -> TFltPr64V

    Parameters
    ----------
    PdfV: TFltPr64V const &

    """
    return _SnapTime.TGUtil_GetCCdf(*args)

def TGUtil_GetPdf(*args):
    """
    GetPdf(TIntPr64V CdfV, TIntPr64V PdfV)

    Parameters
    ----------
    CdfV: TIntPr64V const &
    PdfV: TIntPr64V &

    GetPdf(TFltPr64V CdfV, TFltPr64V PdfV)

    Parameters
    ----------
    CdfV: TFltPr64V const &
    PdfV: TFltPr64V &

    TGUtil_GetPdf(TIntFltKd64V CdfV, TIntFltKd64V PdfV)

    Parameters
    ----------
    CdfV: TIntFltKd64V const &
    PdfV: TIntFltKd64V &

    """
    return _SnapTime.TGUtil_GetPdf(*args)

def TGUtil_Normalize(*args):
    """
    Normalize(TFltPr64V PdfV)

    Parameters
    ----------
    PdfV: TFltPr64V &

    TGUtil_Normalize(TIntFltKd64V PdfV)

    Parameters
    ----------
    PdfV: TIntFltKd64V &

    """
    return _SnapTime.TGUtil_Normalize(*args)

def TGUtil_MakeExpBins(*args):
    """
    MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV, double const & BinFactor=2, double const & MinYVal=1)

    Parameters
    ----------
    XYValV: TFltPrV const &
    ExpXYValV: TFltPrV &
    BinFactor: double const &
    MinYVal: double const &

    MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV, double const & BinFactor=2)

    Parameters
    ----------
    XYValV: TFltPrV const &
    ExpXYValV: TFltPrV &
    BinFactor: double const &

    MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV)

    Parameters
    ----------
    XYValV: TFltPrV const &
    ExpXYValV: TFltPrV &

    MakeExpBins(TFltKdV const & XYValV, TFltKdV & ExpXYValV, double const & BinFactor=2, double const & MinYVal=1)

    Parameters
    ----------
    XYValV: TFltKdV const &
    ExpXYValV: TFltKdV &
    BinFactor: double const &
    MinYVal: double const &

    MakeExpBins(TFltKdV const & XYValV, TFltKdV & ExpXYValV, double const & BinFactor=2)

    Parameters
    ----------
    XYValV: TFltKdV const &
    ExpXYValV: TFltKdV &
    BinFactor: double const &

    MakeExpBins(TFltKdV const & XYValV, TFltKdV & ExpXYValV)

    Parameters
    ----------
    XYValV: TFltKdV const &
    ExpXYValV: TFltKdV &

    MakeExpBins(TFltV YValV, TFltV ExpYValV, double const & BinFactor=1.01)

    Parameters
    ----------
    YValV: TFltV const &
    ExpYValV: TFltV &
    BinFactor: double const &

    MakeExpBins(TFltV YValV, TFltV ExpYValV)

    Parameters
    ----------
    YValV: TFltV const &
    ExpYValV: TFltV &

    MakeExpBins(TIntV YValV, TIntV ExpYValV, double const & BinFactor=1.01)

    Parameters
    ----------
    YValV: TIntV const &
    ExpYValV: TIntV &
    BinFactor: double const &

    TGUtil_MakeExpBins(TIntV YValV, TIntV ExpYValV)

    Parameters
    ----------
    YValV: TIntV const &
    ExpYValV: TIntV &

    """
    return _SnapTime.TGUtil_MakeExpBins(*args)

class TStrUtil(object):
    """Proxy of C++ TStrUtil class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetXmlTagVal(XmlLx, TagNm):
        """
        GetXmlTagVal(TXmlLx & XmlLx, TChA TagNm) -> TChA

        Parameters
        ----------
        XmlLx: TXmlLx &
        TagNm: TChA const &

        """
        return _SnapTime.TStrUtil_GetXmlTagVal(XmlLx, TagNm)

    GetXmlTagVal = staticmethod(GetXmlTagVal)

    def GetXmlTagNmVal(XmlLx, TagNm, TagVal):
        """
        GetXmlTagNmVal(TXmlLx & XmlLx, TChA TagNm, TChA TagVal)

        Parameters
        ----------
        XmlLx: TXmlLx &
        TagNm: TChA &
        TagVal: TChA &

        """
        return _SnapTime.TStrUtil_GetXmlTagNmVal(XmlLx, TagNm, TagVal)

    GetXmlTagNmVal = staticmethod(GetXmlTagNmVal)

    def GetXmlTagNmVal2(XmlLx, TagNm, TagVal, TakeTagNms):
        """
        GetXmlTagNmVal2(TXmlLx & XmlLx, TChA TagNm, TChA TagVal, bool const & TakeTagNms) -> bool

        Parameters
        ----------
        XmlLx: TXmlLx &
        TagNm: TChA &
        TagVal: TChA &
        TakeTagNms: bool const &

        """
        return _SnapTime.TStrUtil_GetXmlTagNmVal2(XmlLx, TagNm, TagVal, TakeTagNms)

    GetXmlTagNmVal2 = staticmethod(GetXmlTagNmVal2)

    def GetDomNm(UrlChA):
        """
        GetDomNm(TChA UrlChA) -> TChA

        Parameters
        ----------
        UrlChA: TChA const &

        """
        return _SnapTime.TStrUtil_GetDomNm(UrlChA)

    GetDomNm = staticmethod(GetDomNm)

    def GetDomNm2(UrlChA):
        """
        GetDomNm2(TChA UrlChA) -> TChA

        Parameters
        ----------
        UrlChA: TChA const &

        """
        return _SnapTime.TStrUtil_GetDomNm2(UrlChA)

    GetDomNm2 = staticmethod(GetDomNm2)

    def GetWebsiteNm(UrlChA):
        """
        GetWebsiteNm(TChA UrlChA) -> TChA

        Parameters
        ----------
        UrlChA: TChA const &

        """
        return _SnapTime.TStrUtil_GetWebsiteNm(UrlChA)

    GetWebsiteNm = staticmethod(GetWebsiteNm)

    def GetNormalizedUrl(UrlIn, BaseUrl, UrlOut):
        """
        GetNormalizedUrl(TChA UrlIn, TChA BaseUrl, TChA UrlOut) -> bool

        Parameters
        ----------
        UrlIn: TChA const &
        BaseUrl: TChA const &
        UrlOut: TChA &

        """
        return _SnapTime.TStrUtil_GetNormalizedUrl(UrlIn, BaseUrl, UrlOut)

    GetNormalizedUrl = staticmethod(GetNormalizedUrl)

    def StripEnd(Str, SearchStr, NewStr):
        """
        StripEnd(TChA Str, TChA SearchStr, TChA NewStr) -> bool

        Parameters
        ----------
        Str: TChA const &
        SearchStr: TChA const &
        NewStr: TChA &

        """
        return _SnapTime.TStrUtil_StripEnd(Str, SearchStr, NewStr)

    StripEnd = staticmethod(StripEnd)

    def GetShorStr(LongStr, MaxLen=50):
        """
        GetShorStr(TChA LongStr, int const MaxLen=50) -> TChA

        Parameters
        ----------
        LongStr: TChA const &
        MaxLen: int const

        GetShorStr(TChA LongStr) -> TChA

        Parameters
        ----------
        LongStr: TChA const &

        """
        return _SnapTime.TStrUtil_GetShorStr(LongStr, MaxLen)

    GetShorStr = staticmethod(GetShorStr)

    def GetCleanStr(ChA):
        """
        GetCleanStr(TChA ChA) -> TChA

        Parameters
        ----------
        ChA: TChA const &

        """
        return _SnapTime.TStrUtil_GetCleanStr(ChA)

    GetCleanStr = staticmethod(GetCleanStr)

    def GetCleanWrdStr(ChA):
        """
        GetCleanWrdStr(TChA ChA) -> TChA

        Parameters
        ----------
        ChA: TChA const &

        """
        return _SnapTime.TStrUtil_GetCleanWrdStr(ChA)

    GetCleanWrdStr = staticmethod(GetCleanWrdStr)

    def CountWords(*args):
        """
        CountWords(char const * CStr) -> int

        Parameters
        ----------
        CStr: char const *

        CountWords(TChA ChA) -> int

        Parameters
        ----------
        ChA: TChA const &

        CountWords(TChA ChA, TStrHash< TInt > const & StopWordH) -> int

        Parameters
        ----------
        ChA: TChA const &
        StopWordH: TStrHash< TInt > const &

        """
        return _SnapTime.TStrUtil_CountWords(*args)

    CountWords = staticmethod(CountWords)

    def SplitWords(ChA, WrdV, SplitOnWs=True):
        """
        SplitWords(TChA ChA, TVec< char * > & WrdV, bool const & SplitOnWs=True) -> int

        Parameters
        ----------
        ChA: TChA &
        WrdV: TVec< char * > &
        SplitOnWs: bool const &

        SplitWords(TChA ChA, TVec< char * > & WrdV) -> int

        Parameters
        ----------
        ChA: TChA &
        WrdV: TVec< char * > &

        """
        return _SnapTime.TStrUtil_SplitWords(ChA, WrdV, SplitOnWs)

    SplitWords = staticmethod(SplitWords)

    def SplitOnCh(ChA, WrdV, Ch, SkipEmpty=False):
        """
        SplitOnCh(TChA ChA, TVec< char * > & WrdV, char const & Ch, bool const & SkipEmpty=False) -> int

        Parameters
        ----------
        ChA: TChA &
        WrdV: TVec< char * > &
        Ch: char const &
        SkipEmpty: bool const &

        SplitOnCh(TChA ChA, TVec< char * > & WrdV, char const & Ch) -> int

        Parameters
        ----------
        ChA: TChA &
        WrdV: TVec< char * > &
        Ch: char const &

        """
        return _SnapTime.TStrUtil_SplitOnCh(ChA, WrdV, Ch, SkipEmpty)

    SplitOnCh = staticmethod(SplitOnCh)

    def SplitLines(ChA, LineV, SkipEmpty=False):
        """
        SplitLines(TChA ChA, TVec< char * > & LineV, bool const & SkipEmpty=False) -> int

        Parameters
        ----------
        ChA: TChA &
        LineV: TVec< char * > &
        SkipEmpty: bool const &

        SplitLines(TChA ChA, TVec< char * > & LineV) -> int

        Parameters
        ----------
        ChA: TChA &
        LineV: TVec< char * > &

        """
        return _SnapTime.TStrUtil_SplitLines(ChA, LineV, SkipEmpty)

    SplitLines = staticmethod(SplitLines)

    def SplitSentences(ChA, SentenceV):
        """
        SplitSentences(TChA ChA, TVec< char * > & SentenceV) -> int

        Parameters
        ----------
        ChA: TChA &
        SentenceV: TVec< char * > &

        """
        return _SnapTime.TStrUtil_SplitSentences(ChA, SentenceV)

    SplitSentences = staticmethod(SplitSentences)

    def RemoveHtmlTags(HtmlStr, TextStr):
        """
        RemoveHtmlTags(TChA HtmlStr, TChA TextStr)

        Parameters
        ----------
        HtmlStr: TChA const &
        TextStr: TChA &

        """
        return _SnapTime.TStrUtil_RemoveHtmlTags(HtmlStr, TextStr)

    RemoveHtmlTags = staticmethod(RemoveHtmlTags)

    def IsLatinStr(Str, MinAlFrac):
        """
        IsLatinStr(TChA Str, double const & MinAlFrac) -> bool

        Parameters
        ----------
        Str: TChA const &
        MinAlFrac: double const &

        """
        return _SnapTime.TStrUtil_IsLatinStr(Str, MinAlFrac)

    IsLatinStr = staticmethod(IsLatinStr)

    def GetWIdV(StrH, CStr, WIdV):
        """
        GetWIdV(TStrHash< TInt > const & StrH, char const * CStr, TIntV WIdV)

        Parameters
        ----------
        StrH: TStrHash< TInt > const &
        CStr: char const *
        WIdV: TIntV &

        """
        return _SnapTime.TStrUtil_GetWIdV(StrH, CStr, WIdV)

    GetWIdV = staticmethod(GetWIdV)

    def GetAddWIdV(StrH, CStr, WIdV):
        """
        GetAddWIdV(TStrHash< TInt > & StrH, char const * CStr, TIntV WIdV)

        Parameters
        ----------
        StrH: TStrHash< TInt > &
        CStr: char const *
        WIdV: TIntV &

        """
        return _SnapTime.TStrUtil_GetAddWIdV(StrH, CStr, WIdV)

    GetAddWIdV = staticmethod(GetAddWIdV)

    def GetTmFromStr(TmStr, Tm):
        """
        GetTmFromStr(char const * TmStr, TSecTm & Tm) -> bool

        Parameters
        ----------
        TmStr: char const *
        Tm: TSecTm &

        """
        return _SnapTime.TStrUtil_GetTmFromStr(TmStr, Tm)

    GetTmFromStr = staticmethod(GetTmFromStr)

    def GetStdName(AuthorName):
        """
        GetStdName(TStr AuthorName) -> TStr

        Parameters
        ----------
        AuthorName: TStr

        """
        return _SnapTime.TStrUtil_GetStdName(AuthorName)

    GetStdName = staticmethod(GetStdName)

    def GetStdNameV(AuthorNames, StdNameV):
        """
        GetStdNameV(TStr AuthorNames, TStrV StdNameV)

        Parameters
        ----------
        AuthorNames: TStr
        StdNameV: TStrV &

        """
        return _SnapTime.TStrUtil_GetStdNameV(AuthorNames, StdNameV)

    GetStdNameV = staticmethod(GetStdNameV)

    def __init__(self):
        """__init__(TStrUtil self) -> TStrUtil"""
        _SnapTime.TStrUtil_swiginit(self, _SnapTime.new_TStrUtil())
    __swig_destroy__ = _SnapTime.delete_TStrUtil
TStrUtil_swigregister = _SnapTime.TStrUtil_swigregister
TStrUtil_swigregister(TStrUtil)

def TStrUtil_GetXmlTagVal(XmlLx, TagNm):
    """
    TStrUtil_GetXmlTagVal(TXmlLx & XmlLx, TChA TagNm) -> TChA

    Parameters
    ----------
    XmlLx: TXmlLx &
    TagNm: TChA const &

    """
    return _SnapTime.TStrUtil_GetXmlTagVal(XmlLx, TagNm)

def TStrUtil_GetXmlTagNmVal(XmlLx, TagNm, TagVal):
    """
    TStrUtil_GetXmlTagNmVal(TXmlLx & XmlLx, TChA TagNm, TChA TagVal)

    Parameters
    ----------
    XmlLx: TXmlLx &
    TagNm: TChA &
    TagVal: TChA &

    """
    return _SnapTime.TStrUtil_GetXmlTagNmVal(XmlLx, TagNm, TagVal)

def TStrUtil_GetXmlTagNmVal2(XmlLx, TagNm, TagVal, TakeTagNms):
    """
    TStrUtil_GetXmlTagNmVal2(TXmlLx & XmlLx, TChA TagNm, TChA TagVal, bool const & TakeTagNms) -> bool

    Parameters
    ----------
    XmlLx: TXmlLx &
    TagNm: TChA &
    TagVal: TChA &
    TakeTagNms: bool const &

    """
    return _SnapTime.TStrUtil_GetXmlTagNmVal2(XmlLx, TagNm, TagVal, TakeTagNms)

def TStrUtil_GetDomNm(UrlChA):
    """
    TStrUtil_GetDomNm(TChA UrlChA) -> TChA

    Parameters
    ----------
    UrlChA: TChA const &

    """
    return _SnapTime.TStrUtil_GetDomNm(UrlChA)

def TStrUtil_GetDomNm2(UrlChA):
    """
    TStrUtil_GetDomNm2(TChA UrlChA) -> TChA

    Parameters
    ----------
    UrlChA: TChA const &

    """
    return _SnapTime.TStrUtil_GetDomNm2(UrlChA)

def TStrUtil_GetWebsiteNm(UrlChA):
    """
    TStrUtil_GetWebsiteNm(TChA UrlChA) -> TChA

    Parameters
    ----------
    UrlChA: TChA const &

    """
    return _SnapTime.TStrUtil_GetWebsiteNm(UrlChA)

def TStrUtil_GetNormalizedUrl(UrlIn, BaseUrl, UrlOut):
    """
    TStrUtil_GetNormalizedUrl(TChA UrlIn, TChA BaseUrl, TChA UrlOut) -> bool

    Parameters
    ----------
    UrlIn: TChA const &
    BaseUrl: TChA const &
    UrlOut: TChA &

    """
    return _SnapTime.TStrUtil_GetNormalizedUrl(UrlIn, BaseUrl, UrlOut)

def TStrUtil_StripEnd(Str, SearchStr, NewStr):
    """
    TStrUtil_StripEnd(TChA Str, TChA SearchStr, TChA NewStr) -> bool

    Parameters
    ----------
    Str: TChA const &
    SearchStr: TChA const &
    NewStr: TChA &

    """
    return _SnapTime.TStrUtil_StripEnd(Str, SearchStr, NewStr)

def TStrUtil_GetShorStr(LongStr, MaxLen=50):
    """
    GetShorStr(TChA LongStr, int const MaxLen=50) -> TChA

    Parameters
    ----------
    LongStr: TChA const &
    MaxLen: int const

    TStrUtil_GetShorStr(TChA LongStr) -> TChA

    Parameters
    ----------
    LongStr: TChA const &

    """
    return _SnapTime.TStrUtil_GetShorStr(LongStr, MaxLen)

def TStrUtil_GetCleanStr(ChA):
    """
    TStrUtil_GetCleanStr(TChA ChA) -> TChA

    Parameters
    ----------
    ChA: TChA const &

    """
    return _SnapTime.TStrUtil_GetCleanStr(ChA)

def TStrUtil_GetCleanWrdStr(ChA):
    """
    TStrUtil_GetCleanWrdStr(TChA ChA) -> TChA

    Parameters
    ----------
    ChA: TChA const &

    """
    return _SnapTime.TStrUtil_GetCleanWrdStr(ChA)

def TStrUtil_CountWords(*args):
    """
    CountWords(char const * CStr) -> int

    Parameters
    ----------
    CStr: char const *

    CountWords(TChA ChA) -> int

    Parameters
    ----------
    ChA: TChA const &

    TStrUtil_CountWords(TChA ChA, TStrHash< TInt > const & StopWordH) -> int

    Parameters
    ----------
    ChA: TChA const &
    StopWordH: TStrHash< TInt > const &

    """
    return _SnapTime.TStrUtil_CountWords(*args)

def TStrUtil_SplitWords(ChA, WrdV, SplitOnWs=True):
    """
    SplitWords(TChA ChA, TVec< char * > & WrdV, bool const & SplitOnWs=True) -> int

    Parameters
    ----------
    ChA: TChA &
    WrdV: TVec< char * > &
    SplitOnWs: bool const &

    TStrUtil_SplitWords(TChA ChA, TVec< char * > & WrdV) -> int

    Parameters
    ----------
    ChA: TChA &
    WrdV: TVec< char * > &

    """
    return _SnapTime.TStrUtil_SplitWords(ChA, WrdV, SplitOnWs)

def TStrUtil_SplitOnCh(ChA, WrdV, Ch, SkipEmpty=False):
    """
    SplitOnCh(TChA ChA, TVec< char * > & WrdV, char const & Ch, bool const & SkipEmpty=False) -> int

    Parameters
    ----------
    ChA: TChA &
    WrdV: TVec< char * > &
    Ch: char const &
    SkipEmpty: bool const &

    TStrUtil_SplitOnCh(TChA ChA, TVec< char * > & WrdV, char const & Ch) -> int

    Parameters
    ----------
    ChA: TChA &
    WrdV: TVec< char * > &
    Ch: char const &

    """
    return _SnapTime.TStrUtil_SplitOnCh(ChA, WrdV, Ch, SkipEmpty)

def TStrUtil_SplitLines(ChA, LineV, SkipEmpty=False):
    """
    SplitLines(TChA ChA, TVec< char * > & LineV, bool const & SkipEmpty=False) -> int

    Parameters
    ----------
    ChA: TChA &
    LineV: TVec< char * > &
    SkipEmpty: bool const &

    TStrUtil_SplitLines(TChA ChA, TVec< char * > & LineV) -> int

    Parameters
    ----------
    ChA: TChA &
    LineV: TVec< char * > &

    """
    return _SnapTime.TStrUtil_SplitLines(ChA, LineV, SkipEmpty)

def TStrUtil_SplitSentences(ChA, SentenceV):
    """
    TStrUtil_SplitSentences(TChA ChA, TVec< char * > & SentenceV) -> int

    Parameters
    ----------
    ChA: TChA &
    SentenceV: TVec< char * > &

    """
    return _SnapTime.TStrUtil_SplitSentences(ChA, SentenceV)

def TStrUtil_RemoveHtmlTags(HtmlStr, TextStr):
    """
    TStrUtil_RemoveHtmlTags(TChA HtmlStr, TChA TextStr)

    Parameters
    ----------
    HtmlStr: TChA const &
    TextStr: TChA &

    """
    return _SnapTime.TStrUtil_RemoveHtmlTags(HtmlStr, TextStr)

def TStrUtil_IsLatinStr(Str, MinAlFrac):
    """
    TStrUtil_IsLatinStr(TChA Str, double const & MinAlFrac) -> bool

    Parameters
    ----------
    Str: TChA const &
    MinAlFrac: double const &

    """
    return _SnapTime.TStrUtil_IsLatinStr(Str, MinAlFrac)

def TStrUtil_GetWIdV(StrH, CStr, WIdV):
    """
    TStrUtil_GetWIdV(TStrHash< TInt > const & StrH, char const * CStr, TIntV WIdV)

    Parameters
    ----------
    StrH: TStrHash< TInt > const &
    CStr: char const *
    WIdV: TIntV &

    """
    return _SnapTime.TStrUtil_GetWIdV(StrH, CStr, WIdV)

def TStrUtil_GetAddWIdV(StrH, CStr, WIdV):
    """
    TStrUtil_GetAddWIdV(TStrHash< TInt > & StrH, char const * CStr, TIntV WIdV)

    Parameters
    ----------
    StrH: TStrHash< TInt > &
    CStr: char const *
    WIdV: TIntV &

    """
    return _SnapTime.TStrUtil_GetAddWIdV(StrH, CStr, WIdV)

def TStrUtil_GetTmFromStr(TmStr, Tm):
    """
    TStrUtil_GetTmFromStr(char const * TmStr, TSecTm & Tm) -> bool

    Parameters
    ----------
    TmStr: char const *
    Tm: TSecTm &

    """
    return _SnapTime.TStrUtil_GetTmFromStr(TmStr, Tm)

def TStrUtil_GetStdName(AuthorName):
    """
    TStrUtil_GetStdName(TStr AuthorName) -> TStr

    Parameters
    ----------
    AuthorName: TStr

    """
    return _SnapTime.TStrUtil_GetStdName(AuthorName)

def TStrUtil_GetStdNameV(AuthorNames, StdNameV):
    """
    TStrUtil_GetStdNameV(TStr AuthorNames, TStrV StdNameV)

    Parameters
    ----------
    AuthorNames: TStr
    StdNameV: TStrV &

    """
    return _SnapTime.TStrUtil_GetStdNameV(AuthorNames, StdNameV)

class TStopwatch(object):
    """Proxy of C++ TStopwatch class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    LoadTables = _SnapTime.TStopwatch_LoadTables
    Preprocess = _SnapTime.TStopwatch_Preprocess
    ConstructGraph = _SnapTime.TStopwatch_ConstructGraph
    Compute = _SnapTime.TStopwatch_Compute
    Postprocess = _SnapTime.TStopwatch_Postprocess
    StoreOutputs = _SnapTime.TStopwatch_StoreOutputs
    AllocateColumnCopies = _SnapTime.TStopwatch_AllocateColumnCopies
    CopyColumns = _SnapTime.TStopwatch_CopyColumns
    Sort = _SnapTime.TStopwatch_Sort
    Group = _SnapTime.TStopwatch_Group
    MergeNeighborhoods = _SnapTime.TStopwatch_MergeNeighborhoods
    AddNeighborhoods = _SnapTime.TStopwatch_AddNeighborhoods
    AddEdges = _SnapTime.TStopwatch_AddEdges
    Sort2 = _SnapTime.TStopwatch_Sort2
    ComputeOffset = _SnapTime.TStopwatch_ComputeOffset
    ComputeETypes = _SnapTime.TStopwatch_ComputeETypes
    EstimateSizes = _SnapTime.TStopwatch_EstimateSizes
    InitGraph = _SnapTime.TStopwatch_InitGraph
    ExtractNbrETypes = _SnapTime.TStopwatch_ExtractNbrETypes
    CopyNodes = _SnapTime.TStopwatch_CopyNodes
    PopulateGraph = _SnapTime.TStopwatch_PopulateGraph
    ExtractEdges = _SnapTime.TStopwatch_ExtractEdges
    BuildSubgraph = _SnapTime.TStopwatch_BuildSubgraph
    NEXPS = _SnapTime.TStopwatch_NEXPS

    def GetInstance():
        """GetInstance() -> TStopwatch"""
        return _SnapTime.TStopwatch_GetInstance()

    GetInstance = staticmethod(GetInstance)

    def Start(self, Exp):
        """
        Start(TStopwatch self, TStopwatch::TExperiment const Exp)

        Parameters
        ----------
        Exp: enum TStopwatch::TExperiment const

        """
        return _SnapTime.TStopwatch_Start(self, Exp)


    def Stop(self, Exp):
        """
        Stop(TStopwatch self, TStopwatch::TExperiment const Exp)

        Parameters
        ----------
        Exp: enum TStopwatch::TExperiment const

        """
        return _SnapTime.TStopwatch_Stop(self, Exp)


    def Cnt(self, Exp):
        """
        Cnt(TStopwatch self, TStopwatch::TExperiment const Exp) -> int

        Parameters
        ----------
        Exp: enum TStopwatch::TExperiment const

        """
        return _SnapTime.TStopwatch_Cnt(self, Exp)


    def Sum(self, Exp):
        """
        Sum(TStopwatch self, TStopwatch::TExperiment const Exp) -> double

        Parameters
        ----------
        Exp: enum TStopwatch::TExperiment const

        """
        return _SnapTime.TStopwatch_Sum(self, Exp)


    def Avg(self, Exp):
        """
        Avg(TStopwatch self, TStopwatch::TExperiment const Exp) -> double

        Parameters
        ----------
        Exp: enum TStopwatch::TExperiment const

        """
        return _SnapTime.TStopwatch_Avg(self, Exp)


    def Max(self, Exp):
        """
        Max(TStopwatch self, TStopwatch::TExperiment const Exp) -> double

        Parameters
        ----------
        Exp: enum TStopwatch::TExperiment const

        """
        return _SnapTime.TStopwatch_Max(self, Exp)


    def Min(self, Exp):
        """
        Min(TStopwatch self, TStopwatch::TExperiment const Exp) -> double

        Parameters
        ----------
        Exp: enum TStopwatch::TExperiment const

        """
        return _SnapTime.TStopwatch_Min(self, Exp)

    __swig_destroy__ = _SnapTime.delete_TStopwatch
TStopwatch.Start = new_instancemethod(_SnapTime.TStopwatch_Start, None, TStopwatch)
TStopwatch.Stop = new_instancemethod(_SnapTime.TStopwatch_Stop, None, TStopwatch)
TStopwatch.Cnt = new_instancemethod(_SnapTime.TStopwatch_Cnt, None, TStopwatch)
TStopwatch.Sum = new_instancemethod(_SnapTime.TStopwatch_Sum, None, TStopwatch)
TStopwatch.Avg = new_instancemethod(_SnapTime.TStopwatch_Avg, None, TStopwatch)
TStopwatch.Max = new_instancemethod(_SnapTime.TStopwatch_Max, None, TStopwatch)
TStopwatch.Min = new_instancemethod(_SnapTime.TStopwatch_Min, None, TStopwatch)
TStopwatch_swigregister = _SnapTime.TStopwatch_swigregister
TStopwatch_swigregister(TStopwatch)

def TStopwatch_GetInstance():
    """TStopwatch_GetInstance() -> TStopwatch"""
    return _SnapTime.TStopwatch_GetInstance()


def ToCStr(*args):
    """
    ToCStr(int const i) -> char const

    Parameters
    ----------
    i: int const

    ToCStr(uint const i) -> char const

    Parameters
    ----------
    i: uint const

    ToCStr(int64 const i) -> char const

    Parameters
    ----------
    i: int64 const

    ToCStr(uint64 const i) -> char const

    Parameters
    ----------
    i: uint64 const

    ToCStr(TInt i) -> char const

    Parameters
    ----------
    i: TInt const

    ToCStr(TUInt i) -> char const

    Parameters
    ----------
    i: TUInt const

    ToCStr(TInt64 i) -> char const

    Parameters
    ----------
    i: TInt64 const

    ToCStr(TUInt64 i) -> char const *

    Parameters
    ----------
    i: TUInt64 const

    """
    return _SnapTime.ToCStr(*args)
class TBigStrPool(object):
    """Proxy of C++ TBigStrPool class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TBigStrPool self, TSize MxBfLen=0, uint64 _GrowBy=16) -> TBigStrPool

        Parameters
        ----------
        MxBfLen: TSize
        _GrowBy: uint64

        __init__(TBigStrPool self, TSize MxBfLen=0) -> TBigStrPool

        Parameters
        ----------
        MxBfLen: TSize

        __init__(TBigStrPool self) -> TBigStrPool
        __init__(TBigStrPool self, TSIn SIn, bool LoadCompact=True) -> TBigStrPool

        Parameters
        ----------
        SIn: TSIn &
        LoadCompact: bool

        __init__(TBigStrPool self, TSIn SIn) -> TBigStrPool

        Parameters
        ----------
        SIn: TSIn &

        __init__(TBigStrPool self, TBigStrPool Pool) -> TBigStrPool

        Parameters
        ----------
        Pool: TBigStrPool const &

        """
        _SnapTime.TBigStrPool_swiginit(self, _SnapTime.new_TBigStrPool(*args))
    __swig_destroy__ = _SnapTime.delete_TBigStrPool

    def New(*args):
        """
        New(TSize _MxBfLen=0, uint64 _GrowBy=16) -> PBigStrPool

        Parameters
        ----------
        _MxBfLen: TSize
        _GrowBy: uint64

        New(TSize _MxBfLen=0) -> PBigStrPool

        Parameters
        ----------
        _MxBfLen: TSize

        New() -> PBigStrPool
        New(TSIn SIn) -> PBigStrPool

        Parameters
        ----------
        SIn: TSIn &

        New(TStr fileName) -> PBigStrPool

        Parameters
        ----------
        fileName: TStr const &

        """
        return _SnapTime.TBigStrPool_New(*args)

    New = staticmethod(New)

    def Load(SIn, LoadCompacted=True):
        """
        Load(TSIn SIn, bool LoadCompacted=True) -> PBigStrPool

        Parameters
        ----------
        SIn: TSIn &
        LoadCompacted: bool

        Load(TSIn SIn) -> PBigStrPool

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TBigStrPool_Load(SIn, LoadCompacted)

    Load = staticmethod(Load)

    def LoadShM(ShMIn, LoadCompact=True):
        """
        LoadShM(TShMIn ShMIn, bool LoadCompact=True) -> PBigStrPool

        Parameters
        ----------
        ShMIn: TShMIn &
        LoadCompact: bool

        LoadShM(TShMIn ShMIn) -> PBigStrPool

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TBigStrPool_LoadShM(ShMIn, LoadCompact)

    LoadShM = staticmethod(LoadShM)

    def Save(self, *args):
        """
        Save(TBigStrPool self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        Save(TBigStrPool self, TStr fileName)

        Parameters
        ----------
        fileName: TStr const &

        """
        return _SnapTime.TBigStrPool_Save(self, *args)


    def GetStrs(self):
        """
        GetStrs(TBigStrPool self) -> int64

        Parameters
        ----------
        self: TBigStrPool const *

        """
        return _SnapTime.TBigStrPool_GetStrs(self)


    def Len(self):
        """
        Len(TBigStrPool self) -> TSize

        Parameters
        ----------
        self: TBigStrPool const *

        """
        return _SnapTime.TBigStrPool_Len(self)


    def Size(self):
        """
        Size(TBigStrPool self) -> TSize

        Parameters
        ----------
        self: TBigStrPool const *

        """
        return _SnapTime.TBigStrPool_Size(self)


    def Empty(self):
        """
        Empty(TBigStrPool self) -> bool

        Parameters
        ----------
        self: TBigStrPool const *

        """
        return _SnapTime.TBigStrPool_Empty(self)


    def __call__(self):
        """
        __call__(TBigStrPool self) -> char *

        Parameters
        ----------
        self: TBigStrPool const *

        """
        return _SnapTime.TBigStrPool___call__(self)


    def GetMemUsed(self):
        """
        GetMemUsed(TBigStrPool self) -> ::TSize

        Parameters
        ----------
        self: TBigStrPool *

        """
        return _SnapTime.TBigStrPool_GetMemUsed(self)


    def AddStr(self, *args):
        """
        AddStr(TBigStrPool self, char const * Str, uint64 Len) -> int64

        Parameters
        ----------
        Str: char const *
        Len: uint64

        AddStr(TBigStrPool self, char const * Str) -> int64

        Parameters
        ----------
        Str: char const *

        AddStr(TBigStrPool self, TStr Str) -> int64

        Parameters
        ----------
        Str: TStr const &

        """
        return _SnapTime.TBigStrPool_AddStr(self, *args)


    def GetStr(self, StrId):
        """
        GetStr(TBigStrPool self, int64 const & StrId) -> TStr

        Parameters
        ----------
        StrId: int64 const &

        """
        return _SnapTime.TBigStrPool_GetStr(self, StrId)


    def GetCStr(self, StrId):
        """
        GetCStr(TBigStrPool self, int64 const & StrId) -> char const *

        Parameters
        ----------
        StrId: int64 const &

        """
        return _SnapTime.TBigStrPool_GetCStr(self, StrId)


    def GetStrFromOffset(self, Offset):
        """
        GetStrFromOffset(TBigStrPool self, TSize const & Offset) -> TStr

        Parameters
        ----------
        Offset: TSize const &

        """
        return _SnapTime.TBigStrPool_GetStrFromOffset(self, Offset)


    def GetCStrFromOffset(self, Offset):
        """
        GetCStrFromOffset(TBigStrPool self, TSize const & Offset) -> char const *

        Parameters
        ----------
        Offset: TSize const &

        """
        return _SnapTime.TBigStrPool_GetCStrFromOffset(self, Offset)


    def Clr(self, DoDel=False):
        """
        Clr(TBigStrPool self, bool DoDel=False)

        Parameters
        ----------
        DoDel: bool

        Clr(TBigStrPool self)

        Parameters
        ----------
        self: TBigStrPool *

        """
        return _SnapTime.TBigStrPool_Clr(self, DoDel)


    def Cmp(self, StrId, Str):
        """
        Cmp(TBigStrPool self, int64 const & StrId, char const * Str) -> int

        Parameters
        ----------
        StrId: int64 const &
        Str: char const *

        """
        return _SnapTime.TBigStrPool_Cmp(self, StrId, Str)


    def GetPrimHashCd(self, *args):
        """
        GetPrimHashCd(TBigStrPool self, char const * CStr) -> int

        Parameters
        ----------
        CStr: char const *

        GetPrimHashCd(TBigStrPool self, int64 const & StrId) -> int64

        Parameters
        ----------
        StrId: int64 const &

        """
        return _SnapTime.TBigStrPool_GetPrimHashCd(self, *args)


    def GetSecHashCd(self, *args):
        """
        GetSecHashCd(TBigStrPool self, char const * CStr) -> int

        Parameters
        ----------
        CStr: char const *

        GetSecHashCd(TBigStrPool self, int64 const & StrId) -> int64

        Parameters
        ----------
        StrId: int64 const &

        """
        return _SnapTime.TBigStrPool_GetSecHashCd(self, *args)

TBigStrPool.Save = new_instancemethod(_SnapTime.TBigStrPool_Save, None, TBigStrPool)
TBigStrPool.GetStrs = new_instancemethod(_SnapTime.TBigStrPool_GetStrs, None, TBigStrPool)
TBigStrPool.Len = new_instancemethod(_SnapTime.TBigStrPool_Len, None, TBigStrPool)
TBigStrPool.Size = new_instancemethod(_SnapTime.TBigStrPool_Size, None, TBigStrPool)
TBigStrPool.Empty = new_instancemethod(_SnapTime.TBigStrPool_Empty, None, TBigStrPool)
TBigStrPool.__call__ = new_instancemethod(_SnapTime.TBigStrPool___call__, None, TBigStrPool)
TBigStrPool.GetMemUsed = new_instancemethod(_SnapTime.TBigStrPool_GetMemUsed, None, TBigStrPool)
TBigStrPool.AddStr = new_instancemethod(_SnapTime.TBigStrPool_AddStr, None, TBigStrPool)
TBigStrPool.GetStr = new_instancemethod(_SnapTime.TBigStrPool_GetStr, None, TBigStrPool)
TBigStrPool.GetCStr = new_instancemethod(_SnapTime.TBigStrPool_GetCStr, None, TBigStrPool)
TBigStrPool.GetStrFromOffset = new_instancemethod(_SnapTime.TBigStrPool_GetStrFromOffset, None, TBigStrPool)
TBigStrPool.GetCStrFromOffset = new_instancemethod(_SnapTime.TBigStrPool_GetCStrFromOffset, None, TBigStrPool)
TBigStrPool.Clr = new_instancemethod(_SnapTime.TBigStrPool_Clr, None, TBigStrPool)
TBigStrPool.Cmp = new_instancemethod(_SnapTime.TBigStrPool_Cmp, None, TBigStrPool)
TBigStrPool.GetPrimHashCd = new_instancemethod(_SnapTime.TBigStrPool_GetPrimHashCd, None, TBigStrPool)
TBigStrPool.GetSecHashCd = new_instancemethod(_SnapTime.TBigStrPool_GetSecHashCd, None, TBigStrPool)
TBigStrPool_swigregister = _SnapTime.TBigStrPool_swigregister
TBigStrPool_swigregister(TBigStrPool)

def TBigStrPool_New(*args):
    """
    New(TSize _MxBfLen=0, uint64 _GrowBy=16) -> PBigStrPool

    Parameters
    ----------
    _MxBfLen: TSize
    _GrowBy: uint64

    New(TSize _MxBfLen=0) -> PBigStrPool

    Parameters
    ----------
    _MxBfLen: TSize

    New() -> PBigStrPool
    New(TSIn SIn) -> PBigStrPool

    Parameters
    ----------
    SIn: TSIn &

    TBigStrPool_New(TStr fileName) -> PBigStrPool

    Parameters
    ----------
    fileName: TStr const &

    """
    return _SnapTime.TBigStrPool_New(*args)

def TBigStrPool_Load(SIn, LoadCompacted=True):
    """
    Load(TSIn SIn, bool LoadCompacted=True) -> PBigStrPool

    Parameters
    ----------
    SIn: TSIn &
    LoadCompacted: bool

    TBigStrPool_Load(TSIn SIn) -> PBigStrPool

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TBigStrPool_Load(SIn, LoadCompacted)

def TBigStrPool_LoadShM(ShMIn, LoadCompact=True):
    """
    LoadShM(TShMIn ShMIn, bool LoadCompact=True) -> PBigStrPool

    Parameters
    ----------
    ShMIn: TShMIn &
    LoadCompact: bool

    TBigStrPool_LoadShM(TShMIn ShMIn) -> PBigStrPool

    Parameters
    ----------
    ShMIn: TShMIn &

    """
    return _SnapTime.TBigStrPool_LoadShM(ShMIn, LoadCompact)

class TStrHashF_OldGLib(object):
    """Proxy of C++ TStrHashF_OldGLib class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetPrimHashCd(*args):
        """
        GetPrimHashCd(char const * p) -> int

        Parameters
        ----------
        p: char const *

        GetPrimHashCd(TStr s) -> int

        Parameters
        ----------
        s: TStr const &

        """
        return _SnapTime.TStrHashF_OldGLib_GetPrimHashCd(*args)

    GetPrimHashCd = staticmethod(GetPrimHashCd)

    def GetSecHashCd(*args):
        """
        GetSecHashCd(char const * p) -> int

        Parameters
        ----------
        p: char const *

        GetSecHashCd(TStr s) -> int

        Parameters
        ----------
        s: TStr const &

        """
        return _SnapTime.TStrHashF_OldGLib_GetSecHashCd(*args)

    GetSecHashCd = staticmethod(GetSecHashCd)

    def __init__(self):
        """__init__(TStrHashF_OldGLib self) -> TStrHashF_OldGLib"""
        _SnapTime.TStrHashF_OldGLib_swiginit(self, _SnapTime.new_TStrHashF_OldGLib())
    __swig_destroy__ = _SnapTime.delete_TStrHashF_OldGLib
TStrHashF_OldGLib_swigregister = _SnapTime.TStrHashF_OldGLib_swigregister
TStrHashF_OldGLib_swigregister(TStrHashF_OldGLib)

def TStrHashF_OldGLib_GetPrimHashCd(*args):
    """
    GetPrimHashCd(char const * p) -> int

    Parameters
    ----------
    p: char const *

    TStrHashF_OldGLib_GetPrimHashCd(TStr s) -> int

    Parameters
    ----------
    s: TStr const &

    """
    return _SnapTime.TStrHashF_OldGLib_GetPrimHashCd(*args)

def TStrHashF_OldGLib_GetSecHashCd(*args):
    """
    GetSecHashCd(char const * p) -> int

    Parameters
    ----------
    p: char const *

    TStrHashF_OldGLib_GetSecHashCd(TStr s) -> int

    Parameters
    ----------
    s: TStr const &

    """
    return _SnapTime.TStrHashF_OldGLib_GetSecHashCd(*args)

class TStrHashF_Md5(object):
    """Proxy of C++ TStrHashF_Md5 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetPrimHashCd(*args):
        """
        GetPrimHashCd(char const * p) -> int

        Parameters
        ----------
        p: char const *

        GetPrimHashCd(TStr s) -> int

        Parameters
        ----------
        s: TStr const &

        """
        return _SnapTime.TStrHashF_Md5_GetPrimHashCd(*args)

    GetPrimHashCd = staticmethod(GetPrimHashCd)

    def GetSecHashCd(*args):
        """
        GetSecHashCd(char const * p) -> int

        Parameters
        ----------
        p: char const *

        GetSecHashCd(TStr s) -> int

        Parameters
        ----------
        s: TStr const &

        """
        return _SnapTime.TStrHashF_Md5_GetSecHashCd(*args)

    GetSecHashCd = staticmethod(GetSecHashCd)

    def __init__(self):
        """__init__(TStrHashF_Md5 self) -> TStrHashF_Md5"""
        _SnapTime.TStrHashF_Md5_swiginit(self, _SnapTime.new_TStrHashF_Md5())
    __swig_destroy__ = _SnapTime.delete_TStrHashF_Md5
TStrHashF_Md5_swigregister = _SnapTime.TStrHashF_Md5_swigregister
TStrHashF_Md5_swigregister(TStrHashF_Md5)

def TStrHashF_Md5_GetPrimHashCd(*args):
    """
    GetPrimHashCd(char const * p) -> int

    Parameters
    ----------
    p: char const *

    TStrHashF_Md5_GetPrimHashCd(TStr s) -> int

    Parameters
    ----------
    s: TStr const &

    """
    return _SnapTime.TStrHashF_Md5_GetPrimHashCd(*args)

def TStrHashF_Md5_GetSecHashCd(*args):
    """
    GetSecHashCd(char const * p) -> int

    Parameters
    ----------
    p: char const *

    TStrHashF_Md5_GetSecHashCd(TStr s) -> int

    Parameters
    ----------
    s: TStr const &

    """
    return _SnapTime.TStrHashF_Md5_GetSecHashCd(*args)

class TStrHashF_DJB(object):
    """Proxy of C++ TStrHashF_DJB class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetPrimHashCd(*args):
        """
        GetPrimHashCd(char const * p) -> int

        Parameters
        ----------
        p: char const *

        GetPrimHashCd(TStr s) -> int

        Parameters
        ----------
        s: TStr const &

        GetPrimHashCd(char const * p, ::TSize const & Len) -> int

        Parameters
        ----------
        p: char const *
        Len: ::TSize const &

        """
        return _SnapTime.TStrHashF_DJB_GetPrimHashCd(*args)

    GetPrimHashCd = staticmethod(GetPrimHashCd)

    def GetSecHashCd(*args):
        """
        GetSecHashCd(char const * p) -> int

        Parameters
        ----------
        p: char const *

        GetSecHashCd(TStr s) -> int

        Parameters
        ----------
        s: TStr const &

        GetSecHashCd(char const * p, ::TSize const & Len) -> int

        Parameters
        ----------
        p: char const *
        Len: ::TSize const &

        """
        return _SnapTime.TStrHashF_DJB_GetSecHashCd(*args)

    GetSecHashCd = staticmethod(GetSecHashCd)

    def __init__(self):
        """__init__(TStrHashF_DJB self) -> TStrHashF_DJB"""
        _SnapTime.TStrHashF_DJB_swiginit(self, _SnapTime.new_TStrHashF_DJB())
    __swig_destroy__ = _SnapTime.delete_TStrHashF_DJB
TStrHashF_DJB_swigregister = _SnapTime.TStrHashF_DJB_swigregister
TStrHashF_DJB_swigregister(TStrHashF_DJB)

def TStrHashF_DJB_GetPrimHashCd(*args):
    """
    GetPrimHashCd(char const * p) -> int

    Parameters
    ----------
    p: char const *

    GetPrimHashCd(TStr s) -> int

    Parameters
    ----------
    s: TStr const &

    TStrHashF_DJB_GetPrimHashCd(char const * p, ::TSize const & Len) -> int

    Parameters
    ----------
    p: char const *
    Len: ::TSize const &

    """
    return _SnapTime.TStrHashF_DJB_GetPrimHashCd(*args)

def TStrHashF_DJB_GetSecHashCd(*args):
    """
    GetSecHashCd(char const * p) -> int

    Parameters
    ----------
    p: char const *

    GetSecHashCd(TStr s) -> int

    Parameters
    ----------
    s: TStr const &

    TStrHashF_DJB_GetSecHashCd(char const * p, ::TSize const & Len) -> int

    Parameters
    ----------
    p: char const *
    Len: ::TSize const &

    """
    return _SnapTime.TStrHashF_DJB_GetSecHashCd(*args)

class TUNGraph(object):
    """Proxy of C++ TUNGraph class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TUNGraph self) -> TUNGraph
        __init__(TUNGraph self, int64 const & Nodes, int64 const & Edges) -> TUNGraph

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        __init__(TUNGraph self, TUNGraph Graph) -> TUNGraph

        Parameters
        ----------
        Graph: TUNGraph const &

        __init__(TUNGraph self, TSIn SIn) -> TUNGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TUNGraph_swiginit(self, _SnapTime.new_TUNGraph(*args))

    def Save(self, SOut):
        """
        Save(TUNGraph self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TUNGraph_Save(self, SOut)


    def New(*args):
        """
        New() -> PUNGraph
        New(int64 const & Nodes, int64 const & Edges) -> PUNGraph

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TUNGraph_New(*args)

    New = staticmethod(New)

    def Load(SIn):
        """
        Load(TSIn SIn) -> PUNGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TUNGraph_Load(SIn)

    Load = staticmethod(Load)

    def LoadShM(ShMIn):
        """
        LoadShM(TShMIn ShMIn) -> PUNGraph

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TUNGraph_LoadShM(ShMIn)

    LoadShM = staticmethod(LoadShM)

    def HasFlag(self, Flag):
        """
        HasFlag(TUNGraph self, TGraphFlag const & Flag) -> bool

        Parameters
        ----------
        Flag: TGraphFlag const &

        """
        return _SnapTime.TUNGraph_HasFlag(self, Flag)


    def GetNodes(self):
        """
        GetNodes(TUNGraph self) -> int64

        Parameters
        ----------
        self: TUNGraph const *

        """
        return _SnapTime.TUNGraph_GetNodes(self)


    def AddNodeUnchecked(self, NId=-1):
        """
        AddNodeUnchecked(TUNGraph self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNodeUnchecked(TUNGraph self) -> int64

        Parameters
        ----------
        self: TUNGraph *

        """
        return _SnapTime.TUNGraph_AddNodeUnchecked(self, NId)


    def AddNode(self, *args):
        """
        AddNode(TUNGraph self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(TUNGraph self) -> int64
        AddNode(TUNGraph self, TUNGraph::TNodeI const & NodeI) -> int64

        Parameters
        ----------
        NodeI: TUNGraph::TNodeI const &

        AddNode(TUNGraph self, int64 const & NId, TInt64V NbrNIdV) -> int64

        Parameters
        ----------
        NId: int64 const &
        NbrNIdV: TInt64V const &

        AddNode(TUNGraph self, int64 const & NId, TVecPool< TInt64,int64 > const & Pool, int64 const & NIdVId) -> int64

        Parameters
        ----------
        NId: int64 const &
        Pool: TVecPool< TInt64,int64 > const &
        NIdVId: int64 const &

        """
        return _SnapTime.TUNGraph_AddNode(self, *args)


    def DelNode(self, *args):
        """
        DelNode(TUNGraph self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        DelNode(TUNGraph self, TUNGraph::TNode const & NodeI)

        Parameters
        ----------
        NodeI: TUNGraph::TNode const &

        """
        return _SnapTime.TUNGraph_DelNode(self, *args)


    def IsNode(self, NId):
        """
        IsNode(TUNGraph self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TUNGraph_IsNode(self, NId)


    def GetMxNId(self):
        """
        GetMxNId(TUNGraph self) -> int64

        Parameters
        ----------
        self: TUNGraph const *

        """
        return _SnapTime.TUNGraph_GetMxNId(self)


    def GetEdges(self):
        """
        GetEdges(TUNGraph self) -> int64

        Parameters
        ----------
        self: TUNGraph const *

        """
        return _SnapTime.TUNGraph_GetEdges(self)


    def AddEdgeUnchecked(self, SrcNId, DstNId):
        """
        AddEdgeUnchecked(TUNGraph self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TUNGraph_AddEdgeUnchecked(self, SrcNId, DstNId)


    def AddEdge2(self, SrcNId, DstNId):
        """
        AddEdge2(TUNGraph self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TUNGraph_AddEdge2(self, SrcNId, DstNId)


    def AddEdge(self, *args):
        """
        AddEdge(TUNGraph self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        AddEdge(TUNGraph self, TUNGraph::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TUNGraph::TEdgeI const &

        """
        return _SnapTime.TUNGraph_AddEdge(self, *args)


    def DelEdge(self, SrcNId, DstNId):
        """
        DelEdge(TUNGraph self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TUNGraph_DelEdge(self, SrcNId, DstNId)


    def IsEdge(self, SrcNId, DstNId):
        """
        IsEdge(TUNGraph self, int64 const & SrcNId, int64 const & DstNId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TUNGraph_IsEdge(self, SrcNId, DstNId)


    def GetRndNId(self, *args):
        """
        GetRndNId(TUNGraph self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(TUNGraph self) -> int64

        Parameters
        ----------
        self: TUNGraph *

        """
        return _SnapTime.TUNGraph_GetRndNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(TUNGraph self, TRnd Rnd) -> TUNGraph::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(TUNGraph self) -> TUNGraph::TNodeI

        Parameters
        ----------
        self: TUNGraph *

        """
        return _SnapTime.TUNGraph_GetRndNI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(TUNGraph self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.TUNGraph_GetNIdV(self, NIdV)


    def Empty(self):
        """
        Empty(TUNGraph self) -> bool

        Parameters
        ----------
        self: TUNGraph const *

        """
        return _SnapTime.TUNGraph_Empty(self)


    def Clr(self):
        """
        Clr(TUNGraph self)

        Parameters
        ----------
        self: TUNGraph *

        """
        return _SnapTime.TUNGraph_Clr(self)


    def SortNodeAdjV(self):
        """
        SortNodeAdjV(TUNGraph self)

        Parameters
        ----------
        self: TUNGraph *

        """
        return _SnapTime.TUNGraph_SortNodeAdjV(self)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(TUNGraph self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TUNGraph_Reserve(self, Nodes, Edges)


    def ReserveNIdDeg(self, NId, Deg):
        """
        ReserveNIdDeg(TUNGraph self, int64 const & NId, int64 const & Deg)

        Parameters
        ----------
        NId: int64 const &
        Deg: int64 const &

        """
        return _SnapTime.TUNGraph_ReserveNIdDeg(self, NId, Deg)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(TUNGraph self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(TUNGraph self)

        Parameters
        ----------
        self: TUNGraph *

        """
        return _SnapTime.TUNGraph_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(TUNGraph self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(TUNGraph self) -> bool

        Parameters
        ----------
        self: TUNGraph const *

        """
        return _SnapTime.TUNGraph_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(TUNGraph self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(TUNGraph self)

        Parameters
        ----------
        self: TUNGraph const *

        """
        return _SnapTime.TUNGraph_Dump(self, *args)


    def GetSmallGraph():
        """GetSmallGraph() -> PUNGraph"""
        return _SnapTime.TUNGraph_GetSmallGraph()

    GetSmallGraph = staticmethod(GetSmallGraph)

    def BegNI(self, *args):
        """
        BegNI(TUNGraph self) -> TUNGraph::TNodeI
        BegNI(TUNGraph self) -> TUNGraphNodeI

        Parameters
        ----------
        self: TUNGraph *

        """
        return _SnapTime.TUNGraph_BegNI(self, *args)


    def EndNI(self, *args):
        """
        EndNI(TUNGraph self) -> TUNGraph::TNodeI
        EndNI(TUNGraph self) -> TUNGraphNodeI

        Parameters
        ----------
        self: TUNGraph *

        """
        return _SnapTime.TUNGraph_EndNI(self, *args)


    def GetNI(self, *args):
        """
        GetNI(TUNGraph self, int64 const & NId) -> TUNGraph::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetNI(TUNGraph self) -> TIterNode< TUNGraph >
        GetNI(TUNGraph self, int64 const & NId) -> TUNGraphNodeI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TUNGraph_GetNI(self, *args)


    def BegEI(self, *args):
        """
        BegEI(TUNGraph self) -> TUNGraph::TEdgeI
        BegEI(TUNGraph self) -> TUNGraphEdgeI

        Parameters
        ----------
        self: TUNGraph *

        """
        return _SnapTime.TUNGraph_BegEI(self, *args)


    def EndEI(self, *args):
        """
        EndEI(TUNGraph self) -> TUNGraph::TEdgeI
        EndEI(TUNGraph self) -> TUNGraphEdgeI

        Parameters
        ----------
        self: TUNGraph *

        """
        return _SnapTime.TUNGraph_EndEI(self, *args)


    def GetEI(self, *args):
        """
        GetEI(TUNGraph self, int64 const & SrcNId, int64 const & DstNId) -> TUNGraph::TEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        GetEI(TUNGraph self) -> TIterEdge< TUNGraph >
        GetEI(TUNGraph self, int64 const & SrcNId, int64 const & DstNId) -> TUNGraphEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TUNGraph_GetEI(self, *args)

    __swig_destroy__ = _SnapTime.delete_TUNGraph
TUNGraph.Save = new_instancemethod(_SnapTime.TUNGraph_Save, None, TUNGraph)
TUNGraph.HasFlag = new_instancemethod(_SnapTime.TUNGraph_HasFlag, None, TUNGraph)
TUNGraph.GetNodes = new_instancemethod(_SnapTime.TUNGraph_GetNodes, None, TUNGraph)
TUNGraph.AddNodeUnchecked = new_instancemethod(_SnapTime.TUNGraph_AddNodeUnchecked, None, TUNGraph)
TUNGraph.AddNode = new_instancemethod(_SnapTime.TUNGraph_AddNode, None, TUNGraph)
TUNGraph.DelNode = new_instancemethod(_SnapTime.TUNGraph_DelNode, None, TUNGraph)
TUNGraph.IsNode = new_instancemethod(_SnapTime.TUNGraph_IsNode, None, TUNGraph)
TUNGraph.GetMxNId = new_instancemethod(_SnapTime.TUNGraph_GetMxNId, None, TUNGraph)
TUNGraph.GetEdges = new_instancemethod(_SnapTime.TUNGraph_GetEdges, None, TUNGraph)
TUNGraph.AddEdgeUnchecked = new_instancemethod(_SnapTime.TUNGraph_AddEdgeUnchecked, None, TUNGraph)
TUNGraph.AddEdge2 = new_instancemethod(_SnapTime.TUNGraph_AddEdge2, None, TUNGraph)
TUNGraph.AddEdge = new_instancemethod(_SnapTime.TUNGraph_AddEdge, None, TUNGraph)
TUNGraph.DelEdge = new_instancemethod(_SnapTime.TUNGraph_DelEdge, None, TUNGraph)
TUNGraph.IsEdge = new_instancemethod(_SnapTime.TUNGraph_IsEdge, None, TUNGraph)
TUNGraph.GetRndNId = new_instancemethod(_SnapTime.TUNGraph_GetRndNId, None, TUNGraph)
TUNGraph.GetRndNI = new_instancemethod(_SnapTime.TUNGraph_GetRndNI, None, TUNGraph)
TUNGraph.GetNIdV = new_instancemethod(_SnapTime.TUNGraph_GetNIdV, None, TUNGraph)
TUNGraph.Empty = new_instancemethod(_SnapTime.TUNGraph_Empty, None, TUNGraph)
TUNGraph.Clr = new_instancemethod(_SnapTime.TUNGraph_Clr, None, TUNGraph)
TUNGraph.SortNodeAdjV = new_instancemethod(_SnapTime.TUNGraph_SortNodeAdjV, None, TUNGraph)
TUNGraph.Reserve = new_instancemethod(_SnapTime.TUNGraph_Reserve, None, TUNGraph)
TUNGraph.ReserveNIdDeg = new_instancemethod(_SnapTime.TUNGraph_ReserveNIdDeg, None, TUNGraph)
TUNGraph.Defrag = new_instancemethod(_SnapTime.TUNGraph_Defrag, None, TUNGraph)
TUNGraph.IsOk = new_instancemethod(_SnapTime.TUNGraph_IsOk, None, TUNGraph)
TUNGraph.Dump = new_instancemethod(_SnapTime.TUNGraph_Dump, None, TUNGraph)
TUNGraph.BegNI = new_instancemethod(_SnapTime.TUNGraph_BegNI, None, TUNGraph)
TUNGraph.EndNI = new_instancemethod(_SnapTime.TUNGraph_EndNI, None, TUNGraph)
TUNGraph.GetNI = new_instancemethod(_SnapTime.TUNGraph_GetNI, None, TUNGraph)
TUNGraph.BegEI = new_instancemethod(_SnapTime.TUNGraph_BegEI, None, TUNGraph)
TUNGraph.EndEI = new_instancemethod(_SnapTime.TUNGraph_EndEI, None, TUNGraph)
TUNGraph.GetEI = new_instancemethod(_SnapTime.TUNGraph_GetEI, None, TUNGraph)
TUNGraph_swigregister = _SnapTime.TUNGraph_swigregister
TUNGraph_swigregister(TUNGraph)

def TUNGraph_New(*args):
    """
    New() -> PUNGraph
    TUNGraph_New(int64 const & Nodes, int64 const & Edges) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.TUNGraph_New(*args)

def TUNGraph_Load(SIn):
    """
    TUNGraph_Load(TSIn SIn) -> PUNGraph

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TUNGraph_Load(SIn)

def TUNGraph_LoadShM(ShMIn):
    """
    TUNGraph_LoadShM(TShMIn ShMIn) -> PUNGraph

    Parameters
    ----------
    ShMIn: TShMIn &

    """
    return _SnapTime.TUNGraph_LoadShM(ShMIn)

def TUNGraph_GetSmallGraph():
    """TUNGraph_GetSmallGraph() -> PUNGraph"""
    return _SnapTime.TUNGraph_GetSmallGraph()

class TNGraph(object):
    """Proxy of C++ TNGraph class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNGraph self) -> TNGraph
        __init__(TNGraph self, int64 const & Nodes, int64 const & Edges) -> TNGraph

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        __init__(TNGraph self, TNGraph Graph) -> TNGraph

        Parameters
        ----------
        Graph: TNGraph const &

        __init__(TNGraph self, TSIn SIn) -> TNGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TNGraph_swiginit(self, _SnapTime.new_TNGraph(*args))

    def Save(self, SOut):
        """
        Save(TNGraph self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TNGraph_Save(self, SOut)


    def New(*args):
        """
        New() -> PNGraph
        New(int64 const & Nodes, int64 const & Edges) -> PNGraph

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TNGraph_New(*args)

    New = staticmethod(New)

    def Load(SIn):
        """
        Load(TSIn SIn) -> PNGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TNGraph_Load(SIn)

    Load = staticmethod(Load)

    def LoadShM(ShMIn):
        """
        LoadShM(TShMIn ShMIn) -> PNGraph

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TNGraph_LoadShM(ShMIn)

    LoadShM = staticmethod(LoadShM)

    def HasFlag(self, Flag):
        """
        HasFlag(TNGraph self, TGraphFlag const & Flag) -> bool

        Parameters
        ----------
        Flag: TGraphFlag const &

        """
        return _SnapTime.TNGraph_HasFlag(self, Flag)


    def GetNodes(self):
        """
        GetNodes(TNGraph self) -> int64

        Parameters
        ----------
        self: TNGraph const *

        """
        return _SnapTime.TNGraph_GetNodes(self)


    def AddNodeUnchecked(self, NId=-1):
        """
        AddNodeUnchecked(TNGraph self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNodeUnchecked(TNGraph self) -> int64

        Parameters
        ----------
        self: TNGraph *

        """
        return _SnapTime.TNGraph_AddNodeUnchecked(self, NId)


    def AddNode(self, *args):
        """
        AddNode(TNGraph self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(TNGraph self) -> int64
        AddNode(TNGraph self, TNGraph::TNodeI const & NodeId) -> int64

        Parameters
        ----------
        NodeId: TNGraph::TNodeI const &

        AddNode(TNGraph self, int64 const & NId, TInt64V InNIdV, TInt64V OutNIdV) -> int64

        Parameters
        ----------
        NId: int64 const &
        InNIdV: TInt64V const &
        OutNIdV: TInt64V const &

        AddNode(TNGraph self, int64 const & NId, TVecPool< TInt64,int64 > const & Pool, int64 const & SrcVId, int64 const & DstVId) -> int64

        Parameters
        ----------
        NId: int64 const &
        Pool: TVecPool< TInt64,int64 > const &
        SrcVId: int64 const &
        DstVId: int64 const &

        """
        return _SnapTime.TNGraph_AddNode(self, *args)


    def DelNode(self, *args):
        """
        DelNode(TNGraph self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        DelNode(TNGraph self, TNGraph::TNode const & NodeI)

        Parameters
        ----------
        NodeI: TNGraph::TNode const &

        """
        return _SnapTime.TNGraph_DelNode(self, *args)


    def IsNode(self, NId):
        """
        IsNode(TNGraph self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNGraph_IsNode(self, NId)


    def GetMxNId(self):
        """
        GetMxNId(TNGraph self) -> int64

        Parameters
        ----------
        self: TNGraph const *

        """
        return _SnapTime.TNGraph_GetMxNId(self)


    def GetEdges(self):
        """
        GetEdges(TNGraph self) -> int64

        Parameters
        ----------
        self: TNGraph const *

        """
        return _SnapTime.TNGraph_GetEdges(self)


    def AddEdgeUnchecked(self, SrcNId, DstNId):
        """
        AddEdgeUnchecked(TNGraph self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNGraph_AddEdgeUnchecked(self, SrcNId, DstNId)


    def AddEdge2(self, SrcNId, DstNId):
        """
        AddEdge2(TNGraph self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNGraph_AddEdge2(self, SrcNId, DstNId)


    def AddEdge(self, *args):
        """
        AddEdge(TNGraph self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        AddEdge(TNGraph self, TNGraph::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TNGraph::TEdgeI const &

        """
        return _SnapTime.TNGraph_AddEdge(self, *args)


    def DelEdge(self, SrcNId, DstNId, IsDir=True):
        """
        DelEdge(TNGraph self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        DelEdge(TNGraph self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNGraph_DelEdge(self, SrcNId, DstNId, IsDir)


    def IsEdge(self, SrcNId, DstNId, IsDir=True):
        """
        IsEdge(TNGraph self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        IsEdge(TNGraph self, int64 const & SrcNId, int64 const & DstNId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNGraph_IsEdge(self, SrcNId, DstNId, IsDir)


    def GetRndNId(self, *args):
        """
        GetRndNId(TNGraph self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(TNGraph self) -> int64

        Parameters
        ----------
        self: TNGraph *

        """
        return _SnapTime.TNGraph_GetRndNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(TNGraph self, TRnd Rnd) -> TNGraph::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(TNGraph self) -> TNGraph::TNodeI

        Parameters
        ----------
        self: TNGraph *

        """
        return _SnapTime.TNGraph_GetRndNI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(TNGraph self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.TNGraph_GetNIdV(self, NIdV)


    def Empty(self):
        """
        Empty(TNGraph self) -> bool

        Parameters
        ----------
        self: TNGraph const *

        """
        return _SnapTime.TNGraph_Empty(self)


    def Clr(self):
        """
        Clr(TNGraph self)

        Parameters
        ----------
        self: TNGraph *

        """
        return _SnapTime.TNGraph_Clr(self)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(TNGraph self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TNGraph_Reserve(self, Nodes, Edges)


    def ReserveNIdInDeg(self, NId, InDeg):
        """
        ReserveNIdInDeg(TNGraph self, int64 const & NId, int64 const & InDeg)

        Parameters
        ----------
        NId: int64 const &
        InDeg: int64 const &

        """
        return _SnapTime.TNGraph_ReserveNIdInDeg(self, NId, InDeg)


    def ReserveNIdOutDeg(self, NId, OutDeg):
        """
        ReserveNIdOutDeg(TNGraph self, int64 const & NId, int64 const & OutDeg)

        Parameters
        ----------
        NId: int64 const &
        OutDeg: int64 const &

        """
        return _SnapTime.TNGraph_ReserveNIdOutDeg(self, NId, OutDeg)


    def SortNodeAdjV(self):
        """
        SortNodeAdjV(TNGraph self)

        Parameters
        ----------
        self: TNGraph *

        """
        return _SnapTime.TNGraph_SortNodeAdjV(self)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(TNGraph self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(TNGraph self)

        Parameters
        ----------
        self: TNGraph *

        """
        return _SnapTime.TNGraph_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(TNGraph self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(TNGraph self) -> bool

        Parameters
        ----------
        self: TNGraph const *

        """
        return _SnapTime.TNGraph_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(TNGraph self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(TNGraph self)

        Parameters
        ----------
        self: TNGraph const *

        """
        return _SnapTime.TNGraph_Dump(self, *args)


    def GetSmallGraph():
        """GetSmallGraph() -> PNGraph"""
        return _SnapTime.TNGraph_GetSmallGraph()

    GetSmallGraph = staticmethod(GetSmallGraph)

    def BegNI(self, *args):
        """
        BegNI(TNGraph self) -> TNGraph::TNodeI
        BegNI(TNGraph self) -> TNGraphNodeI

        Parameters
        ----------
        self: TNGraph *

        """
        return _SnapTime.TNGraph_BegNI(self, *args)


    def EndNI(self, *args):
        """
        EndNI(TNGraph self) -> TNGraph::TNodeI
        EndNI(TNGraph self) -> TNGraphNodeI

        Parameters
        ----------
        self: TNGraph *

        """
        return _SnapTime.TNGraph_EndNI(self, *args)


    def GetNI(self, *args):
        """
        GetNI(TNGraph self, int64 const & NId) -> TNGraph::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetNI(TNGraph self) -> TIterNode< TNGraph >
        GetNI(TNGraph self, int64 const & NId) -> TNGraphNodeI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNGraph_GetNI(self, *args)


    def BegEI(self, *args):
        """
        BegEI(TNGraph self) -> TNGraph::TEdgeI
        BegEI(TNGraph self) -> TNGraphEdgeI

        Parameters
        ----------
        self: TNGraph *

        """
        return _SnapTime.TNGraph_BegEI(self, *args)


    def EndEI(self, *args):
        """
        EndEI(TNGraph self) -> TNGraph::TEdgeI
        EndEI(TNGraph self) -> TNGraphEdgeI

        Parameters
        ----------
        self: TNGraph *

        """
        return _SnapTime.TNGraph_EndEI(self, *args)


    def GetEI(self, *args):
        """
        GetEI(TNGraph self, int64 const & SrcNId, int64 const & DstNId) -> TNGraph::TEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        GetEI(TNGraph self) -> TIterEdge< TNGraph >
        GetEI(TNGraph self, int64 const & SrcNId, int64 const & DstNId) -> TNGraphEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNGraph_GetEI(self, *args)

    __swig_destroy__ = _SnapTime.delete_TNGraph
TNGraph.Save = new_instancemethod(_SnapTime.TNGraph_Save, None, TNGraph)
TNGraph.HasFlag = new_instancemethod(_SnapTime.TNGraph_HasFlag, None, TNGraph)
TNGraph.GetNodes = new_instancemethod(_SnapTime.TNGraph_GetNodes, None, TNGraph)
TNGraph.AddNodeUnchecked = new_instancemethod(_SnapTime.TNGraph_AddNodeUnchecked, None, TNGraph)
TNGraph.AddNode = new_instancemethod(_SnapTime.TNGraph_AddNode, None, TNGraph)
TNGraph.DelNode = new_instancemethod(_SnapTime.TNGraph_DelNode, None, TNGraph)
TNGraph.IsNode = new_instancemethod(_SnapTime.TNGraph_IsNode, None, TNGraph)
TNGraph.GetMxNId = new_instancemethod(_SnapTime.TNGraph_GetMxNId, None, TNGraph)
TNGraph.GetEdges = new_instancemethod(_SnapTime.TNGraph_GetEdges, None, TNGraph)
TNGraph.AddEdgeUnchecked = new_instancemethod(_SnapTime.TNGraph_AddEdgeUnchecked, None, TNGraph)
TNGraph.AddEdge2 = new_instancemethod(_SnapTime.TNGraph_AddEdge2, None, TNGraph)
TNGraph.AddEdge = new_instancemethod(_SnapTime.TNGraph_AddEdge, None, TNGraph)
TNGraph.DelEdge = new_instancemethod(_SnapTime.TNGraph_DelEdge, None, TNGraph)
TNGraph.IsEdge = new_instancemethod(_SnapTime.TNGraph_IsEdge, None, TNGraph)
TNGraph.GetRndNId = new_instancemethod(_SnapTime.TNGraph_GetRndNId, None, TNGraph)
TNGraph.GetRndNI = new_instancemethod(_SnapTime.TNGraph_GetRndNI, None, TNGraph)
TNGraph.GetNIdV = new_instancemethod(_SnapTime.TNGraph_GetNIdV, None, TNGraph)
TNGraph.Empty = new_instancemethod(_SnapTime.TNGraph_Empty, None, TNGraph)
TNGraph.Clr = new_instancemethod(_SnapTime.TNGraph_Clr, None, TNGraph)
TNGraph.Reserve = new_instancemethod(_SnapTime.TNGraph_Reserve, None, TNGraph)
TNGraph.ReserveNIdInDeg = new_instancemethod(_SnapTime.TNGraph_ReserveNIdInDeg, None, TNGraph)
TNGraph.ReserveNIdOutDeg = new_instancemethod(_SnapTime.TNGraph_ReserveNIdOutDeg, None, TNGraph)
TNGraph.SortNodeAdjV = new_instancemethod(_SnapTime.TNGraph_SortNodeAdjV, None, TNGraph)
TNGraph.Defrag = new_instancemethod(_SnapTime.TNGraph_Defrag, None, TNGraph)
TNGraph.IsOk = new_instancemethod(_SnapTime.TNGraph_IsOk, None, TNGraph)
TNGraph.Dump = new_instancemethod(_SnapTime.TNGraph_Dump, None, TNGraph)
TNGraph.BegNI = new_instancemethod(_SnapTime.TNGraph_BegNI, None, TNGraph)
TNGraph.EndNI = new_instancemethod(_SnapTime.TNGraph_EndNI, None, TNGraph)
TNGraph.GetNI = new_instancemethod(_SnapTime.TNGraph_GetNI, None, TNGraph)
TNGraph.BegEI = new_instancemethod(_SnapTime.TNGraph_BegEI, None, TNGraph)
TNGraph.EndEI = new_instancemethod(_SnapTime.TNGraph_EndEI, None, TNGraph)
TNGraph.GetEI = new_instancemethod(_SnapTime.TNGraph_GetEI, None, TNGraph)
TNGraph_swigregister = _SnapTime.TNGraph_swigregister
TNGraph_swigregister(TNGraph)

def TNGraph_New(*args):
    """
    New() -> PNGraph
    TNGraph_New(int64 const & Nodes, int64 const & Edges) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.TNGraph_New(*args)

def TNGraph_Load(SIn):
    """
    TNGraph_Load(TSIn SIn) -> PNGraph

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TNGraph_Load(SIn)

def TNGraph_LoadShM(ShMIn):
    """
    TNGraph_LoadShM(TShMIn ShMIn) -> PNGraph

    Parameters
    ----------
    ShMIn: TShMIn &

    """
    return _SnapTime.TNGraph_LoadShM(ShMIn)

def TNGraph_GetSmallGraph():
    """TNGraph_GetSmallGraph() -> PNGraph"""
    return _SnapTime.TNGraph_GetSmallGraph()

class TNEGraph(object):
    """Proxy of C++ TNEGraph class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNEGraph self) -> TNEGraph
        __init__(TNEGraph self, int64 const & Nodes, int64 const & Edges) -> TNEGraph

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        __init__(TNEGraph self, TNEGraph Graph) -> TNEGraph

        Parameters
        ----------
        Graph: TNEGraph const &

        __init__(TNEGraph self, TSIn SIn) -> TNEGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TNEGraph_swiginit(self, _SnapTime.new_TNEGraph(*args))

    def Save(self, SOut):
        """
        Save(TNEGraph self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TNEGraph_Save(self, SOut)


    def New(*args):
        """
        New() -> PNEGraph
        New(int64 const & Nodes, int64 const & Edges) -> PNEGraph

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TNEGraph_New(*args)

    New = staticmethod(New)

    def Load(SIn):
        """
        Load(TSIn SIn) -> PNEGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TNEGraph_Load(SIn)

    Load = staticmethod(Load)

    def HasFlag(self, Flag):
        """
        HasFlag(TNEGraph self, TGraphFlag const & Flag) -> bool

        Parameters
        ----------
        Flag: TGraphFlag const &

        """
        return _SnapTime.TNEGraph_HasFlag(self, Flag)


    def GetNodes(self):
        """
        GetNodes(TNEGraph self) -> int64

        Parameters
        ----------
        self: TNEGraph const *

        """
        return _SnapTime.TNEGraph_GetNodes(self)


    def AddNode(self, *args):
        """
        AddNode(TNEGraph self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(TNEGraph self) -> int64
        AddNode(TNEGraph self, TNEGraph::TNodeI const & NodeId) -> int64

        Parameters
        ----------
        NodeId: TNEGraph::TNodeI const &

        """
        return _SnapTime.TNEGraph_AddNode(self, *args)


    def DelNode(self, *args):
        """
        DelNode(TNEGraph self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        DelNode(TNEGraph self, TNEGraph::TNode const & NodeI)

        Parameters
        ----------
        NodeI: TNEGraph::TNode const &

        """
        return _SnapTime.TNEGraph_DelNode(self, *args)


    def IsNode(self, NId):
        """
        IsNode(TNEGraph self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNEGraph_IsNode(self, NId)


    def BegNI(self):
        """
        BegNI(TNEGraph self) -> TNEGraph::TNodeI

        Parameters
        ----------
        self: TNEGraph const *

        """
        return _SnapTime.TNEGraph_BegNI(self)


    def EndNI(self):
        """
        EndNI(TNEGraph self) -> TNEGraph::TNodeI

        Parameters
        ----------
        self: TNEGraph const *

        """
        return _SnapTime.TNEGraph_EndNI(self)


    def GetNI(self, *args):
        """
        GetNI(TNEGraph self, int64 const & NId) -> TNEGraph::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetNI(TNEGraph self) -> TIterNode< TNEGraph >

        Parameters
        ----------
        self: TNEGraph const *

        """
        return _SnapTime.TNEGraph_GetNI(self, *args)


    def GetMxNId(self):
        """
        GetMxNId(TNEGraph self) -> int64

        Parameters
        ----------
        self: TNEGraph const *

        """
        return _SnapTime.TNEGraph_GetMxNId(self)


    def GetEdges(self):
        """
        GetEdges(TNEGraph self) -> int64

        Parameters
        ----------
        self: TNEGraph const *

        """
        return _SnapTime.TNEGraph_GetEdges(self)


    def AddEdge(self, *args):
        """
        AddEdge(TNEGraph self, int64 const & SrcNId, int64 const & DstNId, int64 EId=-1) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        EId: int64

        AddEdge(TNEGraph self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        AddEdge(TNEGraph self, TNEGraph::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TNEGraph::TEdgeI const &

        """
        return _SnapTime.TNEGraph_AddEdge(self, *args)


    def DelEdge(self, *args):
        """
        DelEdge(TNEGraph self, int64 const & EId)

        Parameters
        ----------
        EId: int64 const &

        DelEdge(TNEGraph self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        DelEdge(TNEGraph self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNEGraph_DelEdge(self, *args)


    def IsEdge(self, *args):
        """
        IsEdge(TNEGraph self, int64 const & EId) -> bool

        Parameters
        ----------
        EId: int64 const &

        IsEdge(TNEGraph self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        IsEdge(TNEGraph self, int64 const & SrcNId, int64 const & DstNId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        IsEdge(TNEGraph self, int64 const & SrcNId, int64 const & DstNId, int64 & EId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        EId: int64 &
        IsDir: bool const &

        IsEdge(TNEGraph self, int64 const & SrcNId, int64 const & DstNId, int64 & EId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        EId: int64 &

        """
        return _SnapTime.TNEGraph_IsEdge(self, *args)


    def GetEId(self, SrcNId, DstNId):
        """
        GetEId(TNEGraph self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNEGraph_GetEId(self, SrcNId, DstNId)


    def BegEI(self):
        """
        BegEI(TNEGraph self) -> TNEGraph::TEdgeI

        Parameters
        ----------
        self: TNEGraph const *

        """
        return _SnapTime.TNEGraph_BegEI(self)


    def EndEI(self):
        """
        EndEI(TNEGraph self) -> TNEGraph::TEdgeI

        Parameters
        ----------
        self: TNEGraph const *

        """
        return _SnapTime.TNEGraph_EndEI(self)


    def GetEI(self, *args):
        """
        GetEI(TNEGraph self, int64 const & EId) -> TNEGraph::TEdgeI

        Parameters
        ----------
        EId: int64 const &

        GetEI(TNEGraph self, int64 const & SrcNId, int64 const & DstNId) -> TNEGraph::TEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        GetEI(TNEGraph self) -> TIterEdge< TNEGraph >

        Parameters
        ----------
        self: TNEGraph const *

        """
        return _SnapTime.TNEGraph_GetEI(self, *args)


    def GetRndNId(self, *args):
        """
        GetRndNId(TNEGraph self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(TNEGraph self) -> int64

        Parameters
        ----------
        self: TNEGraph *

        """
        return _SnapTime.TNEGraph_GetRndNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(TNEGraph self, TRnd Rnd) -> TNEGraph::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(TNEGraph self) -> TNEGraph::TNodeI

        Parameters
        ----------
        self: TNEGraph *

        """
        return _SnapTime.TNEGraph_GetRndNI(self, *args)


    def GetRndEId(self, *args):
        """
        GetRndEId(TNEGraph self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndEId(TNEGraph self) -> int64

        Parameters
        ----------
        self: TNEGraph *

        """
        return _SnapTime.TNEGraph_GetRndEId(self, *args)


    def GetRndEI(self, *args):
        """
        GetRndEI(TNEGraph self, TRnd Rnd) -> TNEGraph::TEdgeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndEI(TNEGraph self) -> TNEGraph::TEdgeI

        Parameters
        ----------
        self: TNEGraph *

        """
        return _SnapTime.TNEGraph_GetRndEI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(TNEGraph self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.TNEGraph_GetNIdV(self, NIdV)


    def GetEIdV(self, EIdV):
        """
        GetEIdV(TNEGraph self, TInt64V EIdV)

        Parameters
        ----------
        EIdV: TInt64V &

        """
        return _SnapTime.TNEGraph_GetEIdV(self, EIdV)


    def Empty(self):
        """
        Empty(TNEGraph self) -> bool

        Parameters
        ----------
        self: TNEGraph const *

        """
        return _SnapTime.TNEGraph_Empty(self)


    def Clr(self):
        """
        Clr(TNEGraph self)

        Parameters
        ----------
        self: TNEGraph *

        """
        return _SnapTime.TNEGraph_Clr(self)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(TNEGraph self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TNEGraph_Reserve(self, Nodes, Edges)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(TNEGraph self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(TNEGraph self)

        Parameters
        ----------
        self: TNEGraph *

        """
        return _SnapTime.TNEGraph_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(TNEGraph self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(TNEGraph self) -> bool

        Parameters
        ----------
        self: TNEGraph const *

        """
        return _SnapTime.TNEGraph_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(TNEGraph self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(TNEGraph self)

        Parameters
        ----------
        self: TNEGraph const *

        """
        return _SnapTime.TNEGraph_Dump(self, *args)

    __swig_destroy__ = _SnapTime.delete_TNEGraph
TNEGraph.Save = new_instancemethod(_SnapTime.TNEGraph_Save, None, TNEGraph)
TNEGraph.HasFlag = new_instancemethod(_SnapTime.TNEGraph_HasFlag, None, TNEGraph)
TNEGraph.GetNodes = new_instancemethod(_SnapTime.TNEGraph_GetNodes, None, TNEGraph)
TNEGraph.AddNode = new_instancemethod(_SnapTime.TNEGraph_AddNode, None, TNEGraph)
TNEGraph.DelNode = new_instancemethod(_SnapTime.TNEGraph_DelNode, None, TNEGraph)
TNEGraph.IsNode = new_instancemethod(_SnapTime.TNEGraph_IsNode, None, TNEGraph)
TNEGraph.BegNI = new_instancemethod(_SnapTime.TNEGraph_BegNI, None, TNEGraph)
TNEGraph.EndNI = new_instancemethod(_SnapTime.TNEGraph_EndNI, None, TNEGraph)
TNEGraph.GetNI = new_instancemethod(_SnapTime.TNEGraph_GetNI, None, TNEGraph)
TNEGraph.GetMxNId = new_instancemethod(_SnapTime.TNEGraph_GetMxNId, None, TNEGraph)
TNEGraph.GetEdges = new_instancemethod(_SnapTime.TNEGraph_GetEdges, None, TNEGraph)
TNEGraph.AddEdge = new_instancemethod(_SnapTime.TNEGraph_AddEdge, None, TNEGraph)
TNEGraph.DelEdge = new_instancemethod(_SnapTime.TNEGraph_DelEdge, None, TNEGraph)
TNEGraph.IsEdge = new_instancemethod(_SnapTime.TNEGraph_IsEdge, None, TNEGraph)
TNEGraph.GetEId = new_instancemethod(_SnapTime.TNEGraph_GetEId, None, TNEGraph)
TNEGraph.BegEI = new_instancemethod(_SnapTime.TNEGraph_BegEI, None, TNEGraph)
TNEGraph.EndEI = new_instancemethod(_SnapTime.TNEGraph_EndEI, None, TNEGraph)
TNEGraph.GetEI = new_instancemethod(_SnapTime.TNEGraph_GetEI, None, TNEGraph)
TNEGraph.GetRndNId = new_instancemethod(_SnapTime.TNEGraph_GetRndNId, None, TNEGraph)
TNEGraph.GetRndNI = new_instancemethod(_SnapTime.TNEGraph_GetRndNI, None, TNEGraph)
TNEGraph.GetRndEId = new_instancemethod(_SnapTime.TNEGraph_GetRndEId, None, TNEGraph)
TNEGraph.GetRndEI = new_instancemethod(_SnapTime.TNEGraph_GetRndEI, None, TNEGraph)
TNEGraph.GetNIdV = new_instancemethod(_SnapTime.TNEGraph_GetNIdV, None, TNEGraph)
TNEGraph.GetEIdV = new_instancemethod(_SnapTime.TNEGraph_GetEIdV, None, TNEGraph)
TNEGraph.Empty = new_instancemethod(_SnapTime.TNEGraph_Empty, None, TNEGraph)
TNEGraph.Clr = new_instancemethod(_SnapTime.TNEGraph_Clr, None, TNEGraph)
TNEGraph.Reserve = new_instancemethod(_SnapTime.TNEGraph_Reserve, None, TNEGraph)
TNEGraph.Defrag = new_instancemethod(_SnapTime.TNEGraph_Defrag, None, TNEGraph)
TNEGraph.IsOk = new_instancemethod(_SnapTime.TNEGraph_IsOk, None, TNEGraph)
TNEGraph.Dump = new_instancemethod(_SnapTime.TNEGraph_Dump, None, TNEGraph)
TNEGraph_swigregister = _SnapTime.TNEGraph_swigregister
TNEGraph_swigregister(TNEGraph)

def TNEGraph_New(*args):
    """
    New() -> PNEGraph
    TNEGraph_New(int64 const & Nodes, int64 const & Edges) -> PNEGraph

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.TNEGraph_New(*args)

def TNEGraph_Load(SIn):
    """
    TNEGraph_Load(TSIn SIn) -> PNEGraph

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TNEGraph_Load(SIn)

class TBPGraph(object):
    """Proxy of C++ TBPGraph class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bgsUndef = _SnapTime.TBPGraph_bgsUndef
    bgsLeft = _SnapTime.TBPGraph_bgsLeft
    bgsRight = _SnapTime.TBPGraph_bgsRight
    bgsBoth = _SnapTime.TBPGraph_bgsBoth

    def __init__(self, *args):
        """
        __init__(TBPGraph self) -> TBPGraph
        __init__(TBPGraph self, int64 const & Nodes, int64 const & Edges) -> TBPGraph

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        __init__(TBPGraph self, TBPGraph BPGraph) -> TBPGraph

        Parameters
        ----------
        BPGraph: TBPGraph const &

        __init__(TBPGraph self, TSIn SIn) -> TBPGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TBPGraph_swiginit(self, _SnapTime.new_TBPGraph(*args))

    def Save(self, SOut):
        """
        Save(TBPGraph self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TBPGraph_Save(self, SOut)


    def New(*args):
        """
        New() -> PBPGraph
        New(int64 const & Nodes, int64 const & Edges) -> PBPGraph

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TBPGraph_New(*args)

    New = staticmethod(New)

    def Load(SIn):
        """
        Load(TSIn SIn) -> PBPGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TBPGraph_Load(SIn)

    Load = staticmethod(Load)

    def GetNodes(self):
        """
        GetNodes(TBPGraph self) -> int64

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_GetNodes(self)


    def GetLNodes(self):
        """
        GetLNodes(TBPGraph self) -> int64

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_GetLNodes(self)


    def GetRNodes(self):
        """
        GetRNodes(TBPGraph self) -> int64

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_GetRNodes(self)


    def AddNode(self, *args):
        """
        AddNode(TBPGraph self, int64 NId=-1, bool const & LeftNode=True) -> int64

        Parameters
        ----------
        NId: int64
        LeftNode: bool const &

        AddNode(TBPGraph self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(TBPGraph self) -> int64
        AddNode(TBPGraph self, TBPGraph::TNodeI const & NodeI) -> int64

        Parameters
        ----------
        NodeI: TBPGraph::TNodeI const &

        """
        return _SnapTime.TBPGraph_AddNode(self, *args)


    def DelNode(self, *args):
        """
        DelNode(TBPGraph self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        DelNode(TBPGraph self, TBPGraph::TNode const & NodeI)

        Parameters
        ----------
        NodeI: TBPGraph::TNode const &

        """
        return _SnapTime.TBPGraph_DelNode(self, *args)


    def IsNode(self, NId):
        """
        IsNode(TBPGraph self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TBPGraph_IsNode(self, NId)


    def IsLNode(self, NId):
        """
        IsLNode(TBPGraph self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TBPGraph_IsLNode(self, NId)


    def IsRNode(self, NId):
        """
        IsRNode(TBPGraph self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TBPGraph_IsRNode(self, NId)


    def GetMxNId(self):
        """
        GetMxNId(TBPGraph self) -> int64

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_GetMxNId(self)


    def SetIteratorSideLeft(self, val):
        """
        SetIteratorSideLeft(TBPGraph self, bool val)

        Parameters
        ----------
        val: bool

        """
        return _SnapTime.TBPGraph_SetIteratorSideLeft(self, val)


    def IsIteratorSideLeft(self):
        """
        IsIteratorSideLeft(TBPGraph self) -> bool

        Parameters
        ----------
        self: TBPGraph *

        """
        return _SnapTime.TBPGraph_IsIteratorSideLeft(self)


    def BegNI(self):
        """
        BegNI(TBPGraph self) -> TBPGraph::TNodeI

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_BegNI(self)


    def EndNI(self):
        """
        EndNI(TBPGraph self) -> TBPGraph::TNodeI

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_EndNI(self)


    def GetNI(self, NId):
        """
        GetNI(TBPGraph self, int64 const & NId) -> TBPGraph::TNodeI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TBPGraph_GetNI(self, NId)


    def BegLNI(self):
        """
        BegLNI(TBPGraph self) -> TBPGraph::TNodeI

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_BegLNI(self)


    def EndLNI(self):
        """
        EndLNI(TBPGraph self) -> TBPGraph::TNodeI

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_EndLNI(self)


    def BegRNI(self):
        """
        BegRNI(TBPGraph self) -> TBPGraph::TNodeI

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_BegRNI(self)


    def EndRNI(self):
        """
        EndRNI(TBPGraph self) -> TBPGraph::TNodeI

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_EndRNI(self)


    def GetEdges(self):
        """
        GetEdges(TBPGraph self) -> int64

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_GetEdges(self)


    def AddEdge(self, *args):
        """
        AddEdge(TBPGraph self, int64 const & LeftNId, int64 const & RightNId) -> int64

        Parameters
        ----------
        LeftNId: int64 const &
        RightNId: int64 const &

        AddEdge(TBPGraph self, TBPGraph::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TBPGraph::TEdgeI const &

        """
        return _SnapTime.TBPGraph_AddEdge(self, *args)


    def DelEdge(self, LeftNId, RightNId):
        """
        DelEdge(TBPGraph self, int64 const & LeftNId, int64 const & RightNId)

        Parameters
        ----------
        LeftNId: int64 const &
        RightNId: int64 const &

        """
        return _SnapTime.TBPGraph_DelEdge(self, LeftNId, RightNId)


    def IsEdge(self, LeftNId, RightNId):
        """
        IsEdge(TBPGraph self, int64 const & LeftNId, int64 const & RightNId) -> bool

        Parameters
        ----------
        LeftNId: int64 const &
        RightNId: int64 const &

        """
        return _SnapTime.TBPGraph_IsEdge(self, LeftNId, RightNId)


    def BegEI(self):
        """
        BegEI(TBPGraph self) -> TBPGraph::TEdgeI

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_BegEI(self)


    def EndEI(self):
        """
        EndEI(TBPGraph self) -> TBPGraph::TEdgeI

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_EndEI(self)


    def GetEI(self, LeftNId, RightNId):
        """
        GetEI(TBPGraph self, int64 const & LeftNId, int64 const & RightNId) -> TBPGraph::TEdgeI

        Parameters
        ----------
        LeftNId: int64 const &
        RightNId: int64 const &

        """
        return _SnapTime.TBPGraph_GetEI(self, LeftNId, RightNId)


    def GetRndNId(self, *args):
        """
        GetRndNId(TBPGraph self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(TBPGraph self) -> int64

        Parameters
        ----------
        self: TBPGraph *

        """
        return _SnapTime.TBPGraph_GetRndNId(self, *args)


    def GetRndLNId(self, *args):
        """
        GetRndLNId(TBPGraph self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndLNId(TBPGraph self) -> int64

        Parameters
        ----------
        self: TBPGraph *

        """
        return _SnapTime.TBPGraph_GetRndLNId(self, *args)


    def GetRndRNId(self, *args):
        """
        GetRndRNId(TBPGraph self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndRNId(TBPGraph self) -> int64

        Parameters
        ----------
        self: TBPGraph *

        """
        return _SnapTime.TBPGraph_GetRndRNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(TBPGraph self, TRnd Rnd) -> TBPGraph::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(TBPGraph self) -> TBPGraph::TNodeI

        Parameters
        ----------
        self: TBPGraph *

        """
        return _SnapTime.TBPGraph_GetRndNI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(TBPGraph self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.TBPGraph_GetNIdV(self, NIdV)


    def GetLNIdV(self, NIdV):
        """
        GetLNIdV(TBPGraph self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.TBPGraph_GetLNIdV(self, NIdV)


    def GetRNIdV(self, NIdV):
        """
        GetRNIdV(TBPGraph self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.TBPGraph_GetRNIdV(self, NIdV)


    def Empty(self):
        """
        Empty(TBPGraph self) -> bool

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_Empty(self)


    def Clr(self):
        """
        Clr(TBPGraph self)

        Parameters
        ----------
        self: TBPGraph *

        """
        return _SnapTime.TBPGraph_Clr(self)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(TBPGraph self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TBPGraph_Reserve(self, Nodes, Edges)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(TBPGraph self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(TBPGraph self)

        Parameters
        ----------
        self: TBPGraph *

        """
        return _SnapTime.TBPGraph_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(TBPGraph self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(TBPGraph self) -> bool

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(TBPGraph self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(TBPGraph self)

        Parameters
        ----------
        self: TBPGraph const *

        """
        return _SnapTime.TBPGraph_Dump(self, *args)


    def GetSmallGraph():
        """GetSmallGraph() -> PBPGraph"""
        return _SnapTime.TBPGraph_GetSmallGraph()

    GetSmallGraph = staticmethod(GetSmallGraph)
    __swig_destroy__ = _SnapTime.delete_TBPGraph
TBPGraph.Save = new_instancemethod(_SnapTime.TBPGraph_Save, None, TBPGraph)
TBPGraph.GetNodes = new_instancemethod(_SnapTime.TBPGraph_GetNodes, None, TBPGraph)
TBPGraph.GetLNodes = new_instancemethod(_SnapTime.TBPGraph_GetLNodes, None, TBPGraph)
TBPGraph.GetRNodes = new_instancemethod(_SnapTime.TBPGraph_GetRNodes, None, TBPGraph)
TBPGraph.AddNode = new_instancemethod(_SnapTime.TBPGraph_AddNode, None, TBPGraph)
TBPGraph.DelNode = new_instancemethod(_SnapTime.TBPGraph_DelNode, None, TBPGraph)
TBPGraph.IsNode = new_instancemethod(_SnapTime.TBPGraph_IsNode, None, TBPGraph)
TBPGraph.IsLNode = new_instancemethod(_SnapTime.TBPGraph_IsLNode, None, TBPGraph)
TBPGraph.IsRNode = new_instancemethod(_SnapTime.TBPGraph_IsRNode, None, TBPGraph)
TBPGraph.GetMxNId = new_instancemethod(_SnapTime.TBPGraph_GetMxNId, None, TBPGraph)
TBPGraph.SetIteratorSideLeft = new_instancemethod(_SnapTime.TBPGraph_SetIteratorSideLeft, None, TBPGraph)
TBPGraph.IsIteratorSideLeft = new_instancemethod(_SnapTime.TBPGraph_IsIteratorSideLeft, None, TBPGraph)
TBPGraph.BegNI = new_instancemethod(_SnapTime.TBPGraph_BegNI, None, TBPGraph)
TBPGraph.EndNI = new_instancemethod(_SnapTime.TBPGraph_EndNI, None, TBPGraph)
TBPGraph.GetNI = new_instancemethod(_SnapTime.TBPGraph_GetNI, None, TBPGraph)
TBPGraph.BegLNI = new_instancemethod(_SnapTime.TBPGraph_BegLNI, None, TBPGraph)
TBPGraph.EndLNI = new_instancemethod(_SnapTime.TBPGraph_EndLNI, None, TBPGraph)
TBPGraph.BegRNI = new_instancemethod(_SnapTime.TBPGraph_BegRNI, None, TBPGraph)
TBPGraph.EndRNI = new_instancemethod(_SnapTime.TBPGraph_EndRNI, None, TBPGraph)
TBPGraph.GetEdges = new_instancemethod(_SnapTime.TBPGraph_GetEdges, None, TBPGraph)
TBPGraph.AddEdge = new_instancemethod(_SnapTime.TBPGraph_AddEdge, None, TBPGraph)
TBPGraph.DelEdge = new_instancemethod(_SnapTime.TBPGraph_DelEdge, None, TBPGraph)
TBPGraph.IsEdge = new_instancemethod(_SnapTime.TBPGraph_IsEdge, None, TBPGraph)
TBPGraph.BegEI = new_instancemethod(_SnapTime.TBPGraph_BegEI, None, TBPGraph)
TBPGraph.EndEI = new_instancemethod(_SnapTime.TBPGraph_EndEI, None, TBPGraph)
TBPGraph.GetEI = new_instancemethod(_SnapTime.TBPGraph_GetEI, None, TBPGraph)
TBPGraph.GetRndNId = new_instancemethod(_SnapTime.TBPGraph_GetRndNId, None, TBPGraph)
TBPGraph.GetRndLNId = new_instancemethod(_SnapTime.TBPGraph_GetRndLNId, None, TBPGraph)
TBPGraph.GetRndRNId = new_instancemethod(_SnapTime.TBPGraph_GetRndRNId, None, TBPGraph)
TBPGraph.GetRndNI = new_instancemethod(_SnapTime.TBPGraph_GetRndNI, None, TBPGraph)
TBPGraph.GetNIdV = new_instancemethod(_SnapTime.TBPGraph_GetNIdV, None, TBPGraph)
TBPGraph.GetLNIdV = new_instancemethod(_SnapTime.TBPGraph_GetLNIdV, None, TBPGraph)
TBPGraph.GetRNIdV = new_instancemethod(_SnapTime.TBPGraph_GetRNIdV, None, TBPGraph)
TBPGraph.Empty = new_instancemethod(_SnapTime.TBPGraph_Empty, None, TBPGraph)
TBPGraph.Clr = new_instancemethod(_SnapTime.TBPGraph_Clr, None, TBPGraph)
TBPGraph.Reserve = new_instancemethod(_SnapTime.TBPGraph_Reserve, None, TBPGraph)
TBPGraph.Defrag = new_instancemethod(_SnapTime.TBPGraph_Defrag, None, TBPGraph)
TBPGraph.IsOk = new_instancemethod(_SnapTime.TBPGraph_IsOk, None, TBPGraph)
TBPGraph.Dump = new_instancemethod(_SnapTime.TBPGraph_Dump, None, TBPGraph)
TBPGraph_swigregister = _SnapTime.TBPGraph_swigregister
TBPGraph_swigregister(TBPGraph)

def TBPGraph_New(*args):
    """
    New() -> PBPGraph
    TBPGraph_New(int64 const & Nodes, int64 const & Edges) -> PBPGraph

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.TBPGraph_New(*args)

def TBPGraph_Load(SIn):
    """
    TBPGraph_Load(TSIn SIn) -> PBPGraph

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TBPGraph_Load(SIn)

def TBPGraph_GetSmallGraph():
    """TBPGraph_GetSmallGraph() -> PBPGraph"""
    return _SnapTime.TBPGraph_GetSmallGraph()

class TNGraphMP(object):
    """Proxy of C++ TNGraphMP class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNGraphMP self) -> TNGraphMP
        __init__(TNGraphMP self, int64 const & Nodes, int64 const & Edges) -> TNGraphMP

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        __init__(TNGraphMP self, TNGraphMP Graph) -> TNGraphMP

        Parameters
        ----------
        Graph: TNGraphMP const &

        __init__(TNGraphMP self, TSIn SIn) -> TNGraphMP

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TNGraphMP_swiginit(self, _SnapTime.new_TNGraphMP(*args))

    def Save(self, SOut):
        """
        Save(TNGraphMP self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TNGraphMP_Save(self, SOut)


    def New(*args):
        """
        New() -> PNGraphMP
        New(int64 const & Nodes, int64 const & Edges) -> PNGraphMP

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TNGraphMP_New(*args)

    New = staticmethod(New)

    def Load(SIn):
        """
        Load(TSIn SIn) -> PNGraphMP

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TNGraphMP_Load(SIn)

    Load = staticmethod(Load)

    def HasFlag(self, Flag):
        """
        HasFlag(TNGraphMP self, TGraphFlag const & Flag) -> bool

        Parameters
        ----------
        Flag: TGraphFlag const &

        """
        return _SnapTime.TNGraphMP_HasFlag(self, Flag)


    def GetNodes(self):
        """
        GetNodes(TNGraphMP self) -> int64

        Parameters
        ----------
        self: TNGraphMP const *

        """
        return _SnapTime.TNGraphMP_GetNodes(self)


    def SetNodes(self, Length):
        """
        SetNodes(TNGraphMP self, int64 const & Length)

        Parameters
        ----------
        Length: int64 const &

        """
        return _SnapTime.TNGraphMP_SetNodes(self, Length)


    def AddNodeUnchecked(self, NId=-1):
        """
        AddNodeUnchecked(TNGraphMP self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNodeUnchecked(TNGraphMP self) -> int64

        Parameters
        ----------
        self: TNGraphMP *

        """
        return _SnapTime.TNGraphMP_AddNodeUnchecked(self, NId)


    def AddNode(self, *args):
        """
        AddNode(TNGraphMP self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(TNGraphMP self) -> int64
        AddNode(TNGraphMP self, TNGraphMP::TNodeI const & NodeId) -> int64

        Parameters
        ----------
        NodeId: TNGraphMP::TNodeI const &

        AddNode(TNGraphMP self, int64 const & NId, TInt64V InNIdV, TInt64V OutNIdV) -> int64

        Parameters
        ----------
        NId: int64 const &
        InNIdV: TInt64V const &
        OutNIdV: TInt64V const &

        AddNode(TNGraphMP self, int64 const & NId, TVecPool< TInt64,int64 > const & Pool, int64 const & SrcVId, int64 const & DstVId) -> int64

        Parameters
        ----------
        NId: int64 const &
        Pool: TVecPool< TInt64,int64 > const &
        SrcVId: int64 const &
        DstVId: int64 const &

        """
        return _SnapTime.TNGraphMP_AddNode(self, *args)


    def DelNode(self, *args):
        """
        DelNode(TNGraphMP self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        DelNode(TNGraphMP self, TNGraphMP::TNode const & NodeI)

        Parameters
        ----------
        NodeI: TNGraphMP::TNode const &

        """
        return _SnapTime.TNGraphMP_DelNode(self, *args)


    def IsNode(self, NId):
        """
        IsNode(TNGraphMP self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNGraphMP_IsNode(self, NId)


    def GetMxNId(self):
        """
        GetMxNId(TNGraphMP self) -> int64

        Parameters
        ----------
        self: TNGraphMP const *

        """
        return _SnapTime.TNGraphMP_GetMxNId(self)


    def Reserved(self):
        """
        Reserved(TNGraphMP self) -> int64

        Parameters
        ----------
        self: TNGraphMP const *

        """
        return _SnapTime.TNGraphMP_Reserved(self)


    def GetEdges(self):
        """
        GetEdges(TNGraphMP self) -> int64

        Parameters
        ----------
        self: TNGraphMP const *

        """
        return _SnapTime.TNGraphMP_GetEdges(self)


    def AddEdgeUnchecked(self, SrcNId, DstNId):
        """
        AddEdgeUnchecked(TNGraphMP self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNGraphMP_AddEdgeUnchecked(self, SrcNId, DstNId)


    def AddEdge(self, *args):
        """
        AddEdge(TNGraphMP self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        AddEdge(TNGraphMP self, TNGraphMP::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TNGraphMP::TEdgeI const &

        """
        return _SnapTime.TNGraphMP_AddEdge(self, *args)


    def AddOutEdge1(self, SrcIdx, SrcNId, DstNId):
        """
        AddOutEdge1(TNGraphMP self, int64 & SrcIdx, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcIdx: int64 &
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNGraphMP_AddOutEdge1(self, SrcIdx, SrcNId, DstNId)


    def AddInEdge1(self, DstIdx, SrcNId, DstNId):
        """
        AddInEdge1(TNGraphMP self, int64 & DstIdx, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        DstIdx: int64 &
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNGraphMP_AddInEdge1(self, DstIdx, SrcNId, DstNId)


    def AddOutEdge2(self, SrcNId, DstNId):
        """
        AddOutEdge2(TNGraphMP self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNGraphMP_AddOutEdge2(self, SrcNId, DstNId)


    def AddInEdge2(self, SrcNId, DstNId):
        """
        AddInEdge2(TNGraphMP self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNGraphMP_AddInEdge2(self, SrcNId, DstNId)


    def AddNodeWithEdges(self, NId, InNIdV, OutNIdV):
        """
        AddNodeWithEdges(TNGraphMP self, TInt64 NId, TInt64V InNIdV, TInt64V OutNIdV)

        Parameters
        ----------
        NId: TInt64 const &
        InNIdV: TInt64V &
        OutNIdV: TInt64V &

        """
        return _SnapTime.TNGraphMP_AddNodeWithEdges(self, NId, InNIdV, OutNIdV)


    def DelEdge(self, SrcNId, DstNId, IsDir=True):
        """
        DelEdge(TNGraphMP self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        DelEdge(TNGraphMP self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNGraphMP_DelEdge(self, SrcNId, DstNId, IsDir)


    def IsEdge(self, SrcNId, DstNId, IsDir=True):
        """
        IsEdge(TNGraphMP self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        IsEdge(TNGraphMP self, int64 const & SrcNId, int64 const & DstNId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNGraphMP_IsEdge(self, SrcNId, DstNId, IsDir)


    def GetEI(self, SrcNId, DstNId):
        """
        GetEI(TNGraphMP self, int64 const & SrcNId, int64 const & DstNId) -> TNGraphMP::TEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNGraphMP_GetEI(self, SrcNId, DstNId)


    def GetRndNId(self, *args):
        """
        GetRndNId(TNGraphMP self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(TNGraphMP self) -> int64

        Parameters
        ----------
        self: TNGraphMP *

        """
        return _SnapTime.TNGraphMP_GetRndNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(TNGraphMP self, TRnd Rnd) -> TNGraphMP::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(TNGraphMP self) -> TNGraphMP::TNodeI

        Parameters
        ----------
        self: TNGraphMP *

        """
        return _SnapTime.TNGraphMP_GetRndNI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(TNGraphMP self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.TNGraphMP_GetNIdV(self, NIdV)


    def Empty(self):
        """
        Empty(TNGraphMP self) -> bool

        Parameters
        ----------
        self: TNGraphMP const *

        """
        return _SnapTime.TNGraphMP_Empty(self)


    def Clr(self):
        """
        Clr(TNGraphMP self)

        Parameters
        ----------
        self: TNGraphMP *

        """
        return _SnapTime.TNGraphMP_Clr(self)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(TNGraphMP self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TNGraphMP_Reserve(self, Nodes, Edges)


    def ReserveNodeDegs(self, Idx, InDeg, OutDeg):
        """
        ReserveNodeDegs(TNGraphMP self, int64 const & Idx, int64 const & InDeg, int64 const & OutDeg)

        Parameters
        ----------
        Idx: int64 const &
        InDeg: int64 const &
        OutDeg: int64 const &

        """
        return _SnapTime.TNGraphMP_ReserveNodeDegs(self, Idx, InDeg, OutDeg)


    def ReserveNIdInDeg(self, NId, InDeg):
        """
        ReserveNIdInDeg(TNGraphMP self, int64 const & NId, int64 const & InDeg)

        Parameters
        ----------
        NId: int64 const &
        InDeg: int64 const &

        """
        return _SnapTime.TNGraphMP_ReserveNIdInDeg(self, NId, InDeg)


    def ReserveNIdOutDeg(self, NId, OutDeg):
        """
        ReserveNIdOutDeg(TNGraphMP self, int64 const & NId, int64 const & OutDeg)

        Parameters
        ----------
        NId: int64 const &
        OutDeg: int64 const &

        """
        return _SnapTime.TNGraphMP_ReserveNIdOutDeg(self, NId, OutDeg)


    def SortEdges(self, Idx, InDeg, OutDeg):
        """
        SortEdges(TNGraphMP self, int64 const & Idx, int64 const & InDeg, int64 const & OutDeg)

        Parameters
        ----------
        Idx: int64 const &
        InDeg: int64 const &
        OutDeg: int64 const &

        """
        return _SnapTime.TNGraphMP_SortEdges(self, Idx, InDeg, OutDeg)


    def SortNodeAdjV(self):
        """
        SortNodeAdjV(TNGraphMP self)

        Parameters
        ----------
        self: TNGraphMP *

        """
        return _SnapTime.TNGraphMP_SortNodeAdjV(self)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(TNGraphMP self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(TNGraphMP self)

        Parameters
        ----------
        self: TNGraphMP *

        """
        return _SnapTime.TNGraphMP_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(TNGraphMP self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(TNGraphMP self) -> bool

        Parameters
        ----------
        self: TNGraphMP const *

        """
        return _SnapTime.TNGraphMP_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(TNGraphMP self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(TNGraphMP self)

        Parameters
        ----------
        self: TNGraphMP const *

        """
        return _SnapTime.TNGraphMP_Dump(self, *args)


    def GetSmallGraph():
        """GetSmallGraph() -> PNGraphMP"""
        return _SnapTime.TNGraphMP_GetSmallGraph()

    GetSmallGraph = staticmethod(GetSmallGraph)

    def BegNI(self, *args):
        """
        BegNI(TNGraphMP self) -> TNGraphMP::TNodeI
        BegNI(TNGraphMP self) -> TNGraphMPNodeI

        Parameters
        ----------
        self: TNGraphMP *

        """
        return _SnapTime.TNGraphMP_BegNI(self, *args)


    def EndNI(self, *args):
        """
        EndNI(TNGraphMP self) -> TNGraphMP::TNodeI
        EndNI(TNGraphMP self) -> TNGraphMPNodeI

        Parameters
        ----------
        self: TNGraphMP *

        """
        return _SnapTime.TNGraphMP_EndNI(self, *args)


    def GetNI(self, *args):
        """
        GetNI(TNGraphMP self, int64 const & NId) -> TNGraphMP::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetNI(TNGraphMP self, int64 const & NId) -> TNGraphMPNodeI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNGraphMP_GetNI(self, *args)


    def BegEI(self, *args):
        """
        BegEI(TNGraphMP self) -> TNGraphMP::TEdgeI
        BegEI(TNGraphMP self) -> TNGraphMPEdgeI

        Parameters
        ----------
        self: TNGraphMP *

        """
        return _SnapTime.TNGraphMP_BegEI(self, *args)


    def EndEI(self, *args):
        """
        EndEI(TNGraphMP self) -> TNGraphMP::TEdgeI
        EndEI(TNGraphMP self) -> TNGraphMPEdgeI

        Parameters
        ----------
        self: TNGraphMP *

        """
        return _SnapTime.TNGraphMP_EndEI(self, *args)

    __swig_destroy__ = _SnapTime.delete_TNGraphMP
TNGraphMP.Save = new_instancemethod(_SnapTime.TNGraphMP_Save, None, TNGraphMP)
TNGraphMP.HasFlag = new_instancemethod(_SnapTime.TNGraphMP_HasFlag, None, TNGraphMP)
TNGraphMP.GetNodes = new_instancemethod(_SnapTime.TNGraphMP_GetNodes, None, TNGraphMP)
TNGraphMP.SetNodes = new_instancemethod(_SnapTime.TNGraphMP_SetNodes, None, TNGraphMP)
TNGraphMP.AddNodeUnchecked = new_instancemethod(_SnapTime.TNGraphMP_AddNodeUnchecked, None, TNGraphMP)
TNGraphMP.AddNode = new_instancemethod(_SnapTime.TNGraphMP_AddNode, None, TNGraphMP)
TNGraphMP.DelNode = new_instancemethod(_SnapTime.TNGraphMP_DelNode, None, TNGraphMP)
TNGraphMP.IsNode = new_instancemethod(_SnapTime.TNGraphMP_IsNode, None, TNGraphMP)
TNGraphMP.GetMxNId = new_instancemethod(_SnapTime.TNGraphMP_GetMxNId, None, TNGraphMP)
TNGraphMP.Reserved = new_instancemethod(_SnapTime.TNGraphMP_Reserved, None, TNGraphMP)
TNGraphMP.GetEdges = new_instancemethod(_SnapTime.TNGraphMP_GetEdges, None, TNGraphMP)
TNGraphMP.AddEdgeUnchecked = new_instancemethod(_SnapTime.TNGraphMP_AddEdgeUnchecked, None, TNGraphMP)
TNGraphMP.AddEdge = new_instancemethod(_SnapTime.TNGraphMP_AddEdge, None, TNGraphMP)
TNGraphMP.AddOutEdge1 = new_instancemethod(_SnapTime.TNGraphMP_AddOutEdge1, None, TNGraphMP)
TNGraphMP.AddInEdge1 = new_instancemethod(_SnapTime.TNGraphMP_AddInEdge1, None, TNGraphMP)
TNGraphMP.AddOutEdge2 = new_instancemethod(_SnapTime.TNGraphMP_AddOutEdge2, None, TNGraphMP)
TNGraphMP.AddInEdge2 = new_instancemethod(_SnapTime.TNGraphMP_AddInEdge2, None, TNGraphMP)
TNGraphMP.AddNodeWithEdges = new_instancemethod(_SnapTime.TNGraphMP_AddNodeWithEdges, None, TNGraphMP)
TNGraphMP.DelEdge = new_instancemethod(_SnapTime.TNGraphMP_DelEdge, None, TNGraphMP)
TNGraphMP.IsEdge = new_instancemethod(_SnapTime.TNGraphMP_IsEdge, None, TNGraphMP)
TNGraphMP.GetEI = new_instancemethod(_SnapTime.TNGraphMP_GetEI, None, TNGraphMP)
TNGraphMP.GetRndNId = new_instancemethod(_SnapTime.TNGraphMP_GetRndNId, None, TNGraphMP)
TNGraphMP.GetRndNI = new_instancemethod(_SnapTime.TNGraphMP_GetRndNI, None, TNGraphMP)
TNGraphMP.GetNIdV = new_instancemethod(_SnapTime.TNGraphMP_GetNIdV, None, TNGraphMP)
TNGraphMP.Empty = new_instancemethod(_SnapTime.TNGraphMP_Empty, None, TNGraphMP)
TNGraphMP.Clr = new_instancemethod(_SnapTime.TNGraphMP_Clr, None, TNGraphMP)
TNGraphMP.Reserve = new_instancemethod(_SnapTime.TNGraphMP_Reserve, None, TNGraphMP)
TNGraphMP.ReserveNodeDegs = new_instancemethod(_SnapTime.TNGraphMP_ReserveNodeDegs, None, TNGraphMP)
TNGraphMP.ReserveNIdInDeg = new_instancemethod(_SnapTime.TNGraphMP_ReserveNIdInDeg, None, TNGraphMP)
TNGraphMP.ReserveNIdOutDeg = new_instancemethod(_SnapTime.TNGraphMP_ReserveNIdOutDeg, None, TNGraphMP)
TNGraphMP.SortEdges = new_instancemethod(_SnapTime.TNGraphMP_SortEdges, None, TNGraphMP)
TNGraphMP.SortNodeAdjV = new_instancemethod(_SnapTime.TNGraphMP_SortNodeAdjV, None, TNGraphMP)
TNGraphMP.Defrag = new_instancemethod(_SnapTime.TNGraphMP_Defrag, None, TNGraphMP)
TNGraphMP.IsOk = new_instancemethod(_SnapTime.TNGraphMP_IsOk, None, TNGraphMP)
TNGraphMP.Dump = new_instancemethod(_SnapTime.TNGraphMP_Dump, None, TNGraphMP)
TNGraphMP.BegNI = new_instancemethod(_SnapTime.TNGraphMP_BegNI, None, TNGraphMP)
TNGraphMP.EndNI = new_instancemethod(_SnapTime.TNGraphMP_EndNI, None, TNGraphMP)
TNGraphMP.GetNI = new_instancemethod(_SnapTime.TNGraphMP_GetNI, None, TNGraphMP)
TNGraphMP.BegEI = new_instancemethod(_SnapTime.TNGraphMP_BegEI, None, TNGraphMP)
TNGraphMP.EndEI = new_instancemethod(_SnapTime.TNGraphMP_EndEI, None, TNGraphMP)
TNGraphMP_swigregister = _SnapTime.TNGraphMP_swigregister
TNGraphMP_swigregister(TNGraphMP)

def TNGraphMP_New(*args):
    """
    New() -> PNGraphMP
    TNGraphMP_New(int64 const & Nodes, int64 const & Edges) -> PNGraphMP

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.TNGraphMP_New(*args)

def TNGraphMP_Load(SIn):
    """
    TNGraphMP_Load(TSIn SIn) -> PNGraphMP

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TNGraphMP_Load(SIn)

def TNGraphMP_GetSmallGraph():
    """TNGraphMP_GetSmallGraph() -> PNGraphMP"""
    return _SnapTime.TNGraphMP_GetSmallGraph()

class TNEANet(object):
    """Proxy of C++ TNEANet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CRef = _swig_property(_SnapTime.TNEANet_CRef_get)

    def __init__(self, *args):
        """
        __init__(TNEANet self) -> TNEANet
        __init__(TNEANet self, int64 const & Nodes, int64 const & Edges) -> TNEANet

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        __init__(TNEANet self, TNEANet Graph) -> TNEANet

        Parameters
        ----------
        Graph: TNEANet const &

        __init__(TNEANet self, TSIn SIn) -> TNEANet

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TNEANet_swiginit(self, _SnapTime.new_TNEANet(*args))
    __swig_destroy__ = _SnapTime.delete_TNEANet

    def Save(self, SOut):
        """
        Save(TNEANet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TNEANet_Save(self, SOut)


    def Save_V1(self, SOut):
        """
        Save_V1(TNEANet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TNEANet_Save_V1(self, SOut)


    def Save_V2(self, SOut):
        """
        Save_V2(TNEANet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TNEANet_Save_V2(self, SOut)


    def New(*args):
        """
        New() -> PNEANet
        New(int64 const & Nodes, int64 const & Edges) -> PNEANet

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TNEANet_New(*args)

    New = staticmethod(New)

    def Load(SIn):
        """
        Load(TSIn SIn) -> PNEANet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TNEANet_Load(SIn)

    Load = staticmethod(Load)

    def Load_V1(SIn):
        """
        Load_V1(TSIn SIn) -> PNEANet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TNEANet_Load_V1(SIn)

    Load_V1 = staticmethod(Load_V1)

    def Load_V2(SIn):
        """
        Load_V2(TSIn SIn) -> PNEANet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TNEANet_Load_V2(SIn)

    Load_V2 = staticmethod(Load_V2)

    def LoadNetworkShM(self, ShMIn):
        """
        LoadNetworkShM(TNEANet self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TNEANet_LoadNetworkShM(self, ShMIn)


    def LoadShM(ShMIn):
        """
        LoadShM(TShMIn ShMIn) -> PNEANet

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TNEANet_LoadShM(ShMIn)

    LoadShM = staticmethod(LoadShM)

    def ConvertToSparse(self):
        """
        ConvertToSparse(TNEANet self)

        Parameters
        ----------
        self: TNEANet *

        """
        return _SnapTime.TNEANet_ConvertToSparse(self)


    def HasFlag(self, Flag):
        """
        HasFlag(TNEANet self, TGraphFlag const & Flag) -> bool

        Parameters
        ----------
        Flag: TGraphFlag const &

        """
        return _SnapTime.TNEANet_HasFlag(self, Flag)


    def GetNodes(self):
        """
        GetNodes(TNEANet self) -> int64

        Parameters
        ----------
        self: TNEANet const *

        """
        return _SnapTime.TNEANet_GetNodes(self)


    def AddNodeUnchecked(self, NId=-1):
        """
        AddNodeUnchecked(TNEANet self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNodeUnchecked(TNEANet self) -> int64

        Parameters
        ----------
        self: TNEANet *

        """
        return _SnapTime.TNEANet_AddNodeUnchecked(self, NId)


    def AddNode(self, *args):
        """
        AddNode(TNEANet self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(TNEANet self) -> int64
        AddNode(TNEANet self, TNEANet::TNodeI const & NodeI) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &

        """
        return _SnapTime.TNEANet_AddNode(self, *args)


    def DelNode(self, *args):
        """
        DelNode(TNEANet self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        DelNode(TNEANet self, TNEANet::TNode const & NodeI)

        Parameters
        ----------
        NodeI: TNEANet::TNode const &

        """
        return _SnapTime.TNEANet_DelNode(self, *args)


    def IsNode(self, NId):
        """
        IsNode(TNEANet self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNEANet_IsNode(self, NId)


    def GetNAIntI(self, attr, NId):
        """
        GetNAIntI(TNEANet self, TStr attr, int64 const & NId) -> TNEANet::TAIntI

        Parameters
        ----------
        attr: TStr const &
        NId: int64 const &

        """
        return _SnapTime.TNEANet_GetNAIntI(self, attr, NId)


    def BegNAIntVI(self, attr):
        """
        BegNAIntVI(TNEANet self, TStr attr) -> TNEANet::TAIntVI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_BegNAIntVI(self, attr)


    def EndNAIntVI(self, attr):
        """
        EndNAIntVI(TNEANet self, TStr attr) -> TNEANet::TAIntVI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_EndNAIntVI(self, attr)


    def GetNAIntVI(self, attr, NId):
        """
        GetNAIntVI(TNEANet self, TStr attr, int64 const & NId) -> TNEANet::TAIntVI

        Parameters
        ----------
        attr: TStr const &
        NId: int64 const &

        """
        return _SnapTime.TNEANet_GetNAIntVI(self, attr, NId)


    def GetNAStrI(self, attr, NId):
        """
        GetNAStrI(TNEANet self, TStr attr, int64 const & NId) -> TNEANet::TAStrI

        Parameters
        ----------
        attr: TStr const &
        NId: int64 const &

        """
        return _SnapTime.TNEANet_GetNAStrI(self, attr, NId)


    def GetNAFltI(self, attr, NId):
        """
        GetNAFltI(TNEANet self, TStr attr, int64 const & NId) -> TNEANet::TAFltI

        Parameters
        ----------
        attr: TStr const &
        NId: int64 const &

        """
        return _SnapTime.TNEANet_GetNAFltI(self, attr, NId)


    def AttrNameNI(self, *args):
        """
        AttrNameNI(TNEANet self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        AttrNameNI(TNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANet_AttrNameNI(self, *args)


    def AttrValueNI(self, *args):
        """
        AttrValueNI(TNEANet self, TInt64 NId, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TStr64V &

        AttrValueNI(TNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.TNEANet_AttrValueNI(self, *args)


    def IntAttrNameNI(self, *args):
        """
        IntAttrNameNI(TNEANet self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        IntAttrNameNI(TNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANet_IntAttrNameNI(self, *args)


    def IntAttrValueNI(self, *args):
        """
        IntAttrValueNI(TNEANet self, TInt64 NId, TInt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TInt64V &

        IntAttrValueNI(TNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TInt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TInt64V &

        """
        return _SnapTime.TNEANet_IntAttrValueNI(self, *args)


    def IntVAttrNameNI(self, *args):
        """
        IntVAttrNameNI(TNEANet self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        IntVAttrNameNI(TNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANet_IntVAttrNameNI(self, *args)


    def IntVAttrValueNI(self, *args):
        """
        IntVAttrValueNI(TNEANet self, TInt64 NId, TIntInt64VV Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TVec< TInt64V,int64 > &

        IntVAttrValueNI(TNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TIntInt64VV Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TVec< TInt64V,int64 > &

        """
        return _SnapTime.TNEANet_IntVAttrValueNI(self, *args)


    def StrAttrNameNI(self, *args):
        """
        StrAttrNameNI(TNEANet self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        StrAttrNameNI(TNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANet_StrAttrNameNI(self, *args)


    def StrAttrValueNI(self, *args):
        """
        StrAttrValueNI(TNEANet self, TInt64 NId, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TStr64V &

        StrAttrValueNI(TNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.TNEANet_StrAttrValueNI(self, *args)


    def FltAttrNameNI(self, *args):
        """
        FltAttrNameNI(TNEANet self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        FltAttrNameNI(TNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANet_FltAttrNameNI(self, *args)


    def FltAttrValueNI(self, *args):
        """
        FltAttrValueNI(TNEANet self, TInt64 NId, TFlt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TFlt64V &

        FltAttrValueNI(TNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TFlt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TFlt64V &

        """
        return _SnapTime.TNEANet_FltAttrValueNI(self, *args)


    def AttrNameEI(self, *args):
        """
        AttrNameEI(TNEANet self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        AttrNameEI(TNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANet_AttrNameEI(self, *args)


    def AttrValueEI(self, *args):
        """
        AttrValueEI(TNEANet self, TInt64 EId, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TStr64V &

        AttrValueEI(TNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.TNEANet_AttrValueEI(self, *args)


    def IntAttrNameEI(self, *args):
        """
        IntAttrNameEI(TNEANet self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        IntAttrNameEI(TNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANet_IntAttrNameEI(self, *args)


    def IntAttrValueEI(self, *args):
        """
        IntAttrValueEI(TNEANet self, TInt64 EId, TInt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TInt64V &

        IntAttrValueEI(TNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TInt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TInt64V &

        """
        return _SnapTime.TNEANet_IntAttrValueEI(self, *args)


    def IntVAttrNameEI(self, *args):
        """
        IntVAttrNameEI(TNEANet self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        IntVAttrNameEI(TNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANet_IntVAttrNameEI(self, *args)


    def IntVAttrValueEI(self, *args):
        """
        IntVAttrValueEI(TNEANet self, TInt64 EId, TIntInt64VV Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TVec< TInt64V,int64 > &

        IntVAttrValueEI(TNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TIntInt64VV Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TVec< TInt64V,int64 > &

        """
        return _SnapTime.TNEANet_IntVAttrValueEI(self, *args)


    def StrAttrNameEI(self, *args):
        """
        StrAttrNameEI(TNEANet self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        StrAttrNameEI(TNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANet_StrAttrNameEI(self, *args)


    def StrAttrValueEI(self, *args):
        """
        StrAttrValueEI(TNEANet self, TInt64 EId, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TStr64V &

        StrAttrValueEI(TNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.TNEANet_StrAttrValueEI(self, *args)


    def FltAttrNameEI(self, *args):
        """
        FltAttrNameEI(TNEANet self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        FltAttrNameEI(TNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANet_FltAttrNameEI(self, *args)


    def FltAttrValueEI(self, *args):
        """
        FltAttrValueEI(TNEANet self, TInt64 EId, TFlt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TFlt64V &

        FltAttrValueEI(TNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TFlt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TFlt64V &

        """
        return _SnapTime.TNEANet_FltAttrValueEI(self, *args)


    def GetEAIntI(self, attr, EId):
        """
        GetEAIntI(TNEANet self, TStr attr, int64 const & EId) -> TNEANet::TAIntI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.TNEANet_GetEAIntI(self, attr, EId)


    def BegEAIntVI(self, attr):
        """
        BegEAIntVI(TNEANet self, TStr attr) -> TNEANet::TAIntVI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_BegEAIntVI(self, attr)


    def EndEAIntVI(self, attr):
        """
        EndEAIntVI(TNEANet self, TStr attr) -> TNEANet::TAIntVI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_EndEAIntVI(self, attr)


    def GetEAIntVI(self, attr, EId):
        """
        GetEAIntVI(TNEANet self, TStr attr, int64 const & EId) -> TNEANet::TAIntVI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.TNEANet_GetEAIntVI(self, attr, EId)


    def GetEAStrI(self, attr, EId):
        """
        GetEAStrI(TNEANet self, TStr attr, int64 const & EId) -> TNEANet::TAStrI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.TNEANet_GetEAStrI(self, attr, EId)


    def GetEAFltI(self, attr, EId):
        """
        GetEAFltI(TNEANet self, TStr attr, int64 const & EId) -> TNEANet::TAFltI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.TNEANet_GetEAFltI(self, attr, EId)


    def GetMxNId(self):
        """
        GetMxNId(TNEANet self) -> int64

        Parameters
        ----------
        self: TNEANet const *

        """
        return _SnapTime.TNEANet_GetMxNId(self)


    def GetMxEId(self):
        """
        GetMxEId(TNEANet self) -> int64

        Parameters
        ----------
        self: TNEANet const *

        """
        return _SnapTime.TNEANet_GetMxEId(self)


    def GetEdges(self):
        """
        GetEdges(TNEANet self) -> int64

        Parameters
        ----------
        self: TNEANet const *

        """
        return _SnapTime.TNEANet_GetEdges(self)


    def AddEdge(self, *args):
        """
        AddEdge(TNEANet self, int64 const & SrcNId, int64 const & DstNId, int64 EId=-1) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        EId: int64

        AddEdge(TNEANet self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        AddEdge(TNEANet self, TNEANet::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &

        """
        return _SnapTime.TNEANet_AddEdge(self, *args)


    def DelEdge(self, *args):
        """
        DelEdge(TNEANet self, int64 const & EId)

        Parameters
        ----------
        EId: int64 const &

        DelEdge(TNEANet self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        DelEdge(TNEANet self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNEANet_DelEdge(self, *args)


    def IsEdge(self, *args):
        """
        IsEdge(TNEANet self, int64 const & EId) -> bool

        Parameters
        ----------
        EId: int64 const &

        IsEdge(TNEANet self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        IsEdge(TNEANet self, int64 const & SrcNId, int64 const & DstNId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        IsEdge(TNEANet self, int64 const & SrcNId, int64 const & DstNId, int64 & EId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        EId: int64 &
        IsDir: bool const &

        IsEdge(TNEANet self, int64 const & SrcNId, int64 const & DstNId, int64 & EId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        EId: int64 &

        """
        return _SnapTime.TNEANet_IsEdge(self, *args)


    def GetEId(self, SrcNId, DstNId):
        """
        GetEId(TNEANet self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNEANet_GetEId(self, SrcNId, DstNId)


    def GetRndNId(self, *args):
        """
        GetRndNId(TNEANet self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(TNEANet self) -> int64

        Parameters
        ----------
        self: TNEANet *

        """
        return _SnapTime.TNEANet_GetRndNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(TNEANet self, TRnd Rnd) -> TNEANet::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(TNEANet self) -> TNEANet::TNodeI

        Parameters
        ----------
        self: TNEANet *

        """
        return _SnapTime.TNEANet_GetRndNI(self, *args)


    def GetRndEId(self, *args):
        """
        GetRndEId(TNEANet self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndEId(TNEANet self) -> int64

        Parameters
        ----------
        self: TNEANet *

        """
        return _SnapTime.TNEANet_GetRndEId(self, *args)


    def GetRndEI(self, *args):
        """
        GetRndEI(TNEANet self, TRnd Rnd) -> TNEANet::TEdgeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndEI(TNEANet self) -> TNEANet::TEdgeI

        Parameters
        ----------
        self: TNEANet *

        """
        return _SnapTime.TNEANet_GetRndEI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(TNEANet self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.TNEANet_GetNIdV(self, NIdV)


    def GetEIdV(self, EIdV):
        """
        GetEIdV(TNEANet self, TInt64V EIdV)

        Parameters
        ----------
        EIdV: TInt64V &

        """
        return _SnapTime.TNEANet_GetEIdV(self, EIdV)


    def Empty(self):
        """
        Empty(TNEANet self) -> bool

        Parameters
        ----------
        self: TNEANet const *

        """
        return _SnapTime.TNEANet_Empty(self)


    def Clr(self):
        """
        Clr(TNEANet self)

        Parameters
        ----------
        self: TNEANet *

        """
        return _SnapTime.TNEANet_Clr(self)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(TNEANet self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TNEANet_Reserve(self, Nodes, Edges)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(TNEANet self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(TNEANet self)

        Parameters
        ----------
        self: TNEANet *

        """
        return _SnapTime.TNEANet_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(TNEANet self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(TNEANet self) -> bool

        Parameters
        ----------
        self: TNEANet const *

        """
        return _SnapTime.TNEANet_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(TNEANet self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(TNEANet self)

        Parameters
        ----------
        self: TNEANet const *

        """
        return _SnapTime.TNEANet_Dump(self, *args)


    def IsEulerian(self, StartNId=None):
        """
        IsEulerian(TNEANet self, int64 * StartNId=None) -> bool

        Parameters
        ----------
        StartNId: int64 *

        IsEulerian(TNEANet self) -> bool

        Parameters
        ----------
        self: TNEANet *

        """
        return _SnapTime.TNEANet_IsEulerian(self, StartNId)


    def GetEulerPath(self, Path):
        """
        GetEulerPath(TNEANet self, TInt64V Path) -> bool

        Parameters
        ----------
        Path: TInt64V &

        """
        return _SnapTime.TNEANet_GetEulerPath(self, Path)


    def AddIntVAttrDatN(self, *args):
        """
        AddIntVAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TInt64V value, TStr attr) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        value: TInt64V const &
        attr: TStr const &

        AddIntVAttrDatN(TNEANet self, int64 const & NId, TInt64V value, TStr attr, TBool UseDense=True) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TInt64V const &
        attr: TStr const &
        UseDense: TBool

        AddIntVAttrDatN(TNEANet self, int64 const & NId, TInt64V value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TInt64V const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_AddIntVAttrDatN(self, *args)


    def AppendIntVAttrDatN(self, *args):
        """
        AppendIntVAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        value: TInt64 const &
        attr: TStr const &

        AppendIntVAttrDatN(TNEANet self, int64 const & NId, TInt64 value, TStr attr, TBool UseDense=True) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TInt64 const &
        attr: TStr const &
        UseDense: TBool

        AppendIntVAttrDatN(TNEANet self, int64 const & NId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TInt64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_AppendIntVAttrDatN(self, *args)


    def DelFromIntVAttrDatN(self, *args):
        """
        DelFromIntVAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        value: TInt64 const &
        attr: TStr const &

        DelFromIntVAttrDatN(TNEANet self, int64 const & NId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TInt64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_DelFromIntVAttrDatN(self, *args)


    def AddIntVAttrDatE(self, *args):
        """
        AddIntVAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64V value, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        value: TInt64V const &
        attr: TStr const &

        AddIntVAttrDatE(TNEANet self, int64 const & EId, TInt64V value, TStr attr, TBool UseDense=True) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TInt64V const &
        attr: TStr const &
        UseDense: TBool

        AddIntVAttrDatE(TNEANet self, int64 const & EId, TInt64V value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TInt64V const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_AddIntVAttrDatE(self, *args)


    def AppendIntVAttrDatE(self, *args):
        """
        AppendIntVAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        value: TInt64 const &
        attr: TStr const &

        AppendIntVAttrDatE(TNEANet self, int64 const & EId, TInt64 value, TStr attr, TBool UseDense=True) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TInt64 const &
        attr: TStr const &
        UseDense: TBool

        AppendIntVAttrDatE(TNEANet self, int64 const & EId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TInt64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_AppendIntVAttrDatE(self, *args)


    def GetIntVAttrDatN(self, *args):
        """
        GetIntVAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TStr attr) -> TInt64V

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        attr: TStr const &

        GetIntVAttrDatN(TNEANet self, int64 const & NId, TStr attr) -> TInt64V

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_GetIntVAttrDatN(self, *args)


    def GetIntAttrIndN(self, attr):
        """
        GetIntAttrIndN(TNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_GetIntAttrIndN(self, attr)


    def GetAttrIndN(self, attr):
        """
        GetAttrIndN(TNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_GetAttrIndN(self, attr)


    def GetIntVAttrDatE(self, *args):
        """
        GetIntVAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TStr attr) -> TInt64V

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        attr: TStr const &

        GetIntVAttrDatE(TNEANet self, int64 const & EId, TStr attr) -> TInt64V

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_GetIntVAttrDatE(self, *args)


    def GetIntAttrIndE(self, attr):
        """
        GetIntAttrIndE(TNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_GetIntAttrIndE(self, attr)


    def GetAttrIndE(self, attr):
        """
        GetAttrIndE(TNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_GetAttrIndE(self, attr)


    def DelAllAttrDatN(self):
        """
        DelAllAttrDatN(TNEANet self) -> int64

        Parameters
        ----------
        self: TNEANet *

        """
        return _SnapTime.TNEANet_DelAllAttrDatN(self)


    def DelAllAttrDatE(self):
        """
        DelAllAttrDatE(TNEANet self) -> int64

        Parameters
        ----------
        self: TNEANet *

        """
        return _SnapTime.TNEANet_DelAllAttrDatE(self)


    def AddIntAttrN(self, *args):
        """
        AddIntAttrN(TNEANet self, TStr attr, TInt64 defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TInt64

        AddIntAttrN(TNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_AddIntAttrN(self, *args)


    def AddStrAttrN(self, *args):
        """
        AddStrAttrN(TNEANet self, TStr attr, TStr defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TStr

        AddStrAttrN(TNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_AddStrAttrN(self, *args)


    def AddFltAttrN(self, *args):
        """
        AddFltAttrN(TNEANet self, TStr attr, TFlt defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TFlt

        AddFltAttrN(TNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_AddFltAttrN(self, *args)


    def AddIntVAttrN(self, attr, UseDense=True):
        """
        AddIntVAttrN(TNEANet self, TStr attr, TBool UseDense=True) -> int64

        Parameters
        ----------
        attr: TStr const &
        UseDense: TBool

        AddIntVAttrN(TNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_AddIntVAttrN(self, attr, UseDense)


    def AddIntAttrE(self, *args):
        """
        AddIntAttrE(TNEANet self, TStr attr, TInt64 defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TInt64

        AddIntAttrE(TNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_AddIntAttrE(self, *args)


    def AddStrAttrE(self, *args):
        """
        AddStrAttrE(TNEANet self, TStr attr, TStr defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TStr

        AddStrAttrE(TNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_AddStrAttrE(self, *args)


    def AddFltAttrE(self, *args):
        """
        AddFltAttrE(TNEANet self, TStr attr, TFlt defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TFlt

        AddFltAttrE(TNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_AddFltAttrE(self, *args)


    def AddIntVAttrE(self, attr, UseDense=True):
        """
        AddIntVAttrE(TNEANet self, TStr attr, TBool UseDense=True) -> int64

        Parameters
        ----------
        attr: TStr const &
        UseDense: TBool

        AddIntVAttrE(TNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_AddIntVAttrE(self, attr, UseDense)


    def DelAttrN(self, attr):
        """
        DelAttrN(TNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_DelAttrN(self, attr)


    def DelAttrE(self, attr):
        """
        DelAttrE(TNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_DelAttrE(self, attr)


    def IsAttrDeletedN(self, NId, attr):
        """
        IsAttrDeletedN(TNEANet self, int64 const & NId, TStr attr) -> bool

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsAttrDeletedN(self, NId, attr)


    def IsIntAttrDeletedN(self, NId, attr):
        """
        IsIntAttrDeletedN(TNEANet self, int64 const & NId, TStr attr) -> bool

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsIntAttrDeletedN(self, NId, attr)


    def IsIntVAttrDeletedN(self, NId, attr):
        """
        IsIntVAttrDeletedN(TNEANet self, int64 const & NId, TStr attr) -> bool

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsIntVAttrDeletedN(self, NId, attr)


    def IsStrAttrDeletedN(self, NId, attr):
        """
        IsStrAttrDeletedN(TNEANet self, int64 const & NId, TStr attr) -> bool

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsStrAttrDeletedN(self, NId, attr)


    def IsFltAttrDeletedN(self, NId, attr):
        """
        IsFltAttrDeletedN(TNEANet self, int64 const & NId, TStr attr) -> bool

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsFltAttrDeletedN(self, NId, attr)


    def NodeAttrIsDeleted(self, NId, NodeHI):
        """
        NodeAttrIsDeleted(TNEANet self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANet_NodeAttrIsDeleted(self, NId, NodeHI)


    def NodeAttrIsIntDeleted(self, NId, NodeHI):
        """
        NodeAttrIsIntDeleted(TNEANet self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANet_NodeAttrIsIntDeleted(self, NId, NodeHI)


    def NodeAttrIsIntVDeleted(self, NId, NodeHI):
        """
        NodeAttrIsIntVDeleted(TNEANet self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANet_NodeAttrIsIntVDeleted(self, NId, NodeHI)


    def NodeAttrIsStrDeleted(self, NId, NodeHI):
        """
        NodeAttrIsStrDeleted(TNEANet self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANet_NodeAttrIsStrDeleted(self, NId, NodeHI)


    def NodeAttrIsFltDeleted(self, NId, NodeHI):
        """
        NodeAttrIsFltDeleted(TNEANet self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANet_NodeAttrIsFltDeleted(self, NId, NodeHI)


    def IsAttrDeletedE(self, EId, attr):
        """
        IsAttrDeletedE(TNEANet self, int64 const & EId, TStr attr) -> bool

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsAttrDeletedE(self, EId, attr)


    def IsIntAttrDeletedE(self, EId, attr):
        """
        IsIntAttrDeletedE(TNEANet self, int64 const & EId, TStr attr) -> bool

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsIntAttrDeletedE(self, EId, attr)


    def IsIntVAttrDeletedE(self, EId, attr):
        """
        IsIntVAttrDeletedE(TNEANet self, int64 const & EId, TStr attr) -> bool

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsIntVAttrDeletedE(self, EId, attr)


    def IsStrAttrDeletedE(self, EId, attr):
        """
        IsStrAttrDeletedE(TNEANet self, int64 const & EId, TStr attr) -> bool

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsStrAttrDeletedE(self, EId, attr)


    def IsFltAttrDeletedE(self, EId, attr):
        """
        IsFltAttrDeletedE(TNEANet self, int64 const & EId, TStr attr) -> bool

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsFltAttrDeletedE(self, EId, attr)


    def EdgeAttrIsDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsDeleted(TNEANet self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANet_EdgeAttrIsDeleted(self, EId, EdgeHI)


    def EdgeAttrIsIntDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsIntDeleted(TNEANet self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANet_EdgeAttrIsIntDeleted(self, EId, EdgeHI)


    def EdgeAttrIsIntVDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsIntVDeleted(TNEANet self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANet_EdgeAttrIsIntVDeleted(self, EId, EdgeHI)


    def EdgeAttrIsStrDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsStrDeleted(TNEANet self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANet_EdgeAttrIsStrDeleted(self, EId, EdgeHI)


    def EdgeAttrIsFltDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsFltDeleted(TNEANet self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANet_EdgeAttrIsFltDeleted(self, EId, EdgeHI)


    def GetNodeAttrValue(self, NId, NodeHI):
        """
        GetNodeAttrValue(TNEANet self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> TStr

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANet_GetNodeAttrValue(self, NId, NodeHI)


    def GetEdgeAttrValue(self, EId, EdgeHI):
        """
        GetEdgeAttrValue(TNEANet self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> TStr

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANet_GetEdgeAttrValue(self, EId, EdgeHI)


    def GetWeightOutEdges(self, NI, attr):
        """
        GetWeightOutEdges(TNEANet self, TNEANet::TNodeI const & NI, TStr attr) -> TFlt

        Parameters
        ----------
        NI: TNEANet::TNodeI const &
        attr: TStr const &

        """
        return _SnapTime.TNEANet_GetWeightOutEdges(self, NI, attr)


    def IsFltAttrN(self, attr):
        """
        IsFltAttrN(TNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsFltAttrN(self, attr)


    def IsIntAttrN(self, attr):
        """
        IsIntAttrN(TNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsIntAttrN(self, attr)


    def IsStrAttrN(self, attr):
        """
        IsStrAttrN(TNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsStrAttrN(self, attr)


    def IsIntVAttrN(self, attr):
        """
        IsIntVAttrN(TNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsIntVAttrN(self, attr)


    def IsFltAttrE(self, attr):
        """
        IsFltAttrE(TNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsFltAttrE(self, attr)


    def IsIntAttrE(self, attr):
        """
        IsIntAttrE(TNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsIntAttrE(self, attr)


    def IsStrAttrE(self, attr):
        """
        IsStrAttrE(TNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsStrAttrE(self, attr)


    def IsIntVAttrE(self, attr):
        """
        IsIntVAttrE(TNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_IsIntVAttrE(self, attr)


    def GetFltAttrVecE(self, attr):
        """
        GetFltAttrVecE(TNEANet self, TStr attr) -> TFlt64V

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANet_GetFltAttrVecE(self, attr)


    def GetFltKeyIdE(self, EId):
        """
        GetFltKeyIdE(TNEANet self, int64 const & EId) -> int64

        Parameters
        ----------
        EId: int64 const &

        """
        return _SnapTime.TNEANet_GetFltKeyIdE(self, EId)


    def GetWeightOutEdgesV(self, OutWeights, AttrVal):
        """
        GetWeightOutEdgesV(TNEANet self, TFlt64V OutWeights, TFlt64V AttrVal)

        Parameters
        ----------
        OutWeights: TFlt64V &
        AttrVal: TFlt64V const &

        """
        return _SnapTime.TNEANet_GetWeightOutEdgesV(self, OutWeights, AttrVal)


    def GetAttrNNames(self, IntAttrNames, FltAttrNames, StrAttrNames):
        """
        GetAttrNNames(TNEANet self, TStr64V IntAttrNames, TStr64V FltAttrNames, TStr64V StrAttrNames)

        Parameters
        ----------
        IntAttrNames: TStr64V &
        FltAttrNames: TStr64V &
        StrAttrNames: TStr64V &

        """
        return _SnapTime.TNEANet_GetAttrNNames(self, IntAttrNames, FltAttrNames, StrAttrNames)


    def GetIntVAttrNNames(self, IntVAttrNames):
        """
        GetIntVAttrNNames(TNEANet self, TStr64V IntVAttrNames)

        Parameters
        ----------
        IntVAttrNames: TStr64V &

        """
        return _SnapTime.TNEANet_GetIntVAttrNNames(self, IntVAttrNames)


    def GetAttrENames(self, IntAttrNames, FltAttrNames, StrAttrNames):
        """
        GetAttrENames(TNEANet self, TStr64V IntAttrNames, TStr64V FltAttrNames, TStr64V StrAttrNames)

        Parameters
        ----------
        IntAttrNames: TStr64V &
        FltAttrNames: TStr64V &
        StrAttrNames: TStr64V &

        """
        return _SnapTime.TNEANet_GetAttrENames(self, IntAttrNames, FltAttrNames, StrAttrNames)


    def GetIntVAttrENames(self, IntVAttrNames):
        """
        GetIntVAttrENames(TNEANet self, TStr64V IntVAttrNames)

        Parameters
        ----------
        IntVAttrNames: TStr64V &

        """
        return _SnapTime.TNEANet_GetIntVAttrENames(self, IntVAttrNames)


    def AddSAttrDatN(self, *args):
        """
        AddSAttrDatN(TNEANet self, TInt64 NId, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatN(TNEANet self, TInt64 NId, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatN(TNEANet self, TInt64 NId, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatN(TNEANet self, TInt64 NId, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatN(TNEANet self, TInt64 NId, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatN(TNEANet self, TInt64 NId, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TStr const &

        AddSAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrId: TInt64 const &
        Val: TStr const &

        """
        return _SnapTime.TNEANet_AddSAttrDatN(self, *args)


    def GetSAttrDatN(self, *args):
        """
        GetSAttrDatN(TNEANet self, TInt64 NId, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatN(TNEANet self, TInt64 NId, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatN(TNEANet self, TInt64 NId, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatN(TNEANet self, TInt64 NId, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatN(TNEANet self, TInt64 NId, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatN(TNEANet self, TInt64 NId, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TStr &

        GetSAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TStr &

        """
        return _SnapTime.TNEANet_GetSAttrDatN(self, *args)


    def DelSAttrDatN(self, *args):
        """
        DelSAttrDatN(TNEANet self, TInt64 NId, TStr AttrName) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &

        DelSAttrDatN(TNEANet self, TInt64 NId, TInt64 AttrId) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &

        DelSAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TStr AttrName) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrName: TStr const &

        DelSAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TInt64 AttrId) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrId: TInt64 const &

        """
        return _SnapTime.TNEANet_DelSAttrDatN(self, *args)


    def GetSAttrVN(self, *args):
        """
        GetSAttrVN(TNEANet self, TInt64 NId, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        GetSAttrVN(TNEANet self, TNEANet::TNodeI const & NodeI, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        """
        return _SnapTime.TNEANet_GetSAttrVN(self, *args)


    def GetIdVSAttrN(self, *args):
        """
        GetIdVSAttrN(TNEANet self, TStr AttrName, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrName: TStr const &
        IdV: TInt64V &

        GetIdVSAttrN(TNEANet self, TInt64 AttrId, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        IdV: TInt64V &

        """
        return _SnapTime.TNEANet_GetIdVSAttrN(self, *args)


    def AddSAttrN(self, Name, AttrType, AttrId):
        """
        AddSAttrN(TNEANet self, TStr Name, TAttrType const & AttrType, TInt64 AttrId) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrType: TAttrType const &
        AttrId: TInt64 &

        """
        return _SnapTime.TNEANet_AddSAttrN(self, Name, AttrType, AttrId)


    def GetSAttrIdN(self, Name, AttrIdX, AttrTypeX):
        """
        GetSAttrIdN(TNEANet self, TStr Name, TInt64 AttrIdX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrIdX: TInt64 &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TNEANet_GetSAttrIdN(self, Name, AttrIdX, AttrTypeX)


    def GetSAttrNameN(self, AttrId, NameX, AttrTypeX):
        """
        GetSAttrNameN(TNEANet self, TInt64 AttrId, TStr NameX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        NameX: TStr &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TNEANet_GetSAttrNameN(self, AttrId, NameX, AttrTypeX)


    def AddSAttrDatE(self, *args):
        """
        AddSAttrDatE(TNEANet self, TInt64 EId, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatE(TNEANet self, TInt64 EId, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatE(TNEANet self, TInt64 EId, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatE(TNEANet self, TInt64 EId, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatE(TNEANet self, TInt64 EId, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatE(TNEANet self, TInt64 EId, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrId: TInt64 const &
        Val: TStr const &

        AddSAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TStr AttrName, TStr Val) -> int

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TStr const &

        """
        return _SnapTime.TNEANet_AddSAttrDatE(self, *args)


    def GetSAttrDatE(self, *args):
        """
        GetSAttrDatE(TNEANet self, TInt64 EId, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatE(TNEANet self, TInt64 EId, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatE(TNEANet self, TInt64 EId, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatE(TNEANet self, TInt64 EId, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatE(TNEANet self, TInt64 EId, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatE(TNEANet self, TInt64 EId, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TStr &

        GetSAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TStr &

        """
        return _SnapTime.TNEANet_GetSAttrDatE(self, *args)


    def DelSAttrDatE(self, *args):
        """
        DelSAttrDatE(TNEANet self, TInt64 EId, TStr AttrName) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrName: TStr const &

        DelSAttrDatE(TNEANet self, TInt64 EId, TInt64 AttrId) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrId: TInt64 const &

        DelSAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TStr AttrName) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrName: TStr const &

        DelSAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 AttrId) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrId: TInt64 const &

        """
        return _SnapTime.TNEANet_DelSAttrDatE(self, *args)


    def GetSAttrVE(self, *args):
        """
        GetSAttrVE(TNEANet self, TInt64 EId, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        GetSAttrVE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        """
        return _SnapTime.TNEANet_GetSAttrVE(self, *args)


    def GetIdVSAttrE(self, *args):
        """
        GetIdVSAttrE(TNEANet self, TStr AttrName, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrName: TStr const &
        IdV: TInt64V &

        GetIdVSAttrE(TNEANet self, TInt64 AttrId, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        IdV: TInt64V &

        """
        return _SnapTime.TNEANet_GetIdVSAttrE(self, *args)


    def AddSAttrE(self, Name, AttrType, AttrId):
        """
        AddSAttrE(TNEANet self, TStr Name, TAttrType const & AttrType, TInt64 AttrId) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrType: TAttrType const &
        AttrId: TInt64 &

        """
        return _SnapTime.TNEANet_AddSAttrE(self, Name, AttrType, AttrId)


    def GetSAttrIdE(self, Name, AttrIdX, AttrTypeX):
        """
        GetSAttrIdE(TNEANet self, TStr Name, TInt64 AttrIdX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrIdX: TInt64 &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TNEANet_GetSAttrIdE(self, Name, AttrIdX, AttrTypeX)


    def GetSAttrNameE(self, AttrId, NameX, AttrTypeX):
        """
        GetSAttrNameE(TNEANet self, TInt64 AttrId, TStr NameX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        NameX: TStr &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TNEANet_GetSAttrNameE(self, AttrId, NameX, AttrTypeX)


    def BegNI(self, *args):
        """
        BegNI(TNEANet self) -> TNEANet::TNodeI
        BegNI(TNEANet self) -> TNEANetNodeI

        Parameters
        ----------
        self: TNEANet *

        """
        return _SnapTime.TNEANet_BegNI(self, *args)


    def EndNI(self, *args):
        """
        EndNI(TNEANet self) -> TNEANet::TNodeI
        EndNI(TNEANet self) -> TNEANetNodeI

        Parameters
        ----------
        self: TNEANet *

        """
        return _SnapTime.TNEANet_EndNI(self, *args)


    def GetNI(self, *args):
        """
        GetNI(TNEANet self, int64 const & NId) -> TNEANet::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetNI(TNEANet self) -> TIterNode< TNEANet >
        GetNI(TNEANet self, int64 const & NId) -> TNEANetNodeI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNEANet_GetNI(self, *args)


    def AddIntAttrDatN(self, *args):
        """
        AddIntAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        value: TInt64 const &
        attr: TStr const &

        AddIntAttrDatN(TNEANet self, int64 const & NId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TInt64 const &
        attr: TStr const &

        AddIntAttrDatN(TNEANet self, TNEANetNodeI NI, TInt64 Value, TStr Attr) -> int64

        Parameters
        ----------
        NI: TNEANetNodeI const &
        Value: TInt64 const &
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_AddIntAttrDatN(self, *args)


    def AddFltAttrDatN(self, *args):
        """
        AddFltAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        value: TFlt const &
        attr: TStr const &

        AddFltAttrDatN(TNEANet self, int64 const & NId, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TFlt const &
        attr: TStr const &

        AddFltAttrDatN(TNEANet self, TNEANetNodeI NI, TFlt Value, TStr Attr) -> int64

        Parameters
        ----------
        NI: TNEANetNodeI const &
        Value: TFlt const &
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_AddFltAttrDatN(self, *args)


    def AddStrAttrDatN(self, *args):
        """
        AddStrAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TStr value, TStr attr) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        value: TStr const &
        attr: TStr const &

        AddStrAttrDatN(TNEANet self, int64 const & NId, TStr value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TStr const &
        attr: TStr const &

        AddStrAttrDatN(TNEANet self, TNEANetNodeI NI, TStr Value, TStr Attr) -> int64

        Parameters
        ----------
        NI: TNEANetNodeI const &
        Value: TStr const &
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_AddStrAttrDatN(self, *args)


    def GetIntAttrDatN(self, *args):
        """
        GetIntAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TStr attr) -> TInt64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        attr: TStr const &

        GetIntAttrDatN(TNEANet self, int64 const & NId, TStr attr) -> TInt64

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        GetIntAttrDatN(TNEANet self, TNEANetNodeI NI, TStr Attr) -> TInt64

        Parameters
        ----------
        NI: TNEANetNodeI const &
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_GetIntAttrDatN(self, *args)


    def GetFltAttrDatN(self, *args):
        """
        GetFltAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TStr attr) -> TFlt

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        attr: TStr const &

        GetFltAttrDatN(TNEANet self, int64 const & NId, TStr attr) -> TFlt

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        GetFltAttrDatN(TNEANet self, TNEANetNodeI NI, TStr Attr) -> TFlt

        Parameters
        ----------
        NI: TNEANetNodeI const &
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_GetFltAttrDatN(self, *args)


    def GetStrAttrDatN(self, *args):
        """
        GetStrAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TStr attr) -> TStr

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        attr: TStr const &

        GetStrAttrDatN(TNEANet self, int64 const & NId, TStr attr) -> TStr

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        GetStrAttrDatN(TNEANet self, TNEANetNodeI NI, TStr Attr) -> TStr

        Parameters
        ----------
        NI: TNEANetNodeI const &
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_GetStrAttrDatN(self, *args)


    def GetIntAttrIndDatN(self, *args):
        """
        GetIntAttrIndDatN(TNEANet self, TNEANet::TNodeI const & NodeI, int64 const & index) -> TInt64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        index: int64 const &

        GetIntAttrIndDatN(TNEANet self, int64 const & NId, int64 const & index) -> TInt64

        Parameters
        ----------
        NId: int64 const &
        index: int64 const &

        GetIntAttrIndDatN(TNEANet self, TNEANetNodeI NI, int64 const & index) -> TInt64

        Parameters
        ----------
        NI: TNEANetNodeI const &
        index: int64 const &

        """
        return _SnapTime.TNEANet_GetIntAttrIndDatN(self, *args)


    def GetFltAttrIndDatN(self, *args):
        """
        GetFltAttrIndDatN(TNEANet self, TNEANet::TNodeI const & NodeI, int64 const & index) -> TFlt

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        index: int64 const &

        GetFltAttrIndDatN(TNEANet self, int64 const & NId, int64 const & index) -> TFlt

        Parameters
        ----------
        NId: int64 const &
        index: int64 const &

        GetFltAttrIndDatN(TNEANet self, TNEANetNodeI NI, int64 const & index) -> TFlt

        Parameters
        ----------
        NI: TNEANetNodeI const &
        index: int64 const &

        """
        return _SnapTime.TNEANet_GetFltAttrIndDatN(self, *args)


    def GetStrAttrIndDatN(self, *args):
        """
        GetStrAttrIndDatN(TNEANet self, TNEANet::TNodeI const & NodeI, int64 const & index) -> TStr

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        index: int64 const &

        GetStrAttrIndDatN(TNEANet self, int64 const & NId, int64 const & index) -> TStr

        Parameters
        ----------
        NId: int64 const &
        index: int64 const &

        GetStrAttrIndDatN(TNEANet self, TNEANetNodeI NI, int64 const & index) -> TStr

        Parameters
        ----------
        NI: TNEANetNodeI const &
        index: int64 const &

        """
        return _SnapTime.TNEANet_GetStrAttrIndDatN(self, *args)


    def DelAttrDatN(self, *args):
        """
        DelAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeI, TStr attr) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        attr: TStr const &

        DelAttrDatN(TNEANet self, int64 const & NId, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        DelAttrDatN(TNEANet self, TNEANetNodeI NI, TStr Attr) -> int64

        Parameters
        ----------
        NI: TNEANetNodeI const &
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_DelAttrDatN(self, *args)


    def BegEI(self, *args):
        """
        BegEI(TNEANet self) -> TNEANet::TEdgeI
        BegEI(TNEANet self) -> TNEANetEdgeI

        Parameters
        ----------
        self: TNEANet *

        """
        return _SnapTime.TNEANet_BegEI(self, *args)


    def EndEI(self, *args):
        """
        EndEI(TNEANet self) -> TNEANet::TEdgeI
        EndEI(TNEANet self) -> TNEANetEdgeI

        Parameters
        ----------
        self: TNEANet *

        """
        return _SnapTime.TNEANet_EndEI(self, *args)


    def GetEI(self, *args):
        """
        GetEI(TNEANet self, int64 const & SrcNId, int64 const & DstNId) -> TNEANet::TEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        GetEI(TNEANet self) -> TIterEdge< TNEANet >
        GetEI(TNEANet self, int64 const & EId) -> TNEANetEdgeI

        Parameters
        ----------
        EId: int64 const &

        GetEI(TNEANet self, int64 const & SrcNId, int64 const & DstNId) -> TNEANetEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNEANet_GetEI(self, *args)


    def AddIntAttrDatE(self, *args):
        """
        AddIntAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        value: TInt64 const &
        attr: TStr const &

        AddIntAttrDatE(TNEANet self, int64 const & EId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TInt64 const &
        attr: TStr const &

        AddIntAttrDatE(TNEANet self, TNEANetEdgeI EI, TInt64 Value, TStr Attr) -> int64

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        Value: TInt64 const &
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_AddIntAttrDatE(self, *args)


    def AddFltAttrDatE(self, *args):
        """
        AddFltAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        value: TFlt const &
        attr: TStr const &

        AddFltAttrDatE(TNEANet self, int64 const & EId, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TFlt const &
        attr: TStr const &

        AddFltAttrDatE(TNEANet self, TNEANetEdgeI EI, TFlt Value, TStr Attr) -> int64

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        Value: TFlt const &
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_AddFltAttrDatE(self, *args)


    def AddStrAttrDatE(self, *args):
        """
        AddStrAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TStr value, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        value: TStr const &
        attr: TStr const &

        AddStrAttrDatE(TNEANet self, int64 const & EId, TStr value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TStr const &
        attr: TStr const &

        AddStrAttrDatE(TNEANet self, TNEANetEdgeI EI, TStr Value, TStr Attr) -> int64

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        Value: TStr const &
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_AddStrAttrDatE(self, *args)


    def GetIntAttrDatE(self, *args):
        """
        GetIntAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TStr attr) -> TInt64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        attr: TStr const &

        GetIntAttrDatE(TNEANet self, int64 const & EId, TStr attr) -> TInt64

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        GetIntAttrDatE(TNEANet self, TNEANetEdgeI EI, TStr Attr) -> TInt64

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_GetIntAttrDatE(self, *args)


    def GetFltAttrDatE(self, *args):
        """
        GetFltAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TStr attr) -> TFlt

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        attr: TStr const &

        GetFltAttrDatE(TNEANet self, int64 const & EId, TStr attr) -> TFlt

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        GetFltAttrDatE(TNEANet self, TNEANetEdgeI EI, TStr Attr) -> TFlt

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_GetFltAttrDatE(self, *args)


    def GetStrAttrDatE(self, *args):
        """
        GetStrAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TStr attr) -> TStr

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        attr: TStr const &

        GetStrAttrDatE(TNEANet self, int64 const & EId, TStr attr) -> TStr

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        GetStrAttrDatE(TNEANet self, TNEANetEdgeI EI, TStr Attr) -> TStr

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_GetStrAttrDatE(self, *args)


    def GetIntAttrIndDatE(self, *args):
        """
        GetIntAttrIndDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, int64 const & index) -> TInt64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        index: int64 const &

        GetIntAttrIndDatE(TNEANet self, int64 const & EId, int64 const & index) -> TInt64

        Parameters
        ----------
        EId: int64 const &
        index: int64 const &

        GetIntAttrIndDatE(TNEANet self, TNEANetEdgeI EI, int64 const & index) -> TInt64

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        index: int64 const &

        """
        return _SnapTime.TNEANet_GetIntAttrIndDatE(self, *args)


    def GetFltAttrIndDatE(self, *args):
        """
        GetFltAttrIndDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, int const & index) -> TFlt

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        index: int const &

        GetFltAttrIndDatE(TNEANet self, int64 const & EId, int64 const & index) -> TFlt

        Parameters
        ----------
        EId: int64 const &
        index: int64 const &

        GetFltAttrIndDatE(TNEANet self, TNEANetEdgeI EI, int64 const & index) -> TFlt

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        index: int64 const &

        """
        return _SnapTime.TNEANet_GetFltAttrIndDatE(self, *args)


    def GetStrAttrIndDatE(self, *args):
        """
        GetStrAttrIndDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, int64 const & index) -> TStr

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        index: int64 const &

        GetStrAttrIndDatE(TNEANet self, int64 const & EId, int64 const & index) -> TStr

        Parameters
        ----------
        EId: int64 const &
        index: int64 const &

        GetStrAttrIndDatE(TNEANet self, TNEANetEdgeI EI, int64 const & index) -> TStr

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        index: int64 const &

        """
        return _SnapTime.TNEANet_GetStrAttrIndDatE(self, *args)


    def DelAttrDatE(self, *args):
        """
        DelAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeI, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        attr: TStr const &

        DelAttrDatE(TNEANet self, int64 const & EId, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        DelAttrDatE(TNEANet self, TNEANetEdgeI EI, TStr Attr) -> int64

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_DelAttrDatE(self, *args)


    def BegNAIntI(self, *args):
        """
        BegNAIntI(TNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters
        ----------
        attr: TStr const &

        BegNAIntI(TNEANet self, TStr Attr) -> TNEANetAIntI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_BegNAIntI(self, *args)


    def EndNAIntI(self, *args):
        """
        EndNAIntI(TNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters
        ----------
        attr: TStr const &

        EndNAIntI(TNEANet self, TStr Attr) -> TNEANetAIntI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_EndNAIntI(self, *args)


    def BegNAStrI(self, *args):
        """
        BegNAStrI(TNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters
        ----------
        attr: TStr const &

        BegNAStrI(TNEANet self, TStr Attr) -> TNEANetAStrI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_BegNAStrI(self, *args)


    def EndNAStrI(self, *args):
        """
        EndNAStrI(TNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters
        ----------
        attr: TStr const &

        EndNAStrI(TNEANet self, TStr Attr) -> TNEANetAStrI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_EndNAStrI(self, *args)


    def BegNAFltI(self, *args):
        """
        BegNAFltI(TNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters
        ----------
        attr: TStr const &

        BegNAFltI(TNEANet self, TStr Attr) -> TNEANetAFltI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_BegNAFltI(self, *args)


    def EndNAFltI(self, *args):
        """
        EndNAFltI(TNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters
        ----------
        attr: TStr const &

        EndNAFltI(TNEANet self, TStr Attr) -> TNEANetAFltI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_EndNAFltI(self, *args)


    def BegEAIntI(self, *args):
        """
        BegEAIntI(TNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters
        ----------
        attr: TStr const &

        BegEAIntI(TNEANet self, TStr Attr) -> TNEANetAIntI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_BegEAIntI(self, *args)


    def EndEAIntI(self, *args):
        """
        EndEAIntI(TNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters
        ----------
        attr: TStr const &

        EndEAIntI(TNEANet self, TStr Attr) -> TNEANetAIntI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_EndEAIntI(self, *args)


    def BegEAStrI(self, *args):
        """
        BegEAStrI(TNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters
        ----------
        attr: TStr const &

        BegEAStrI(TNEANet self, TStr Attr) -> TNEANetAStrI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_BegEAStrI(self, *args)


    def EndEAStrI(self, *args):
        """
        EndEAStrI(TNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters
        ----------
        attr: TStr const &

        EndEAStrI(TNEANet self, TStr Attr) -> TNEANetAStrI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_EndEAStrI(self, *args)


    def BegEAFltI(self, *args):
        """
        BegEAFltI(TNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters
        ----------
        attr: TStr const &

        BegEAFltI(TNEANet self, TStr Attr) -> TNEANetAFltI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_BegEAFltI(self, *args)


    def EndEAFltI(self, *args):
        """
        EndEAFltI(TNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters
        ----------
        attr: TStr const &

        EndEAFltI(TNEANet self, TStr Attr) -> TNEANetAFltI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.TNEANet_EndEAFltI(self, *args)

TNEANet.Save = new_instancemethod(_SnapTime.TNEANet_Save, None, TNEANet)
TNEANet.Save_V1 = new_instancemethod(_SnapTime.TNEANet_Save_V1, None, TNEANet)
TNEANet.Save_V2 = new_instancemethod(_SnapTime.TNEANet_Save_V2, None, TNEANet)
TNEANet.LoadNetworkShM = new_instancemethod(_SnapTime.TNEANet_LoadNetworkShM, None, TNEANet)
TNEANet.ConvertToSparse = new_instancemethod(_SnapTime.TNEANet_ConvertToSparse, None, TNEANet)
TNEANet.HasFlag = new_instancemethod(_SnapTime.TNEANet_HasFlag, None, TNEANet)
TNEANet.GetNodes = new_instancemethod(_SnapTime.TNEANet_GetNodes, None, TNEANet)
TNEANet.AddNodeUnchecked = new_instancemethod(_SnapTime.TNEANet_AddNodeUnchecked, None, TNEANet)
TNEANet.AddNode = new_instancemethod(_SnapTime.TNEANet_AddNode, None, TNEANet)
TNEANet.DelNode = new_instancemethod(_SnapTime.TNEANet_DelNode, None, TNEANet)
TNEANet.IsNode = new_instancemethod(_SnapTime.TNEANet_IsNode, None, TNEANet)
TNEANet.GetNAIntI = new_instancemethod(_SnapTime.TNEANet_GetNAIntI, None, TNEANet)
TNEANet.BegNAIntVI = new_instancemethod(_SnapTime.TNEANet_BegNAIntVI, None, TNEANet)
TNEANet.EndNAIntVI = new_instancemethod(_SnapTime.TNEANet_EndNAIntVI, None, TNEANet)
TNEANet.GetNAIntVI = new_instancemethod(_SnapTime.TNEANet_GetNAIntVI, None, TNEANet)
TNEANet.GetNAStrI = new_instancemethod(_SnapTime.TNEANet_GetNAStrI, None, TNEANet)
TNEANet.GetNAFltI = new_instancemethod(_SnapTime.TNEANet_GetNAFltI, None, TNEANet)
TNEANet.AttrNameNI = new_instancemethod(_SnapTime.TNEANet_AttrNameNI, None, TNEANet)
TNEANet.AttrValueNI = new_instancemethod(_SnapTime.TNEANet_AttrValueNI, None, TNEANet)
TNEANet.IntAttrNameNI = new_instancemethod(_SnapTime.TNEANet_IntAttrNameNI, None, TNEANet)
TNEANet.IntAttrValueNI = new_instancemethod(_SnapTime.TNEANet_IntAttrValueNI, None, TNEANet)
TNEANet.IntVAttrNameNI = new_instancemethod(_SnapTime.TNEANet_IntVAttrNameNI, None, TNEANet)
TNEANet.IntVAttrValueNI = new_instancemethod(_SnapTime.TNEANet_IntVAttrValueNI, None, TNEANet)
TNEANet.StrAttrNameNI = new_instancemethod(_SnapTime.TNEANet_StrAttrNameNI, None, TNEANet)
TNEANet.StrAttrValueNI = new_instancemethod(_SnapTime.TNEANet_StrAttrValueNI, None, TNEANet)
TNEANet.FltAttrNameNI = new_instancemethod(_SnapTime.TNEANet_FltAttrNameNI, None, TNEANet)
TNEANet.FltAttrValueNI = new_instancemethod(_SnapTime.TNEANet_FltAttrValueNI, None, TNEANet)
TNEANet.AttrNameEI = new_instancemethod(_SnapTime.TNEANet_AttrNameEI, None, TNEANet)
TNEANet.AttrValueEI = new_instancemethod(_SnapTime.TNEANet_AttrValueEI, None, TNEANet)
TNEANet.IntAttrNameEI = new_instancemethod(_SnapTime.TNEANet_IntAttrNameEI, None, TNEANet)
TNEANet.IntAttrValueEI = new_instancemethod(_SnapTime.TNEANet_IntAttrValueEI, None, TNEANet)
TNEANet.IntVAttrNameEI = new_instancemethod(_SnapTime.TNEANet_IntVAttrNameEI, None, TNEANet)
TNEANet.IntVAttrValueEI = new_instancemethod(_SnapTime.TNEANet_IntVAttrValueEI, None, TNEANet)
TNEANet.StrAttrNameEI = new_instancemethod(_SnapTime.TNEANet_StrAttrNameEI, None, TNEANet)
TNEANet.StrAttrValueEI = new_instancemethod(_SnapTime.TNEANet_StrAttrValueEI, None, TNEANet)
TNEANet.FltAttrNameEI = new_instancemethod(_SnapTime.TNEANet_FltAttrNameEI, None, TNEANet)
TNEANet.FltAttrValueEI = new_instancemethod(_SnapTime.TNEANet_FltAttrValueEI, None, TNEANet)
TNEANet.GetEAIntI = new_instancemethod(_SnapTime.TNEANet_GetEAIntI, None, TNEANet)
TNEANet.BegEAIntVI = new_instancemethod(_SnapTime.TNEANet_BegEAIntVI, None, TNEANet)
TNEANet.EndEAIntVI = new_instancemethod(_SnapTime.TNEANet_EndEAIntVI, None, TNEANet)
TNEANet.GetEAIntVI = new_instancemethod(_SnapTime.TNEANet_GetEAIntVI, None, TNEANet)
TNEANet.GetEAStrI = new_instancemethod(_SnapTime.TNEANet_GetEAStrI, None, TNEANet)
TNEANet.GetEAFltI = new_instancemethod(_SnapTime.TNEANet_GetEAFltI, None, TNEANet)
TNEANet.GetMxNId = new_instancemethod(_SnapTime.TNEANet_GetMxNId, None, TNEANet)
TNEANet.GetMxEId = new_instancemethod(_SnapTime.TNEANet_GetMxEId, None, TNEANet)
TNEANet.GetEdges = new_instancemethod(_SnapTime.TNEANet_GetEdges, None, TNEANet)
TNEANet.AddEdge = new_instancemethod(_SnapTime.TNEANet_AddEdge, None, TNEANet)
TNEANet.DelEdge = new_instancemethod(_SnapTime.TNEANet_DelEdge, None, TNEANet)
TNEANet.IsEdge = new_instancemethod(_SnapTime.TNEANet_IsEdge, None, TNEANet)
TNEANet.GetEId = new_instancemethod(_SnapTime.TNEANet_GetEId, None, TNEANet)
TNEANet.GetRndNId = new_instancemethod(_SnapTime.TNEANet_GetRndNId, None, TNEANet)
TNEANet.GetRndNI = new_instancemethod(_SnapTime.TNEANet_GetRndNI, None, TNEANet)
TNEANet.GetRndEId = new_instancemethod(_SnapTime.TNEANet_GetRndEId, None, TNEANet)
TNEANet.GetRndEI = new_instancemethod(_SnapTime.TNEANet_GetRndEI, None, TNEANet)
TNEANet.GetNIdV = new_instancemethod(_SnapTime.TNEANet_GetNIdV, None, TNEANet)
TNEANet.GetEIdV = new_instancemethod(_SnapTime.TNEANet_GetEIdV, None, TNEANet)
TNEANet.Empty = new_instancemethod(_SnapTime.TNEANet_Empty, None, TNEANet)
TNEANet.Clr = new_instancemethod(_SnapTime.TNEANet_Clr, None, TNEANet)
TNEANet.Reserve = new_instancemethod(_SnapTime.TNEANet_Reserve, None, TNEANet)
TNEANet.Defrag = new_instancemethod(_SnapTime.TNEANet_Defrag, None, TNEANet)
TNEANet.IsOk = new_instancemethod(_SnapTime.TNEANet_IsOk, None, TNEANet)
TNEANet.Dump = new_instancemethod(_SnapTime.TNEANet_Dump, None, TNEANet)
TNEANet.IsEulerian = new_instancemethod(_SnapTime.TNEANet_IsEulerian, None, TNEANet)
TNEANet.GetEulerPath = new_instancemethod(_SnapTime.TNEANet_GetEulerPath, None, TNEANet)
TNEANet.AddIntVAttrDatN = new_instancemethod(_SnapTime.TNEANet_AddIntVAttrDatN, None, TNEANet)
TNEANet.AppendIntVAttrDatN = new_instancemethod(_SnapTime.TNEANet_AppendIntVAttrDatN, None, TNEANet)
TNEANet.DelFromIntVAttrDatN = new_instancemethod(_SnapTime.TNEANet_DelFromIntVAttrDatN, None, TNEANet)
TNEANet.AddIntVAttrDatE = new_instancemethod(_SnapTime.TNEANet_AddIntVAttrDatE, None, TNEANet)
TNEANet.AppendIntVAttrDatE = new_instancemethod(_SnapTime.TNEANet_AppendIntVAttrDatE, None, TNEANet)
TNEANet.GetIntVAttrDatN = new_instancemethod(_SnapTime.TNEANet_GetIntVAttrDatN, None, TNEANet)
TNEANet.GetIntAttrIndN = new_instancemethod(_SnapTime.TNEANet_GetIntAttrIndN, None, TNEANet)
TNEANet.GetAttrIndN = new_instancemethod(_SnapTime.TNEANet_GetAttrIndN, None, TNEANet)
TNEANet.GetIntVAttrDatE = new_instancemethod(_SnapTime.TNEANet_GetIntVAttrDatE, None, TNEANet)
TNEANet.GetIntAttrIndE = new_instancemethod(_SnapTime.TNEANet_GetIntAttrIndE, None, TNEANet)
TNEANet.GetAttrIndE = new_instancemethod(_SnapTime.TNEANet_GetAttrIndE, None, TNEANet)
TNEANet.DelAllAttrDatN = new_instancemethod(_SnapTime.TNEANet_DelAllAttrDatN, None, TNEANet)
TNEANet.DelAllAttrDatE = new_instancemethod(_SnapTime.TNEANet_DelAllAttrDatE, None, TNEANet)
TNEANet.AddIntAttrN = new_instancemethod(_SnapTime.TNEANet_AddIntAttrN, None, TNEANet)
TNEANet.AddStrAttrN = new_instancemethod(_SnapTime.TNEANet_AddStrAttrN, None, TNEANet)
TNEANet.AddFltAttrN = new_instancemethod(_SnapTime.TNEANet_AddFltAttrN, None, TNEANet)
TNEANet.AddIntVAttrN = new_instancemethod(_SnapTime.TNEANet_AddIntVAttrN, None, TNEANet)
TNEANet.AddIntAttrE = new_instancemethod(_SnapTime.TNEANet_AddIntAttrE, None, TNEANet)
TNEANet.AddStrAttrE = new_instancemethod(_SnapTime.TNEANet_AddStrAttrE, None, TNEANet)
TNEANet.AddFltAttrE = new_instancemethod(_SnapTime.TNEANet_AddFltAttrE, None, TNEANet)
TNEANet.AddIntVAttrE = new_instancemethod(_SnapTime.TNEANet_AddIntVAttrE, None, TNEANet)
TNEANet.DelAttrN = new_instancemethod(_SnapTime.TNEANet_DelAttrN, None, TNEANet)
TNEANet.DelAttrE = new_instancemethod(_SnapTime.TNEANet_DelAttrE, None, TNEANet)
TNEANet.IsAttrDeletedN = new_instancemethod(_SnapTime.TNEANet_IsAttrDeletedN, None, TNEANet)
TNEANet.IsIntAttrDeletedN = new_instancemethod(_SnapTime.TNEANet_IsIntAttrDeletedN, None, TNEANet)
TNEANet.IsIntVAttrDeletedN = new_instancemethod(_SnapTime.TNEANet_IsIntVAttrDeletedN, None, TNEANet)
TNEANet.IsStrAttrDeletedN = new_instancemethod(_SnapTime.TNEANet_IsStrAttrDeletedN, None, TNEANet)
TNEANet.IsFltAttrDeletedN = new_instancemethod(_SnapTime.TNEANet_IsFltAttrDeletedN, None, TNEANet)
TNEANet.NodeAttrIsDeleted = new_instancemethod(_SnapTime.TNEANet_NodeAttrIsDeleted, None, TNEANet)
TNEANet.NodeAttrIsIntDeleted = new_instancemethod(_SnapTime.TNEANet_NodeAttrIsIntDeleted, None, TNEANet)
TNEANet.NodeAttrIsIntVDeleted = new_instancemethod(_SnapTime.TNEANet_NodeAttrIsIntVDeleted, None, TNEANet)
TNEANet.NodeAttrIsStrDeleted = new_instancemethod(_SnapTime.TNEANet_NodeAttrIsStrDeleted, None, TNEANet)
TNEANet.NodeAttrIsFltDeleted = new_instancemethod(_SnapTime.TNEANet_NodeAttrIsFltDeleted, None, TNEANet)
TNEANet.IsAttrDeletedE = new_instancemethod(_SnapTime.TNEANet_IsAttrDeletedE, None, TNEANet)
TNEANet.IsIntAttrDeletedE = new_instancemethod(_SnapTime.TNEANet_IsIntAttrDeletedE, None, TNEANet)
TNEANet.IsIntVAttrDeletedE = new_instancemethod(_SnapTime.TNEANet_IsIntVAttrDeletedE, None, TNEANet)
TNEANet.IsStrAttrDeletedE = new_instancemethod(_SnapTime.TNEANet_IsStrAttrDeletedE, None, TNEANet)
TNEANet.IsFltAttrDeletedE = new_instancemethod(_SnapTime.TNEANet_IsFltAttrDeletedE, None, TNEANet)
TNEANet.EdgeAttrIsDeleted = new_instancemethod(_SnapTime.TNEANet_EdgeAttrIsDeleted, None, TNEANet)
TNEANet.EdgeAttrIsIntDeleted = new_instancemethod(_SnapTime.TNEANet_EdgeAttrIsIntDeleted, None, TNEANet)
TNEANet.EdgeAttrIsIntVDeleted = new_instancemethod(_SnapTime.TNEANet_EdgeAttrIsIntVDeleted, None, TNEANet)
TNEANet.EdgeAttrIsStrDeleted = new_instancemethod(_SnapTime.TNEANet_EdgeAttrIsStrDeleted, None, TNEANet)
TNEANet.EdgeAttrIsFltDeleted = new_instancemethod(_SnapTime.TNEANet_EdgeAttrIsFltDeleted, None, TNEANet)
TNEANet.GetNodeAttrValue = new_instancemethod(_SnapTime.TNEANet_GetNodeAttrValue, None, TNEANet)
TNEANet.GetEdgeAttrValue = new_instancemethod(_SnapTime.TNEANet_GetEdgeAttrValue, None, TNEANet)
TNEANet.GetWeightOutEdges = new_instancemethod(_SnapTime.TNEANet_GetWeightOutEdges, None, TNEANet)
TNEANet.IsFltAttrN = new_instancemethod(_SnapTime.TNEANet_IsFltAttrN, None, TNEANet)
TNEANet.IsIntAttrN = new_instancemethod(_SnapTime.TNEANet_IsIntAttrN, None, TNEANet)
TNEANet.IsStrAttrN = new_instancemethod(_SnapTime.TNEANet_IsStrAttrN, None, TNEANet)
TNEANet.IsIntVAttrN = new_instancemethod(_SnapTime.TNEANet_IsIntVAttrN, None, TNEANet)
TNEANet.IsFltAttrE = new_instancemethod(_SnapTime.TNEANet_IsFltAttrE, None, TNEANet)
TNEANet.IsIntAttrE = new_instancemethod(_SnapTime.TNEANet_IsIntAttrE, None, TNEANet)
TNEANet.IsStrAttrE = new_instancemethod(_SnapTime.TNEANet_IsStrAttrE, None, TNEANet)
TNEANet.IsIntVAttrE = new_instancemethod(_SnapTime.TNEANet_IsIntVAttrE, None, TNEANet)
TNEANet.GetFltAttrVecE = new_instancemethod(_SnapTime.TNEANet_GetFltAttrVecE, None, TNEANet)
TNEANet.GetFltKeyIdE = new_instancemethod(_SnapTime.TNEANet_GetFltKeyIdE, None, TNEANet)
TNEANet.GetWeightOutEdgesV = new_instancemethod(_SnapTime.TNEANet_GetWeightOutEdgesV, None, TNEANet)
TNEANet.GetAttrNNames = new_instancemethod(_SnapTime.TNEANet_GetAttrNNames, None, TNEANet)
TNEANet.GetIntVAttrNNames = new_instancemethod(_SnapTime.TNEANet_GetIntVAttrNNames, None, TNEANet)
TNEANet.GetAttrENames = new_instancemethod(_SnapTime.TNEANet_GetAttrENames, None, TNEANet)
TNEANet.GetIntVAttrENames = new_instancemethod(_SnapTime.TNEANet_GetIntVAttrENames, None, TNEANet)
TNEANet.AddSAttrDatN = new_instancemethod(_SnapTime.TNEANet_AddSAttrDatN, None, TNEANet)
TNEANet.GetSAttrDatN = new_instancemethod(_SnapTime.TNEANet_GetSAttrDatN, None, TNEANet)
TNEANet.DelSAttrDatN = new_instancemethod(_SnapTime.TNEANet_DelSAttrDatN, None, TNEANet)
TNEANet.GetSAttrVN = new_instancemethod(_SnapTime.TNEANet_GetSAttrVN, None, TNEANet)
TNEANet.GetIdVSAttrN = new_instancemethod(_SnapTime.TNEANet_GetIdVSAttrN, None, TNEANet)
TNEANet.AddSAttrN = new_instancemethod(_SnapTime.TNEANet_AddSAttrN, None, TNEANet)
TNEANet.GetSAttrIdN = new_instancemethod(_SnapTime.TNEANet_GetSAttrIdN, None, TNEANet)
TNEANet.GetSAttrNameN = new_instancemethod(_SnapTime.TNEANet_GetSAttrNameN, None, TNEANet)
TNEANet.AddSAttrDatE = new_instancemethod(_SnapTime.TNEANet_AddSAttrDatE, None, TNEANet)
TNEANet.GetSAttrDatE = new_instancemethod(_SnapTime.TNEANet_GetSAttrDatE, None, TNEANet)
TNEANet.DelSAttrDatE = new_instancemethod(_SnapTime.TNEANet_DelSAttrDatE, None, TNEANet)
TNEANet.GetSAttrVE = new_instancemethod(_SnapTime.TNEANet_GetSAttrVE, None, TNEANet)
TNEANet.GetIdVSAttrE = new_instancemethod(_SnapTime.TNEANet_GetIdVSAttrE, None, TNEANet)
TNEANet.AddSAttrE = new_instancemethod(_SnapTime.TNEANet_AddSAttrE, None, TNEANet)
TNEANet.GetSAttrIdE = new_instancemethod(_SnapTime.TNEANet_GetSAttrIdE, None, TNEANet)
TNEANet.GetSAttrNameE = new_instancemethod(_SnapTime.TNEANet_GetSAttrNameE, None, TNEANet)
TNEANet.BegNI = new_instancemethod(_SnapTime.TNEANet_BegNI, None, TNEANet)
TNEANet.EndNI = new_instancemethod(_SnapTime.TNEANet_EndNI, None, TNEANet)
TNEANet.GetNI = new_instancemethod(_SnapTime.TNEANet_GetNI, None, TNEANet)
TNEANet.AddIntAttrDatN = new_instancemethod(_SnapTime.TNEANet_AddIntAttrDatN, None, TNEANet)
TNEANet.AddFltAttrDatN = new_instancemethod(_SnapTime.TNEANet_AddFltAttrDatN, None, TNEANet)
TNEANet.AddStrAttrDatN = new_instancemethod(_SnapTime.TNEANet_AddStrAttrDatN, None, TNEANet)
TNEANet.GetIntAttrDatN = new_instancemethod(_SnapTime.TNEANet_GetIntAttrDatN, None, TNEANet)
TNEANet.GetFltAttrDatN = new_instancemethod(_SnapTime.TNEANet_GetFltAttrDatN, None, TNEANet)
TNEANet.GetStrAttrDatN = new_instancemethod(_SnapTime.TNEANet_GetStrAttrDatN, None, TNEANet)
TNEANet.GetIntAttrIndDatN = new_instancemethod(_SnapTime.TNEANet_GetIntAttrIndDatN, None, TNEANet)
TNEANet.GetFltAttrIndDatN = new_instancemethod(_SnapTime.TNEANet_GetFltAttrIndDatN, None, TNEANet)
TNEANet.GetStrAttrIndDatN = new_instancemethod(_SnapTime.TNEANet_GetStrAttrIndDatN, None, TNEANet)
TNEANet.DelAttrDatN = new_instancemethod(_SnapTime.TNEANet_DelAttrDatN, None, TNEANet)
TNEANet.BegEI = new_instancemethod(_SnapTime.TNEANet_BegEI, None, TNEANet)
TNEANet.EndEI = new_instancemethod(_SnapTime.TNEANet_EndEI, None, TNEANet)
TNEANet.GetEI = new_instancemethod(_SnapTime.TNEANet_GetEI, None, TNEANet)
TNEANet.AddIntAttrDatE = new_instancemethod(_SnapTime.TNEANet_AddIntAttrDatE, None, TNEANet)
TNEANet.AddFltAttrDatE = new_instancemethod(_SnapTime.TNEANet_AddFltAttrDatE, None, TNEANet)
TNEANet.AddStrAttrDatE = new_instancemethod(_SnapTime.TNEANet_AddStrAttrDatE, None, TNEANet)
TNEANet.GetIntAttrDatE = new_instancemethod(_SnapTime.TNEANet_GetIntAttrDatE, None, TNEANet)
TNEANet.GetFltAttrDatE = new_instancemethod(_SnapTime.TNEANet_GetFltAttrDatE, None, TNEANet)
TNEANet.GetStrAttrDatE = new_instancemethod(_SnapTime.TNEANet_GetStrAttrDatE, None, TNEANet)
TNEANet.GetIntAttrIndDatE = new_instancemethod(_SnapTime.TNEANet_GetIntAttrIndDatE, None, TNEANet)
TNEANet.GetFltAttrIndDatE = new_instancemethod(_SnapTime.TNEANet_GetFltAttrIndDatE, None, TNEANet)
TNEANet.GetStrAttrIndDatE = new_instancemethod(_SnapTime.TNEANet_GetStrAttrIndDatE, None, TNEANet)
TNEANet.DelAttrDatE = new_instancemethod(_SnapTime.TNEANet_DelAttrDatE, None, TNEANet)
TNEANet.BegNAIntI = new_instancemethod(_SnapTime.TNEANet_BegNAIntI, None, TNEANet)
TNEANet.EndNAIntI = new_instancemethod(_SnapTime.TNEANet_EndNAIntI, None, TNEANet)
TNEANet.BegNAStrI = new_instancemethod(_SnapTime.TNEANet_BegNAStrI, None, TNEANet)
TNEANet.EndNAStrI = new_instancemethod(_SnapTime.TNEANet_EndNAStrI, None, TNEANet)
TNEANet.BegNAFltI = new_instancemethod(_SnapTime.TNEANet_BegNAFltI, None, TNEANet)
TNEANet.EndNAFltI = new_instancemethod(_SnapTime.TNEANet_EndNAFltI, None, TNEANet)
TNEANet.BegEAIntI = new_instancemethod(_SnapTime.TNEANet_BegEAIntI, None, TNEANet)
TNEANet.EndEAIntI = new_instancemethod(_SnapTime.TNEANet_EndEAIntI, None, TNEANet)
TNEANet.BegEAStrI = new_instancemethod(_SnapTime.TNEANet_BegEAStrI, None, TNEANet)
TNEANet.EndEAStrI = new_instancemethod(_SnapTime.TNEANet_EndEAStrI, None, TNEANet)
TNEANet.BegEAFltI = new_instancemethod(_SnapTime.TNEANet_BegEAFltI, None, TNEANet)
TNEANet.EndEAFltI = new_instancemethod(_SnapTime.TNEANet_EndEAFltI, None, TNEANet)
TNEANet_swigregister = _SnapTime.TNEANet_swigregister
TNEANet_swigregister(TNEANet)

def TNEANet_New(*args):
    """
    New() -> PNEANet
    TNEANet_New(int64 const & Nodes, int64 const & Edges) -> PNEANet

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.TNEANet_New(*args)

def TNEANet_Load(SIn):
    """
    TNEANet_Load(TSIn SIn) -> PNEANet

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TNEANet_Load(SIn)

def TNEANet_Load_V1(SIn):
    """
    TNEANet_Load_V1(TSIn SIn) -> PNEANet

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TNEANet_Load_V1(SIn)

def TNEANet_Load_V2(SIn):
    """
    TNEANet_Load_V2(TSIn SIn) -> PNEANet

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TNEANet_Load_V2(SIn)

def TNEANet_LoadShM(ShMIn):
    """
    TNEANet_LoadShM(TShMIn ShMIn) -> PNEANet

    Parameters
    ----------
    ShMIn: TShMIn &

    """
    return _SnapTime.TNEANet_LoadShM(ShMIn)

class TUndirNet(object):
    """Proxy of C++ TUndirNet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TUndirNet self) -> TUndirNet
        __init__(TUndirNet self, int64 const & Nodes, int64 const & Edges) -> TUndirNet

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        __init__(TUndirNet self, TUndirNet Graph) -> TUndirNet

        Parameters
        ----------
        Graph: TUndirNet const &

        __init__(TUndirNet self, TSIn SIn) -> TUndirNet

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TUndirNet_swiginit(self, _SnapTime.new_TUndirNet(*args))

    def Save(self, SOut):
        """
        Save(TUndirNet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TUndirNet_Save(self, SOut)


    def Save_V1(self, SOut):
        """
        Save_V1(TUndirNet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TUndirNet_Save_V1(self, SOut)


    def New(*args):
        """
        New() -> PUndirNet
        New(int64 const & Nodes, int64 const & Edges) -> PUndirNet

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TUndirNet_New(*args)

    New = staticmethod(New)

    def Load(SIn):
        """
        Load(TSIn SIn) -> PUndirNet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TUndirNet_Load(SIn)

    Load = staticmethod(Load)

    def Load_V1(SIn):
        """
        Load_V1(TSIn SIn) -> PUndirNet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TUndirNet_Load_V1(SIn)

    Load_V1 = staticmethod(Load_V1)

    def LoadShM(ShMIn):
        """
        LoadShM(TShMIn ShMIn) -> PUndirNet

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TUndirNet_LoadShM(ShMIn)

    LoadShM = staticmethod(LoadShM)

    def HasFlag(self, Flag):
        """
        HasFlag(TUndirNet self, TGraphFlag const & Flag) -> bool

        Parameters
        ----------
        Flag: TGraphFlag const &

        """
        return _SnapTime.TUndirNet_HasFlag(self, Flag)


    def GetNodes(self):
        """
        GetNodes(TUndirNet self) -> int64

        Parameters
        ----------
        self: TUndirNet const *

        """
        return _SnapTime.TUndirNet_GetNodes(self)


    def AddNodeUnchecked(self, NId=-1):
        """
        AddNodeUnchecked(TUndirNet self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNodeUnchecked(TUndirNet self) -> int64

        Parameters
        ----------
        self: TUndirNet *

        """
        return _SnapTime.TUndirNet_AddNodeUnchecked(self, NId)


    def AddNode(self, *args):
        """
        AddNode(TUndirNet self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(TUndirNet self) -> int64
        AddNode(TUndirNet self, TUndirNet::TNodeI const & NodeI) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &

        AddNode(TUndirNet self, int64 const & NId, TInt64V NbrNIdV) -> int64

        Parameters
        ----------
        NId: int64 const &
        NbrNIdV: TInt64V const &

        AddNode(TUndirNet self, int64 const & NId, TVecPool< TInt64,int64 > const & Pool, int64 const & NIdVId) -> int64

        Parameters
        ----------
        NId: int64 const &
        Pool: TVecPool< TInt64,int64 > const &
        NIdVId: int64 const &

        """
        return _SnapTime.TUndirNet_AddNode(self, *args)


    def DelNode(self, *args):
        """
        DelNode(TUndirNet self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        DelNode(TUndirNet self, TUndirNet::TNode const & NodeI)

        Parameters
        ----------
        NodeI: TUndirNet::TNode const &

        """
        return _SnapTime.TUndirNet_DelNode(self, *args)


    def IsNode(self, NId):
        """
        IsNode(TUndirNet self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TUndirNet_IsNode(self, NId)


    def GetMxNId(self):
        """
        GetMxNId(TUndirNet self) -> int64

        Parameters
        ----------
        self: TUndirNet const *

        """
        return _SnapTime.TUndirNet_GetMxNId(self)


    def GetEdges(self):
        """
        GetEdges(TUndirNet self) -> int64

        Parameters
        ----------
        self: TUndirNet const *

        """
        return _SnapTime.TUndirNet_GetEdges(self)


    def AddEdgeUnchecked(self, SrcNId, DstNId):
        """
        AddEdgeUnchecked(TUndirNet self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TUndirNet_AddEdgeUnchecked(self, SrcNId, DstNId)


    def AddEdge(self, *args):
        """
        AddEdge(TUndirNet self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        AddEdge(TUndirNet self, TUndirNet::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &

        """
        return _SnapTime.TUndirNet_AddEdge(self, *args)


    def DelEdge(self, SrcNId, DstNId):
        """
        DelEdge(TUndirNet self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TUndirNet_DelEdge(self, SrcNId, DstNId)


    def IsEdge(self, SrcNId, DstNId):
        """
        IsEdge(TUndirNet self, int64 const & SrcNId, int64 const & DstNId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TUndirNet_IsEdge(self, SrcNId, DstNId)


    def GetEI(self, SrcNId, DstNId):
        """
        GetEI(TUndirNet self, int64 const & SrcNId, int64 const & DstNId) -> TUndirNet::TEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TUndirNet_GetEI(self, SrcNId, DstNId)


    def GetRndNId(self, *args):
        """
        GetRndNId(TUndirNet self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(TUndirNet self) -> int64

        Parameters
        ----------
        self: TUndirNet *

        """
        return _SnapTime.TUndirNet_GetRndNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(TUndirNet self, TRnd Rnd) -> TUndirNet::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(TUndirNet self) -> TUndirNet::TNodeI

        Parameters
        ----------
        self: TUndirNet *

        """
        return _SnapTime.TUndirNet_GetRndNI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(TUndirNet self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.TUndirNet_GetNIdV(self, NIdV)


    def Empty(self):
        """
        Empty(TUndirNet self) -> bool

        Parameters
        ----------
        self: TUndirNet const *

        """
        return _SnapTime.TUndirNet_Empty(self)


    def Clr(self):
        """
        Clr(TUndirNet self)

        Parameters
        ----------
        self: TUndirNet *

        """
        return _SnapTime.TUndirNet_Clr(self)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(TUndirNet self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TUndirNet_Reserve(self, Nodes, Edges)


    def ReserveNIdDeg(self, NId, Deg):
        """
        ReserveNIdDeg(TUndirNet self, int64 const & NId, int64 const & Deg)

        Parameters
        ----------
        NId: int64 const &
        Deg: int64 const &

        """
        return _SnapTime.TUndirNet_ReserveNIdDeg(self, NId, Deg)


    def SortNodeAdjV(self):
        """
        SortNodeAdjV(TUndirNet self)

        Parameters
        ----------
        self: TUndirNet *

        """
        return _SnapTime.TUndirNet_SortNodeAdjV(self)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(TUndirNet self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(TUndirNet self)

        Parameters
        ----------
        self: TUndirNet *

        """
        return _SnapTime.TUndirNet_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(TUndirNet self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(TUndirNet self) -> bool

        Parameters
        ----------
        self: TUndirNet const *

        """
        return _SnapTime.TUndirNet_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(TUndirNet self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(TUndirNet self)

        Parameters
        ----------
        self: TUndirNet const *

        """
        return _SnapTime.TUndirNet_Dump(self, *args)


    def GetSmallGraph():
        """GetSmallGraph() -> PUndirNet"""
        return _SnapTime.TUndirNet_GetSmallGraph()

    GetSmallGraph = staticmethod(GetSmallGraph)

    def AddSAttrDatN(self, *args):
        """
        AddSAttrDatN(TUndirNet self, TInt64 NId, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatN(TUndirNet self, TInt64 NId, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatN(TUndirNet self, TUndirNet::TNodeI const & NodeI, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatN(TUndirNet self, TUndirNet::TNodeI const & NodeI, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatN(TUndirNet self, TInt64 NId, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatN(TUndirNet self, TInt64 NId, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatN(TUndirNet self, TUndirNet::TNodeI const & NodeI, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatN(TUndirNet self, TUndirNet::TNodeI const & NodeI, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatN(TUndirNet self, TInt64 NId, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatN(TUndirNet self, TInt64 NId, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TStr const &

        AddSAttrDatN(TUndirNet self, TUndirNet::TNodeI const & NodeI, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatN(TUndirNet self, TUndirNet::TNodeI const & NodeI, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrId: TInt64 const &
        Val: TStr const &

        """
        return _SnapTime.TUndirNet_AddSAttrDatN(self, *args)


    def GetSAttrDatN(self, *args):
        """
        GetSAttrDatN(TUndirNet self, TInt64 NId, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatN(TUndirNet self, TInt64 NId, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatN(TUndirNet self, TUndirNet::TNodeI const & NodeI, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatN(TUndirNet self, TUndirNet::TNodeI const & NodeI, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatN(TUndirNet self, TInt64 NId, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatN(TUndirNet self, TInt64 NId, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatN(TUndirNet self, TUndirNet::TNodeI const & NodeI, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatN(TUndirNet self, TUndirNet::TNodeI const & NodeI, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatN(TUndirNet self, TInt64 NId, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatN(TUndirNet self, TInt64 NId, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TStr &

        GetSAttrDatN(TUndirNet self, TUndirNet::TNodeI const & NodeI, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatN(TUndirNet self, TUndirNet::TNodeI const & NodeI, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TStr &

        """
        return _SnapTime.TUndirNet_GetSAttrDatN(self, *args)


    def DelSAttrDatN(self, *args):
        """
        DelSAttrDatN(TUndirNet self, TInt64 NId, TStr AttrName) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &

        DelSAttrDatN(TUndirNet self, TInt64 NId, TInt64 AttrId) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &

        DelSAttrDatN(TUndirNet self, TUndirNet::TNodeI const & NodeI, TStr AttrName) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrName: TStr const &

        DelSAttrDatN(TUndirNet self, TUndirNet::TNodeI const & NodeI, TInt64 AttrId) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrId: TInt64 const &

        """
        return _SnapTime.TUndirNet_DelSAttrDatN(self, *args)


    def GetSAttrVN(self, *args):
        """
        GetSAttrVN(TUndirNet self, TInt64 NId, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        GetSAttrVN(TUndirNet self, TUndirNet::TNodeI const & NodeI, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        """
        return _SnapTime.TUndirNet_GetSAttrVN(self, *args)


    def GetIdVSAttrN(self, *args):
        """
        GetIdVSAttrN(TUndirNet self, TStr AttrName, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrName: TStr const &
        IdV: TInt64V &

        GetIdVSAttrN(TUndirNet self, TInt64 AttrId, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        IdV: TInt64V &

        """
        return _SnapTime.TUndirNet_GetIdVSAttrN(self, *args)


    def AddSAttrN(self, Name, AttrType, AttrId):
        """
        AddSAttrN(TUndirNet self, TStr Name, TAttrType const & AttrType, TInt64 AttrId) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrType: TAttrType const &
        AttrId: TInt64 &

        """
        return _SnapTime.TUndirNet_AddSAttrN(self, Name, AttrType, AttrId)


    def GetSAttrIdN(self, Name, AttrIdX, AttrTypeX):
        """
        GetSAttrIdN(TUndirNet self, TStr Name, TInt64 AttrIdX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrIdX: TInt64 &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TUndirNet_GetSAttrIdN(self, Name, AttrIdX, AttrTypeX)


    def GetSAttrNameN(self, AttrId, NameX, AttrTypeX):
        """
        GetSAttrNameN(TUndirNet self, TInt64 AttrId, TStr NameX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        NameX: TStr &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TUndirNet_GetSAttrNameN(self, AttrId, NameX, AttrTypeX)


    def AddSAttrDatE(self, *args):
        """
        AddSAttrDatE(TUndirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatE(TUndirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatE(TUndirNet self, TUndirNet::TEdgeI const & EdgeI, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatE(TUndirNet self, TUndirNet::TEdgeI const & EdgeI, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatE(TUndirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatE(TUndirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatE(TUndirNet self, TUndirNet::TEdgeI const & EdgeI, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatE(TUndirNet self, TUndirNet::TEdgeI const & EdgeI, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatE(TUndirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatE(TUndirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        Val: TStr const &

        AddSAttrDatE(TUndirNet self, TUndirNet::TEdgeI const & EdgeI, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatE(TUndirNet self, TUndirNet::TEdgeI const & EdgeI, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TStr const &

        """
        return _SnapTime.TUndirNet_AddSAttrDatE(self, *args)


    def GetSAttrDatE(self, *args):
        """
        GetSAttrDatE(TUndirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatE(TUndirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatE(TUndirNet self, TUndirNet::TEdgeI const & EdgeI, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatE(TUndirNet self, TUndirNet::TEdgeI const & EdgeI, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatE(TUndirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatE(TUndirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatE(TUndirNet self, TUndirNet::TEdgeI const & EdgeI, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatE(TUndirNet self, TUndirNet::TEdgeI const & EdgeI, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatE(TUndirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatE(TUndirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        ValX: TStr &

        GetSAttrDatE(TUndirNet self, TUndirNet::TEdgeI const & EdgeI, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatE(TUndirNet self, TUndirNet::TEdgeI const & EdgeI, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TStr &

        """
        return _SnapTime.TUndirNet_GetSAttrDatE(self, *args)


    def DelSAttrDatE(self, *args):
        """
        DelSAttrDatE(TUndirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &

        DelSAttrDatE(TUndirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &

        DelSAttrDatE(TUndirNet self, TUndirNet::TEdgeI const & EdgeI, TStr AttrName) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrName: TStr const &

        DelSAttrDatE(TUndirNet self, TUndirNet::TEdgeI const & EdgeI, TInt64 AttrId) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrId: TInt64 const &

        """
        return _SnapTime.TUndirNet_DelSAttrDatE(self, *args)


    def GetSAttrVE(self, *args):
        """
        GetSAttrVE(TUndirNet self, int64 const & SrcNId, int64 const & DstNId, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        GetSAttrVE(TUndirNet self, TUndirNet::TEdgeI const & EdgeI, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        """
        return _SnapTime.TUndirNet_GetSAttrVE(self, *args)


    def GetIdVSAttrE(self, *args):
        """
        GetIdVSAttrE(TUndirNet self, TStr AttrName, TIntPr64V IdV) -> int64

        Parameters
        ----------
        AttrName: TStr const &
        IdV: TIntPr64V &

        GetIdVSAttrE(TUndirNet self, TInt64 AttrId, TIntPr64V IdV) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        IdV: TIntPr64V &

        """
        return _SnapTime.TUndirNet_GetIdVSAttrE(self, *args)


    def AddSAttrE(self, Name, AttrType, AttrId):
        """
        AddSAttrE(TUndirNet self, TStr Name, TAttrType const & AttrType, TInt64 AttrId) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrType: TAttrType const &
        AttrId: TInt64 &

        """
        return _SnapTime.TUndirNet_AddSAttrE(self, Name, AttrType, AttrId)


    def GetSAttrIdE(self, Name, AttrIdX, AttrTypeX):
        """
        GetSAttrIdE(TUndirNet self, TStr Name, TInt64 AttrIdX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrIdX: TInt64 &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TUndirNet_GetSAttrIdE(self, Name, AttrIdX, AttrTypeX)


    def GetSAttrNameE(self, AttrId, NameX, AttrTypeX):
        """
        GetSAttrNameE(TUndirNet self, TInt64 AttrId, TStr NameX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        NameX: TStr &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TUndirNet_GetSAttrNameE(self, AttrId, NameX, AttrTypeX)


    def BegNI(self, *args):
        """
        BegNI(TUndirNet self) -> TUndirNet::TNodeI
        BegNI(TUndirNet self) -> TUndirNetNodeI

        Parameters
        ----------
        self: TUndirNet *

        """
        return _SnapTime.TUndirNet_BegNI(self, *args)


    def EndNI(self, *args):
        """
        EndNI(TUndirNet self) -> TUndirNet::TNodeI
        EndNI(TUndirNet self) -> TUndirNetNodeI

        Parameters
        ----------
        self: TUndirNet *

        """
        return _SnapTime.TUndirNet_EndNI(self, *args)


    def GetNI(self, *args):
        """
        GetNI(TUndirNet self, int64 const & NId) -> TUndirNet::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetNI(TUndirNet self, int64 const & NId) -> TUndirNetNodeI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TUndirNet_GetNI(self, *args)


    def BegEI(self, *args):
        """
        BegEI(TUndirNet self) -> TUndirNet::TEdgeI
        BegEI(TUndirNet self) -> TUndirNetEdgeI

        Parameters
        ----------
        self: TUndirNet *

        """
        return _SnapTime.TUndirNet_BegEI(self, *args)


    def EndEI(self, *args):
        """
        EndEI(TUndirNet self) -> TUndirNet::TEdgeI
        EndEI(TUndirNet self) -> TUndirNetEdgeI

        Parameters
        ----------
        self: TUndirNet *

        """
        return _SnapTime.TUndirNet_EndEI(self, *args)

    __swig_destroy__ = _SnapTime.delete_TUndirNet
TUndirNet.Save = new_instancemethod(_SnapTime.TUndirNet_Save, None, TUndirNet)
TUndirNet.Save_V1 = new_instancemethod(_SnapTime.TUndirNet_Save_V1, None, TUndirNet)
TUndirNet.HasFlag = new_instancemethod(_SnapTime.TUndirNet_HasFlag, None, TUndirNet)
TUndirNet.GetNodes = new_instancemethod(_SnapTime.TUndirNet_GetNodes, None, TUndirNet)
TUndirNet.AddNodeUnchecked = new_instancemethod(_SnapTime.TUndirNet_AddNodeUnchecked, None, TUndirNet)
TUndirNet.AddNode = new_instancemethod(_SnapTime.TUndirNet_AddNode, None, TUndirNet)
TUndirNet.DelNode = new_instancemethod(_SnapTime.TUndirNet_DelNode, None, TUndirNet)
TUndirNet.IsNode = new_instancemethod(_SnapTime.TUndirNet_IsNode, None, TUndirNet)
TUndirNet.GetMxNId = new_instancemethod(_SnapTime.TUndirNet_GetMxNId, None, TUndirNet)
TUndirNet.GetEdges = new_instancemethod(_SnapTime.TUndirNet_GetEdges, None, TUndirNet)
TUndirNet.AddEdgeUnchecked = new_instancemethod(_SnapTime.TUndirNet_AddEdgeUnchecked, None, TUndirNet)
TUndirNet.AddEdge = new_instancemethod(_SnapTime.TUndirNet_AddEdge, None, TUndirNet)
TUndirNet.DelEdge = new_instancemethod(_SnapTime.TUndirNet_DelEdge, None, TUndirNet)
TUndirNet.IsEdge = new_instancemethod(_SnapTime.TUndirNet_IsEdge, None, TUndirNet)
TUndirNet.GetEI = new_instancemethod(_SnapTime.TUndirNet_GetEI, None, TUndirNet)
TUndirNet.GetRndNId = new_instancemethod(_SnapTime.TUndirNet_GetRndNId, None, TUndirNet)
TUndirNet.GetRndNI = new_instancemethod(_SnapTime.TUndirNet_GetRndNI, None, TUndirNet)
TUndirNet.GetNIdV = new_instancemethod(_SnapTime.TUndirNet_GetNIdV, None, TUndirNet)
TUndirNet.Empty = new_instancemethod(_SnapTime.TUndirNet_Empty, None, TUndirNet)
TUndirNet.Clr = new_instancemethod(_SnapTime.TUndirNet_Clr, None, TUndirNet)
TUndirNet.Reserve = new_instancemethod(_SnapTime.TUndirNet_Reserve, None, TUndirNet)
TUndirNet.ReserveNIdDeg = new_instancemethod(_SnapTime.TUndirNet_ReserveNIdDeg, None, TUndirNet)
TUndirNet.SortNodeAdjV = new_instancemethod(_SnapTime.TUndirNet_SortNodeAdjV, None, TUndirNet)
TUndirNet.Defrag = new_instancemethod(_SnapTime.TUndirNet_Defrag, None, TUndirNet)
TUndirNet.IsOk = new_instancemethod(_SnapTime.TUndirNet_IsOk, None, TUndirNet)
TUndirNet.Dump = new_instancemethod(_SnapTime.TUndirNet_Dump, None, TUndirNet)
TUndirNet.AddSAttrDatN = new_instancemethod(_SnapTime.TUndirNet_AddSAttrDatN, None, TUndirNet)
TUndirNet.GetSAttrDatN = new_instancemethod(_SnapTime.TUndirNet_GetSAttrDatN, None, TUndirNet)
TUndirNet.DelSAttrDatN = new_instancemethod(_SnapTime.TUndirNet_DelSAttrDatN, None, TUndirNet)
TUndirNet.GetSAttrVN = new_instancemethod(_SnapTime.TUndirNet_GetSAttrVN, None, TUndirNet)
TUndirNet.GetIdVSAttrN = new_instancemethod(_SnapTime.TUndirNet_GetIdVSAttrN, None, TUndirNet)
TUndirNet.AddSAttrN = new_instancemethod(_SnapTime.TUndirNet_AddSAttrN, None, TUndirNet)
TUndirNet.GetSAttrIdN = new_instancemethod(_SnapTime.TUndirNet_GetSAttrIdN, None, TUndirNet)
TUndirNet.GetSAttrNameN = new_instancemethod(_SnapTime.TUndirNet_GetSAttrNameN, None, TUndirNet)
TUndirNet.AddSAttrDatE = new_instancemethod(_SnapTime.TUndirNet_AddSAttrDatE, None, TUndirNet)
TUndirNet.GetSAttrDatE = new_instancemethod(_SnapTime.TUndirNet_GetSAttrDatE, None, TUndirNet)
TUndirNet.DelSAttrDatE = new_instancemethod(_SnapTime.TUndirNet_DelSAttrDatE, None, TUndirNet)
TUndirNet.GetSAttrVE = new_instancemethod(_SnapTime.TUndirNet_GetSAttrVE, None, TUndirNet)
TUndirNet.GetIdVSAttrE = new_instancemethod(_SnapTime.TUndirNet_GetIdVSAttrE, None, TUndirNet)
TUndirNet.AddSAttrE = new_instancemethod(_SnapTime.TUndirNet_AddSAttrE, None, TUndirNet)
TUndirNet.GetSAttrIdE = new_instancemethod(_SnapTime.TUndirNet_GetSAttrIdE, None, TUndirNet)
TUndirNet.GetSAttrNameE = new_instancemethod(_SnapTime.TUndirNet_GetSAttrNameE, None, TUndirNet)
TUndirNet.BegNI = new_instancemethod(_SnapTime.TUndirNet_BegNI, None, TUndirNet)
TUndirNet.EndNI = new_instancemethod(_SnapTime.TUndirNet_EndNI, None, TUndirNet)
TUndirNet.GetNI = new_instancemethod(_SnapTime.TUndirNet_GetNI, None, TUndirNet)
TUndirNet.BegEI = new_instancemethod(_SnapTime.TUndirNet_BegEI, None, TUndirNet)
TUndirNet.EndEI = new_instancemethod(_SnapTime.TUndirNet_EndEI, None, TUndirNet)
TUndirNet_swigregister = _SnapTime.TUndirNet_swigregister
TUndirNet_swigregister(TUndirNet)

def TUndirNet_New(*args):
    """
    New() -> PUndirNet
    TUndirNet_New(int64 const & Nodes, int64 const & Edges) -> PUndirNet

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.TUndirNet_New(*args)

def TUndirNet_Load(SIn):
    """
    TUndirNet_Load(TSIn SIn) -> PUndirNet

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TUndirNet_Load(SIn)

def TUndirNet_Load_V1(SIn):
    """
    TUndirNet_Load_V1(TSIn SIn) -> PUndirNet

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TUndirNet_Load_V1(SIn)

def TUndirNet_LoadShM(ShMIn):
    """
    TUndirNet_LoadShM(TShMIn ShMIn) -> PUndirNet

    Parameters
    ----------
    ShMIn: TShMIn &

    """
    return _SnapTime.TUndirNet_LoadShM(ShMIn)

def TUndirNet_GetSmallGraph():
    """TUndirNet_GetSmallGraph() -> PUndirNet"""
    return _SnapTime.TUndirNet_GetSmallGraph()

class TDirNet(object):
    """Proxy of C++ TDirNet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TDirNet self) -> TDirNet
        __init__(TDirNet self, int64 const & Nodes, int64 const & Edges) -> TDirNet

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        __init__(TDirNet self, TDirNet Graph) -> TDirNet

        Parameters
        ----------
        Graph: TDirNet const &

        __init__(TDirNet self, TSIn SIn) -> TDirNet

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TDirNet_swiginit(self, _SnapTime.new_TDirNet(*args))

    def Save(self, SOut):
        """
        Save(TDirNet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TDirNet_Save(self, SOut)


    def Save_V1(self, SOut):
        """
        Save_V1(TDirNet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TDirNet_Save_V1(self, SOut)


    def New(*args):
        """
        New() -> PDirNet
        New(int64 const & Nodes, int64 const & Edges) -> PDirNet

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TDirNet_New(*args)

    New = staticmethod(New)

    def Load(SIn):
        """
        Load(TSIn SIn) -> PDirNet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TDirNet_Load(SIn)

    Load = staticmethod(Load)

    def Load_V1(SIn):
        """
        Load_V1(TSIn SIn) -> PDirNet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TDirNet_Load_V1(SIn)

    Load_V1 = staticmethod(Load_V1)

    def LoadShM(ShMIn):
        """
        LoadShM(TShMIn ShMIn) -> PDirNet

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TDirNet_LoadShM(ShMIn)

    LoadShM = staticmethod(LoadShM)

    def HasFlag(self, Flag):
        """
        HasFlag(TDirNet self, TGraphFlag const & Flag) -> bool

        Parameters
        ----------
        Flag: TGraphFlag const &

        """
        return _SnapTime.TDirNet_HasFlag(self, Flag)


    def GetNodes(self):
        """
        GetNodes(TDirNet self) -> int64

        Parameters
        ----------
        self: TDirNet const *

        """
        return _SnapTime.TDirNet_GetNodes(self)


    def AddNodeUnchecked(self, NId=-1):
        """
        AddNodeUnchecked(TDirNet self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNodeUnchecked(TDirNet self) -> int64

        Parameters
        ----------
        self: TDirNet *

        """
        return _SnapTime.TDirNet_AddNodeUnchecked(self, NId)


    def AddNode(self, *args):
        """
        AddNode(TDirNet self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(TDirNet self) -> int64
        AddNode(TDirNet self, TDirNet::TNodeI const & NodeId) -> int64

        Parameters
        ----------
        NodeId: TDirNet::TNodeI const &

        AddNode(TDirNet self, int64 const & NId, TInt64V InNIdV, TInt64V OutNIdV) -> int64

        Parameters
        ----------
        NId: int64 const &
        InNIdV: TInt64V const &
        OutNIdV: TInt64V const &

        AddNode(TDirNet self, int64 const & NId, TVecPool< TInt64,int64 > const & Pool, int64 const & SrcVId, int64 const & DstVId) -> int64

        Parameters
        ----------
        NId: int64 const &
        Pool: TVecPool< TInt64,int64 > const &
        SrcVId: int64 const &
        DstVId: int64 const &

        """
        return _SnapTime.TDirNet_AddNode(self, *args)


    def DelNode(self, *args):
        """
        DelNode(TDirNet self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        DelNode(TDirNet self, TDirNet::TNode const & NodeI)

        Parameters
        ----------
        NodeI: TDirNet::TNode const &

        """
        return _SnapTime.TDirNet_DelNode(self, *args)


    def IsNode(self, NId):
        """
        IsNode(TDirNet self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TDirNet_IsNode(self, NId)


    def GetMxNId(self):
        """
        GetMxNId(TDirNet self) -> int64

        Parameters
        ----------
        self: TDirNet const *

        """
        return _SnapTime.TDirNet_GetMxNId(self)


    def GetEdges(self):
        """
        GetEdges(TDirNet self) -> int64

        Parameters
        ----------
        self: TDirNet const *

        """
        return _SnapTime.TDirNet_GetEdges(self)


    def AddEdgeUnchecked(self, SrcNId, DstNId):
        """
        AddEdgeUnchecked(TDirNet self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TDirNet_AddEdgeUnchecked(self, SrcNId, DstNId)


    def AddEdge(self, *args):
        """
        AddEdge(TDirNet self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        AddEdge(TDirNet self, TDirNet::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &

        """
        return _SnapTime.TDirNet_AddEdge(self, *args)


    def DelEdge(self, SrcNId, DstNId, IsDir=True):
        """
        DelEdge(TDirNet self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        DelEdge(TDirNet self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TDirNet_DelEdge(self, SrcNId, DstNId, IsDir)


    def IsEdge(self, SrcNId, DstNId, IsDir=True):
        """
        IsEdge(TDirNet self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        IsEdge(TDirNet self, int64 const & SrcNId, int64 const & DstNId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TDirNet_IsEdge(self, SrcNId, DstNId, IsDir)


    def GetEI(self, SrcNId, DstNId):
        """
        GetEI(TDirNet self, int64 const & SrcNId, int64 const & DstNId) -> TDirNet::TEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TDirNet_GetEI(self, SrcNId, DstNId)


    def GetRndNId(self, *args):
        """
        GetRndNId(TDirNet self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(TDirNet self) -> int64

        Parameters
        ----------
        self: TDirNet *

        """
        return _SnapTime.TDirNet_GetRndNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(TDirNet self, TRnd Rnd) -> TDirNet::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(TDirNet self) -> TDirNet::TNodeI

        Parameters
        ----------
        self: TDirNet *

        """
        return _SnapTime.TDirNet_GetRndNI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(TDirNet self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.TDirNet_GetNIdV(self, NIdV)


    def Empty(self):
        """
        Empty(TDirNet self) -> bool

        Parameters
        ----------
        self: TDirNet const *

        """
        return _SnapTime.TDirNet_Empty(self)


    def Clr(self):
        """
        Clr(TDirNet self)

        Parameters
        ----------
        self: TDirNet *

        """
        return _SnapTime.TDirNet_Clr(self)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(TDirNet self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TDirNet_Reserve(self, Nodes, Edges)


    def ReserveNIdInDeg(self, NId, InDeg):
        """
        ReserveNIdInDeg(TDirNet self, int64 const & NId, int64 const & InDeg)

        Parameters
        ----------
        NId: int64 const &
        InDeg: int64 const &

        """
        return _SnapTime.TDirNet_ReserveNIdInDeg(self, NId, InDeg)


    def ReserveNIdOutDeg(self, NId, OutDeg):
        """
        ReserveNIdOutDeg(TDirNet self, int64 const & NId, int64 const & OutDeg)

        Parameters
        ----------
        NId: int64 const &
        OutDeg: int64 const &

        """
        return _SnapTime.TDirNet_ReserveNIdOutDeg(self, NId, OutDeg)


    def SortNodeAdjV(self):
        """
        SortNodeAdjV(TDirNet self)

        Parameters
        ----------
        self: TDirNet *

        """
        return _SnapTime.TDirNet_SortNodeAdjV(self)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(TDirNet self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(TDirNet self)

        Parameters
        ----------
        self: TDirNet *

        """
        return _SnapTime.TDirNet_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(TDirNet self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(TDirNet self) -> bool

        Parameters
        ----------
        self: TDirNet const *

        """
        return _SnapTime.TDirNet_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(TDirNet self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(TDirNet self)

        Parameters
        ----------
        self: TDirNet const *

        """
        return _SnapTime.TDirNet_Dump(self, *args)


    def GetSmallGraph():
        """GetSmallGraph() -> PDirNet"""
        return _SnapTime.TDirNet_GetSmallGraph()

    GetSmallGraph = staticmethod(GetSmallGraph)

    def AddSAttrDatN(self, *args):
        """
        AddSAttrDatN(TDirNet self, TInt64 NId, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatN(TDirNet self, TInt64 NId, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatN(TDirNet self, TDirNet::TNodeI const & NodeI, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatN(TDirNet self, TDirNet::TNodeI const & NodeI, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatN(TDirNet self, TInt64 NId, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatN(TDirNet self, TInt64 NId, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatN(TDirNet self, TDirNet::TNodeI const & NodeI, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatN(TDirNet self, TDirNet::TNodeI const & NodeI, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatN(TDirNet self, TInt64 NId, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatN(TDirNet self, TInt64 NId, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TStr const &

        AddSAttrDatN(TDirNet self, TDirNet::TNodeI const & NodeI, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatN(TDirNet self, TDirNet::TNodeI const & NodeI, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrId: TInt64 const &
        Val: TStr const &

        """
        return _SnapTime.TDirNet_AddSAttrDatN(self, *args)


    def GetSAttrDatN(self, *args):
        """
        GetSAttrDatN(TDirNet self, TInt64 NId, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatN(TDirNet self, TInt64 NId, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatN(TDirNet self, TDirNet::TNodeI const & NodeI, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatN(TDirNet self, TDirNet::TNodeI const & NodeI, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatN(TDirNet self, TInt64 NId, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatN(TDirNet self, TInt64 NId, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatN(TDirNet self, TDirNet::TNodeI const & NodeI, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatN(TDirNet self, TDirNet::TNodeI const & NodeI, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatN(TDirNet self, TInt64 NId, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatN(TDirNet self, TInt64 NId, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TStr &

        GetSAttrDatN(TDirNet self, TDirNet::TNodeI const & NodeI, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatN(TDirNet self, TDirNet::TNodeI const & NodeI, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TStr &

        """
        return _SnapTime.TDirNet_GetSAttrDatN(self, *args)


    def DelSAttrDatN(self, *args):
        """
        DelSAttrDatN(TDirNet self, TInt64 NId, TStr AttrName) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &

        DelSAttrDatN(TDirNet self, TInt64 NId, TInt64 AttrId) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &

        DelSAttrDatN(TDirNet self, TDirNet::TNodeI const & NodeI, TStr AttrName) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrName: TStr const &

        DelSAttrDatN(TDirNet self, TDirNet::TNodeI const & NodeI, TInt64 AttrId) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrId: TInt64 const &

        """
        return _SnapTime.TDirNet_DelSAttrDatN(self, *args)


    def GetSAttrVN(self, *args):
        """
        GetSAttrVN(TDirNet self, TInt64 NId, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        GetSAttrVN(TDirNet self, TDirNet::TNodeI const & NodeI, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        """
        return _SnapTime.TDirNet_GetSAttrVN(self, *args)


    def GetIdVSAttrN(self, *args):
        """
        GetIdVSAttrN(TDirNet self, TStr AttrName, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrName: TStr const &
        IdV: TInt64V &

        GetIdVSAttrN(TDirNet self, TInt64 AttrId, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        IdV: TInt64V &

        """
        return _SnapTime.TDirNet_GetIdVSAttrN(self, *args)


    def AddSAttrN(self, Name, AttrType, AttrId):
        """
        AddSAttrN(TDirNet self, TStr Name, TAttrType const & AttrType, TInt64 AttrId) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrType: TAttrType const &
        AttrId: TInt64 &

        """
        return _SnapTime.TDirNet_AddSAttrN(self, Name, AttrType, AttrId)


    def GetSAttrIdN(self, Name, AttrIdX, AttrTypeX):
        """
        GetSAttrIdN(TDirNet self, TStr Name, TInt64 AttrIdX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrIdX: TInt64 &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TDirNet_GetSAttrIdN(self, Name, AttrIdX, AttrTypeX)


    def GetSAttrNameN(self, AttrId, NameX, AttrTypeX):
        """
        GetSAttrNameN(TDirNet self, TInt64 AttrId, TStr NameX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        NameX: TStr &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TDirNet_GetSAttrNameN(self, AttrId, NameX, AttrTypeX)


    def AddSAttrDatE(self, *args):
        """
        AddSAttrDatE(TDirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatE(TDirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatE(TDirNet self, TDirNet::TEdgeI const & EdgeI, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatE(TDirNet self, TDirNet::TEdgeI const & EdgeI, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatE(TDirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatE(TDirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatE(TDirNet self, TDirNet::TEdgeI const & EdgeI, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatE(TDirNet self, TDirNet::TEdgeI const & EdgeI, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatE(TDirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatE(TDirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        Val: TStr const &

        AddSAttrDatE(TDirNet self, TDirNet::TEdgeI const & EdgeI, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatE(TDirNet self, TDirNet::TEdgeI const & EdgeI, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TStr const &

        """
        return _SnapTime.TDirNet_AddSAttrDatE(self, *args)


    def GetSAttrDatE(self, *args):
        """
        GetSAttrDatE(TDirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatE(TDirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatE(TDirNet self, TDirNet::TEdgeI const & EdgeI, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatE(TDirNet self, TDirNet::TEdgeI const & EdgeI, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatE(TDirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatE(TDirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatE(TDirNet self, TDirNet::TEdgeI const & EdgeI, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatE(TDirNet self, TDirNet::TEdgeI const & EdgeI, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatE(TDirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatE(TDirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        ValX: TStr &

        GetSAttrDatE(TDirNet self, TDirNet::TEdgeI const & EdgeI, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatE(TDirNet self, TDirNet::TEdgeI const & EdgeI, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TStr &

        """
        return _SnapTime.TDirNet_GetSAttrDatE(self, *args)


    def DelSAttrDatE(self, *args):
        """
        DelSAttrDatE(TDirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &

        DelSAttrDatE(TDirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &

        DelSAttrDatE(TDirNet self, TDirNet::TEdgeI const & EdgeI, TStr AttrName) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrName: TStr const &

        DelSAttrDatE(TDirNet self, TDirNet::TEdgeI const & EdgeI, TInt64 AttrId) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrId: TInt64 const &

        """
        return _SnapTime.TDirNet_DelSAttrDatE(self, *args)


    def GetSAttrVE(self, *args):
        """
        GetSAttrVE(TDirNet self, int64 const & SrcNId, int64 const & DstNId, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        GetSAttrVE(TDirNet self, TDirNet::TEdgeI const & EdgeI, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        """
        return _SnapTime.TDirNet_GetSAttrVE(self, *args)


    def GetIdVSAttrE(self, *args):
        """
        GetIdVSAttrE(TDirNet self, TStr AttrName, TIntPr64V IdV) -> int64

        Parameters
        ----------
        AttrName: TStr const &
        IdV: TIntPr64V &

        GetIdVSAttrE(TDirNet self, TInt64 AttrId, TIntPr64V IdV) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        IdV: TIntPr64V &

        """
        return _SnapTime.TDirNet_GetIdVSAttrE(self, *args)


    def AddSAttrE(self, Name, AttrType, AttrId):
        """
        AddSAttrE(TDirNet self, TStr Name, TAttrType const & AttrType, TInt64 AttrId) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrType: TAttrType const &
        AttrId: TInt64 &

        """
        return _SnapTime.TDirNet_AddSAttrE(self, Name, AttrType, AttrId)


    def GetSAttrIdE(self, Name, AttrIdX, AttrTypeX):
        """
        GetSAttrIdE(TDirNet self, TStr Name, TInt64 AttrIdX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrIdX: TInt64 &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TDirNet_GetSAttrIdE(self, Name, AttrIdX, AttrTypeX)


    def GetSAttrNameE(self, AttrId, NameX, AttrTypeX):
        """
        GetSAttrNameE(TDirNet self, TInt64 AttrId, TStr NameX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        NameX: TStr &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TDirNet_GetSAttrNameE(self, AttrId, NameX, AttrTypeX)


    def BegNI(self, *args):
        """
        BegNI(TDirNet self) -> TDirNet::TNodeI
        BegNI(TDirNet self) -> TDirNetNodeI

        Parameters
        ----------
        self: TDirNet *

        """
        return _SnapTime.TDirNet_BegNI(self, *args)


    def EndNI(self, *args):
        """
        EndNI(TDirNet self) -> TDirNet::TNodeI
        EndNI(TDirNet self) -> TDirNetNodeI

        Parameters
        ----------
        self: TDirNet *

        """
        return _SnapTime.TDirNet_EndNI(self, *args)


    def GetNI(self, *args):
        """
        GetNI(TDirNet self, int64 const & NId) -> TDirNet::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetNI(TDirNet self, int64 const & NId) -> TDirNetNodeI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TDirNet_GetNI(self, *args)


    def BegEI(self, *args):
        """
        BegEI(TDirNet self) -> TDirNet::TEdgeI
        BegEI(TDirNet self) -> TDirNetEdgeI

        Parameters
        ----------
        self: TDirNet *

        """
        return _SnapTime.TDirNet_BegEI(self, *args)


    def EndEI(self, *args):
        """
        EndEI(TDirNet self) -> TDirNet::TEdgeI
        EndEI(TDirNet self) -> TDirNetEdgeI

        Parameters
        ----------
        self: TDirNet *

        """
        return _SnapTime.TDirNet_EndEI(self, *args)

    __swig_destroy__ = _SnapTime.delete_TDirNet
TDirNet.Save = new_instancemethod(_SnapTime.TDirNet_Save, None, TDirNet)
TDirNet.Save_V1 = new_instancemethod(_SnapTime.TDirNet_Save_V1, None, TDirNet)
TDirNet.HasFlag = new_instancemethod(_SnapTime.TDirNet_HasFlag, None, TDirNet)
TDirNet.GetNodes = new_instancemethod(_SnapTime.TDirNet_GetNodes, None, TDirNet)
TDirNet.AddNodeUnchecked = new_instancemethod(_SnapTime.TDirNet_AddNodeUnchecked, None, TDirNet)
TDirNet.AddNode = new_instancemethod(_SnapTime.TDirNet_AddNode, None, TDirNet)
TDirNet.DelNode = new_instancemethod(_SnapTime.TDirNet_DelNode, None, TDirNet)
TDirNet.IsNode = new_instancemethod(_SnapTime.TDirNet_IsNode, None, TDirNet)
TDirNet.GetMxNId = new_instancemethod(_SnapTime.TDirNet_GetMxNId, None, TDirNet)
TDirNet.GetEdges = new_instancemethod(_SnapTime.TDirNet_GetEdges, None, TDirNet)
TDirNet.AddEdgeUnchecked = new_instancemethod(_SnapTime.TDirNet_AddEdgeUnchecked, None, TDirNet)
TDirNet.AddEdge = new_instancemethod(_SnapTime.TDirNet_AddEdge, None, TDirNet)
TDirNet.DelEdge = new_instancemethod(_SnapTime.TDirNet_DelEdge, None, TDirNet)
TDirNet.IsEdge = new_instancemethod(_SnapTime.TDirNet_IsEdge, None, TDirNet)
TDirNet.GetEI = new_instancemethod(_SnapTime.TDirNet_GetEI, None, TDirNet)
TDirNet.GetRndNId = new_instancemethod(_SnapTime.TDirNet_GetRndNId, None, TDirNet)
TDirNet.GetRndNI = new_instancemethod(_SnapTime.TDirNet_GetRndNI, None, TDirNet)
TDirNet.GetNIdV = new_instancemethod(_SnapTime.TDirNet_GetNIdV, None, TDirNet)
TDirNet.Empty = new_instancemethod(_SnapTime.TDirNet_Empty, None, TDirNet)
TDirNet.Clr = new_instancemethod(_SnapTime.TDirNet_Clr, None, TDirNet)
TDirNet.Reserve = new_instancemethod(_SnapTime.TDirNet_Reserve, None, TDirNet)
TDirNet.ReserveNIdInDeg = new_instancemethod(_SnapTime.TDirNet_ReserveNIdInDeg, None, TDirNet)
TDirNet.ReserveNIdOutDeg = new_instancemethod(_SnapTime.TDirNet_ReserveNIdOutDeg, None, TDirNet)
TDirNet.SortNodeAdjV = new_instancemethod(_SnapTime.TDirNet_SortNodeAdjV, None, TDirNet)
TDirNet.Defrag = new_instancemethod(_SnapTime.TDirNet_Defrag, None, TDirNet)
TDirNet.IsOk = new_instancemethod(_SnapTime.TDirNet_IsOk, None, TDirNet)
TDirNet.Dump = new_instancemethod(_SnapTime.TDirNet_Dump, None, TDirNet)
TDirNet.AddSAttrDatN = new_instancemethod(_SnapTime.TDirNet_AddSAttrDatN, None, TDirNet)
TDirNet.GetSAttrDatN = new_instancemethod(_SnapTime.TDirNet_GetSAttrDatN, None, TDirNet)
TDirNet.DelSAttrDatN = new_instancemethod(_SnapTime.TDirNet_DelSAttrDatN, None, TDirNet)
TDirNet.GetSAttrVN = new_instancemethod(_SnapTime.TDirNet_GetSAttrVN, None, TDirNet)
TDirNet.GetIdVSAttrN = new_instancemethod(_SnapTime.TDirNet_GetIdVSAttrN, None, TDirNet)
TDirNet.AddSAttrN = new_instancemethod(_SnapTime.TDirNet_AddSAttrN, None, TDirNet)
TDirNet.GetSAttrIdN = new_instancemethod(_SnapTime.TDirNet_GetSAttrIdN, None, TDirNet)
TDirNet.GetSAttrNameN = new_instancemethod(_SnapTime.TDirNet_GetSAttrNameN, None, TDirNet)
TDirNet.AddSAttrDatE = new_instancemethod(_SnapTime.TDirNet_AddSAttrDatE, None, TDirNet)
TDirNet.GetSAttrDatE = new_instancemethod(_SnapTime.TDirNet_GetSAttrDatE, None, TDirNet)
TDirNet.DelSAttrDatE = new_instancemethod(_SnapTime.TDirNet_DelSAttrDatE, None, TDirNet)
TDirNet.GetSAttrVE = new_instancemethod(_SnapTime.TDirNet_GetSAttrVE, None, TDirNet)
TDirNet.GetIdVSAttrE = new_instancemethod(_SnapTime.TDirNet_GetIdVSAttrE, None, TDirNet)
TDirNet.AddSAttrE = new_instancemethod(_SnapTime.TDirNet_AddSAttrE, None, TDirNet)
TDirNet.GetSAttrIdE = new_instancemethod(_SnapTime.TDirNet_GetSAttrIdE, None, TDirNet)
TDirNet.GetSAttrNameE = new_instancemethod(_SnapTime.TDirNet_GetSAttrNameE, None, TDirNet)
TDirNet.BegNI = new_instancemethod(_SnapTime.TDirNet_BegNI, None, TDirNet)
TDirNet.EndNI = new_instancemethod(_SnapTime.TDirNet_EndNI, None, TDirNet)
TDirNet.GetNI = new_instancemethod(_SnapTime.TDirNet_GetNI, None, TDirNet)
TDirNet.BegEI = new_instancemethod(_SnapTime.TDirNet_BegEI, None, TDirNet)
TDirNet.EndEI = new_instancemethod(_SnapTime.TDirNet_EndEI, None, TDirNet)
TDirNet_swigregister = _SnapTime.TDirNet_swigregister
TDirNet_swigregister(TDirNet)

def TDirNet_New(*args):
    """
    New() -> PDirNet
    TDirNet_New(int64 const & Nodes, int64 const & Edges) -> PDirNet

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.TDirNet_New(*args)

def TDirNet_Load(SIn):
    """
    TDirNet_Load(TSIn SIn) -> PDirNet

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TDirNet_Load(SIn)

def TDirNet_Load_V1(SIn):
    """
    TDirNet_Load_V1(TSIn SIn) -> PDirNet

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TDirNet_Load_V1(SIn)

def TDirNet_LoadShM(ShMIn):
    """
    TDirNet_LoadShM(TShMIn ShMIn) -> PDirNet

    Parameters
    ----------
    ShMIn: TShMIn &

    """
    return _SnapTime.TDirNet_LoadShM(ShMIn)

def TDirNet_GetSmallGraph():
    """TDirNet_GetSmallGraph() -> PDirNet"""
    return _SnapTime.TDirNet_GetSmallGraph()

class TModeNet(TNEANet):
    """Proxy of C++ TModeNet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TModeNet self) -> TModeNet
        __init__(TModeNet self, int64 const & TypeId) -> TModeNet

        Parameters
        ----------
        TypeId: int64 const &

        __init__(TModeNet self, int64 const & Nodes, int64 const & Edges) -> TModeNet

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        __init__(TModeNet self, int64 const & Nodes, int64 const & Edges, int64 const & TypeId) -> TModeNet

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &
        TypeId: int64 const &

        __init__(TModeNet self, TModeNet Graph) -> TModeNet

        Parameters
        ----------
        Graph: TModeNet const &

        __init__(TModeNet self, TSIn SIn) -> TModeNet

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TModeNet_swiginit(self, _SnapTime.new_TModeNet(*args))

    def Save(self, SOut):
        """
        Save(TModeNet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TModeNet_Save(self, SOut)


    def LoadShM(self, ShMIn):
        """
        LoadShM(TModeNet self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TModeNet_LoadShM(self, ShMIn)


    def GetCrossNetNames(self, Names):
        """
        GetCrossNetNames(TModeNet self, TStr64V Names)

        Parameters
        ----------
        Names: TStr64V &

        """
        return _SnapTime.TModeNet_GetCrossNetNames(self, Names)


    def GetNeighborsByCrossNet(self, NId, Name, Neighbors, isOutEId=False):
        """
        GetNeighborsByCrossNet(TModeNet self, int64 const & NId, TStr Name, TInt64V Neighbors, bool const isOutEId=False)

        Parameters
        ----------
        NId: int64 const &
        Name: TStr const &
        Neighbors: TInt64V &
        isOutEId: bool const

        GetNeighborsByCrossNet(TModeNet self, int64 const & NId, TStr Name, TInt64V Neighbors)

        Parameters
        ----------
        NId: int64 const &
        Name: TStr const &
        Neighbors: TInt64V &

        """
        return _SnapTime.TModeNet_GetNeighborsByCrossNet(self, NId, Name, Neighbors, isOutEId)


    def CopyNodesWithoutNeighbors(Src, Dst, ToCopyIds):
        """
        CopyNodesWithoutNeighbors(TModeNet Src, TModeNet Dst, TInt64V ToCopyIds)

        Parameters
        ----------
        Src: TModeNet const &
        Dst: TModeNet &
        ToCopyIds: TInt64V const &

        """
        return _SnapTime.TModeNet_CopyNodesWithoutNeighbors(Src, Dst, ToCopyIds)

    CopyNodesWithoutNeighbors = staticmethod(CopyNodesWithoutNeighbors)

    def Clr(self):
        """
        Clr(TModeNet self)

        Parameters
        ----------
        self: TModeNet *

        """
        return _SnapTime.TModeNet_Clr(self)


    def BegMMNI(self, *args):
        """
        BegMMNI(TModeNet self) -> TModeNet::TNodeI
        BegMMNI(TModeNet self) -> TModeNetNodeI

        Parameters
        ----------
        self: TModeNet *

        """
        return _SnapTime.TModeNet_BegMMNI(self, *args)


    def EndMMNI(self, *args):
        """
        EndMMNI(TModeNet self) -> TModeNet::TNodeI
        EndMMNI(TModeNet self) -> TModeNetNodeI

        Parameters
        ----------
        self: TModeNet *

        """
        return _SnapTime.TModeNet_EndMMNI(self, *args)


    def GetMMNI(self, *args):
        """
        GetMMNI(TModeNet self, int64 const & NId) -> TModeNet::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetMMNI(TModeNet self, int const & NId) -> TModeNetNodeI

        Parameters
        ----------
        NId: int const &

        """
        return _SnapTime.TModeNet_GetMMNI(self, *args)

    __swig_destroy__ = _SnapTime.delete_TModeNet
TModeNet.Save = new_instancemethod(_SnapTime.TModeNet_Save, None, TModeNet)
TModeNet.LoadShM = new_instancemethod(_SnapTime.TModeNet_LoadShM, None, TModeNet)
TModeNet.GetCrossNetNames = new_instancemethod(_SnapTime.TModeNet_GetCrossNetNames, None, TModeNet)
TModeNet.GetNeighborsByCrossNet = new_instancemethod(_SnapTime.TModeNet_GetNeighborsByCrossNet, None, TModeNet)
TModeNet.Clr = new_instancemethod(_SnapTime.TModeNet_Clr, None, TModeNet)
TModeNet.BegMMNI = new_instancemethod(_SnapTime.TModeNet_BegMMNI, None, TModeNet)
TModeNet.EndMMNI = new_instancemethod(_SnapTime.TModeNet_EndMMNI, None, TModeNet)
TModeNet.GetMMNI = new_instancemethod(_SnapTime.TModeNet_GetMMNI, None, TModeNet)
TModeNet_swigregister = _SnapTime.TModeNet_swigregister
TModeNet_swigregister(TModeNet)

def TModeNet_CopyNodesWithoutNeighbors(Src, Dst, ToCopyIds):
    """
    TModeNet_CopyNodesWithoutNeighbors(TModeNet Src, TModeNet Dst, TInt64V ToCopyIds)

    Parameters
    ----------
    Src: TModeNet const &
    Dst: TModeNet &
    ToCopyIds: TInt64V const &

    """
    return _SnapTime.TModeNet_CopyNodesWithoutNeighbors(Src, Dst, ToCopyIds)

class TCrossNet(object):
    """Proxy of C++ TCrossNet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TCrossNet self) -> TCrossNet
        __init__(TCrossNet self, TInt64 MId1, TInt64 MId2, TInt64 LId) -> TCrossNet

        Parameters
        ----------
        MId1: TInt64
        MId2: TInt64
        LId: TInt64

        __init__(TCrossNet self, TInt64 MId1, TInt64 MId2, TBool IsDir, TInt64 LId) -> TCrossNet

        Parameters
        ----------
        MId1: TInt64
        MId2: TInt64
        IsDir: TBool
        LId: TInt64

        __init__(TCrossNet self, TSIn SIn) -> TCrossNet

        Parameters
        ----------
        SIn: TSIn &

        __init__(TCrossNet self, TCrossNet OtherTCrossNet) -> TCrossNet

        Parameters
        ----------
        OtherTCrossNet: TCrossNet const &

        """
        _SnapTime.TCrossNet_swiginit(self, _SnapTime.new_TCrossNet(*args))

    def IsEdge(self, EId):
        """
        IsEdge(TCrossNet self, int64 const & EId) -> bool

        Parameters
        ----------
        EId: int64 const &

        """
        return _SnapTime.TCrossNet_IsEdge(self, EId)


    def GetMxEId(self):
        """
        GetMxEId(TCrossNet self) -> int64

        Parameters
        ----------
        self: TCrossNet const *

        """
        return _SnapTime.TCrossNet_GetMxEId(self)


    def GetEdges(self):
        """
        GetEdges(TCrossNet self) -> int64

        Parameters
        ----------
        self: TCrossNet const *

        """
        return _SnapTime.TCrossNet_GetEdges(self)


    def Clr(self):
        """
        Clr(TCrossNet self)

        Parameters
        ----------
        self: TCrossNet *

        """
        return _SnapTime.TCrossNet_Clr(self)


    def AddEdge(self, sourceNId, destNId, EId=-1):
        """
        AddEdge(TCrossNet self, int64 const & sourceNId, int64 const & destNId, int64 EId=-1) -> int64

        Parameters
        ----------
        sourceNId: int64 const &
        destNId: int64 const &
        EId: int64

        AddEdge(TCrossNet self, int64 const & sourceNId, int64 const & destNId) -> int64

        Parameters
        ----------
        sourceNId: int64 const &
        destNId: int64 const &

        """
        return _SnapTime.TCrossNet_AddEdge(self, sourceNId, destNId, EId)


    def GetEdgeI(self, EId):
        """
        GetEdgeI(TCrossNet self, int64 const & EId) -> TCrossNet::TCrossEdgeI

        Parameters
        ----------
        EId: int64 const &

        """
        return _SnapTime.TCrossNet_GetEdgeI(self, EId)


    def BegEdgeI(self):
        """
        BegEdgeI(TCrossNet self) -> TCrossNet::TCrossEdgeI

        Parameters
        ----------
        self: TCrossNet const *

        """
        return _SnapTime.TCrossNet_BegEdgeI(self)


    def EndEdgeI(self):
        """
        EndEdgeI(TCrossNet self) -> TCrossNet::TCrossEdgeI

        Parameters
        ----------
        self: TCrossNet const *

        """
        return _SnapTime.TCrossNet_EndEdgeI(self)


    def DelEdge(self, EId):
        """
        DelEdge(TCrossNet self, int64 const & EId) -> int64

        Parameters
        ----------
        EId: int64 const &

        """
        return _SnapTime.TCrossNet_DelEdge(self, EId)


    def GetEIdV(self, EIdV):
        """
        GetEIdV(TCrossNet self, TInt64V EIdV)

        Parameters
        ----------
        EIdV: TInt64V &

        """
        return _SnapTime.TCrossNet_GetEIdV(self, EIdV)


    def GetMode1(self):
        """
        GetMode1(TCrossNet self) -> int64

        Parameters
        ----------
        self: TCrossNet const *

        """
        return _SnapTime.TCrossNet_GetMode1(self)


    def GetMode2(self):
        """
        GetMode2(TCrossNet self) -> int64

        Parameters
        ----------
        self: TCrossNet const *

        """
        return _SnapTime.TCrossNet_GetMode2(self)


    def Save(self, SOut):
        """
        Save(TCrossNet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TCrossNet_Save(self, SOut)


    def LoadShM(self, ShMIn):
        """
        LoadShM(TCrossNet self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TCrossNet_LoadShM(self, ShMIn)


    def IsDirected(self):
        """
        IsDirected(TCrossNet self) -> bool

        Parameters
        ----------
        self: TCrossNet const *

        """
        return _SnapTime.TCrossNet_IsDirected(self)


    def AttrNameEI(self, *args):
        """
        AttrNameEI(TCrossNet self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        AttrNameEI(TCrossNet self, TInt64 EId, TStrIntPr64H::TIter CrossHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        CrossHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TCrossNet_AttrNameEI(self, *args)


    def AttrValueEI(self, *args):
        """
        AttrValueEI(TCrossNet self, TInt64 EId, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TStr64V &

        AttrValueEI(TCrossNet self, TInt64 EId, TStrIntPr64H::TIter CrossHI, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        CrossHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.TCrossNet_AttrValueEI(self, *args)


    def IntAttrNameEI(self, *args):
        """
        IntAttrNameEI(TCrossNet self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        IntAttrNameEI(TCrossNet self, TInt64 EId, TStrIntPr64H::TIter CrossHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        CrossHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TCrossNet_IntAttrNameEI(self, *args)


    def IntAttrValueEI(self, *args):
        """
        IntAttrValueEI(TCrossNet self, TInt64 EId, TInt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TInt64V &

        IntAttrValueEI(TCrossNet self, TInt64 EId, TStrIntPr64H::TIter CrossHI, TInt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        CrossHI: TStrIntPr64H::TIter
        Values: TInt64V &

        """
        return _SnapTime.TCrossNet_IntAttrValueEI(self, *args)


    def StrAttrNameEI(self, *args):
        """
        StrAttrNameEI(TCrossNet self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        StrAttrNameEI(TCrossNet self, TInt64 EId, TStrIntPr64H::TIter CrossHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        CrossHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TCrossNet_StrAttrNameEI(self, *args)


    def StrAttrValueEI(self, *args):
        """
        StrAttrValueEI(TCrossNet self, TInt64 EId, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TStr64V &

        StrAttrValueEI(TCrossNet self, TInt64 EId, TStrIntPr64H::TIter CrossHI, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        CrossHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.TCrossNet_StrAttrValueEI(self, *args)


    def FltAttrNameEI(self, *args):
        """
        FltAttrNameEI(TCrossNet self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        FltAttrNameEI(TCrossNet self, TInt64 EId, TStrIntPr64H::TIter CrossHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        CrossHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TCrossNet_FltAttrNameEI(self, *args)


    def FltAttrValueEI(self, *args):
        """
        FltAttrValueEI(TCrossNet self, TInt64 EId, TFlt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TFlt64V &

        FltAttrValueEI(TCrossNet self, TInt64 EId, TStrIntPr64H::TIter CrossHI, TFlt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        CrossHI: TStrIntPr64H::TIter
        Values: TFlt64V &

        """
        return _SnapTime.TCrossNet_FltAttrValueEI(self, *args)


    def AddIntAttrDatE(self, *args):
        """
        AddIntAttrDatE(TCrossNet self, TCrossNet::TCrossEdgeI const & EdgeI, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TCrossNet::TCrossEdgeI const &
        value: TInt64 const &
        attr: TStr const &

        AddIntAttrDatE(TCrossNet self, int64 const & EId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TInt64 const &
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_AddIntAttrDatE(self, *args)


    def AddStrAttrDatE(self, *args):
        """
        AddStrAttrDatE(TCrossNet self, TCrossNet::TCrossEdgeI const & EdgeI, TStr value, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TCrossNet::TCrossEdgeI const &
        value: TStr const &
        attr: TStr const &

        AddStrAttrDatE(TCrossNet self, int64 const & EId, TStr value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TStr const &
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_AddStrAttrDatE(self, *args)


    def AddFltAttrDatE(self, *args):
        """
        AddFltAttrDatE(TCrossNet self, TCrossNet::TCrossEdgeI const & EdgeI, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TCrossNet::TCrossEdgeI const &
        value: TFlt const &
        attr: TStr const &

        AddFltAttrDatE(TCrossNet self, int64 const & EId, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TFlt const &
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_AddFltAttrDatE(self, *args)


    def GetIntAttrDatE(self, *args):
        """
        GetIntAttrDatE(TCrossNet self, TCrossNet::TCrossEdgeI const & EdgeI, TStr attr) -> TInt64

        Parameters
        ----------
        EdgeI: TCrossNet::TCrossEdgeI const &
        attr: TStr const &

        GetIntAttrDatE(TCrossNet self, int64 const & EId, TStr attr) -> TInt64

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_GetIntAttrDatE(self, *args)


    def GetStrAttrDatE(self, *args):
        """
        GetStrAttrDatE(TCrossNet self, TCrossNet::TCrossEdgeI const & EdgeI, TStr attr) -> TStr

        Parameters
        ----------
        EdgeI: TCrossNet::TCrossEdgeI const &
        attr: TStr const &

        GetStrAttrDatE(TCrossNet self, int64 const & EId, TStr attr) -> TStr

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_GetStrAttrDatE(self, *args)


    def GetFltAttrDatE(self, *args):
        """
        GetFltAttrDatE(TCrossNet self, TCrossNet::TCrossEdgeI const & EdgeI, TStr attr) -> TFlt

        Parameters
        ----------
        EdgeI: TCrossNet::TCrossEdgeI const &
        attr: TStr const &

        GetFltAttrDatE(TCrossNet self, int64 const & EId, TStr attr) -> TFlt

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_GetFltAttrDatE(self, *args)


    def GetEAIntI(self, attr, EId):
        """
        GetEAIntI(TCrossNet self, TStr attr, int64 const & EId) -> TCrossNet::TAIntI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.TCrossNet_GetEAIntI(self, attr, EId)


    def GetEAStrI(self, attr, EId):
        """
        GetEAStrI(TCrossNet self, TStr attr, int64 const & EId) -> TCrossNet::TAStrI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.TCrossNet_GetEAStrI(self, attr, EId)


    def GetEAFltI(self, attr, EId):
        """
        GetEAFltI(TCrossNet self, TStr attr, int64 const & EId) -> TCrossNet::TAFltI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.TCrossNet_GetEAFltI(self, attr, EId)


    def DelAttrDatE(self, *args):
        """
        DelAttrDatE(TCrossNet self, TCrossNet::TCrossEdgeI const & EdgeI, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TCrossNet::TCrossEdgeI const &
        attr: TStr const &

        DelAttrDatE(TCrossNet self, int64 const & EId, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_DelAttrDatE(self, *args)


    def AddIntAttrE(self, *args):
        """
        AddIntAttrE(TCrossNet self, TStr attr, TInt64 defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TInt64

        AddIntAttrE(TCrossNet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_AddIntAttrE(self, *args)


    def AddStrAttrE(self, *args):
        """
        AddStrAttrE(TCrossNet self, TStr attr, TStr defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TStr

        AddStrAttrE(TCrossNet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_AddStrAttrE(self, *args)


    def AddFltAttrE(self, *args):
        """
        AddFltAttrE(TCrossNet self, TStr attr, TFlt defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TFlt

        AddFltAttrE(TCrossNet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_AddFltAttrE(self, *args)


    def DelAttrE(self, attr):
        """
        DelAttrE(TCrossNet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_DelAttrE(self, attr)


    def DelAllAttrDatE(self):
        """
        DelAllAttrDatE(TCrossNet self) -> int64

        Parameters
        ----------
        self: TCrossNet *

        """
        return _SnapTime.TCrossNet_DelAllAttrDatE(self)


    def IsFltAttrE(self, attr):
        """
        IsFltAttrE(TCrossNet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_IsFltAttrE(self, attr)


    def IsIntAttrE(self, attr):
        """
        IsIntAttrE(TCrossNet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_IsIntAttrE(self, attr)


    def IsStrAttrE(self, attr):
        """
        IsStrAttrE(TCrossNet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_IsStrAttrE(self, attr)


    def IsAttrDeletedE(self, EId, attr):
        """
        IsAttrDeletedE(TCrossNet self, int64 const & EId, TStr attr) -> bool

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_IsAttrDeletedE(self, EId, attr)


    def IsIntAttrDeletedE(self, EId, attr):
        """
        IsIntAttrDeletedE(TCrossNet self, int64 const & EId, TStr attr) -> bool

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_IsIntAttrDeletedE(self, EId, attr)


    def IsStrAttrDeletedE(self, EId, attr):
        """
        IsStrAttrDeletedE(TCrossNet self, int64 const & EId, TStr attr) -> bool

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_IsStrAttrDeletedE(self, EId, attr)


    def IsFltAttrDeletedE(self, EId, attr):
        """
        IsFltAttrDeletedE(TCrossNet self, int64 const & EId, TStr attr) -> bool

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_IsFltAttrDeletedE(self, EId, attr)


    def EdgeAttrIsDeleted(self, EId, CrossHI):
        """
        EdgeAttrIsDeleted(TCrossNet self, int64 const & EId, TStrIntPr64H::TIter const & CrossHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        CrossHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TCrossNet_EdgeAttrIsDeleted(self, EId, CrossHI)


    def EdgeAttrIsIntDeleted(self, EId, CrossHI):
        """
        EdgeAttrIsIntDeleted(TCrossNet self, int64 const & EId, TStrIntPr64H::TIter const & CrossHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        CrossHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TCrossNet_EdgeAttrIsIntDeleted(self, EId, CrossHI)


    def EdgeAttrIsStrDeleted(self, EId, CrossHI):
        """
        EdgeAttrIsStrDeleted(TCrossNet self, int64 const & EId, TStrIntPr64H::TIter const & CrossHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        CrossHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TCrossNet_EdgeAttrIsStrDeleted(self, EId, CrossHI)


    def EdgeAttrIsFltDeleted(self, EId, CrossHI):
        """
        EdgeAttrIsFltDeleted(TCrossNet self, int64 const & EId, TStrIntPr64H::TIter const & CrossHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        CrossHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TCrossNet_EdgeAttrIsFltDeleted(self, EId, CrossHI)


    def GetEdgeAttrValue(self, EId, CrossHI):
        """
        GetEdgeAttrValue(TCrossNet self, int64 const & EId, TStrIntPr64H::TIter const & CrossHI) -> TStr

        Parameters
        ----------
        EId: int64 const &
        CrossHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TCrossNet_GetEdgeAttrValue(self, EId, CrossHI)


    def CopyEdges(Src, Dst, ToCopyIds):
        """
        CopyEdges(TCrossNet Src, TCrossNet Dst, TInt64V ToCopyIds)

        Parameters
        ----------
        Src: TCrossNet const &
        Dst: TCrossNet &
        ToCopyIds: TInt64V const &

        """
        return _SnapTime.TCrossNet_CopyEdges(Src, Dst, ToCopyIds)

    CopyEdges = staticmethod(CopyEdges)

    def GetBipartiteGraph(self):
        """
        GetBipartiteGraph(TCrossNet self) -> PBPGraph

        Parameters
        ----------
        self: TCrossNet *

        """
        return _SnapTime.TCrossNet_GetBipartiteGraph(self)


    def BegEI(self):
        """
        BegEI(TCrossNet self) -> TCrossNetEdgeI

        Parameters
        ----------
        self: TCrossNet *

        """
        return _SnapTime.TCrossNet_BegEI(self)


    def EndEI(self):
        """
        EndEI(TCrossNet self) -> TCrossNetEdgeI

        Parameters
        ----------
        self: TCrossNet *

        """
        return _SnapTime.TCrossNet_EndEI(self)


    def BegEAIntI(self, *args):
        """
        BegEAIntI(TCrossNet self, TStr attr) -> TCrossNet::TAIntI

        Parameters
        ----------
        attr: TStr const &

        BegEAIntI(TCrossNet self, TStr attr) -> TCrossNetAIntI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_BegEAIntI(self, *args)


    def EndEAIntI(self, *args):
        """
        EndEAIntI(TCrossNet self, TStr attr) -> TCrossNet::TAIntI

        Parameters
        ----------
        attr: TStr const &

        EndEAIntI(TCrossNet self, TStr attr) -> TCrossNetAIntI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_EndEAIntI(self, *args)


    def BegEAStrI(self, *args):
        """
        BegEAStrI(TCrossNet self, TStr attr) -> TCrossNet::TAStrI

        Parameters
        ----------
        attr: TStr const &

        BegEAStrI(TCrossNet self, TStr attr) -> TCrossNetAStrI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_BegEAStrI(self, *args)


    def EndEAStrI(self, *args):
        """
        EndEAStrI(TCrossNet self, TStr attr) -> TCrossNet::TAStrI

        Parameters
        ----------
        attr: TStr const &

        EndEAStrI(TCrossNet self, TStr attr) -> TCrossNetAStrI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_EndEAStrI(self, *args)


    def BegEAFltI(self, *args):
        """
        BegEAFltI(TCrossNet self, TStr attr) -> TCrossNet::TAFltI

        Parameters
        ----------
        attr: TStr const &

        BegEAFltI(TCrossNet self, TStr attr) -> TCrossNetAFltI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_BegEAFltI(self, *args)


    def EndEAFltI(self, *args):
        """
        EndEAFltI(TCrossNet self, TStr attr) -> TCrossNet::TAFltI

        Parameters
        ----------
        attr: TStr const &

        EndEAFltI(TCrossNet self, TStr attr) -> TCrossNetAFltI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TCrossNet_EndEAFltI(self, *args)

    __swig_destroy__ = _SnapTime.delete_TCrossNet
TCrossNet.IsEdge = new_instancemethod(_SnapTime.TCrossNet_IsEdge, None, TCrossNet)
TCrossNet.GetMxEId = new_instancemethod(_SnapTime.TCrossNet_GetMxEId, None, TCrossNet)
TCrossNet.GetEdges = new_instancemethod(_SnapTime.TCrossNet_GetEdges, None, TCrossNet)
TCrossNet.Clr = new_instancemethod(_SnapTime.TCrossNet_Clr, None, TCrossNet)
TCrossNet.AddEdge = new_instancemethod(_SnapTime.TCrossNet_AddEdge, None, TCrossNet)
TCrossNet.GetEdgeI = new_instancemethod(_SnapTime.TCrossNet_GetEdgeI, None, TCrossNet)
TCrossNet.BegEdgeI = new_instancemethod(_SnapTime.TCrossNet_BegEdgeI, None, TCrossNet)
TCrossNet.EndEdgeI = new_instancemethod(_SnapTime.TCrossNet_EndEdgeI, None, TCrossNet)
TCrossNet.DelEdge = new_instancemethod(_SnapTime.TCrossNet_DelEdge, None, TCrossNet)
TCrossNet.GetEIdV = new_instancemethod(_SnapTime.TCrossNet_GetEIdV, None, TCrossNet)
TCrossNet.GetMode1 = new_instancemethod(_SnapTime.TCrossNet_GetMode1, None, TCrossNet)
TCrossNet.GetMode2 = new_instancemethod(_SnapTime.TCrossNet_GetMode2, None, TCrossNet)
TCrossNet.Save = new_instancemethod(_SnapTime.TCrossNet_Save, None, TCrossNet)
TCrossNet.LoadShM = new_instancemethod(_SnapTime.TCrossNet_LoadShM, None, TCrossNet)
TCrossNet.IsDirected = new_instancemethod(_SnapTime.TCrossNet_IsDirected, None, TCrossNet)
TCrossNet.AttrNameEI = new_instancemethod(_SnapTime.TCrossNet_AttrNameEI, None, TCrossNet)
TCrossNet.AttrValueEI = new_instancemethod(_SnapTime.TCrossNet_AttrValueEI, None, TCrossNet)
TCrossNet.IntAttrNameEI = new_instancemethod(_SnapTime.TCrossNet_IntAttrNameEI, None, TCrossNet)
TCrossNet.IntAttrValueEI = new_instancemethod(_SnapTime.TCrossNet_IntAttrValueEI, None, TCrossNet)
TCrossNet.StrAttrNameEI = new_instancemethod(_SnapTime.TCrossNet_StrAttrNameEI, None, TCrossNet)
TCrossNet.StrAttrValueEI = new_instancemethod(_SnapTime.TCrossNet_StrAttrValueEI, None, TCrossNet)
TCrossNet.FltAttrNameEI = new_instancemethod(_SnapTime.TCrossNet_FltAttrNameEI, None, TCrossNet)
TCrossNet.FltAttrValueEI = new_instancemethod(_SnapTime.TCrossNet_FltAttrValueEI, None, TCrossNet)
TCrossNet.AddIntAttrDatE = new_instancemethod(_SnapTime.TCrossNet_AddIntAttrDatE, None, TCrossNet)
TCrossNet.AddStrAttrDatE = new_instancemethod(_SnapTime.TCrossNet_AddStrAttrDatE, None, TCrossNet)
TCrossNet.AddFltAttrDatE = new_instancemethod(_SnapTime.TCrossNet_AddFltAttrDatE, None, TCrossNet)
TCrossNet.GetIntAttrDatE = new_instancemethod(_SnapTime.TCrossNet_GetIntAttrDatE, None, TCrossNet)
TCrossNet.GetStrAttrDatE = new_instancemethod(_SnapTime.TCrossNet_GetStrAttrDatE, None, TCrossNet)
TCrossNet.GetFltAttrDatE = new_instancemethod(_SnapTime.TCrossNet_GetFltAttrDatE, None, TCrossNet)
TCrossNet.GetEAIntI = new_instancemethod(_SnapTime.TCrossNet_GetEAIntI, None, TCrossNet)
TCrossNet.GetEAStrI = new_instancemethod(_SnapTime.TCrossNet_GetEAStrI, None, TCrossNet)
TCrossNet.GetEAFltI = new_instancemethod(_SnapTime.TCrossNet_GetEAFltI, None, TCrossNet)
TCrossNet.DelAttrDatE = new_instancemethod(_SnapTime.TCrossNet_DelAttrDatE, None, TCrossNet)
TCrossNet.AddIntAttrE = new_instancemethod(_SnapTime.TCrossNet_AddIntAttrE, None, TCrossNet)
TCrossNet.AddStrAttrE = new_instancemethod(_SnapTime.TCrossNet_AddStrAttrE, None, TCrossNet)
TCrossNet.AddFltAttrE = new_instancemethod(_SnapTime.TCrossNet_AddFltAttrE, None, TCrossNet)
TCrossNet.DelAttrE = new_instancemethod(_SnapTime.TCrossNet_DelAttrE, None, TCrossNet)
TCrossNet.DelAllAttrDatE = new_instancemethod(_SnapTime.TCrossNet_DelAllAttrDatE, None, TCrossNet)
TCrossNet.IsFltAttrE = new_instancemethod(_SnapTime.TCrossNet_IsFltAttrE, None, TCrossNet)
TCrossNet.IsIntAttrE = new_instancemethod(_SnapTime.TCrossNet_IsIntAttrE, None, TCrossNet)
TCrossNet.IsStrAttrE = new_instancemethod(_SnapTime.TCrossNet_IsStrAttrE, None, TCrossNet)
TCrossNet.IsAttrDeletedE = new_instancemethod(_SnapTime.TCrossNet_IsAttrDeletedE, None, TCrossNet)
TCrossNet.IsIntAttrDeletedE = new_instancemethod(_SnapTime.TCrossNet_IsIntAttrDeletedE, None, TCrossNet)
TCrossNet.IsStrAttrDeletedE = new_instancemethod(_SnapTime.TCrossNet_IsStrAttrDeletedE, None, TCrossNet)
TCrossNet.IsFltAttrDeletedE = new_instancemethod(_SnapTime.TCrossNet_IsFltAttrDeletedE, None, TCrossNet)
TCrossNet.EdgeAttrIsDeleted = new_instancemethod(_SnapTime.TCrossNet_EdgeAttrIsDeleted, None, TCrossNet)
TCrossNet.EdgeAttrIsIntDeleted = new_instancemethod(_SnapTime.TCrossNet_EdgeAttrIsIntDeleted, None, TCrossNet)
TCrossNet.EdgeAttrIsStrDeleted = new_instancemethod(_SnapTime.TCrossNet_EdgeAttrIsStrDeleted, None, TCrossNet)
TCrossNet.EdgeAttrIsFltDeleted = new_instancemethod(_SnapTime.TCrossNet_EdgeAttrIsFltDeleted, None, TCrossNet)
TCrossNet.GetEdgeAttrValue = new_instancemethod(_SnapTime.TCrossNet_GetEdgeAttrValue, None, TCrossNet)
TCrossNet.GetBipartiteGraph = new_instancemethod(_SnapTime.TCrossNet_GetBipartiteGraph, None, TCrossNet)
TCrossNet.BegEI = new_instancemethod(_SnapTime.TCrossNet_BegEI, None, TCrossNet)
TCrossNet.EndEI = new_instancemethod(_SnapTime.TCrossNet_EndEI, None, TCrossNet)
TCrossNet.BegEAIntI = new_instancemethod(_SnapTime.TCrossNet_BegEAIntI, None, TCrossNet)
TCrossNet.EndEAIntI = new_instancemethod(_SnapTime.TCrossNet_EndEAIntI, None, TCrossNet)
TCrossNet.BegEAStrI = new_instancemethod(_SnapTime.TCrossNet_BegEAStrI, None, TCrossNet)
TCrossNet.EndEAStrI = new_instancemethod(_SnapTime.TCrossNet_EndEAStrI, None, TCrossNet)
TCrossNet.BegEAFltI = new_instancemethod(_SnapTime.TCrossNet_BegEAFltI, None, TCrossNet)
TCrossNet.EndEAFltI = new_instancemethod(_SnapTime.TCrossNet_EndEAFltI, None, TCrossNet)
TCrossNet_swigregister = _SnapTime.TCrossNet_swigregister
TCrossNet_swigregister(TCrossNet)

def TCrossNet_CopyEdges(Src, Dst, ToCopyIds):
    """
    TCrossNet_CopyEdges(TCrossNet Src, TCrossNet Dst, TInt64V ToCopyIds)

    Parameters
    ----------
    Src: TCrossNet const &
    Dst: TCrossNet &
    ToCopyIds: TInt64V const &

    """
    return _SnapTime.TCrossNet_CopyEdges(Src, Dst, ToCopyIds)

class TMMNet(object):
    """Proxy of C++ TMMNet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CRef = _swig_property(_SnapTime.TMMNet_CRef_get)

    def __init__(self, *args):
        """
        __init__(TMMNet self) -> TMMNet
        __init__(TMMNet self, TMMNet OtherTMMNet) -> TMMNet

        Parameters
        ----------
        OtherTMMNet: TMMNet const &

        __init__(TMMNet self, TSIn SIn) -> TMMNet

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TMMNet_swiginit(self, _SnapTime.new_TMMNet(*args))

    def IsModeNet(self, MId):
        """
        IsModeNet(TMMNet self, int64 const & MId) -> bool

        Parameters
        ----------
        MId: int64 const &

        """
        return _SnapTime.TMMNet_IsModeNet(self, MId)


    def AddModeNet(self, ModeName):
        """
        AddModeNet(TMMNet self, TStr ModeName) -> int64

        Parameters
        ----------
        ModeName: TStr const &

        """
        return _SnapTime.TMMNet_AddModeNet(self, ModeName)


    def DelModeNet(self, *args):
        """
        DelModeNet(TMMNet self, TInt64 ModeId) -> int64

        Parameters
        ----------
        ModeId: TInt64 const &

        DelModeNet(TMMNet self, TStr ModeName) -> int64

        Parameters
        ----------
        ModeName: TStr const &

        """
        return _SnapTime.TMMNet_DelModeNet(self, *args)


    def IsCrossNet(self, CNId):
        """
        IsCrossNet(TMMNet self, int64 const & CNId) -> bool

        Parameters
        ----------
        CNId: int64 const &

        """
        return _SnapTime.TMMNet_IsCrossNet(self, CNId)


    def AddCrossNet(self, *args):
        """
        AddCrossNet(TMMNet self, TStr ModeName1, TStr ModeName2, TStr CrossNetName, bool isDir=True) -> int64

        Parameters
        ----------
        ModeName1: TStr const &
        ModeName2: TStr const &
        CrossNetName: TStr const &
        isDir: bool

        AddCrossNet(TMMNet self, TStr ModeName1, TStr ModeName2, TStr CrossNetName) -> int64

        Parameters
        ----------
        ModeName1: TStr const &
        ModeName2: TStr const &
        CrossNetName: TStr const &

        AddCrossNet(TMMNet self, TInt64 ModeId1, TInt64 ModeId2, TStr CrossNetName, bool isDir=True) -> int64

        Parameters
        ----------
        ModeId1: TInt64 const &
        ModeId2: TInt64 const &
        CrossNetName: TStr const &
        isDir: bool

        AddCrossNet(TMMNet self, TInt64 ModeId1, TInt64 ModeId2, TStr CrossNetName) -> int64

        Parameters
        ----------
        ModeId1: TInt64 const &
        ModeId2: TInt64 const &
        CrossNetName: TStr const &

        """
        return _SnapTime.TMMNet_AddCrossNet(self, *args)


    def DelCrossNet(self, *args):
        """
        DelCrossNet(TMMNet self, TInt64 CrossNetId) -> int64

        Parameters
        ----------
        CrossNetId: TInt64 const &

        DelCrossNet(TMMNet self, TStr CrossNet) -> int64

        Parameters
        ----------
        CrossNet: TStr const &

        """
        return _SnapTime.TMMNet_DelCrossNet(self, *args)


    def Save(self, SOut):
        """
        Save(TMMNet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TMMNet_Save(self, SOut)


    def Load(SIn):
        """
        Load(TSIn SIn) -> PMMNet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TMMNet_Load(SIn)

    Load = staticmethod(Load)

    def LoadShM(ShMIn):
        """
        LoadShM(TShMIn ShMIn) -> PMMNet

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TMMNet_LoadShM(ShMIn)

    LoadShM = staticmethod(LoadShM)

    def New():
        """New() -> PMMNet"""
        return _SnapTime.TMMNet_New()

    New = staticmethod(New)

    def ConvertToSparse(self):
        """
        ConvertToSparse(TMMNet self)

        Parameters
        ----------
        self: TMMNet *

        """
        return _SnapTime.TMMNet_ConvertToSparse(self)


    def GetModeId(self, ModeName):
        """
        GetModeId(TMMNet self, TStr ModeName) -> int64

        Parameters
        ----------
        ModeName: TStr const &

        """
        return _SnapTime.TMMNet_GetModeId(self, ModeName)


    def GetModeName(self, ModeId):
        """
        GetModeName(TMMNet self, TInt64 ModeId) -> TStr

        Parameters
        ----------
        ModeId: TInt64 const &

        """
        return _SnapTime.TMMNet_GetModeName(self, ModeId)


    def GetCrossId(self, CrossName):
        """
        GetCrossId(TMMNet self, TStr CrossName) -> int64

        Parameters
        ----------
        CrossName: TStr const &

        """
        return _SnapTime.TMMNet_GetCrossId(self, CrossName)


    def GetCrossName(self, CrossId):
        """
        GetCrossName(TMMNet self, TInt64 CrossId) -> TStr

        Parameters
        ----------
        CrossId: TInt64 const &

        """
        return _SnapTime.TMMNet_GetCrossName(self, CrossId)


    def GetModeNetByName(self, ModeName):
        """
        GetModeNetByName(TMMNet self, TStr ModeName) -> TModeNet

        Parameters
        ----------
        ModeName: TStr const &

        """
        return _SnapTime.TMMNet_GetModeNetByName(self, ModeName)


    def GetModeNetById(self, ModeId):
        """
        GetModeNetById(TMMNet self, TInt64 ModeId) -> TModeNet

        Parameters
        ----------
        ModeId: TInt64 const &

        """
        return _SnapTime.TMMNet_GetModeNetById(self, ModeId)


    def GetCrossNetByName(self, CrossName):
        """
        GetCrossNetByName(TMMNet self, TStr CrossName) -> TCrossNet

        Parameters
        ----------
        CrossName: TStr const &

        """
        return _SnapTime.TMMNet_GetCrossNetByName(self, CrossName)


    def GetCrossNetById(self, CrossId):
        """
        GetCrossNetById(TMMNet self, TInt64 CrossId) -> TCrossNet

        Parameters
        ----------
        CrossId: TInt64 const &

        """
        return _SnapTime.TMMNet_GetCrossNetById(self, CrossId)


    def GetModeIdV(self, ModeIds):
        """
        GetModeIdV(TMMNet self, TInt64V ModeIds)

        Parameters
        ----------
        ModeIds: TInt64V &

        """
        return _SnapTime.TMMNet_GetModeIdV(self, ModeIds)


    def GetCrossIdV(self, CrossIds):
        """
        GetCrossIdV(TMMNet self, TInt64V CrossIds)

        Parameters
        ----------
        CrossIds: TInt64V &

        """
        return _SnapTime.TMMNet_GetCrossIdV(self, CrossIds)


    def GetModeNets(self):
        """
        GetModeNets(TMMNet self) -> int64

        Parameters
        ----------
        self: TMMNet const *

        """
        return _SnapTime.TMMNet_GetModeNets(self)


    def GetCrossNets(self):
        """
        GetCrossNets(TMMNet self) -> int64

        Parameters
        ----------
        self: TMMNet const *

        """
        return _SnapTime.TMMNet_GetCrossNets(self)


    def GetMxModeId(self):
        """
        GetMxModeId(TMMNet self) -> int64

        Parameters
        ----------
        self: TMMNet const *

        """
        return _SnapTime.TMMNet_GetMxModeId(self)


    def GetMxCrossId(self):
        """
        GetMxCrossId(TMMNet self) -> int64

        Parameters
        ----------
        self: TMMNet const *

        """
        return _SnapTime.TMMNet_GetMxCrossId(self)


    def SplitCrossNetByStrAttr(self, *args):
        """
        SplitCrossNetByStrAttr(TMMNet self, int64 const & CrossId, TStr AttrName, TStr64V NewCrossNames) -> int64

        Parameters
        ----------
        CrossId: int64 const &
        AttrName: TStr const &
        NewCrossNames: TStr64V &

        SplitCrossNetByStrAttr(TMMNet self, TStr CrossName, TStr AttrName, TStr64V NewCrossNames) -> int64

        Parameters
        ----------
        CrossName: TStr const &
        AttrName: TStr const &
        NewCrossNames: TStr64V &

        """
        return _SnapTime.TMMNet_SplitCrossNetByStrAttr(self, *args)


    def GetSubgraphByCrossNet(self, CrossNetTypes):
        """
        GetSubgraphByCrossNet(TMMNet self, TStr64V CrossNetTypes) -> PMMNet

        Parameters
        ----------
        CrossNetTypes: TStr64V &

        """
        return _SnapTime.TMMNet_GetSubgraphByCrossNet(self, CrossNetTypes)


    def GetSubgraphByModeNet(self, ModeNetTypes):
        """
        GetSubgraphByModeNet(TMMNet self, TStr64V ModeNetTypes) -> PMMNet

        Parameters
        ----------
        ModeNetTypes: TStr64V &

        """
        return _SnapTime.TMMNet_GetSubgraphByModeNet(self, ModeNetTypes)


    def CopyModeWithoutNodes(Src, Dst, ModeId):
        """
        CopyModeWithoutNodes(PMMNet Src, PMMNet Dst, int64 const & ModeId) -> int64

        Parameters
        ----------
        Src: PMMNet const &
        Dst: PMMNet &
        ModeId: int64 const &

        """
        return _SnapTime.TMMNet_CopyModeWithoutNodes(Src, Dst, ModeId)

    CopyModeWithoutNodes = staticmethod(CopyModeWithoutNodes)

    def CopyCrossNetWithoutEdges(Src, Dst, CrossId):
        """
        CopyCrossNetWithoutEdges(PMMNet Src, PMMNet Dst, int64 const & CrossId) -> int64

        Parameters
        ----------
        Src: PMMNet const &
        Dst: PMMNet &
        CrossId: int64 const &

        """
        return _SnapTime.TMMNet_CopyCrossNetWithoutEdges(Src, Dst, CrossId)

    CopyCrossNetWithoutEdges = staticmethod(CopyCrossNetWithoutEdges)

    def GetSubgraphByMetapaths(self, StartModeId, StartNodeIds, Metapaths):
        """
        GetSubgraphByMetapaths(TMMNet self, int64 const & StartModeId, TInt64V StartNodeIds, TIntInt64VV Metapaths) -> PMMNet

        Parameters
        ----------
        StartModeId: int64 const &
        StartNodeIds: TInt64V const &
        Metapaths: TVec< TInt64V,int64 > const &

        """
        return _SnapTime.TMMNet_GetSubgraphByMetapaths(self, StartModeId, StartNodeIds, Metapaths)


    def GetSubgraphByMetapath(self, StartModeId, StartNodeIds, Metapath):
        """
        GetSubgraphByMetapath(TMMNet self, int64 const & StartModeId, TInt64V StartNodeIds, TInt64V Metapath) -> PMMNet

        Parameters
        ----------
        StartModeId: int64 const &
        StartNodeIds: TInt64V const &
        Metapath: TInt64V const &

        """
        return _SnapTime.TMMNet_GetSubgraphByMetapath(self, StartModeId, StartNodeIds, Metapath)


    def ToNetwork(self, CrossNetTypes, NodeAttrMap, EdgeAttrMap):
        """
        ToNetwork(TMMNet self, TInt64V CrossNetTypes, TIntStrStrTr64V & NodeAttrMap, TVec< TTriple< TInt64,TStr,TStr >,int64 > & EdgeAttrMap) -> PNEANet

        Parameters
        ----------
        CrossNetTypes: TInt64V &
        NodeAttrMap: TIntStrStrTr64V &
        EdgeAttrMap: TVec< TTriple< TInt64,TStr,TStr >,int64 > &

        """
        return _SnapTime.TMMNet_ToNetwork(self, CrossNetTypes, NodeAttrMap, EdgeAttrMap)


    def ToNetwork2(self, CrossNetTypes, NodeAttrMap, EdgeAttrMap):
        """
        ToNetwork2(TMMNet self, TInt64V CrossNetTypes, TIntStrPr64VH & NodeAttrMap, THash< TInt64,TVec< TPair< TStr,TStr >,int64 >,int64 > & EdgeAttrMap) -> PNEANet

        Parameters
        ----------
        CrossNetTypes: TInt64V &
        NodeAttrMap: TIntStrPr64VH &
        EdgeAttrMap: THash< TInt64,TVec< TPair< TStr,TStr >,int64 >,int64 > &

        """
        return _SnapTime.TMMNet_ToNetwork2(self, CrossNetTypes, NodeAttrMap, EdgeAttrMap)


    def GetMetagraph(self):
        """
        GetMetagraph(TMMNet self) -> PNEANet

        Parameters
        ----------
        self: TMMNet const *

        """
        return _SnapTime.TMMNet_GetMetagraph(self)


    def GetMetapaths(self, StartModeId, EndModeId, MaxPathLen, Metapaths):
        """
        GetMetapaths(TMMNet self, int64 const & StartModeId, int64 const & EndModeId, int64 const & MaxPathLen, TIntInt64VV Metapaths)

        Parameters
        ----------
        StartModeId: int64 const &
        EndModeId: int64 const &
        MaxPathLen: int64 const &
        Metapaths: TVec< TInt64V,int64 > &

        """
        return _SnapTime.TMMNet_GetMetapaths(self, StartModeId, EndModeId, MaxPathLen, Metapaths)


    def ToNetworkMP(self, CrossNetNames):
        """
        ToNetworkMP(TMMNet self, TStr64V CrossNetNames) -> PNEANetMP

        Parameters
        ----------
        CrossNetNames: TStr64V &

        """
        return _SnapTime.TMMNet_ToNetworkMP(self, CrossNetNames)


    def BegModeNetI(self, *args):
        """
        BegModeNetI(TMMNet self) -> TMMNet::TModeNetI
        BegModeNetI(TMMNet self) -> TMMNetModeNetI

        Parameters
        ----------
        self: TMMNet *

        """
        return _SnapTime.TMMNet_BegModeNetI(self, *args)


    def EndModeNetI(self, *args):
        """
        EndModeNetI(TMMNet self) -> TMMNet::TModeNetI
        EndModeNetI(TMMNet self) -> TMMNetModeNetI

        Parameters
        ----------
        self: TMMNet *

        """
        return _SnapTime.TMMNet_EndModeNetI(self, *args)


    def GetModeNetI(self, *args):
        """
        GetModeNetI(TMMNet self, int64 const & Id) -> TMMNet::TModeNetI

        Parameters
        ----------
        Id: int64 const &

        GetModeNetI(TMMNet self, int64 const & NId) -> TMMNetModeNetI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TMMNet_GetModeNetI(self, *args)


    def BegCrossNetI(self, *args):
        """
        BegCrossNetI(TMMNet self) -> TMMNet::TCrossNetI
        BegCrossNetI(TMMNet self) -> TMMNetCrossNetI

        Parameters
        ----------
        self: TMMNet *

        """
        return _SnapTime.TMMNet_BegCrossNetI(self, *args)


    def EndCrossNetI(self, *args):
        """
        EndCrossNetI(TMMNet self) -> TMMNet::TCrossNetI
        EndCrossNetI(TMMNet self) -> TMMNetCrossNetI

        Parameters
        ----------
        self: TMMNet *

        """
        return _SnapTime.TMMNet_EndCrossNetI(self, *args)


    def GetCrossNetI(self, *args):
        """
        GetCrossNetI(TMMNet self, int64 const & Id) -> TMMNet::TCrossNetI

        Parameters
        ----------
        Id: int64 const &

        GetCrossNetI(TMMNet self, int64 const & CId) -> TMMNetCrossNetI

        Parameters
        ----------
        CId: int64 const &

        """
        return _SnapTime.TMMNet_GetCrossNetI(self, *args)

    __swig_destroy__ = _SnapTime.delete_TMMNet
TMMNet.IsModeNet = new_instancemethod(_SnapTime.TMMNet_IsModeNet, None, TMMNet)
TMMNet.AddModeNet = new_instancemethod(_SnapTime.TMMNet_AddModeNet, None, TMMNet)
TMMNet.DelModeNet = new_instancemethod(_SnapTime.TMMNet_DelModeNet, None, TMMNet)
TMMNet.IsCrossNet = new_instancemethod(_SnapTime.TMMNet_IsCrossNet, None, TMMNet)
TMMNet.AddCrossNet = new_instancemethod(_SnapTime.TMMNet_AddCrossNet, None, TMMNet)
TMMNet.DelCrossNet = new_instancemethod(_SnapTime.TMMNet_DelCrossNet, None, TMMNet)
TMMNet.Save = new_instancemethod(_SnapTime.TMMNet_Save, None, TMMNet)
TMMNet.ConvertToSparse = new_instancemethod(_SnapTime.TMMNet_ConvertToSparse, None, TMMNet)
TMMNet.GetModeId = new_instancemethod(_SnapTime.TMMNet_GetModeId, None, TMMNet)
TMMNet.GetModeName = new_instancemethod(_SnapTime.TMMNet_GetModeName, None, TMMNet)
TMMNet.GetCrossId = new_instancemethod(_SnapTime.TMMNet_GetCrossId, None, TMMNet)
TMMNet.GetCrossName = new_instancemethod(_SnapTime.TMMNet_GetCrossName, None, TMMNet)
TMMNet.GetModeNetByName = new_instancemethod(_SnapTime.TMMNet_GetModeNetByName, None, TMMNet)
TMMNet.GetModeNetById = new_instancemethod(_SnapTime.TMMNet_GetModeNetById, None, TMMNet)
TMMNet.GetCrossNetByName = new_instancemethod(_SnapTime.TMMNet_GetCrossNetByName, None, TMMNet)
TMMNet.GetCrossNetById = new_instancemethod(_SnapTime.TMMNet_GetCrossNetById, None, TMMNet)
TMMNet.GetModeIdV = new_instancemethod(_SnapTime.TMMNet_GetModeIdV, None, TMMNet)
TMMNet.GetCrossIdV = new_instancemethod(_SnapTime.TMMNet_GetCrossIdV, None, TMMNet)
TMMNet.GetModeNets = new_instancemethod(_SnapTime.TMMNet_GetModeNets, None, TMMNet)
TMMNet.GetCrossNets = new_instancemethod(_SnapTime.TMMNet_GetCrossNets, None, TMMNet)
TMMNet.GetMxModeId = new_instancemethod(_SnapTime.TMMNet_GetMxModeId, None, TMMNet)
TMMNet.GetMxCrossId = new_instancemethod(_SnapTime.TMMNet_GetMxCrossId, None, TMMNet)
TMMNet.SplitCrossNetByStrAttr = new_instancemethod(_SnapTime.TMMNet_SplitCrossNetByStrAttr, None, TMMNet)
TMMNet.GetSubgraphByCrossNet = new_instancemethod(_SnapTime.TMMNet_GetSubgraphByCrossNet, None, TMMNet)
TMMNet.GetSubgraphByModeNet = new_instancemethod(_SnapTime.TMMNet_GetSubgraphByModeNet, None, TMMNet)
TMMNet.GetSubgraphByMetapaths = new_instancemethod(_SnapTime.TMMNet_GetSubgraphByMetapaths, None, TMMNet)
TMMNet.GetSubgraphByMetapath = new_instancemethod(_SnapTime.TMMNet_GetSubgraphByMetapath, None, TMMNet)
TMMNet.ToNetwork = new_instancemethod(_SnapTime.TMMNet_ToNetwork, None, TMMNet)
TMMNet.ToNetwork2 = new_instancemethod(_SnapTime.TMMNet_ToNetwork2, None, TMMNet)
TMMNet.GetMetagraph = new_instancemethod(_SnapTime.TMMNet_GetMetagraph, None, TMMNet)
TMMNet.GetMetapaths = new_instancemethod(_SnapTime.TMMNet_GetMetapaths, None, TMMNet)
TMMNet.ToNetworkMP = new_instancemethod(_SnapTime.TMMNet_ToNetworkMP, None, TMMNet)
TMMNet.BegModeNetI = new_instancemethod(_SnapTime.TMMNet_BegModeNetI, None, TMMNet)
TMMNet.EndModeNetI = new_instancemethod(_SnapTime.TMMNet_EndModeNetI, None, TMMNet)
TMMNet.GetModeNetI = new_instancemethod(_SnapTime.TMMNet_GetModeNetI, None, TMMNet)
TMMNet.BegCrossNetI = new_instancemethod(_SnapTime.TMMNet_BegCrossNetI, None, TMMNet)
TMMNet.EndCrossNetI = new_instancemethod(_SnapTime.TMMNet_EndCrossNetI, None, TMMNet)
TMMNet.GetCrossNetI = new_instancemethod(_SnapTime.TMMNet_GetCrossNetI, None, TMMNet)
TMMNet_swigregister = _SnapTime.TMMNet_swigregister
TMMNet_swigregister(TMMNet)

def TMMNet_Load(SIn):
    """
    TMMNet_Load(TSIn SIn) -> PMMNet

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TMMNet_Load(SIn)

def TMMNet_LoadShM(ShMIn):
    """
    TMMNet_LoadShM(TShMIn ShMIn) -> PMMNet

    Parameters
    ----------
    ShMIn: TShMIn &

    """
    return _SnapTime.TMMNet_LoadShM(ShMIn)

def TMMNet_New():
    """TMMNet_New() -> PMMNet"""
    return _SnapTime.TMMNet_New()

def TMMNet_CopyModeWithoutNodes(Src, Dst, ModeId):
    """
    TMMNet_CopyModeWithoutNodes(PMMNet Src, PMMNet Dst, int64 const & ModeId) -> int64

    Parameters
    ----------
    Src: PMMNet const &
    Dst: PMMNet &
    ModeId: int64 const &

    """
    return _SnapTime.TMMNet_CopyModeWithoutNodes(Src, Dst, ModeId)

def TMMNet_CopyCrossNetWithoutEdges(Src, Dst, CrossId):
    """
    TMMNet_CopyCrossNetWithoutEdges(PMMNet Src, PMMNet Dst, int64 const & CrossId) -> int64

    Parameters
    ----------
    Src: PMMNet const &
    Dst: PMMNet &
    CrossId: int64 const &

    """
    return _SnapTime.TMMNet_CopyCrossNetWithoutEdges(Src, Dst, CrossId)

class TNEANetMP(object):
    """Proxy of C++ TNEANetMP class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNEANetMP self) -> TNEANetMP
        __init__(TNEANetMP self, int64 const & Nodes, int64 const & Edges) -> TNEANetMP

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        __init__(TNEANetMP self, TNEANetMP Graph) -> TNEANetMP

        Parameters
        ----------
        Graph: TNEANetMP const &

        __init__(TNEANetMP self, TSIn SIn) -> TNEANetMP

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TNEANetMP_swiginit(self, _SnapTime.new_TNEANetMP(*args))

    def Save(self, SOut):
        """
        Save(TNEANetMP self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TNEANetMP_Save(self, SOut)


    def New(*args):
        """
        New() -> PNEANetMP
        New(int64 const & Nodes, int64 const & Edges) -> PNEANetMP

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TNEANetMP_New(*args)

    New = staticmethod(New)

    def Load(SIn):
        """
        Load(TSIn SIn) -> PNEANetMP

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TNEANetMP_Load(SIn)

    Load = staticmethod(Load)

    def HasFlag(self, Flag):
        """
        HasFlag(TNEANetMP self, TGraphFlag const & Flag) -> bool

        Parameters
        ----------
        Flag: TGraphFlag const &

        """
        return _SnapTime.TNEANetMP_HasFlag(self, Flag)


    def GetNodes(self):
        """
        GetNodes(TNEANetMP self) -> int64

        Parameters
        ----------
        self: TNEANetMP const *

        """
        return _SnapTime.TNEANetMP_GetNodes(self)


    def SetNodes(self, Length):
        """
        SetNodes(TNEANetMP self, int64 const & Length)

        Parameters
        ----------
        Length: int64 const &

        """
        return _SnapTime.TNEANetMP_SetNodes(self, Length)


    def AddNode(self, *args):
        """
        AddNode(TNEANetMP self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(TNEANetMP self) -> int64
        AddNode(TNEANetMP self, TNEANetMP::TNodeI const & NodeId) -> int64

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &

        """
        return _SnapTime.TNEANetMP_AddNode(self, *args)


    def AddNodeWithEdges(self, NId, InEIdV, OutEIdV):
        """
        AddNodeWithEdges(TNEANetMP self, TInt64 NId, TInt64V InEIdV, TInt64V OutEIdV)

        Parameters
        ----------
        NId: TInt64 const &
        InEIdV: TInt64V &
        OutEIdV: TInt64V &

        """
        return _SnapTime.TNEANetMP_AddNodeWithEdges(self, NId, InEIdV, OutEIdV)


    def IsNode(self, NId):
        """
        IsNode(TNEANetMP self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNEANetMP_IsNode(self, NId)


    def BegNAIntI(self, attr):
        """
        BegNAIntI(TNEANetMP self, TStr attr) -> TNEANetMP::TAIntI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_BegNAIntI(self, attr)


    def EndNAIntI(self, attr):
        """
        EndNAIntI(TNEANetMP self, TStr attr) -> TNEANetMP::TAIntI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_EndNAIntI(self, attr)


    def GetNAIntI(self, attr, NId):
        """
        GetNAIntI(TNEANetMP self, TStr attr, int64 const & NId) -> TNEANetMP::TAIntI

        Parameters
        ----------
        attr: TStr const &
        NId: int64 const &

        """
        return _SnapTime.TNEANetMP_GetNAIntI(self, attr, NId)


    def BegNAStrI(self, attr):
        """
        BegNAStrI(TNEANetMP self, TStr attr) -> TNEANetMP::TAStrI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_BegNAStrI(self, attr)


    def EndNAStrI(self, attr):
        """
        EndNAStrI(TNEANetMP self, TStr attr) -> TNEANetMP::TAStrI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_EndNAStrI(self, attr)


    def GetNAStrI(self, attr, NId):
        """
        GetNAStrI(TNEANetMP self, TStr attr, int64 const & NId) -> TNEANetMP::TAStrI

        Parameters
        ----------
        attr: TStr const &
        NId: int64 const &

        """
        return _SnapTime.TNEANetMP_GetNAStrI(self, attr, NId)


    def BegNAFltI(self, attr):
        """
        BegNAFltI(TNEANetMP self, TStr attr) -> TNEANetMP::TAFltI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_BegNAFltI(self, attr)


    def EndNAFltI(self, attr):
        """
        EndNAFltI(TNEANetMP self, TStr attr) -> TNEANetMP::TAFltI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_EndNAFltI(self, attr)


    def GetNAFltI(self, attr, NId):
        """
        GetNAFltI(TNEANetMP self, TStr attr, int64 const & NId) -> TNEANetMP::TAFltI

        Parameters
        ----------
        attr: TStr const &
        NId: int64 const &

        """
        return _SnapTime.TNEANetMP_GetNAFltI(self, attr, NId)


    def AttrNameNI(self, *args):
        """
        AttrNameNI(TNEANetMP self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        AttrNameNI(TNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANetMP_AttrNameNI(self, *args)


    def AttrValueNI(self, *args):
        """
        AttrValueNI(TNEANetMP self, TInt64 NId, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TStr64V &

        AttrValueNI(TNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.TNEANetMP_AttrValueNI(self, *args)


    def IntAttrNameNI(self, *args):
        """
        IntAttrNameNI(TNEANetMP self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        IntAttrNameNI(TNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANetMP_IntAttrNameNI(self, *args)


    def IntAttrValueNI(self, *args):
        """
        IntAttrValueNI(TNEANetMP self, TInt64 NId, TInt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TInt64V &

        IntAttrValueNI(TNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TInt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TInt64V &

        """
        return _SnapTime.TNEANetMP_IntAttrValueNI(self, *args)


    def StrAttrNameNI(self, *args):
        """
        StrAttrNameNI(TNEANetMP self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        StrAttrNameNI(TNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANetMP_StrAttrNameNI(self, *args)


    def StrAttrValueNI(self, *args):
        """
        StrAttrValueNI(TNEANetMP self, TInt64 NId, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TStr64V &

        StrAttrValueNI(TNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.TNEANetMP_StrAttrValueNI(self, *args)


    def FltAttrNameNI(self, *args):
        """
        FltAttrNameNI(TNEANetMP self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        FltAttrNameNI(TNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANetMP_FltAttrNameNI(self, *args)


    def FltAttrValueNI(self, *args):
        """
        FltAttrValueNI(TNEANetMP self, TInt64 NId, TFlt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TFlt64V &

        FltAttrValueNI(TNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TFlt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TFlt64V &

        """
        return _SnapTime.TNEANetMP_FltAttrValueNI(self, *args)


    def AttrNameEI(self, *args):
        """
        AttrNameEI(TNEANetMP self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        AttrNameEI(TNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANetMP_AttrNameEI(self, *args)


    def AttrValueEI(self, *args):
        """
        AttrValueEI(TNEANetMP self, TInt64 EId, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TStr64V &

        AttrValueEI(TNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.TNEANetMP_AttrValueEI(self, *args)


    def IntAttrNameEI(self, *args):
        """
        IntAttrNameEI(TNEANetMP self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        IntAttrNameEI(TNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANetMP_IntAttrNameEI(self, *args)


    def IntAttrValueEI(self, *args):
        """
        IntAttrValueEI(TNEANetMP self, TInt64 EId, TInt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TInt64V &

        IntAttrValueEI(TNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TInt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TInt64V &

        """
        return _SnapTime.TNEANetMP_IntAttrValueEI(self, *args)


    def StrAttrNameEI(self, *args):
        """
        StrAttrNameEI(TNEANetMP self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        StrAttrNameEI(TNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANetMP_StrAttrNameEI(self, *args)


    def StrAttrValueEI(self, *args):
        """
        StrAttrValueEI(TNEANetMP self, TInt64 EId, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TStr64V &

        StrAttrValueEI(TNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.TNEANetMP_StrAttrValueEI(self, *args)


    def FltAttrNameEI(self, *args):
        """
        FltAttrNameEI(TNEANetMP self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        FltAttrNameEI(TNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.TNEANetMP_FltAttrNameEI(self, *args)


    def FltAttrValueEI(self, *args):
        """
        FltAttrValueEI(TNEANetMP self, TInt64 EId, TFlt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TFlt64V &

        FltAttrValueEI(TNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TFlt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TFlt64V &

        """
        return _SnapTime.TNEANetMP_FltAttrValueEI(self, *args)


    def BegEAIntI(self, attr):
        """
        BegEAIntI(TNEANetMP self, TStr attr) -> TNEANetMP::TAIntI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_BegEAIntI(self, attr)


    def EndEAIntI(self, attr):
        """
        EndEAIntI(TNEANetMP self, TStr attr) -> TNEANetMP::TAIntI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_EndEAIntI(self, attr)


    def GetEAIntI(self, attr, EId):
        """
        GetEAIntI(TNEANetMP self, TStr attr, int64 const & EId) -> TNEANetMP::TAIntI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.TNEANetMP_GetEAIntI(self, attr, EId)


    def BegEAStrI(self, attr):
        """
        BegEAStrI(TNEANetMP self, TStr attr) -> TNEANetMP::TAStrI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_BegEAStrI(self, attr)


    def EndEAStrI(self, attr):
        """
        EndEAStrI(TNEANetMP self, TStr attr) -> TNEANetMP::TAStrI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_EndEAStrI(self, attr)


    def GetEAStrI(self, attr, EId):
        """
        GetEAStrI(TNEANetMP self, TStr attr, int64 const & EId) -> TNEANetMP::TAStrI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.TNEANetMP_GetEAStrI(self, attr, EId)


    def BegEAFltI(self, attr):
        """
        BegEAFltI(TNEANetMP self, TStr attr) -> TNEANetMP::TAFltI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_BegEAFltI(self, attr)


    def EndEAFltI(self, attr):
        """
        EndEAFltI(TNEANetMP self, TStr attr) -> TNEANetMP::TAFltI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_EndEAFltI(self, attr)


    def GetEAFltI(self, attr, EId):
        """
        GetEAFltI(TNEANetMP self, TStr attr, int64 const & EId) -> TNEANetMP::TAFltI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.TNEANetMP_GetEAFltI(self, attr, EId)


    def GetMxNId(self):
        """
        GetMxNId(TNEANetMP self) -> int64

        Parameters
        ----------
        self: TNEANetMP const *

        """
        return _SnapTime.TNEANetMP_GetMxNId(self)


    def GetMxEId(self):
        """
        GetMxEId(TNEANetMP self) -> int64

        Parameters
        ----------
        self: TNEANetMP const *

        """
        return _SnapTime.TNEANetMP_GetMxEId(self)


    def Reserved(self):
        """
        Reserved(TNEANetMP self) -> int64

        Parameters
        ----------
        self: TNEANetMP const *

        """
        return _SnapTime.TNEANetMP_Reserved(self)


    def ReservedE(self):
        """
        ReservedE(TNEANetMP self) -> int64

        Parameters
        ----------
        self: TNEANetMP const *

        """
        return _SnapTime.TNEANetMP_ReservedE(self)


    def GetEdges(self):
        """
        GetEdges(TNEANetMP self) -> int64

        Parameters
        ----------
        self: TNEANetMP const *

        """
        return _SnapTime.TNEANetMP_GetEdges(self)


    def SetEdges(self, Length):
        """
        SetEdges(TNEANetMP self, int64 const & Length)

        Parameters
        ----------
        Length: int64 const &

        """
        return _SnapTime.TNEANetMP_SetEdges(self, Length)


    def SetMxEId(self, Id):
        """
        SetMxEId(TNEANetMP self, TInt64 Id)

        Parameters
        ----------
        Id: TInt64 const &

        """
        return _SnapTime.TNEANetMP_SetMxEId(self, Id)


    def AddEdge(self, *args):
        """
        AddEdge(TNEANetMP self, int64 const & SrcNId, int64 const & DstNId, int64 EId=-1) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        EId: int64

        AddEdge(TNEANetMP self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        AddEdge(TNEANetMP self, TNEANetMP::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TNEANetMP::TEdgeI const &

        """
        return _SnapTime.TNEANetMP_AddEdge(self, *args)


    def AddEdgeUnchecked(self, EId, SrcNId, DstNId):
        """
        AddEdgeUnchecked(TNEANetMP self, TInt64 EId, int64 const SrcNId, int64 const DstNId)

        Parameters
        ----------
        EId: TInt64 const &
        SrcNId: int64 const
        DstNId: int64 const

        """
        return _SnapTime.TNEANetMP_AddEdgeUnchecked(self, EId, SrcNId, DstNId)


    def IsEdge(self, *args):
        """
        IsEdge(TNEANetMP self, int64 const & EId) -> bool

        Parameters
        ----------
        EId: int64 const &

        IsEdge(TNEANetMP self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        IsEdge(TNEANetMP self, int64 const & SrcNId, int64 const & DstNId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        IsEdge(TNEANetMP self, int64 const & SrcNId, int64 const & DstNId, int64 & EId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        EId: int64 &
        IsDir: bool const &

        IsEdge(TNEANetMP self, int64 const & SrcNId, int64 const & DstNId, int64 & EId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        EId: int64 &

        """
        return _SnapTime.TNEANetMP_IsEdge(self, *args)


    def GetEId(self, SrcNId, DstNId):
        """
        GetEId(TNEANetMP self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNEANetMP_GetEId(self, SrcNId, DstNId)


    def GetEI(self, *args):
        """
        GetEI(TNEANetMP self, int64 const & EId) -> TNEANetMP::TEdgeI

        Parameters
        ----------
        EId: int64 const &

        GetEI(TNEANetMP self, int64 const & SrcNId, int64 const & DstNId) -> TNEANetMP::TEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.TNEANetMP_GetEI(self, *args)


    def GetRndNId(self, *args):
        """
        GetRndNId(TNEANetMP self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(TNEANetMP self) -> int64

        Parameters
        ----------
        self: TNEANetMP *

        """
        return _SnapTime.TNEANetMP_GetRndNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(TNEANetMP self, TRnd Rnd) -> TNEANetMP::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(TNEANetMP self) -> TNEANetMP::TNodeI

        Parameters
        ----------
        self: TNEANetMP *

        """
        return _SnapTime.TNEANetMP_GetRndNI(self, *args)


    def GetRndEId(self, *args):
        """
        GetRndEId(TNEANetMP self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndEId(TNEANetMP self) -> int64

        Parameters
        ----------
        self: TNEANetMP *

        """
        return _SnapTime.TNEANetMP_GetRndEId(self, *args)


    def GetRndEI(self, *args):
        """
        GetRndEI(TNEANetMP self, TRnd Rnd) -> TNEANetMP::TEdgeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndEI(TNEANetMP self) -> TNEANetMP::TEdgeI

        Parameters
        ----------
        self: TNEANetMP *

        """
        return _SnapTime.TNEANetMP_GetRndEI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(TNEANetMP self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.TNEANetMP_GetNIdV(self, NIdV)


    def GetEIdV(self, EIdV):
        """
        GetEIdV(TNEANetMP self, TInt64V EIdV)

        Parameters
        ----------
        EIdV: TInt64V &

        """
        return _SnapTime.TNEANetMP_GetEIdV(self, EIdV)


    def Empty(self):
        """
        Empty(TNEANetMP self) -> bool

        Parameters
        ----------
        self: TNEANetMP const *

        """
        return _SnapTime.TNEANetMP_Empty(self)


    def Clr(self):
        """
        Clr(TNEANetMP self)

        Parameters
        ----------
        self: TNEANetMP *

        """
        return _SnapTime.TNEANetMP_Clr(self)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(TNEANetMP self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.TNEANetMP_Reserve(self, Nodes, Edges)


    def ReserveAttr(self, NIntAttr, NFltAttr, NStrAttr, EIntAttr, EFltAttr, EStrAttr):
        """
        ReserveAttr(TNEANetMP self, int64 const & NIntAttr, int64 const & NFltAttr, int64 const & NStrAttr, int64 const & EIntAttr, int64 const & EFltAttr, int64 const & EStrAttr)

        Parameters
        ----------
        NIntAttr: int64 const &
        NFltAttr: int64 const &
        NStrAttr: int64 const &
        EIntAttr: int64 const &
        EFltAttr: int64 const &
        EStrAttr: int64 const &

        """
        return _SnapTime.TNEANetMP_ReserveAttr(self, NIntAttr, NFltAttr, NStrAttr, EIntAttr, EFltAttr, EStrAttr)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(TNEANetMP self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(TNEANetMP self)

        Parameters
        ----------
        self: TNEANetMP *

        """
        return _SnapTime.TNEANetMP_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(TNEANetMP self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(TNEANetMP self) -> bool

        Parameters
        ----------
        self: TNEANetMP const *

        """
        return _SnapTime.TNEANetMP_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(TNEANetMP self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(TNEANetMP self)

        Parameters
        ----------
        self: TNEANetMP const *

        """
        return _SnapTime.TNEANetMP_Dump(self, *args)


    def AddIntAttrDatN(self, *args):
        """
        AddIntAttrDatN(TNEANetMP self, TNEANetMP::TNodeI const & NodeId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        value: TInt64 const &
        attr: TStr const &

        AddIntAttrDatN(TNEANetMP self, int64 const & NId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TInt64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_AddIntAttrDatN(self, *args)


    def AddStrAttrDatN(self, *args):
        """
        AddStrAttrDatN(TNEANetMP self, TNEANetMP::TNodeI const & NodeId, TStr value, TStr attr) -> int64

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        value: TStr const &
        attr: TStr const &

        AddStrAttrDatN(TNEANetMP self, int64 const & NId, TStr value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TStr const &
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_AddStrAttrDatN(self, *args)


    def AddFltAttrDatN(self, *args):
        """
        AddFltAttrDatN(TNEANetMP self, TNEANetMP::TNodeI const & NodeId, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        value: TFlt const &
        attr: TStr const &

        AddFltAttrDatN(TNEANetMP self, int64 const & NId, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TFlt const &
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_AddFltAttrDatN(self, *args)


    def AddIntAttrDatE(self, *args):
        """
        AddIntAttrDatE(TNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        value: TInt64 const &
        attr: TStr const &

        AddIntAttrDatE(TNEANetMP self, int64 const & EId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TInt64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_AddIntAttrDatE(self, *args)


    def AddStrAttrDatE(self, *args):
        """
        AddStrAttrDatE(TNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, TStr value, TStr attr) -> int64

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        value: TStr const &
        attr: TStr const &

        AddStrAttrDatE(TNEANetMP self, int64 const & EId, TStr value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TStr const &
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_AddStrAttrDatE(self, *args)


    def AddFltAttrDatE(self, *args):
        """
        AddFltAttrDatE(TNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        value: TFlt const &
        attr: TStr const &

        AddFltAttrDatE(TNEANetMP self, int64 const & EId, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TFlt const &
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_AddFltAttrDatE(self, *args)


    def GetIntAttrDatN(self, *args):
        """
        GetIntAttrDatN(TNEANetMP self, TNEANetMP::TNodeI const & NodeId, TStr attr) -> TInt64

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        attr: TStr const &

        GetIntAttrDatN(TNEANetMP self, int64 const & NId, TStr attr) -> TInt64

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_GetIntAttrDatN(self, *args)


    def GetStrAttrDatN(self, *args):
        """
        GetStrAttrDatN(TNEANetMP self, TNEANetMP::TNodeI const & NodeId, TStr attr) -> TStr

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        attr: TStr const &

        GetStrAttrDatN(TNEANetMP self, int64 const & NId, TStr attr) -> TStr

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_GetStrAttrDatN(self, *args)


    def GetFltAttrDatN(self, *args):
        """
        GetFltAttrDatN(TNEANetMP self, TNEANetMP::TNodeI const & NodeId, TStr attr) -> TFlt

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        attr: TStr const &

        GetFltAttrDatN(TNEANetMP self, int64 const & NId, TStr attr) -> TFlt

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_GetFltAttrDatN(self, *args)


    def GetIntAttrIndN(self, attr):
        """
        GetIntAttrIndN(TNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_GetIntAttrIndN(self, attr)


    def GetIntAttrIndDatN(self, *args):
        """
        GetIntAttrIndDatN(TNEANetMP self, TNEANetMP::TNodeI const & NodeId, int64 const & index) -> TInt64

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        index: int64 const &

        GetIntAttrIndDatN(TNEANetMP self, int64 const & NId, int64 const & index) -> TInt64

        Parameters
        ----------
        NId: int64 const &
        index: int64 const &

        """
        return _SnapTime.TNEANetMP_GetIntAttrIndDatN(self, *args)


    def GetIntAttrDatE(self, *args):
        """
        GetIntAttrDatE(TNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, TStr attr) -> TInt64

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        attr: TStr const &

        GetIntAttrDatE(TNEANetMP self, int64 const & EId, TStr attr) -> TInt64

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_GetIntAttrDatE(self, *args)


    def GetStrAttrDatE(self, *args):
        """
        GetStrAttrDatE(TNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, TStr attr) -> TStr

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        attr: TStr const &

        GetStrAttrDatE(TNEANetMP self, int64 const & EId, TStr attr) -> TStr

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_GetStrAttrDatE(self, *args)


    def GetFltAttrDatE(self, *args):
        """
        GetFltAttrDatE(TNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, TStr attr) -> TFlt

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        attr: TStr const &

        GetFltAttrDatE(TNEANetMP self, int64 const & EId, TStr attr) -> TFlt

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_GetFltAttrDatE(self, *args)


    def GetIntAttrIndE(self, attr):
        """
        GetIntAttrIndE(TNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_GetIntAttrIndE(self, attr)


    def GetIntAttrIndDatE(self, *args):
        """
        GetIntAttrIndDatE(TNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, int64 const & index) -> TInt64

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        index: int64 const &

        GetIntAttrIndDatE(TNEANetMP self, int64 const & EId, int64 const & index) -> TInt64

        Parameters
        ----------
        EId: int64 const &
        index: int64 const &

        """
        return _SnapTime.TNEANetMP_GetIntAttrIndDatE(self, *args)


    def DelAttrDatN(self, *args):
        """
        DelAttrDatN(TNEANetMP self, TNEANetMP::TNodeI const & NodeId, TStr attr) -> int64

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        attr: TStr const &

        DelAttrDatN(TNEANetMP self, int64 const & NId, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_DelAttrDatN(self, *args)


    def DelAttrDatE(self, *args):
        """
        DelAttrDatE(TNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, TStr attr) -> int64

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        attr: TStr const &

        DelAttrDatE(TNEANetMP self, int64 const & EId, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_DelAttrDatE(self, *args)


    def AddIntAttrN(self, *args):
        """
        AddIntAttrN(TNEANetMP self, TStr attr, TInt64 defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TInt64

        AddIntAttrN(TNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_AddIntAttrN(self, *args)


    def AddStrAttrN(self, *args):
        """
        AddStrAttrN(TNEANetMP self, TStr attr, TStr defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TStr

        AddStrAttrN(TNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_AddStrAttrN(self, *args)


    def AddFltAttrN(self, *args):
        """
        AddFltAttrN(TNEANetMP self, TStr attr, TFlt defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TFlt

        AddFltAttrN(TNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_AddFltAttrN(self, *args)


    def AddIntAttrE(self, *args):
        """
        AddIntAttrE(TNEANetMP self, TStr attr, TInt64 defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TInt64

        AddIntAttrE(TNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_AddIntAttrE(self, *args)


    def AddStrAttrE(self, *args):
        """
        AddStrAttrE(TNEANetMP self, TStr attr, TStr defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TStr

        AddStrAttrE(TNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_AddStrAttrE(self, *args)


    def AddFltAttrE(self, *args):
        """
        AddFltAttrE(TNEANetMP self, TStr attr, TFlt defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TFlt

        AddFltAttrE(TNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_AddFltAttrE(self, *args)


    def NodeAttrIsDeleted(self, NId, NodeHI):
        """
        NodeAttrIsDeleted(TNEANetMP self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANetMP_NodeAttrIsDeleted(self, NId, NodeHI)


    def NodeAttrIsIntDeleted(self, NId, NodeHI):
        """
        NodeAttrIsIntDeleted(TNEANetMP self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANetMP_NodeAttrIsIntDeleted(self, NId, NodeHI)


    def NodeAttrIsStrDeleted(self, NId, NodeHI):
        """
        NodeAttrIsStrDeleted(TNEANetMP self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANetMP_NodeAttrIsStrDeleted(self, NId, NodeHI)


    def NodeAttrIsFltDeleted(self, NId, NodeHI):
        """
        NodeAttrIsFltDeleted(TNEANetMP self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANetMP_NodeAttrIsFltDeleted(self, NId, NodeHI)


    def EdgeAttrIsDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsDeleted(TNEANetMP self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANetMP_EdgeAttrIsDeleted(self, EId, EdgeHI)


    def EdgeAttrIsIntDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsIntDeleted(TNEANetMP self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANetMP_EdgeAttrIsIntDeleted(self, EId, EdgeHI)


    def EdgeAttrIsStrDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsStrDeleted(TNEANetMP self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANetMP_EdgeAttrIsStrDeleted(self, EId, EdgeHI)


    def EdgeAttrIsFltDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsFltDeleted(TNEANetMP self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANetMP_EdgeAttrIsFltDeleted(self, EId, EdgeHI)


    def GetNodeAttrValue(self, NId, NodeHI):
        """
        GetNodeAttrValue(TNEANetMP self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> TStr

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANetMP_GetNodeAttrValue(self, NId, NodeHI)


    def GetEdgeAttrValue(self, EId, EdgeHI):
        """
        GetEdgeAttrValue(TNEANetMP self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> TStr

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.TNEANetMP_GetEdgeAttrValue(self, EId, EdgeHI)


    def GetWeightOutEdges(self, NI, attr):
        """
        GetWeightOutEdges(TNEANetMP self, TNEANetMP::TNodeI const & NI, TStr attr) -> TFlt

        Parameters
        ----------
        NI: TNEANetMP::TNodeI const &
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_GetWeightOutEdges(self, NI, attr)


    def IsFltAttrE(self, attr):
        """
        IsFltAttrE(TNEANetMP self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_IsFltAttrE(self, attr)


    def IsIntAttrE(self, attr):
        """
        IsIntAttrE(TNEANetMP self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_IsIntAttrE(self, attr)


    def IsStrAttrE(self, attr):
        """
        IsStrAttrE(TNEANetMP self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_IsStrAttrE(self, attr)


    def GetFltAttrVecE(self, attr):
        """
        GetFltAttrVecE(TNEANetMP self, TStr attr) -> TFlt64V

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.TNEANetMP_GetFltAttrVecE(self, attr)


    def GetFltKeyIdE(self, EId):
        """
        GetFltKeyIdE(TNEANetMP self, int64 const & EId) -> int64

        Parameters
        ----------
        EId: int64 const &

        """
        return _SnapTime.TNEANetMP_GetFltKeyIdE(self, EId)


    def GetWeightOutEdgesV(self, OutWeights, AttrVal):
        """
        GetWeightOutEdgesV(TNEANetMP self, TFlt64V OutWeights, TFlt64V AttrVal)

        Parameters
        ----------
        OutWeights: TFlt64V &
        AttrVal: TFlt64V const &

        """
        return _SnapTime.TNEANetMP_GetWeightOutEdgesV(self, OutWeights, AttrVal)


    def BegNI(self, *args):
        """
        BegNI(TNEANetMP self) -> TNEANetMP::TNodeI
        BegNI(TNEANetMP self) -> TNEANetMPNodeI

        Parameters
        ----------
        self: TNEANetMP *

        """
        return _SnapTime.TNEANetMP_BegNI(self, *args)


    def EndNI(self, *args):
        """
        EndNI(TNEANetMP self) -> TNEANetMP::TNodeI
        EndNI(TNEANetMP self) -> TNEANetMPNodeI

        Parameters
        ----------
        self: TNEANetMP *

        """
        return _SnapTime.TNEANetMP_EndNI(self, *args)


    def GetNI(self, *args):
        """
        GetNI(TNEANetMP self, int64 const & NId) -> TNEANetMP::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetNI(TNEANetMP self, int64 const & NId) -> TNEANetMPNodeI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNEANetMP_GetNI(self, *args)


    def BegEI(self, *args):
        """
        BegEI(TNEANetMP self) -> TNEANetMP::TEdgeI
        BegEI(TNEANetMP self) -> TNEANetMPEdgeI

        Parameters
        ----------
        self: TNEANetMP *

        """
        return _SnapTime.TNEANetMP_BegEI(self, *args)


    def EndEI(self, *args):
        """
        EndEI(TNEANetMP self) -> TNEANetMP::TEdgeI
        EndEI(TNEANetMP self) -> TNEANetMPEdgeI

        Parameters
        ----------
        self: TNEANetMP *

        """
        return _SnapTime.TNEANetMP_EndEI(self, *args)

    __swig_destroy__ = _SnapTime.delete_TNEANetMP
TNEANetMP.Save = new_instancemethod(_SnapTime.TNEANetMP_Save, None, TNEANetMP)
TNEANetMP.HasFlag = new_instancemethod(_SnapTime.TNEANetMP_HasFlag, None, TNEANetMP)
TNEANetMP.GetNodes = new_instancemethod(_SnapTime.TNEANetMP_GetNodes, None, TNEANetMP)
TNEANetMP.SetNodes = new_instancemethod(_SnapTime.TNEANetMP_SetNodes, None, TNEANetMP)
TNEANetMP.AddNode = new_instancemethod(_SnapTime.TNEANetMP_AddNode, None, TNEANetMP)
TNEANetMP.AddNodeWithEdges = new_instancemethod(_SnapTime.TNEANetMP_AddNodeWithEdges, None, TNEANetMP)
TNEANetMP.IsNode = new_instancemethod(_SnapTime.TNEANetMP_IsNode, None, TNEANetMP)
TNEANetMP.BegNAIntI = new_instancemethod(_SnapTime.TNEANetMP_BegNAIntI, None, TNEANetMP)
TNEANetMP.EndNAIntI = new_instancemethod(_SnapTime.TNEANetMP_EndNAIntI, None, TNEANetMP)
TNEANetMP.GetNAIntI = new_instancemethod(_SnapTime.TNEANetMP_GetNAIntI, None, TNEANetMP)
TNEANetMP.BegNAStrI = new_instancemethod(_SnapTime.TNEANetMP_BegNAStrI, None, TNEANetMP)
TNEANetMP.EndNAStrI = new_instancemethod(_SnapTime.TNEANetMP_EndNAStrI, None, TNEANetMP)
TNEANetMP.GetNAStrI = new_instancemethod(_SnapTime.TNEANetMP_GetNAStrI, None, TNEANetMP)
TNEANetMP.BegNAFltI = new_instancemethod(_SnapTime.TNEANetMP_BegNAFltI, None, TNEANetMP)
TNEANetMP.EndNAFltI = new_instancemethod(_SnapTime.TNEANetMP_EndNAFltI, None, TNEANetMP)
TNEANetMP.GetNAFltI = new_instancemethod(_SnapTime.TNEANetMP_GetNAFltI, None, TNEANetMP)
TNEANetMP.AttrNameNI = new_instancemethod(_SnapTime.TNEANetMP_AttrNameNI, None, TNEANetMP)
TNEANetMP.AttrValueNI = new_instancemethod(_SnapTime.TNEANetMP_AttrValueNI, None, TNEANetMP)
TNEANetMP.IntAttrNameNI = new_instancemethod(_SnapTime.TNEANetMP_IntAttrNameNI, None, TNEANetMP)
TNEANetMP.IntAttrValueNI = new_instancemethod(_SnapTime.TNEANetMP_IntAttrValueNI, None, TNEANetMP)
TNEANetMP.StrAttrNameNI = new_instancemethod(_SnapTime.TNEANetMP_StrAttrNameNI, None, TNEANetMP)
TNEANetMP.StrAttrValueNI = new_instancemethod(_SnapTime.TNEANetMP_StrAttrValueNI, None, TNEANetMP)
TNEANetMP.FltAttrNameNI = new_instancemethod(_SnapTime.TNEANetMP_FltAttrNameNI, None, TNEANetMP)
TNEANetMP.FltAttrValueNI = new_instancemethod(_SnapTime.TNEANetMP_FltAttrValueNI, None, TNEANetMP)
TNEANetMP.AttrNameEI = new_instancemethod(_SnapTime.TNEANetMP_AttrNameEI, None, TNEANetMP)
TNEANetMP.AttrValueEI = new_instancemethod(_SnapTime.TNEANetMP_AttrValueEI, None, TNEANetMP)
TNEANetMP.IntAttrNameEI = new_instancemethod(_SnapTime.TNEANetMP_IntAttrNameEI, None, TNEANetMP)
TNEANetMP.IntAttrValueEI = new_instancemethod(_SnapTime.TNEANetMP_IntAttrValueEI, None, TNEANetMP)
TNEANetMP.StrAttrNameEI = new_instancemethod(_SnapTime.TNEANetMP_StrAttrNameEI, None, TNEANetMP)
TNEANetMP.StrAttrValueEI = new_instancemethod(_SnapTime.TNEANetMP_StrAttrValueEI, None, TNEANetMP)
TNEANetMP.FltAttrNameEI = new_instancemethod(_SnapTime.TNEANetMP_FltAttrNameEI, None, TNEANetMP)
TNEANetMP.FltAttrValueEI = new_instancemethod(_SnapTime.TNEANetMP_FltAttrValueEI, None, TNEANetMP)
TNEANetMP.BegEAIntI = new_instancemethod(_SnapTime.TNEANetMP_BegEAIntI, None, TNEANetMP)
TNEANetMP.EndEAIntI = new_instancemethod(_SnapTime.TNEANetMP_EndEAIntI, None, TNEANetMP)
TNEANetMP.GetEAIntI = new_instancemethod(_SnapTime.TNEANetMP_GetEAIntI, None, TNEANetMP)
TNEANetMP.BegEAStrI = new_instancemethod(_SnapTime.TNEANetMP_BegEAStrI, None, TNEANetMP)
TNEANetMP.EndEAStrI = new_instancemethod(_SnapTime.TNEANetMP_EndEAStrI, None, TNEANetMP)
TNEANetMP.GetEAStrI = new_instancemethod(_SnapTime.TNEANetMP_GetEAStrI, None, TNEANetMP)
TNEANetMP.BegEAFltI = new_instancemethod(_SnapTime.TNEANetMP_BegEAFltI, None, TNEANetMP)
TNEANetMP.EndEAFltI = new_instancemethod(_SnapTime.TNEANetMP_EndEAFltI, None, TNEANetMP)
TNEANetMP.GetEAFltI = new_instancemethod(_SnapTime.TNEANetMP_GetEAFltI, None, TNEANetMP)
TNEANetMP.GetMxNId = new_instancemethod(_SnapTime.TNEANetMP_GetMxNId, None, TNEANetMP)
TNEANetMP.GetMxEId = new_instancemethod(_SnapTime.TNEANetMP_GetMxEId, None, TNEANetMP)
TNEANetMP.Reserved = new_instancemethod(_SnapTime.TNEANetMP_Reserved, None, TNEANetMP)
TNEANetMP.ReservedE = new_instancemethod(_SnapTime.TNEANetMP_ReservedE, None, TNEANetMP)
TNEANetMP.GetEdges = new_instancemethod(_SnapTime.TNEANetMP_GetEdges, None, TNEANetMP)
TNEANetMP.SetEdges = new_instancemethod(_SnapTime.TNEANetMP_SetEdges, None, TNEANetMP)
TNEANetMP.SetMxEId = new_instancemethod(_SnapTime.TNEANetMP_SetMxEId, None, TNEANetMP)
TNEANetMP.AddEdge = new_instancemethod(_SnapTime.TNEANetMP_AddEdge, None, TNEANetMP)
TNEANetMP.AddEdgeUnchecked = new_instancemethod(_SnapTime.TNEANetMP_AddEdgeUnchecked, None, TNEANetMP)
TNEANetMP.IsEdge = new_instancemethod(_SnapTime.TNEANetMP_IsEdge, None, TNEANetMP)
TNEANetMP.GetEId = new_instancemethod(_SnapTime.TNEANetMP_GetEId, None, TNEANetMP)
TNEANetMP.GetEI = new_instancemethod(_SnapTime.TNEANetMP_GetEI, None, TNEANetMP)
TNEANetMP.GetRndNId = new_instancemethod(_SnapTime.TNEANetMP_GetRndNId, None, TNEANetMP)
TNEANetMP.GetRndNI = new_instancemethod(_SnapTime.TNEANetMP_GetRndNI, None, TNEANetMP)
TNEANetMP.GetRndEId = new_instancemethod(_SnapTime.TNEANetMP_GetRndEId, None, TNEANetMP)
TNEANetMP.GetRndEI = new_instancemethod(_SnapTime.TNEANetMP_GetRndEI, None, TNEANetMP)
TNEANetMP.GetNIdV = new_instancemethod(_SnapTime.TNEANetMP_GetNIdV, None, TNEANetMP)
TNEANetMP.GetEIdV = new_instancemethod(_SnapTime.TNEANetMP_GetEIdV, None, TNEANetMP)
TNEANetMP.Empty = new_instancemethod(_SnapTime.TNEANetMP_Empty, None, TNEANetMP)
TNEANetMP.Clr = new_instancemethod(_SnapTime.TNEANetMP_Clr, None, TNEANetMP)
TNEANetMP.Reserve = new_instancemethod(_SnapTime.TNEANetMP_Reserve, None, TNEANetMP)
TNEANetMP.ReserveAttr = new_instancemethod(_SnapTime.TNEANetMP_ReserveAttr, None, TNEANetMP)
TNEANetMP.Defrag = new_instancemethod(_SnapTime.TNEANetMP_Defrag, None, TNEANetMP)
TNEANetMP.IsOk = new_instancemethod(_SnapTime.TNEANetMP_IsOk, None, TNEANetMP)
TNEANetMP.Dump = new_instancemethod(_SnapTime.TNEANetMP_Dump, None, TNEANetMP)
TNEANetMP.AddIntAttrDatN = new_instancemethod(_SnapTime.TNEANetMP_AddIntAttrDatN, None, TNEANetMP)
TNEANetMP.AddStrAttrDatN = new_instancemethod(_SnapTime.TNEANetMP_AddStrAttrDatN, None, TNEANetMP)
TNEANetMP.AddFltAttrDatN = new_instancemethod(_SnapTime.TNEANetMP_AddFltAttrDatN, None, TNEANetMP)
TNEANetMP.AddIntAttrDatE = new_instancemethod(_SnapTime.TNEANetMP_AddIntAttrDatE, None, TNEANetMP)
TNEANetMP.AddStrAttrDatE = new_instancemethod(_SnapTime.TNEANetMP_AddStrAttrDatE, None, TNEANetMP)
TNEANetMP.AddFltAttrDatE = new_instancemethod(_SnapTime.TNEANetMP_AddFltAttrDatE, None, TNEANetMP)
TNEANetMP.GetIntAttrDatN = new_instancemethod(_SnapTime.TNEANetMP_GetIntAttrDatN, None, TNEANetMP)
TNEANetMP.GetStrAttrDatN = new_instancemethod(_SnapTime.TNEANetMP_GetStrAttrDatN, None, TNEANetMP)
TNEANetMP.GetFltAttrDatN = new_instancemethod(_SnapTime.TNEANetMP_GetFltAttrDatN, None, TNEANetMP)
TNEANetMP.GetIntAttrIndN = new_instancemethod(_SnapTime.TNEANetMP_GetIntAttrIndN, None, TNEANetMP)
TNEANetMP.GetIntAttrIndDatN = new_instancemethod(_SnapTime.TNEANetMP_GetIntAttrIndDatN, None, TNEANetMP)
TNEANetMP.GetIntAttrDatE = new_instancemethod(_SnapTime.TNEANetMP_GetIntAttrDatE, None, TNEANetMP)
TNEANetMP.GetStrAttrDatE = new_instancemethod(_SnapTime.TNEANetMP_GetStrAttrDatE, None, TNEANetMP)
TNEANetMP.GetFltAttrDatE = new_instancemethod(_SnapTime.TNEANetMP_GetFltAttrDatE, None, TNEANetMP)
TNEANetMP.GetIntAttrIndE = new_instancemethod(_SnapTime.TNEANetMP_GetIntAttrIndE, None, TNEANetMP)
TNEANetMP.GetIntAttrIndDatE = new_instancemethod(_SnapTime.TNEANetMP_GetIntAttrIndDatE, None, TNEANetMP)
TNEANetMP.DelAttrDatN = new_instancemethod(_SnapTime.TNEANetMP_DelAttrDatN, None, TNEANetMP)
TNEANetMP.DelAttrDatE = new_instancemethod(_SnapTime.TNEANetMP_DelAttrDatE, None, TNEANetMP)
TNEANetMP.AddIntAttrN = new_instancemethod(_SnapTime.TNEANetMP_AddIntAttrN, None, TNEANetMP)
TNEANetMP.AddStrAttrN = new_instancemethod(_SnapTime.TNEANetMP_AddStrAttrN, None, TNEANetMP)
TNEANetMP.AddFltAttrN = new_instancemethod(_SnapTime.TNEANetMP_AddFltAttrN, None, TNEANetMP)
TNEANetMP.AddIntAttrE = new_instancemethod(_SnapTime.TNEANetMP_AddIntAttrE, None, TNEANetMP)
TNEANetMP.AddStrAttrE = new_instancemethod(_SnapTime.TNEANetMP_AddStrAttrE, None, TNEANetMP)
TNEANetMP.AddFltAttrE = new_instancemethod(_SnapTime.TNEANetMP_AddFltAttrE, None, TNEANetMP)
TNEANetMP.NodeAttrIsDeleted = new_instancemethod(_SnapTime.TNEANetMP_NodeAttrIsDeleted, None, TNEANetMP)
TNEANetMP.NodeAttrIsIntDeleted = new_instancemethod(_SnapTime.TNEANetMP_NodeAttrIsIntDeleted, None, TNEANetMP)
TNEANetMP.NodeAttrIsStrDeleted = new_instancemethod(_SnapTime.TNEANetMP_NodeAttrIsStrDeleted, None, TNEANetMP)
TNEANetMP.NodeAttrIsFltDeleted = new_instancemethod(_SnapTime.TNEANetMP_NodeAttrIsFltDeleted, None, TNEANetMP)
TNEANetMP.EdgeAttrIsDeleted = new_instancemethod(_SnapTime.TNEANetMP_EdgeAttrIsDeleted, None, TNEANetMP)
TNEANetMP.EdgeAttrIsIntDeleted = new_instancemethod(_SnapTime.TNEANetMP_EdgeAttrIsIntDeleted, None, TNEANetMP)
TNEANetMP.EdgeAttrIsStrDeleted = new_instancemethod(_SnapTime.TNEANetMP_EdgeAttrIsStrDeleted, None, TNEANetMP)
TNEANetMP.EdgeAttrIsFltDeleted = new_instancemethod(_SnapTime.TNEANetMP_EdgeAttrIsFltDeleted, None, TNEANetMP)
TNEANetMP.GetNodeAttrValue = new_instancemethod(_SnapTime.TNEANetMP_GetNodeAttrValue, None, TNEANetMP)
TNEANetMP.GetEdgeAttrValue = new_instancemethod(_SnapTime.TNEANetMP_GetEdgeAttrValue, None, TNEANetMP)
TNEANetMP.GetWeightOutEdges = new_instancemethod(_SnapTime.TNEANetMP_GetWeightOutEdges, None, TNEANetMP)
TNEANetMP.IsFltAttrE = new_instancemethod(_SnapTime.TNEANetMP_IsFltAttrE, None, TNEANetMP)
TNEANetMP.IsIntAttrE = new_instancemethod(_SnapTime.TNEANetMP_IsIntAttrE, None, TNEANetMP)
TNEANetMP.IsStrAttrE = new_instancemethod(_SnapTime.TNEANetMP_IsStrAttrE, None, TNEANetMP)
TNEANetMP.GetFltAttrVecE = new_instancemethod(_SnapTime.TNEANetMP_GetFltAttrVecE, None, TNEANetMP)
TNEANetMP.GetFltKeyIdE = new_instancemethod(_SnapTime.TNEANetMP_GetFltKeyIdE, None, TNEANetMP)
TNEANetMP.GetWeightOutEdgesV = new_instancemethod(_SnapTime.TNEANetMP_GetWeightOutEdgesV, None, TNEANetMP)
TNEANetMP.BegNI = new_instancemethod(_SnapTime.TNEANetMP_BegNI, None, TNEANetMP)
TNEANetMP.EndNI = new_instancemethod(_SnapTime.TNEANetMP_EndNI, None, TNEANetMP)
TNEANetMP.GetNI = new_instancemethod(_SnapTime.TNEANetMP_GetNI, None, TNEANetMP)
TNEANetMP.BegEI = new_instancemethod(_SnapTime.TNEANetMP_BegEI, None, TNEANetMP)
TNEANetMP.EndEI = new_instancemethod(_SnapTime.TNEANetMP_EndEI, None, TNEANetMP)
TNEANetMP_swigregister = _SnapTime.TNEANetMP_swigregister
TNEANetMP_swigregister(TNEANetMP)

def TNEANetMP_New(*args):
    """
    New() -> PNEANetMP
    TNEANetMP_New(int64 const & Nodes, int64 const & Edges) -> PNEANetMP

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.TNEANetMP_New(*args)

def TNEANetMP_Load(SIn):
    """
    TNEANetMP_Load(TSIn SIn) -> PNEANetMP

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TNEANetMP_Load(SIn)

NOT = _SnapTime.NOT
AND = _SnapTime.AND
OR = _SnapTime.OR
NOP = _SnapTime.NOP
LT = _SnapTime.LT
LTE = _SnapTime.LTE
EQ = _SnapTime.EQ
NEQ = _SnapTime.NEQ
GTE = _SnapTime.GTE
GT = _SnapTime.GT
SUBSTR = _SnapTime.SUBSTR
SUPERSTR = _SnapTime.SUPERSTR
class TAtomicPredicate(object):
    """Proxy of C++ TAtomicPredicate class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TAtomicPredicate self) -> TAtomicPredicate
        __init__(TAtomicPredicate self, TAttrType Typ, TBool IsCnst, TPredComp Cmp, TStr L, TStr R, TInt64 ICnst, TFlt FCnst, TStr SCnst) -> TAtomicPredicate

        Parameters
        ----------
        Typ: enum TAttrType
        IsCnst: TBool
        Cmp: enum TPredComp
        L: TStr
        R: TStr
        ICnst: TInt64
        FCnst: TFlt
        SCnst: TStr

        __init__(TAtomicPredicate self, TAttrType Typ, TBool IsCnst, TPredComp Cmp, TStr L, TStr R) -> TAtomicPredicate

        Parameters
        ----------
        Typ: enum TAttrType
        IsCnst: TBool
        Cmp: enum TPredComp
        L: TStr
        R: TStr

        """
        _SnapTime.TAtomicPredicate_swiginit(self, _SnapTime.new_TAtomicPredicate(*args))
    __swig_destroy__ = _SnapTime.delete_TAtomicPredicate
TAtomicPredicate_swigregister = _SnapTime.TAtomicPredicate_swigregister
TAtomicPredicate_swigregister(TAtomicPredicate)

class TPredicateNode(object):
    """Proxy of C++ TPredicateNode class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Op = _swig_property(_SnapTime.TPredicateNode_Op_get, _SnapTime.TPredicateNode_Op_set)
    Result = _swig_property(_SnapTime.TPredicateNode_Result_get, _SnapTime.TPredicateNode_Result_set)
    Atom = _swig_property(_SnapTime.TPredicateNode_Atom_get, _SnapTime.TPredicateNode_Atom_set)
    Parent = _swig_property(_SnapTime.TPredicateNode_Parent_get, _SnapTime.TPredicateNode_Parent_set)
    Left = _swig_property(_SnapTime.TPredicateNode_Left_get, _SnapTime.TPredicateNode_Left_set)
    Right = _swig_property(_SnapTime.TPredicateNode_Right_get, _SnapTime.TPredicateNode_Right_set)

    def __init__(self, *args):
        """
        __init__(TPredicateNode self) -> TPredicateNode
        __init__(TPredicateNode self, TAtomicPredicate A) -> TPredicateNode

        Parameters
        ----------
        A: TAtomicPredicate const &

        __init__(TPredicateNode self, TPredOp Opr) -> TPredicateNode

        Parameters
        ----------
        Opr: enum TPredOp

        __init__(TPredicateNode self, TPredicateNode P) -> TPredicateNode

        Parameters
        ----------
        P: TPredicateNode const &

        """
        _SnapTime.TPredicateNode_swiginit(self, _SnapTime.new_TPredicateNode(*args))

    def AddLeftChild(self, Child):
        """
        AddLeftChild(TPredicateNode self, TPredicateNode Child)

        Parameters
        ----------
        Child: TPredicateNode *

        """
        return _SnapTime.TPredicateNode_AddLeftChild(self, Child)


    def AddRightChild(self, Child):
        """
        AddRightChild(TPredicateNode self, TPredicateNode Child)

        Parameters
        ----------
        Child: TPredicateNode *

        """
        return _SnapTime.TPredicateNode_AddRightChild(self, Child)


    def GetVariables(self, Variables):
        """
        GetVariables(TPredicateNode self, TStr64V Variables)

        Parameters
        ----------
        Variables: TStr64V &

        """
        return _SnapTime.TPredicateNode_GetVariables(self, Variables)

    __swig_destroy__ = _SnapTime.delete_TPredicateNode
TPredicateNode.AddLeftChild = new_instancemethod(_SnapTime.TPredicateNode_AddLeftChild, None, TPredicateNode)
TPredicateNode.AddRightChild = new_instancemethod(_SnapTime.TPredicateNode_AddRightChild, None, TPredicateNode)
TPredicateNode.GetVariables = new_instancemethod(_SnapTime.TPredicateNode_GetVariables, None, TPredicateNode)
TPredicateNode_swigregister = _SnapTime.TPredicateNode_swigregister
TPredicateNode_swigregister(TPredicateNode)

class TPredicate(object):
    """Proxy of C++ TPredicate class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TPredicate self) -> TPredicate
        __init__(TPredicate self, TPredicateNode R) -> TPredicate

        Parameters
        ----------
        R: TPredicateNode *

        __init__(TPredicate self, TPredicate Pred) -> TPredicate

        Parameters
        ----------
        Pred: TPredicate const &

        """
        _SnapTime.TPredicate_swiginit(self, _SnapTime.new_TPredicate(*args))

    def GetVariables(self, Variables):
        """
        GetVariables(TPredicate self, TStr64V Variables)

        Parameters
        ----------
        Variables: TStr64V &

        """
        return _SnapTime.TPredicate_GetVariables(self, Variables)


    def SetIntVal(self, VarName, VarVal):
        """
        SetIntVal(TPredicate self, TStr VarName, TInt64 VarVal)

        Parameters
        ----------
        VarName: TStr
        VarVal: TInt64

        """
        return _SnapTime.TPredicate_SetIntVal(self, VarName, VarVal)


    def SetFltVal(self, VarName, VarVal):
        """
        SetFltVal(TPredicate self, TStr VarName, TFlt VarVal)

        Parameters
        ----------
        VarName: TStr
        VarVal: TFlt

        """
        return _SnapTime.TPredicate_SetFltVal(self, VarName, VarVal)


    def SetStrVal(self, VarName, VarVal):
        """
        SetStrVal(TPredicate self, TStr VarName, TStr VarVal)

        Parameters
        ----------
        VarName: TStr
        VarVal: TStr

        """
        return _SnapTime.TPredicate_SetStrVal(self, VarName, VarVal)


    def Eval(self):
        """
        Eval(TPredicate self) -> TBool

        Parameters
        ----------
        self: TPredicate *

        """
        return _SnapTime.TPredicate_Eval(self)


    def EvalAtomicPredicate(self, Atom):
        """
        EvalAtomicPredicate(TPredicate self, TAtomicPredicate Atom) -> TBool

        Parameters
        ----------
        Atom: TAtomicPredicate const &

        """
        return _SnapTime.TPredicate_EvalAtomicPredicate(self, Atom)


    def EvalStrAtom(Val1, Val2, Cmp):
        """
        EvalStrAtom(TStr Val1, TStr Val2, TPredComp Cmp) -> TBool

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &
        Cmp: enum TPredComp

        """
        return _SnapTime.TPredicate_EvalStrAtom(Val1, Val2, Cmp)

    EvalStrAtom = staticmethod(EvalStrAtom)
    __swig_destroy__ = _SnapTime.delete_TPredicate
TPredicate.GetVariables = new_instancemethod(_SnapTime.TPredicate_GetVariables, None, TPredicate)
TPredicate.SetIntVal = new_instancemethod(_SnapTime.TPredicate_SetIntVal, None, TPredicate)
TPredicate.SetFltVal = new_instancemethod(_SnapTime.TPredicate_SetFltVal, None, TPredicate)
TPredicate.SetStrVal = new_instancemethod(_SnapTime.TPredicate_SetStrVal, None, TPredicate)
TPredicate.Eval = new_instancemethod(_SnapTime.TPredicate_Eval, None, TPredicate)
TPredicate.EvalAtomicPredicate = new_instancemethod(_SnapTime.TPredicate_EvalAtomicPredicate, None, TPredicate)
TPredicate_swigregister = _SnapTime.TPredicate_swigregister
TPredicate_swigregister(TPredicate)

def TPredicate_EvalStrAtom(Val1, Val2, Cmp):
    """
    TPredicate_EvalStrAtom(TStr Val1, TStr Val2, TPredComp Cmp) -> TBool

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &
    Cmp: enum TPredComp

    """
    return _SnapTime.TPredicate_EvalStrAtom(Val1, Val2, Cmp)

L1Norm = _SnapTime.L1Norm
L2Norm = _SnapTime.L2Norm
Jaccard = _SnapTime.Jaccard
Haversine = _SnapTime.Haversine
class TTableContext(object):
    """Proxy of C++ TTableContext class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TTableContext self) -> TTableContext
        __init__(TTableContext self, TSIn SIn) -> TTableContext

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TTableContext_swiginit(self, _SnapTime.new_TTableContext(*args))

    def Load(self, SIn):
        """
        Load(TTableContext self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TTableContext_Load(self, SIn)


    def LoadShM(self, ShMIn):
        """
        LoadShM(TTableContext self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TTableContext_LoadShM(self, ShMIn)


    def Save(self, SOut):
        """
        Save(TTableContext self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TTableContext_Save(self, SOut)


    def AddStr(self, Key):
        """
        AddStr(TTableContext self, TStr Key) -> TInt64

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TTableContext_AddStr(self, Key)


    def GetStr(self, KeyId):
        """
        GetStr(TTableContext self, TInt64 KeyId) -> TStr

        Parameters
        ----------
        KeyId: TInt64 const &

        """
        return _SnapTime.TTableContext_GetStr(self, KeyId)

    __swig_destroy__ = _SnapTime.delete_TTableContext
TTableContext.Load = new_instancemethod(_SnapTime.TTableContext_Load, None, TTableContext)
TTableContext.LoadShM = new_instancemethod(_SnapTime.TTableContext_LoadShM, None, TTableContext)
TTableContext.Save = new_instancemethod(_SnapTime.TTableContext_Save, None, TTableContext)
TTableContext.AddStr = new_instancemethod(_SnapTime.TTableContext_AddStr, None, TTableContext)
TTableContext.GetStr = new_instancemethod(_SnapTime.TTableContext_GetStr, None, TTableContext)
TTableContext_swigregister = _SnapTime.TTableContext_swigregister
TTableContext_swigregister(TTableContext)

class TPrimitive(object):
    """Proxy of C++ TPrimitive class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TPrimitive self) -> TPrimitive
        __init__(TPrimitive self, TInt64 Val) -> TPrimitive

        Parameters
        ----------
        Val: TInt64 const &

        __init__(TPrimitive self, TFlt Val) -> TPrimitive

        Parameters
        ----------
        Val: TFlt const &

        __init__(TPrimitive self, TStr Val) -> TPrimitive

        Parameters
        ----------
        Val: TStr const &

        __init__(TPrimitive self, TPrimitive Prim) -> TPrimitive

        Parameters
        ----------
        Prim: TPrimitive const &

        """
        _SnapTime.TPrimitive_swiginit(self, _SnapTime.new_TPrimitive(*args))

    def GetInt(self):
        """
        GetInt(TPrimitive self) -> TInt64

        Parameters
        ----------
        self: TPrimitive const *

        """
        return _SnapTime.TPrimitive_GetInt(self)


    def GetFlt(self):
        """
        GetFlt(TPrimitive self) -> TFlt

        Parameters
        ----------
        self: TPrimitive const *

        """
        return _SnapTime.TPrimitive_GetFlt(self)


    def GetStr(self):
        """
        GetStr(TPrimitive self) -> TStr

        Parameters
        ----------
        self: TPrimitive const *

        """
        return _SnapTime.TPrimitive_GetStr(self)


    def GetType(self):
        """
        GetType(TPrimitive self) -> TAttrType

        Parameters
        ----------
        self: TPrimitive const *

        """
        return _SnapTime.TPrimitive_GetType(self)

    __swig_destroy__ = _SnapTime.delete_TPrimitive
TPrimitive.GetInt = new_instancemethod(_SnapTime.TPrimitive_GetInt, None, TPrimitive)
TPrimitive.GetFlt = new_instancemethod(_SnapTime.TPrimitive_GetFlt, None, TPrimitive)
TPrimitive.GetStr = new_instancemethod(_SnapTime.TPrimitive_GetStr, None, TPrimitive)
TPrimitive.GetType = new_instancemethod(_SnapTime.TPrimitive_GetType, None, TPrimitive)
TPrimitive_swigregister = _SnapTime.TPrimitive_swigregister
TPrimitive_swigregister(TPrimitive)

class TTableRow(object):
    """Proxy of C++ TTableRow class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TTableRow self) -> TTableRow"""
        _SnapTime.TTableRow_swiginit(self, _SnapTime.new_TTableRow())

    def AddInt(self, Val):
        """
        AddInt(TTableRow self, TInt64 Val)

        Parameters
        ----------
        Val: TInt64 const &

        """
        return _SnapTime.TTableRow_AddInt(self, Val)


    def AddFlt(self, Val):
        """
        AddFlt(TTableRow self, TFlt Val)

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TTableRow_AddFlt(self, Val)


    def AddStr(self, Val):
        """
        AddStr(TTableRow self, TStr Val)

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TTableRow_AddStr(self, Val)


    def GetIntVals(self):
        """
        GetIntVals(TTableRow self) -> TInt64V

        Parameters
        ----------
        self: TTableRow const *

        """
        return _SnapTime.TTableRow_GetIntVals(self)


    def GetFltVals(self):
        """
        GetFltVals(TTableRow self) -> TFlt64V

        Parameters
        ----------
        self: TTableRow const *

        """
        return _SnapTime.TTableRow_GetFltVals(self)


    def GetStrVals(self):
        """
        GetStrVals(TTableRow self) -> TStr64V

        Parameters
        ----------
        self: TTableRow const *

        """
        return _SnapTime.TTableRow_GetStrVals(self)

    __swig_destroy__ = _SnapTime.delete_TTableRow
TTableRow.AddInt = new_instancemethod(_SnapTime.TTableRow_AddInt, None, TTableRow)
TTableRow.AddFlt = new_instancemethod(_SnapTime.TTableRow_AddFlt, None, TTableRow)
TTableRow.AddStr = new_instancemethod(_SnapTime.TTableRow_AddStr, None, TTableRow)
TTableRow.GetIntVals = new_instancemethod(_SnapTime.TTableRow_GetIntVals, None, TTableRow)
TTableRow.GetFltVals = new_instancemethod(_SnapTime.TTableRow_GetFltVals, None, TTableRow)
TTableRow.GetStrVals = new_instancemethod(_SnapTime.TTableRow_GetStrVals, None, TTableRow)
TTableRow_swigregister = _SnapTime.TTableRow_swigregister
TTableRow_swigregister(TTableRow)

aaMin = _SnapTime.aaMin
aaMax = _SnapTime.aaMax
aaFirst = _SnapTime.aaFirst
aaLast = _SnapTime.aaLast
aaMean = _SnapTime.aaMean
aaMedian = _SnapTime.aaMedian
aaSum = _SnapTime.aaSum
aaCount = _SnapTime.aaCount
aoAdd = _SnapTime.aoAdd
aoSub = _SnapTime.aoSub
aoMul = _SnapTime.aoMul
aoDiv = _SnapTime.aoDiv
aoMod = _SnapTime.aoMod
aoMin = _SnapTime.aoMin
aoMax = _SnapTime.aoMax
class GroupStmt(object):
    """Proxy of C++ GroupStmt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GroupStmt self) -> GroupStmt
        __init__(GroupStmt self, TStr64V Attrs) -> GroupStmt

        Parameters
        ----------
        Attrs: TStr64V const &

        __init__(GroupStmt self, TStr64V Attrs, TBool ordered, TBool physical) -> GroupStmt

        Parameters
        ----------
        Attrs: TStr64V const &
        ordered: TBool
        physical: TBool

        __init__(GroupStmt self, GroupStmt stmt) -> GroupStmt

        Parameters
        ----------
        stmt: GroupStmt const &

        """
        _SnapTime.GroupStmt_swiginit(self, _SnapTime.new_GroupStmt(*args))

    def UsePhysicalIds(self):
        """
        UsePhysicalIds(GroupStmt self) -> TBool

        Parameters
        ----------
        self: GroupStmt *

        """
        return _SnapTime.GroupStmt_UsePhysicalIds(self)


    def __eq__(self, stmt):
        """
        __eq__(GroupStmt self, GroupStmt stmt) -> TBool

        Parameters
        ----------
        stmt: GroupStmt const &

        """
        return _SnapTime.GroupStmt___eq__(self, stmt)


    def IsValid(self):
        """
        IsValid(GroupStmt self) -> TBool

        Parameters
        ----------
        self: GroupStmt *

        """
        return _SnapTime.GroupStmt_IsValid(self)


    def Invalidate(self):
        """
        Invalidate(GroupStmt self)

        Parameters
        ----------
        self: GroupStmt *

        """
        return _SnapTime.GroupStmt_Invalidate(self)


    def IncludesAttr(self, Attr):
        """
        IncludesAttr(GroupStmt self, TStr Attr) -> TBool

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.GroupStmt_IncludesAttr(self, Attr)


    def GetMemUsed(self):
        """
        GetMemUsed(GroupStmt self) -> TSize

        Parameters
        ----------
        self: GroupStmt const *

        """
        return _SnapTime.GroupStmt_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(GroupStmt self) -> int64

        Parameters
        ----------
        self: GroupStmt const *

        """
        return _SnapTime.GroupStmt_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(GroupStmt self) -> int64

        Parameters
        ----------
        self: GroupStmt const *

        """
        return _SnapTime.GroupStmt_GetSecHashCd(self)


    def Print(self):
        """
        Print(GroupStmt self)

        Parameters
        ----------
        self: GroupStmt *

        """
        return _SnapTime.GroupStmt_Print(self)

    __swig_destroy__ = _SnapTime.delete_GroupStmt
GroupStmt.UsePhysicalIds = new_instancemethod(_SnapTime.GroupStmt_UsePhysicalIds, None, GroupStmt)
GroupStmt.__eq__ = new_instancemethod(_SnapTime.GroupStmt___eq__, None, GroupStmt)
GroupStmt.IsValid = new_instancemethod(_SnapTime.GroupStmt_IsValid, None, GroupStmt)
GroupStmt.Invalidate = new_instancemethod(_SnapTime.GroupStmt_Invalidate, None, GroupStmt)
GroupStmt.IncludesAttr = new_instancemethod(_SnapTime.GroupStmt_IncludesAttr, None, GroupStmt)
GroupStmt.GetMemUsed = new_instancemethod(_SnapTime.GroupStmt_GetMemUsed, None, GroupStmt)
GroupStmt.GetPrimHashCd = new_instancemethod(_SnapTime.GroupStmt_GetPrimHashCd, None, GroupStmt)
GroupStmt.GetSecHashCd = new_instancemethod(_SnapTime.GroupStmt_GetSecHashCd, None, GroupStmt)
GroupStmt.Print = new_instancemethod(_SnapTime.GroupStmt_Print, None, GroupStmt)
GroupStmt_swigregister = _SnapTime.GroupStmt_swigregister
GroupStmt_swigregister(GroupStmt)

class TRowIterator(object):
    """Proxy of C++ TRowIterator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TRowIterator self) -> TRowIterator
        __init__(TRowIterator self, TInt64 RowIdx, TTable TablePtr) -> TRowIterator

        Parameters
        ----------
        RowIdx: TInt64
        TablePtr: TTable const *

        __init__(TRowIterator self, TRowIterator RowI) -> TRowIterator

        Parameters
        ----------
        RowI: TRowIterator const &

        """
        _SnapTime.TRowIterator_swiginit(self, _SnapTime.new_TRowIterator(*args))

    def Next(self):
        """
        Next(TRowIterator self) -> TRowIterator

        Parameters
        ----------
        self: TRowIterator *

        """
        return _SnapTime.TRowIterator_Next(self)


    def __lt__(self, RowI):
        """
        __lt__(TRowIterator self, TRowIterator RowI) -> bool

        Parameters
        ----------
        RowI: TRowIterator const &

        """
        return _SnapTime.TRowIterator___lt__(self, RowI)


    def __eq__(self, RowI):
        """
        __eq__(TRowIterator self, TRowIterator RowI) -> bool

        Parameters
        ----------
        RowI: TRowIterator const &

        """
        return _SnapTime.TRowIterator___eq__(self, RowI)


    def __ne__(self, RowI):
        """
        __ne__(TRowIterator self, TRowIterator RowI) -> bool

        Parameters
        ----------
        RowI: TRowIterator const &

        """
        return _SnapTime.TRowIterator___ne__(self, RowI)


    def __ref__(self):
        """
        __ref__(TRowIterator self) -> TRowIterator

        Parameters
        ----------
        self: TRowIterator const *

        """
        return _SnapTime.TRowIterator___ref__(self)


    def GetRowIdx(self):
        """
        GetRowIdx(TRowIterator self) -> TInt64

        Parameters
        ----------
        self: TRowIterator const *

        """
        return _SnapTime.TRowIterator_GetRowIdx(self)


    def GetStrMapById(self, ColIdx):
        """
        GetStrMapById(TRowIterator self, TInt64 ColIdx) -> TInt64

        Parameters
        ----------
        ColIdx: TInt64

        """
        return _SnapTime.TRowIterator_GetStrMapById(self, ColIdx)


    def GetIntAttr(self, *args):
        """
        GetIntAttr(TRowIterator self, TInt64 ColIdx) -> TInt64

        Parameters
        ----------
        ColIdx: TInt64

        GetIntAttr(TRowIterator self, TStr Col) -> TInt64

        Parameters
        ----------
        Col: TStr const &

        """
        return _SnapTime.TRowIterator_GetIntAttr(self, *args)


    def GetFltAttr(self, *args):
        """
        GetFltAttr(TRowIterator self, TInt64 ColIdx) -> TFlt

        Parameters
        ----------
        ColIdx: TInt64

        GetFltAttr(TRowIterator self, TStr Col) -> TFlt

        Parameters
        ----------
        Col: TStr const &

        """
        return _SnapTime.TRowIterator_GetFltAttr(self, *args)


    def GetStrAttr(self, *args):
        """
        GetStrAttr(TRowIterator self, TInt64 ColIdx) -> TStr

        Parameters
        ----------
        ColIdx: TInt64

        GetStrAttr(TRowIterator self, TStr Col) -> TStr

        Parameters
        ----------
        Col: TStr const &

        """
        return _SnapTime.TRowIterator_GetStrAttr(self, *args)


    def GetStrMapByName(self, Col):
        """
        GetStrMapByName(TRowIterator self, TStr Col) -> TInt64

        Parameters
        ----------
        Col: TStr const &

        """
        return _SnapTime.TRowIterator_GetStrMapByName(self, Col)


    def CompareAtomicConst(self, ColIdx, Val, Cmp):
        """
        CompareAtomicConst(TRowIterator self, TInt64 ColIdx, TPrimitive Val, TPredComp Cmp) -> TBool

        Parameters
        ----------
        ColIdx: TInt64
        Val: TPrimitive const &
        Cmp: enum TPredComp

        """
        return _SnapTime.TRowIterator_CompareAtomicConst(self, ColIdx, Val, Cmp)


    def CompareAtomicConstTStr(self, ColIdx, Val, Cmp):
        """
        CompareAtomicConstTStr(TRowIterator self, TInt64 ColIdx, TStr Val, TPredComp Cmp) -> TBool

        Parameters
        ----------
        ColIdx: TInt64
        Val: TStr const &
        Cmp: enum TPredComp

        """
        return _SnapTime.TRowIterator_CompareAtomicConstTStr(self, ColIdx, Val, Cmp)

    __swig_destroy__ = _SnapTime.delete_TRowIterator
TRowIterator.Next = new_instancemethod(_SnapTime.TRowIterator_Next, None, TRowIterator)
TRowIterator.__lt__ = new_instancemethod(_SnapTime.TRowIterator___lt__, None, TRowIterator)
TRowIterator.__eq__ = new_instancemethod(_SnapTime.TRowIterator___eq__, None, TRowIterator)
TRowIterator.__ne__ = new_instancemethod(_SnapTime.TRowIterator___ne__, None, TRowIterator)
TRowIterator.__ref__ = new_instancemethod(_SnapTime.TRowIterator___ref__, None, TRowIterator)
TRowIterator.GetRowIdx = new_instancemethod(_SnapTime.TRowIterator_GetRowIdx, None, TRowIterator)
TRowIterator.GetStrMapById = new_instancemethod(_SnapTime.TRowIterator_GetStrMapById, None, TRowIterator)
TRowIterator.GetIntAttr = new_instancemethod(_SnapTime.TRowIterator_GetIntAttr, None, TRowIterator)
TRowIterator.GetFltAttr = new_instancemethod(_SnapTime.TRowIterator_GetFltAttr, None, TRowIterator)
TRowIterator.GetStrAttr = new_instancemethod(_SnapTime.TRowIterator_GetStrAttr, None, TRowIterator)
TRowIterator.GetStrMapByName = new_instancemethod(_SnapTime.TRowIterator_GetStrMapByName, None, TRowIterator)
TRowIterator.CompareAtomicConst = new_instancemethod(_SnapTime.TRowIterator_CompareAtomicConst, None, TRowIterator)
TRowIterator.CompareAtomicConstTStr = new_instancemethod(_SnapTime.TRowIterator_CompareAtomicConstTStr, None, TRowIterator)
TRowIterator_swigregister = _SnapTime.TRowIterator_swigregister
TRowIterator_swigregister(TRowIterator)

class TRowIteratorWrap(object):
    """Proxy of C++ TRowIteratorWrap class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _Table):
        """
        __init__(TRowIteratorWrap self, TTable _Table) -> TRowIteratorWrap

        Parameters
        ----------
        _Table: TTable const *

        """
        _SnapTime.TRowIteratorWrap_swiginit(self, _SnapTime.new_TRowIteratorWrap(_Table))

    def begin(self):
        """
        begin(TRowIteratorWrap self) -> TRowIterator

        Parameters
        ----------
        self: TRowIteratorWrap *

        """
        return _SnapTime.TRowIteratorWrap_begin(self)


    def end(self):
        """
        end(TRowIteratorWrap self) -> TRowIterator

        Parameters
        ----------
        self: TRowIteratorWrap *

        """
        return _SnapTime.TRowIteratorWrap_end(self)

    __swig_destroy__ = _SnapTime.delete_TRowIteratorWrap
TRowIteratorWrap.begin = new_instancemethod(_SnapTime.TRowIteratorWrap_begin, None, TRowIteratorWrap)
TRowIteratorWrap.end = new_instancemethod(_SnapTime.TRowIteratorWrap_end, None, TRowIteratorWrap)
TRowIteratorWrap_swigregister = _SnapTime.TRowIteratorWrap_swigregister
TRowIteratorWrap_swigregister(TRowIteratorWrap)

class TRowIteratorWithRemove(object):
    """Proxy of C++ TRowIteratorWithRemove class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TRowIteratorWithRemove self) -> TRowIteratorWithRemove
        __init__(TRowIteratorWithRemove self, TInt64 RowIdx, TTable TablePtr) -> TRowIteratorWithRemove

        Parameters
        ----------
        RowIdx: TInt64
        TablePtr: TTable *

        __init__(TRowIteratorWithRemove self, TInt64 RowIdx, TTable TablePtr, TBool IsStart) -> TRowIteratorWithRemove

        Parameters
        ----------
        RowIdx: TInt64
        TablePtr: TTable *
        IsStart: TBool

        __init__(TRowIteratorWithRemove self, TRowIteratorWithRemove RowI) -> TRowIteratorWithRemove

        Parameters
        ----------
        RowI: TRowIteratorWithRemove const &

        """
        _SnapTime.TRowIteratorWithRemove_swiginit(self, _SnapTime.new_TRowIteratorWithRemove(*args))

    def Next(self):
        """
        Next(TRowIteratorWithRemove self) -> TRowIteratorWithRemove

        Parameters
        ----------
        self: TRowIteratorWithRemove *

        """
        return _SnapTime.TRowIteratorWithRemove_Next(self)


    def __lt__(self, RowI):
        """
        __lt__(TRowIteratorWithRemove self, TRowIteratorWithRemove RowI) -> bool

        Parameters
        ----------
        RowI: TRowIteratorWithRemove const &

        """
        return _SnapTime.TRowIteratorWithRemove___lt__(self, RowI)


    def __eq__(self, RowI):
        """
        __eq__(TRowIteratorWithRemove self, TRowIteratorWithRemove RowI) -> bool

        Parameters
        ----------
        RowI: TRowIteratorWithRemove const &

        """
        return _SnapTime.TRowIteratorWithRemove___eq__(self, RowI)


    def __ne__(self, RowI):
        """
        __ne__(TRowIteratorWithRemove self, TRowIteratorWithRemove RowI) -> bool

        Parameters
        ----------
        RowI: TRowIteratorWithRemove const &

        """
        return _SnapTime.TRowIteratorWithRemove___ne__(self, RowI)


    def __ref__(self):
        """
        __ref__(TRowIteratorWithRemove self) -> TRowIteratorWithRemove

        Parameters
        ----------
        self: TRowIteratorWithRemove const *

        """
        return _SnapTime.TRowIteratorWithRemove___ref__(self)


    def GetRowIdx(self):
        """
        GetRowIdx(TRowIteratorWithRemove self) -> TInt64

        Parameters
        ----------
        self: TRowIteratorWithRemove const *

        """
        return _SnapTime.TRowIteratorWithRemove_GetRowIdx(self)


    def GetNextRowIdx(self):
        """
        GetNextRowIdx(TRowIteratorWithRemove self) -> TInt64

        Parameters
        ----------
        self: TRowIteratorWithRemove const *

        """
        return _SnapTime.TRowIteratorWithRemove_GetNextRowIdx(self)


    def GetNextIntAttr(self, *args):
        """
        GetNextIntAttr(TRowIteratorWithRemove self, TInt64 ColIdx) -> TInt64

        Parameters
        ----------
        ColIdx: TInt64

        GetNextIntAttr(TRowIteratorWithRemove self, TStr Col) -> TInt64

        Parameters
        ----------
        Col: TStr const &

        """
        return _SnapTime.TRowIteratorWithRemove_GetNextIntAttr(self, *args)


    def GetNextFltAttr(self, *args):
        """
        GetNextFltAttr(TRowIteratorWithRemove self, TInt64 ColIdx) -> TFlt

        Parameters
        ----------
        ColIdx: TInt64

        GetNextFltAttr(TRowIteratorWithRemove self, TStr Col) -> TFlt

        Parameters
        ----------
        Col: TStr const &

        """
        return _SnapTime.TRowIteratorWithRemove_GetNextFltAttr(self, *args)


    def GetNextStrAttr(self, *args):
        """
        GetNextStrAttr(TRowIteratorWithRemove self, TInt64 ColIdx) -> TStr

        Parameters
        ----------
        ColIdx: TInt64

        GetNextStrAttr(TRowIteratorWithRemove self, TStr Col) -> TStr

        Parameters
        ----------
        Col: TStr const &

        """
        return _SnapTime.TRowIteratorWithRemove_GetNextStrAttr(self, *args)


    def IsFirst(self):
        """
        IsFirst(TRowIteratorWithRemove self) -> TBool

        Parameters
        ----------
        self: TRowIteratorWithRemove const *

        """
        return _SnapTime.TRowIteratorWithRemove_IsFirst(self)


    def RemoveNext(self):
        """
        RemoveNext(TRowIteratorWithRemove self)

        Parameters
        ----------
        self: TRowIteratorWithRemove *

        """
        return _SnapTime.TRowIteratorWithRemove_RemoveNext(self)


    def CompareAtomicConst(self, ColIdx, Val, Cmp):
        """
        CompareAtomicConst(TRowIteratorWithRemove self, TInt64 ColIdx, TPrimitive Val, TPredComp Cmp) -> TBool

        Parameters
        ----------
        ColIdx: TInt64
        Val: TPrimitive const &
        Cmp: enum TPredComp

        """
        return _SnapTime.TRowIteratorWithRemove_CompareAtomicConst(self, ColIdx, Val, Cmp)

    __swig_destroy__ = _SnapTime.delete_TRowIteratorWithRemove
TRowIteratorWithRemove.Next = new_instancemethod(_SnapTime.TRowIteratorWithRemove_Next, None, TRowIteratorWithRemove)
TRowIteratorWithRemove.__lt__ = new_instancemethod(_SnapTime.TRowIteratorWithRemove___lt__, None, TRowIteratorWithRemove)
TRowIteratorWithRemove.__eq__ = new_instancemethod(_SnapTime.TRowIteratorWithRemove___eq__, None, TRowIteratorWithRemove)
TRowIteratorWithRemove.__ne__ = new_instancemethod(_SnapTime.TRowIteratorWithRemove___ne__, None, TRowIteratorWithRemove)
TRowIteratorWithRemove.__ref__ = new_instancemethod(_SnapTime.TRowIteratorWithRemove___ref__, None, TRowIteratorWithRemove)
TRowIteratorWithRemove.GetRowIdx = new_instancemethod(_SnapTime.TRowIteratorWithRemove_GetRowIdx, None, TRowIteratorWithRemove)
TRowIteratorWithRemove.GetNextRowIdx = new_instancemethod(_SnapTime.TRowIteratorWithRemove_GetNextRowIdx, None, TRowIteratorWithRemove)
TRowIteratorWithRemove.GetNextIntAttr = new_instancemethod(_SnapTime.TRowIteratorWithRemove_GetNextIntAttr, None, TRowIteratorWithRemove)
TRowIteratorWithRemove.GetNextFltAttr = new_instancemethod(_SnapTime.TRowIteratorWithRemove_GetNextFltAttr, None, TRowIteratorWithRemove)
TRowIteratorWithRemove.GetNextStrAttr = new_instancemethod(_SnapTime.TRowIteratorWithRemove_GetNextStrAttr, None, TRowIteratorWithRemove)
TRowIteratorWithRemove.IsFirst = new_instancemethod(_SnapTime.TRowIteratorWithRemove_IsFirst, None, TRowIteratorWithRemove)
TRowIteratorWithRemove.RemoveNext = new_instancemethod(_SnapTime.TRowIteratorWithRemove_RemoveNext, None, TRowIteratorWithRemove)
TRowIteratorWithRemove.CompareAtomicConst = new_instancemethod(_SnapTime.TRowIteratorWithRemove_CompareAtomicConst, None, TRowIteratorWithRemove)
TRowIteratorWithRemove_swigregister = _SnapTime.TRowIteratorWithRemove_swigregister
TRowIteratorWithRemove_swigregister(TRowIteratorWithRemove)

class TRowIteratorWithRemoveWrap(object):
    """Proxy of C++ TRowIteratorWithRemoveWrap class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _Table):
        """
        __init__(TRowIteratorWithRemoveWrap self, TTable _Table) -> TRowIteratorWithRemoveWrap

        Parameters
        ----------
        _Table: TTable *

        """
        _SnapTime.TRowIteratorWithRemoveWrap_swiginit(self, _SnapTime.new_TRowIteratorWithRemoveWrap(_Table))

    def begin(self):
        """
        begin(TRowIteratorWithRemoveWrap self) -> TRowIteratorWithRemove

        Parameters
        ----------
        self: TRowIteratorWithRemoveWrap *

        """
        return _SnapTime.TRowIteratorWithRemoveWrap_begin(self)


    def end(self):
        """
        end(TRowIteratorWithRemoveWrap self) -> TRowIteratorWithRemove

        Parameters
        ----------
        self: TRowIteratorWithRemoveWrap *

        """
        return _SnapTime.TRowIteratorWithRemoveWrap_end(self)

    __swig_destroy__ = _SnapTime.delete_TRowIteratorWithRemoveWrap
TRowIteratorWithRemoveWrap.begin = new_instancemethod(_SnapTime.TRowIteratorWithRemoveWrap_begin, None, TRowIteratorWithRemoveWrap)
TRowIteratorWithRemoveWrap.end = new_instancemethod(_SnapTime.TRowIteratorWithRemoveWrap_end, None, TRowIteratorWithRemoveWrap)
TRowIteratorWithRemoveWrap_swigregister = _SnapTime.TRowIteratorWithRemoveWrap_swigregister
TRowIteratorWithRemoveWrap_swigregister(TRowIteratorWithRemoveWrap)

class TTableIterator(object):
    """Proxy of C++ TTableIterator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, PTableV):
        """
        __init__(TTableIterator self, TVec< PTable,int64 > & PTableV) -> TTableIterator

        Parameters
        ----------
        PTableV: TVec< PTable,int64 > &

        """
        _SnapTime.TTableIterator_swiginit(self, _SnapTime.new_TTableIterator(PTableV))

    def Next(self):
        """
        Next(TTableIterator self) -> PTable

        Parameters
        ----------
        self: TTableIterator *

        """
        return _SnapTime.TTableIterator_Next(self)


    def HasNext(self):
        """
        HasNext(TTableIterator self) -> bool

        Parameters
        ----------
        self: TTableIterator *

        """
        return _SnapTime.TTableIterator_HasNext(self)

    __swig_destroy__ = _SnapTime.delete_TTableIterator
TTableIterator.Next = new_instancemethod(_SnapTime.TTableIterator_Next, None, TTableIterator)
TTableIterator.HasNext = new_instancemethod(_SnapTime.TTableIterator_HasNext, None, TTableIterator)
TTableIterator_swigregister = _SnapTime.TTableIterator_swigregister
TTableIterator_swigregister(TTableIterator)


def LoadCrossNet(Graph, Table, SrcCol, DstCol, EdgeAttrV):
    """
    LoadCrossNet(TCrossNet Graph, PTable Table, TStr SrcCol, TStr DstCol, TStr64V EdgeAttrV) -> int64

    Parameters
    ----------
    Graph: TCrossNet &
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    EdgeAttrV: TStr64V &

    """
    return _SnapTime.LoadCrossNet(Graph, Table, SrcCol, DstCol, EdgeAttrV)

def LoadMode(Graph, Table, NCol, NodeAttrV):
    """
    LoadMode(TModeNet Graph, PTable Table, TStr NCol, TStr64V NodeAttrV) -> int64

    Parameters
    ----------
    Graph: TModeNet &
    Table: PTable
    NCol: TStr const &
    NodeAttrV: TStr64V &

    """
    return _SnapTime.LoadMode(Graph, Table, NCol, NodeAttrV)
class TTable(object):
    """Proxy of C++ TTable class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetMP(Value):
        """
        SetMP(TInt64 Value)

        Parameters
        ----------
        Value: TInt64

        """
        return _SnapTime.TTable_SetMP(Value)

    SetMP = staticmethod(SetMP)

    def GetMP():
        """GetMP() -> TInt64"""
        return _SnapTime.TTable_GetMP()

    GetMP = staticmethod(GetMP)

    def NormalizeColName(ColName):
        """
        NormalizeColName(TStr ColName) -> TStr

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.TTable_NormalizeColName(ColName)

    NormalizeColName = staticmethod(NormalizeColName)

    def NormalizeColNameV(Cols):
        """
        NormalizeColNameV(TStr64V Cols) -> TStr64V

        Parameters
        ----------
        Cols: TStr64V const &

        """
        return _SnapTime.TTable_NormalizeColNameV(Cols)

    NormalizeColNameV = staticmethod(NormalizeColNameV)

    def AddIntCol(self, ColName):
        """
        AddIntCol(TTable self, TStr ColName)

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.TTable_AddIntCol(self, ColName)


    def AddFltCol(self, ColName):
        """
        AddFltCol(TTable self, TStr ColName)

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.TTable_AddFltCol(self, ColName)


    def AddStrCol(self, ColName):
        """
        AddStrCol(TTable self, TStr ColName)

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.TTable_AddStrCol(self, ColName)


    def GroupByIntColMP(self, GroupBy, Grouping, UsePhysicalIds=True):
        """
        GroupByIntColMP(TTable self, TStr GroupBy, THashMP< TInt64,TInt64V,int64 > & Grouping, TBool UsePhysicalIds=True)

        Parameters
        ----------
        GroupBy: TStr const &
        Grouping: THashMP< TInt64,TInt64V,int64 > &
        UsePhysicalIds: TBool

        GroupByIntColMP(TTable self, TStr GroupBy, THashMP< TInt64,TInt64V,int64 > & Grouping)

        Parameters
        ----------
        GroupBy: TStr const &
        Grouping: THashMP< TInt64,TInt64V,int64 > &

        """
        return _SnapTime.TTable_GroupByIntColMP(self, GroupBy, Grouping, UsePhysicalIds)


    def __init__(self, *args):
        """
        __init__(TTable self) -> TTable
        __init__(TTable self, TTableContext Context) -> TTable

        Parameters
        ----------
        Context: TTableContext *

        __init__(TTable self, Schema S, TTableContext Context) -> TTable

        Parameters
        ----------
        S: Schema const &
        Context: TTableContext *

        __init__(TTable self, TSIn SIn, TTableContext Context) -> TTable

        Parameters
        ----------
        SIn: TSIn &
        Context: TTableContext *

        __init__(TTable self, TInt64H H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> TTable

        Parameters
        ----------
        H: THash< TInt64,TInt64,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *
        IsStrKeys: TBool const

        __init__(TTable self, TInt64H H, TStr Col1, TStr Col2, TTableContext Context) -> TTable

        Parameters
        ----------
        H: THash< TInt64,TInt64,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *

        __init__(TTable self, TIntFlt64H H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> TTable

        Parameters
        ----------
        H: THash< TInt64,TFlt,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *
        IsStrKeys: TBool const

        __init__(TTable self, TIntFlt64H H, TStr Col1, TStr Col2, TTableContext Context) -> TTable

        Parameters
        ----------
        H: THash< TInt64,TFlt,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *

        __init__(TTable self, TTable Table) -> TTable

        Parameters
        ----------
        Table: TTable const &

        __init__(TTable self, TTable Table, TInt64V RowIds) -> TTable

        Parameters
        ----------
        Table: TTable const &
        RowIds: TInt64V const &

        """
        _SnapTime.TTable_swiginit(self, _SnapTime.new_TTable(*args))

    def New(*args):
        """
        New() -> PTable
        New(TTableContext Context) -> PTable

        Parameters
        ----------
        Context: TTableContext *

        New(Schema S, TTableContext Context) -> PTable

        Parameters
        ----------
        S: Schema const &
        Context: TTableContext *

        New(TInt64H H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> PTable

        Parameters
        ----------
        H: THash< TInt64,TInt64,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *
        IsStrKeys: TBool const

        New(TInt64H H, TStr Col1, TStr Col2, TTableContext Context) -> PTable

        Parameters
        ----------
        H: THash< TInt64,TInt64,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *

        New(TIntFlt64H H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> PTable

        Parameters
        ----------
        H: THash< TInt64,TFlt,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *
        IsStrKeys: TBool const

        New(TIntFlt64H H, TStr Col1, TStr Col2, TTableContext Context) -> PTable

        Parameters
        ----------
        H: THash< TInt64,TFlt,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *

        New(PTable Table) -> PTable

        Parameters
        ----------
        Table: PTable const

        """
        return _SnapTime.TTable_New(*args)

    New = staticmethod(New)

    def LoadSS(*args):
        """
        LoadSS(Schema S, TStr InFNm, TTableContext Context, char const & Separator, TBool HasTitleLine=False) -> PTable

        Parameters
        ----------
        S: Schema const &
        InFNm: TStr const &
        Context: TTableContext *
        Separator: char const &
        HasTitleLine: TBool

        LoadSS(Schema S, TStr InFNm, TTableContext Context, char const & Separator) -> PTable

        Parameters
        ----------
        S: Schema const &
        InFNm: TStr const &
        Context: TTableContext *
        Separator: char const &

        LoadSS(Schema S, TStr InFNm, TTableContext Context) -> PTable

        Parameters
        ----------
        S: Schema const &
        InFNm: TStr const &
        Context: TTableContext *

        LoadSS(Schema S, TStr InFNm, TTableContext Context, TInt64V RelevantCols, char const & Separator, TBool HasTitleLine=False) -> PTable

        Parameters
        ----------
        S: Schema const &
        InFNm: TStr const &
        Context: TTableContext *
        RelevantCols: TInt64V const &
        Separator: char const &
        HasTitleLine: TBool

        LoadSS(Schema S, TStr InFNm, TTableContext Context, TInt64V RelevantCols, char const & Separator) -> PTable

        Parameters
        ----------
        S: Schema const &
        InFNm: TStr const &
        Context: TTableContext *
        RelevantCols: TInt64V const &
        Separator: char const &

        LoadSS(Schema S, TStr InFNm, TTableContext Context, TInt64V RelevantCols) -> PTable

        Parameters
        ----------
        S: Schema const &
        InFNm: TStr const &
        Context: TTableContext *
        RelevantCols: TInt64V const &

        """
        return _SnapTime.TTable_LoadSS(*args)

    LoadSS = staticmethod(LoadSS)

    def SaveSS(self, OutFNm):
        """
        SaveSS(TTable self, TStr OutFNm)

        Parameters
        ----------
        OutFNm: TStr const &

        """
        return _SnapTime.TTable_SaveSS(self, OutFNm)


    def SaveBin(self, OutFNm):
        """
        SaveBin(TTable self, TStr OutFNm)

        Parameters
        ----------
        OutFNm: TStr const &

        """
        return _SnapTime.TTable_SaveBin(self, OutFNm)


    def Load(SIn, Context):
        """
        Load(TSIn SIn, TTableContext Context) -> PTable

        Parameters
        ----------
        SIn: TSIn &
        Context: TTableContext *

        """
        return _SnapTime.TTable_Load(SIn, Context)

    Load = staticmethod(Load)

    def LoadShM(ShMIn, Context):
        """
        LoadShM(TShMIn ShMIn, TTableContext Context) -> PTable

        Parameters
        ----------
        ShMIn: TShMIn &
        Context: TTableContext *

        """
        return _SnapTime.TTable_LoadShM(ShMIn, Context)

    LoadShM = staticmethod(LoadShM)

    def Save(self, SOut):
        """
        Save(TTable self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TTable_Save(self, SOut)


    def Dump(self, *args):
        """
        Dump(TTable self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(TTable self)

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_Dump(self, *args)


    def TableFromHashMap(*args):
        """
        TableFromHashMap(TInt64H H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> PTable

        Parameters
        ----------
        H: THash< TInt64,TInt64,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *
        IsStrKeys: TBool const

        TableFromHashMap(TInt64H H, TStr Col1, TStr Col2, TTableContext Context) -> PTable

        Parameters
        ----------
        H: THash< TInt64,TInt64,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *

        TableFromHashMap(TIntFlt64H H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> PTable

        Parameters
        ----------
        H: THash< TInt64,TFlt,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *
        IsStrKeys: TBool const

        TableFromHashMap(TIntFlt64H H, TStr Col1, TStr Col2, TTableContext Context) -> PTable

        Parameters
        ----------
        H: THash< TInt64,TFlt,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *

        """
        return _SnapTime.TTable_TableFromHashMap(*args)

    TableFromHashMap = staticmethod(TableFromHashMap)

    def AddRow(self, Row):
        """
        AddRow(TTable self, TTableRow Row)

        Parameters
        ----------
        Row: TTableRow const &

        """
        return _SnapTime.TTable_AddRow(self, Row)


    def GetContext(self):
        """
        GetContext(TTable self) -> TTableContext

        Parameters
        ----------
        self: TTable *

        """
        return _SnapTime.TTable_GetContext(self)


    def ChangeContext(self, Context):
        """
        ChangeContext(TTable self, TTableContext Context) -> TTableContext

        Parameters
        ----------
        Context: TTableContext *

        """
        return _SnapTime.TTable_ChangeContext(self, Context)


    def GetColIdx(self, ColName):
        """
        GetColIdx(TTable self, TStr ColName) -> TInt64

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.TTable_GetColIdx(self, ColName)


    def GetIntVal(self, ColName, RowIdx):
        """
        GetIntVal(TTable self, TStr ColName, TInt64 RowIdx) -> TInt64

        Parameters
        ----------
        ColName: TStr const &
        RowIdx: TInt64 const &

        """
        return _SnapTime.TTable_GetIntVal(self, ColName, RowIdx)


    def GetFltVal(self, ColName, RowIdx):
        """
        GetFltVal(TTable self, TStr ColName, TInt64 RowIdx) -> TFlt

        Parameters
        ----------
        ColName: TStr const &
        RowIdx: TInt64 const &

        """
        return _SnapTime.TTable_GetFltVal(self, ColName, RowIdx)


    def GetStrVal(self, ColName, RowIdx):
        """
        GetStrVal(TTable self, TStr ColName, TInt64 RowIdx) -> TStr

        Parameters
        ----------
        ColName: TStr const &
        RowIdx: TInt64 const &

        """
        return _SnapTime.TTable_GetStrVal(self, ColName, RowIdx)


    def GetStrMapById(self, ColIdx, RowIdx):
        """
        GetStrMapById(TTable self, TInt64 ColIdx, TInt64 RowIdx) -> TInt64

        Parameters
        ----------
        ColIdx: TInt64
        RowIdx: TInt64

        """
        return _SnapTime.TTable_GetStrMapById(self, ColIdx, RowIdx)


    def GetStrMapByName(self, ColName, RowIdx):
        """
        GetStrMapByName(TTable self, TStr ColName, TInt64 RowIdx) -> TInt64

        Parameters
        ----------
        ColName: TStr const &
        RowIdx: TInt64

        """
        return _SnapTime.TTable_GetStrMapByName(self, ColName, RowIdx)


    def GetStrValById(self, ColIdx, RowIdx):
        """
        GetStrValById(TTable self, TInt64 ColIdx, TInt64 RowIdx) -> TStr

        Parameters
        ----------
        ColIdx: TInt64
        RowIdx: TInt64

        """
        return _SnapTime.TTable_GetStrValById(self, ColIdx, RowIdx)


    def GetStrValByName(self, ColName, RowIdx):
        """
        GetStrValByName(TTable self, TStr ColName, TInt64 RowIdx) -> TStr

        Parameters
        ----------
        ColName: TStr const &
        RowIdx: TInt64 const &

        """
        return _SnapTime.TTable_GetStrValByName(self, ColName, RowIdx)


    def GetIntRowIdxByVal(self, ColName, Val):
        """
        GetIntRowIdxByVal(TTable self, TStr ColName, TInt64 Val) -> TInt64V

        Parameters
        ----------
        ColName: TStr const &
        Val: TInt64 const &

        """
        return _SnapTime.TTable_GetIntRowIdxByVal(self, ColName, Val)


    def GetStrRowIdxByMap(self, ColName, Map):
        """
        GetStrRowIdxByMap(TTable self, TStr ColName, TInt64 Map) -> TInt64V

        Parameters
        ----------
        ColName: TStr const &
        Map: TInt64 const &

        """
        return _SnapTime.TTable_GetStrRowIdxByMap(self, ColName, Map)


    def GetFltRowIdxByVal(self, ColName, Val):
        """
        GetFltRowIdxByVal(TTable self, TStr ColName, TFlt Val) -> TInt64V

        Parameters
        ----------
        ColName: TStr const &
        Val: TFlt const &

        """
        return _SnapTime.TTable_GetFltRowIdxByVal(self, ColName, Val)


    def RequestIndexInt(self, ColName):
        """
        RequestIndexInt(TTable self, TStr ColName) -> TInt64

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.TTable_RequestIndexInt(self, ColName)


    def RequestIndexFlt(self, ColName):
        """
        RequestIndexFlt(TTable self, TStr ColName) -> TInt64

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.TTable_RequestIndexFlt(self, ColName)


    def RequestIndexStrMap(self, ColName):
        """
        RequestIndexStrMap(TTable self, TStr ColName) -> TInt64

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.TTable_RequestIndexStrMap(self, ColName)


    def GetStr(self, KeyId):
        """
        GetStr(TTable self, TInt64 KeyId) -> TStr

        Parameters
        ----------
        KeyId: TInt64 const &

        """
        return _SnapTime.TTable_GetStr(self, KeyId)


    def GetIntValAtRowIdx(self, ColIdx, RowIdx):
        """
        GetIntValAtRowIdx(TTable self, TInt64 ColIdx, TInt64 RowIdx) -> TInt64

        Parameters
        ----------
        ColIdx: TInt64 const &
        RowIdx: TInt64 const &

        """
        return _SnapTime.TTable_GetIntValAtRowIdx(self, ColIdx, RowIdx)


    def GetFltValAtRowIdx(self, ColIdx, RowIdx):
        """
        GetFltValAtRowIdx(TTable self, TInt64 ColIdx, TInt64 RowIdx) -> TFlt

        Parameters
        ----------
        ColIdx: TInt64 const &
        RowIdx: TInt64 const &

        """
        return _SnapTime.TTable_GetFltValAtRowIdx(self, ColIdx, RowIdx)


    def GetSchema(self, *args):
        """
        GetSchema(TTable self, TStr InFNm, Schema S, char const & Separator)

        Parameters
        ----------
        InFNm: TStr const &
        S: Schema &
        Separator: char const &

        GetSchema(TTable self, TStr InFNm, Schema S)

        Parameters
        ----------
        InFNm: TStr const &
        S: Schema &

        GetSchema(TTable self) -> Schema

        Parameters
        ----------
        self: TTable *

        """
        return _SnapTime.TTable_GetSchema(self, *args)


    def ToGraphSequence(self, *args):
        """
        ToGraphSequence(TTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt64 WindowSize, TInt64 JumpSize, TInt64 StartVal, TInt64 EndVal) -> TVec< PNEANet,int64 >

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        WindowSize: TInt64
        JumpSize: TInt64
        StartVal: TInt64
        EndVal: TInt64

        ToGraphSequence(TTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt64 WindowSize, TInt64 JumpSize, TInt64 StartVal) -> TVec< PNEANet,int64 >

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        WindowSize: TInt64
        JumpSize: TInt64
        StartVal: TInt64

        ToGraphSequence(TTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt64 WindowSize, TInt64 JumpSize) -> TVec< PNEANet,int64 >

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        WindowSize: TInt64
        JumpSize: TInt64

        """
        return _SnapTime.TTable_ToGraphSequence(self, *args)


    def ToVarGraphSequence(self, SplitAttr, AggrPolicy, SplitIntervals):
        """
        ToVarGraphSequence(TTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TIntPr64V SplitIntervals) -> TVec< PNEANet,int64 >

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        SplitIntervals: TIntPr64V

        """
        return _SnapTime.TTable_ToVarGraphSequence(self, SplitAttr, AggrPolicy, SplitIntervals)


    def ToGraphPerGroup(self, GroupAttr, AggrPolicy):
        """
        ToGraphPerGroup(TTable self, TStr GroupAttr, TAttrAggr AggrPolicy) -> TVec< PNEANet,int64 >

        Parameters
        ----------
        GroupAttr: TStr
        AggrPolicy: enum TAttrAggr

        """
        return _SnapTime.TTable_ToGraphPerGroup(self, GroupAttr, AggrPolicy)


    def ToGraphSequenceIterator(self, *args):
        """
        ToGraphSequenceIterator(TTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt64 WindowSize, TInt64 JumpSize, TInt64 StartVal, TInt64 EndVal) -> PNEANet

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        WindowSize: TInt64
        JumpSize: TInt64
        StartVal: TInt64
        EndVal: TInt64

        ToGraphSequenceIterator(TTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt64 WindowSize, TInt64 JumpSize, TInt64 StartVal) -> PNEANet

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        WindowSize: TInt64
        JumpSize: TInt64
        StartVal: TInt64

        ToGraphSequenceIterator(TTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt64 WindowSize, TInt64 JumpSize) -> PNEANet

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        WindowSize: TInt64
        JumpSize: TInt64

        """
        return _SnapTime.TTable_ToGraphSequenceIterator(self, *args)


    def ToVarGraphSequenceIterator(self, SplitAttr, AggrPolicy, SplitIntervals):
        """
        ToVarGraphSequenceIterator(TTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TIntPr64V SplitIntervals) -> PNEANet

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        SplitIntervals: TIntPr64V

        """
        return _SnapTime.TTable_ToVarGraphSequenceIterator(self, SplitAttr, AggrPolicy, SplitIntervals)


    def ToGraphPerGroupIterator(self, GroupAttr, AggrPolicy):
        """
        ToGraphPerGroupIterator(TTable self, TStr GroupAttr, TAttrAggr AggrPolicy) -> PNEANet

        Parameters
        ----------
        GroupAttr: TStr
        AggrPolicy: enum TAttrAggr

        """
        return _SnapTime.TTable_ToGraphPerGroupIterator(self, GroupAttr, AggrPolicy)


    def NextGraphIterator(self):
        """
        NextGraphIterator(TTable self) -> PNEANet

        Parameters
        ----------
        self: TTable *

        """
        return _SnapTime.TTable_NextGraphIterator(self)


    def IsLastGraphOfSequence(self):
        """
        IsLastGraphOfSequence(TTable self) -> TBool

        Parameters
        ----------
        self: TTable *

        """
        return _SnapTime.TTable_IsLastGraphOfSequence(self)


    def GetSrcCol(self):
        """
        GetSrcCol(TTable self) -> TStr

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_GetSrcCol(self)


    def SetSrcCol(self, Src):
        """
        SetSrcCol(TTable self, TStr Src)

        Parameters
        ----------
        Src: TStr const &

        """
        return _SnapTime.TTable_SetSrcCol(self, Src)


    def GetDstCol(self):
        """
        GetDstCol(TTable self) -> TStr

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_GetDstCol(self)


    def SetDstCol(self, Dst):
        """
        SetDstCol(TTable self, TStr Dst)

        Parameters
        ----------
        Dst: TStr const &

        """
        return _SnapTime.TTable_SetDstCol(self, Dst)


    def AddEdgeAttr(self, *args):
        """
        AddEdgeAttr(TTable self, TStr Attr)

        Parameters
        ----------
        Attr: TStr const &

        AddEdgeAttr(TTable self, TStr64V Attrs)

        Parameters
        ----------
        Attrs: TStr64V &

        """
        return _SnapTime.TTable_AddEdgeAttr(self, *args)


    def AddSrcNodeAttr(self, *args):
        """
        AddSrcNodeAttr(TTable self, TStr Attr)

        Parameters
        ----------
        Attr: TStr const &

        AddSrcNodeAttr(TTable self, TStr64V Attrs)

        Parameters
        ----------
        Attrs: TStr64V &

        """
        return _SnapTime.TTable_AddSrcNodeAttr(self, *args)


    def AddDstNodeAttr(self, *args):
        """
        AddDstNodeAttr(TTable self, TStr Attr)

        Parameters
        ----------
        Attr: TStr const &

        AddDstNodeAttr(TTable self, TStr64V Attrs)

        Parameters
        ----------
        Attrs: TStr64V &

        """
        return _SnapTime.TTable_AddDstNodeAttr(self, *args)


    def AddNodeAttr(self, *args):
        """
        AddNodeAttr(TTable self, TStr Attr)

        Parameters
        ----------
        Attr: TStr const &

        AddNodeAttr(TTable self, TStr64V Attrs)

        Parameters
        ----------
        Attrs: TStr64V &

        """
        return _SnapTime.TTable_AddNodeAttr(self, *args)


    def SetCommonNodeAttrs(self, SrcAttr, DstAttr, CommonAttrName):
        """
        SetCommonNodeAttrs(TTable self, TStr SrcAttr, TStr DstAttr, TStr CommonAttrName)

        Parameters
        ----------
        SrcAttr: TStr const &
        DstAttr: TStr const &
        CommonAttrName: TStr const &

        """
        return _SnapTime.TTable_SetCommonNodeAttrs(self, SrcAttr, DstAttr, CommonAttrName)


    def GetSrcNodeIntAttrV(self):
        """
        GetSrcNodeIntAttrV(TTable self) -> TStr64V

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_GetSrcNodeIntAttrV(self)


    def GetDstNodeIntAttrV(self):
        """
        GetDstNodeIntAttrV(TTable self) -> TStr64V

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_GetDstNodeIntAttrV(self)


    def GetEdgeIntAttrV(self):
        """
        GetEdgeIntAttrV(TTable self) -> TStr64V

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_GetEdgeIntAttrV(self)


    def GetSrcNodeFltAttrV(self):
        """
        GetSrcNodeFltAttrV(TTable self) -> TStr64V

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_GetSrcNodeFltAttrV(self)


    def GetDstNodeFltAttrV(self):
        """
        GetDstNodeFltAttrV(TTable self) -> TStr64V

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_GetDstNodeFltAttrV(self)


    def GetEdgeFltAttrV(self):
        """
        GetEdgeFltAttrV(TTable self) -> TStr64V

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_GetEdgeFltAttrV(self)


    def GetSrcNodeStrAttrV(self):
        """
        GetSrcNodeStrAttrV(TTable self) -> TStr64V

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_GetSrcNodeStrAttrV(self)


    def GetDstNodeStrAttrV(self):
        """
        GetDstNodeStrAttrV(TTable self) -> TStr64V

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_GetDstNodeStrAttrV(self)


    def GetEdgeStrAttrV(self):
        """
        GetEdgeStrAttrV(TTable self) -> TStr64V

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_GetEdgeStrAttrV(self)


    def GetNodeTable(Network, Context):
        """
        GetNodeTable(PNEANet Network, TTableContext Context) -> PTable

        Parameters
        ----------
        Network: PNEANet const &
        Context: TTableContext *

        """
        return _SnapTime.TTable_GetNodeTable(Network, Context)

    GetNodeTable = staticmethod(GetNodeTable)

    def GetEdgeTable(Network, Context):
        """
        GetEdgeTable(PNEANet Network, TTableContext Context) -> PTable

        Parameters
        ----------
        Network: PNEANet const &
        Context: TTableContext *

        """
        return _SnapTime.TTable_GetEdgeTable(Network, Context)

    GetEdgeTable = staticmethod(GetEdgeTable)

    def GetEdgeTablePN(Network, Context):
        """
        GetEdgeTablePN(PNGraphMP Network, TTableContext Context) -> PTable

        Parameters
        ----------
        Network: PNGraphMP const &
        Context: TTableContext *

        """
        return _SnapTime.TTable_GetEdgeTablePN(Network, Context)

    GetEdgeTablePN = staticmethod(GetEdgeTablePN)

    def GetFltNodePropertyTable(Network, Property, NodeAttrName, NodeAttrType, PropertyAttrName, Context):
        """
        GetFltNodePropertyTable(PNEANet Network, TIntFlt64H Property, TStr NodeAttrName, TAttrType const & NodeAttrType, TStr PropertyAttrName, TTableContext Context) -> PTable

        Parameters
        ----------
        Network: PNEANet const &
        Property: TIntFlt64H const &
        NodeAttrName: TStr const &
        NodeAttrType: TAttrType const &
        PropertyAttrName: TStr const &
        Context: TTableContext *

        """
        return _SnapTime.TTable_GetFltNodePropertyTable(Network, Property, NodeAttrName, NodeAttrType, PropertyAttrName, Context)

    GetFltNodePropertyTable = staticmethod(GetFltNodePropertyTable)

    def GetColType(self, ColName):
        """
        GetColType(TTable self, TStr ColName) -> TAttrType

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.TTable_GetColType(self, ColName)


    def GetNumRows(self):
        """
        GetNumRows(TTable self) -> TInt64

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_GetNumRows(self)


    def GetNumValidRows(self):
        """
        GetNumValidRows(TTable self) -> TInt64

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_GetNumValidRows(self)


    def GetRowIdMap(self):
        """
        GetRowIdMap(TTable self) -> TInt64H

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_GetRowIdMap(self)


    def BegRI(self):
        """
        BegRI(TTable self) -> TRowIterator

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_BegRI(self)


    def EndRI(self):
        """
        EndRI(TTable self) -> TRowIterator

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_EndRI(self)


    def GetRI(self):
        """
        GetRI(TTable self) -> TRowIteratorWrap

        Parameters
        ----------
        self: TTable const *

        """
        return _SnapTime.TTable_GetRI(self)


    def BegRIWR(self):
        """
        BegRIWR(TTable self) -> TRowIteratorWithRemove

        Parameters
        ----------
        self: TTable *

        """
        return _SnapTime.TTable_BegRIWR(self)


    def EndRIWR(self):
        """
        EndRIWR(TTable self) -> TRowIteratorWithRemove

        Parameters
        ----------
        self: TTable *

        """
        return _SnapTime.TTable_EndRIWR(self)


    def GetRIWR(self):
        """
        GetRIWR(TTable self) -> TRowIteratorWithRemoveWrap

        Parameters
        ----------
        self: TTable *

        """
        return _SnapTime.TTable_GetRIWR(self)


    def GetPartitionRanges(self, Partitions, NumPartitions):
        """
        GetPartitionRanges(TTable self, TIntPr64V Partitions, TInt64 NumPartitions)

        Parameters
        ----------
        Partitions: TIntPr64V &
        NumPartitions: TInt64

        """
        return _SnapTime.TTable_GetPartitionRanges(self, Partitions, NumPartitions)


    def Rename(self, Column, NewLabel):
        """
        Rename(TTable self, TStr Column, TStr NewLabel)

        Parameters
        ----------
        Column: TStr const &
        NewLabel: TStr const &

        """
        return _SnapTime.TTable_Rename(self, Column, NewLabel)


    def Unique(self, *args):
        """
        Unique(TTable self, TStr Col)

        Parameters
        ----------
        Col: TStr const &

        Unique(TTable self, TStr64V Cols, TBool Ordered=True)

        Parameters
        ----------
        Cols: TStr64V const &
        Ordered: TBool

        Unique(TTable self, TStr64V Cols)

        Parameters
        ----------
        Cols: TStr64V const &

        """
        return _SnapTime.TTable_Unique(self, *args)


    def Select(self, *args):
        """
        Select(TTable self, TPredicate Predicate, TInt64V SelectedRows, TBool Remove=True)

        Parameters
        ----------
        Predicate: TPredicate &
        SelectedRows: TInt64V &
        Remove: TBool

        Select(TTable self, TPredicate Predicate, TInt64V SelectedRows)

        Parameters
        ----------
        Predicate: TPredicate &
        SelectedRows: TInt64V &

        Select(TTable self, TPredicate Predicate)

        Parameters
        ----------
        Predicate: TPredicate &

        """
        return _SnapTime.TTable_Select(self, *args)


    def Classify(self, Predicate, LabelName, PositiveLabel=1, NegativeLabel=0):
        """
        Classify(TTable self, TPredicate Predicate, TStr LabelName, TInt64 PositiveLabel=1, TInt64 NegativeLabel=0)

        Parameters
        ----------
        Predicate: TPredicate &
        LabelName: TStr const &
        PositiveLabel: TInt64 const &
        NegativeLabel: TInt64 const &

        Classify(TTable self, TPredicate Predicate, TStr LabelName, TInt64 PositiveLabel=1)

        Parameters
        ----------
        Predicate: TPredicate &
        LabelName: TStr const &
        PositiveLabel: TInt64 const &

        Classify(TTable self, TPredicate Predicate, TStr LabelName)

        Parameters
        ----------
        Predicate: TPredicate &
        LabelName: TStr const &

        """
        return _SnapTime.TTable_Classify(self, Predicate, LabelName, PositiveLabel, NegativeLabel)


    def SelectAtomic(self, *args):
        """
        SelectAtomic(TTable self, TStr Col1, TStr Col2, TPredComp Cmp, TInt64V SelectedRows, TBool Remove=True)

        Parameters
        ----------
        Col1: TStr const &
        Col2: TStr const &
        Cmp: enum TPredComp
        SelectedRows: TInt64V &
        Remove: TBool

        SelectAtomic(TTable self, TStr Col1, TStr Col2, TPredComp Cmp, TInt64V SelectedRows)

        Parameters
        ----------
        Col1: TStr const &
        Col2: TStr const &
        Cmp: enum TPredComp
        SelectedRows: TInt64V &

        SelectAtomic(TTable self, TStr Col1, TStr Col2, TPredComp Cmp)

        Parameters
        ----------
        Col1: TStr const &
        Col2: TStr const &
        Cmp: enum TPredComp

        """
        return _SnapTime.TTable_SelectAtomic(self, *args)


    def ClassifyAtomic(self, Col1, Col2, Cmp, LabelName, PositiveLabel=1, NegativeLabel=0):
        """
        ClassifyAtomic(TTable self, TStr Col1, TStr Col2, TPredComp Cmp, TStr LabelName, TInt64 PositiveLabel=1, TInt64 NegativeLabel=0)

        Parameters
        ----------
        Col1: TStr const &
        Col2: TStr const &
        Cmp: enum TPredComp
        LabelName: TStr const &
        PositiveLabel: TInt64 const &
        NegativeLabel: TInt64 const &

        ClassifyAtomic(TTable self, TStr Col1, TStr Col2, TPredComp Cmp, TStr LabelName, TInt64 PositiveLabel=1)

        Parameters
        ----------
        Col1: TStr const &
        Col2: TStr const &
        Cmp: enum TPredComp
        LabelName: TStr const &
        PositiveLabel: TInt64 const &

        ClassifyAtomic(TTable self, TStr Col1, TStr Col2, TPredComp Cmp, TStr LabelName)

        Parameters
        ----------
        Col1: TStr const &
        Col2: TStr const &
        Cmp: enum TPredComp
        LabelName: TStr const &

        """
        return _SnapTime.TTable_ClassifyAtomic(self, Col1, Col2, Cmp, LabelName, PositiveLabel, NegativeLabel)


    def SelectAtomicConst(self, Col, Val, Cmp, SelectedRows, SelectedTable, Remove=True, Table=True):
        """
        SelectAtomicConst(TTable self, TStr Col, TPrimitive Val, TPredComp Cmp, TInt64V SelectedRows, PTable SelectedTable, TBool Remove=True, TBool Table=True)

        Parameters
        ----------
        Col: TStr const &
        Val: TPrimitive const &
        Cmp: enum TPredComp
        SelectedRows: TInt64V &
        SelectedTable: PTable &
        Remove: TBool
        Table: TBool

        SelectAtomicConst(TTable self, TStr Col, TPrimitive Val, TPredComp Cmp, TInt64V SelectedRows, PTable SelectedTable, TBool Remove=True)

        Parameters
        ----------
        Col: TStr const &
        Val: TPrimitive const &
        Cmp: enum TPredComp
        SelectedRows: TInt64V &
        SelectedTable: PTable &
        Remove: TBool

        SelectAtomicConst(TTable self, TStr Col, TPrimitive Val, TPredComp Cmp, TInt64V SelectedRows, PTable SelectedTable)

        Parameters
        ----------
        Col: TStr const &
        Val: TPrimitive const &
        Cmp: enum TPredComp
        SelectedRows: TInt64V &
        SelectedTable: PTable &

        """
        return _SnapTime.TTable_SelectAtomicConst(self, Col, Val, Cmp, SelectedRows, SelectedTable, Remove, Table)


    def SelectAtomicIntConst(self, *args):
        """
        SelectAtomicIntConst(TTable self, TStr Col, TInt64 Val, TPredComp Cmp)

        Parameters
        ----------
        Col: TStr const &
        Val: TInt64 const &
        Cmp: enum TPredComp

        SelectAtomicIntConst(TTable self, TStr Col, TInt64 Val, TPredComp Cmp, PTable SelectedTable)

        Parameters
        ----------
        Col: TStr const &
        Val: TInt64 const &
        Cmp: enum TPredComp
        SelectedTable: PTable &

        """
        return _SnapTime.TTable_SelectAtomicIntConst(self, *args)


    def SelectAtomicStrConst(self, *args):
        """
        SelectAtomicStrConst(TTable self, TStr Col, TStr Val, TPredComp Cmp)

        Parameters
        ----------
        Col: TStr const &
        Val: TStr const &
        Cmp: enum TPredComp

        SelectAtomicStrConst(TTable self, TStr Col, TStr Val, TPredComp Cmp, PTable SelectedTable)

        Parameters
        ----------
        Col: TStr const &
        Val: TStr const &
        Cmp: enum TPredComp
        SelectedTable: PTable &

        """
        return _SnapTime.TTable_SelectAtomicStrConst(self, *args)


    def SelectAtomicFltConst(self, *args):
        """
        SelectAtomicFltConst(TTable self, TStr Col, TFlt Val, TPredComp Cmp)

        Parameters
        ----------
        Col: TStr const &
        Val: TFlt const &
        Cmp: enum TPredComp

        SelectAtomicFltConst(TTable self, TStr Col, TFlt Val, TPredComp Cmp, PTable SelectedTable)

        Parameters
        ----------
        Col: TStr const &
        Val: TFlt const &
        Cmp: enum TPredComp
        SelectedTable: PTable &

        """
        return _SnapTime.TTable_SelectAtomicFltConst(self, *args)


    def Group(self, GroupBy, GroupColName, Ordered=True, UsePhysicalIds=True):
        """
        Group(TTable self, TStr64V GroupBy, TStr GroupColName, TBool Ordered=True, TBool UsePhysicalIds=True)

        Parameters
        ----------
        GroupBy: TStr64V const &
        GroupColName: TStr const &
        Ordered: TBool
        UsePhysicalIds: TBool

        Group(TTable self, TStr64V GroupBy, TStr GroupColName, TBool Ordered=True)

        Parameters
        ----------
        GroupBy: TStr64V const &
        GroupColName: TStr const &
        Ordered: TBool

        Group(TTable self, TStr64V GroupBy, TStr GroupColName)

        Parameters
        ----------
        GroupBy: TStr64V const &
        GroupColName: TStr const &

        """
        return _SnapTime.TTable_Group(self, GroupBy, GroupColName, Ordered, UsePhysicalIds)


    def Count(self, CountColName, Col):
        """
        Count(TTable self, TStr CountColName, TStr Col)

        Parameters
        ----------
        CountColName: TStr const &
        Col: TStr const &

        """
        return _SnapTime.TTable_Count(self, CountColName, Col)


    def Order(self, *args):
        """
        Order(TTable self, TStr64V OrderBy, TStr OrderColName, TBool ResetRankByMSC=False, TBool Asc=True)

        Parameters
        ----------
        OrderBy: TStr64V const &
        OrderColName: TStr
        ResetRankByMSC: TBool
        Asc: TBool

        Order(TTable self, TStr64V OrderBy, TStr OrderColName, TBool ResetRankByMSC=False)

        Parameters
        ----------
        OrderBy: TStr64V const &
        OrderColName: TStr
        ResetRankByMSC: TBool

        Order(TTable self, TStr64V OrderBy, TStr OrderColName)

        Parameters
        ----------
        OrderBy: TStr64V const &
        OrderColName: TStr

        Order(TTable self, TStr64V OrderBy)

        Parameters
        ----------
        OrderBy: TStr64V const &

        """
        return _SnapTime.TTable_Order(self, *args)


    def Aggregate(self, GroupByAttrs, AggOp, ValAttr, ResAttr, Ordered=True):
        """
        Aggregate(TTable self, TStr64V GroupByAttrs, TAttrAggr AggOp, TStr ValAttr, TStr ResAttr, TBool Ordered=True)

        Parameters
        ----------
        GroupByAttrs: TStr64V const &
        AggOp: enum TAttrAggr
        ValAttr: TStr const &
        ResAttr: TStr const &
        Ordered: TBool

        Aggregate(TTable self, TStr64V GroupByAttrs, TAttrAggr AggOp, TStr ValAttr, TStr ResAttr)

        Parameters
        ----------
        GroupByAttrs: TStr64V const &
        AggOp: enum TAttrAggr
        ValAttr: TStr const &
        ResAttr: TStr const &

        """
        return _SnapTime.TTable_Aggregate(self, GroupByAttrs, AggOp, ValAttr, ResAttr, Ordered)


    def AggregateCols(self, AggrAttrs, AggOp, ResAttr):
        """
        AggregateCols(TTable self, TStr64V AggrAttrs, TAttrAggr AggOp, TStr ResAttr)

        Parameters
        ----------
        AggrAttrs: TStr64V const &
        AggOp: enum TAttrAggr
        ResAttr: TStr const &

        """
        return _SnapTime.TTable_AggregateCols(self, AggrAttrs, AggOp, ResAttr)


    def SpliceByGroup(self, GroupByAttrs, Ordered=True):
        """
        SpliceByGroup(TTable self, TStr64V GroupByAttrs, TBool Ordered=True) -> TVec< PTable,int64 >

        Parameters
        ----------
        GroupByAttrs: TStr64V const &
        Ordered: TBool

        SpliceByGroup(TTable self, TStr64V GroupByAttrs) -> TVec< PTable,int64 >

        Parameters
        ----------
        GroupByAttrs: TStr64V const &

        """
        return _SnapTime.TTable_SpliceByGroup(self, GroupByAttrs, Ordered)


    def Join(self, *args):
        """
        Join(TTable self, TStr Col1, TTable Table, TStr Col2) -> PTable

        Parameters
        ----------
        Col1: TStr const &
        Table: TTable const &
        Col2: TStr const &

        Join(TTable self, TStr Col1, PTable Table, TStr Col2) -> PTable

        Parameters
        ----------
        Col1: TStr const &
        Table: PTable const &
        Col2: TStr const &

        """
        return _SnapTime.TTable_Join(self, *args)


    def ThresholdJoin(self, KeyCol1, JoinCol1, Table, KeyCol2, JoinCol2, Threshold, PerJoinKey=False):
        """
        ThresholdJoin(TTable self, TStr KeyCol1, TStr JoinCol1, TTable Table, TStr KeyCol2, TStr JoinCol2, TInt64 Threshold, TBool PerJoinKey=False) -> PTable

        Parameters
        ----------
        KeyCol1: TStr const &
        JoinCol1: TStr const &
        Table: TTable const &
        KeyCol2: TStr const &
        JoinCol2: TStr const &
        Threshold: TInt64
        PerJoinKey: TBool

        ThresholdJoin(TTable self, TStr KeyCol1, TStr JoinCol1, TTable Table, TStr KeyCol2, TStr JoinCol2, TInt64 Threshold) -> PTable

        Parameters
        ----------
        KeyCol1: TStr const &
        JoinCol1: TStr const &
        Table: TTable const &
        KeyCol2: TStr const &
        JoinCol2: TStr const &
        Threshold: TInt64

        """
        return _SnapTime.TTable_ThresholdJoin(self, KeyCol1, JoinCol1, Table, KeyCol2, JoinCol2, Threshold, PerJoinKey)


    def SelfJoin(self, Col):
        """
        SelfJoin(TTable self, TStr Col) -> PTable

        Parameters
        ----------
        Col: TStr const &

        """
        return _SnapTime.TTable_SelfJoin(self, Col)


    def SelfSimJoin(self, Cols, DistanceColName, SimType, Threshold):
        """
        SelfSimJoin(TTable self, TStr64V Cols, TStr DistanceColName, TSimType const & SimType, TFlt Threshold) -> PTable

        Parameters
        ----------
        Cols: TStr64V const &
        DistanceColName: TStr const &
        SimType: TSimType const &
        Threshold: TFlt const &

        """
        return _SnapTime.TTable_SelfSimJoin(self, Cols, DistanceColName, SimType, Threshold)


    def SelfSimJoinPerGroup(self, *args):
        """
        SelfSimJoinPerGroup(TTable self, TStr GroupAttr, TStr SimCol, TStr DistanceColName, TSimType const & SimType, TFlt Threshold) -> PTable

        Parameters
        ----------
        GroupAttr: TStr const &
        SimCol: TStr const &
        DistanceColName: TStr const &
        SimType: TSimType const &
        Threshold: TFlt const &

        SelfSimJoinPerGroup(TTable self, TStr64V GroupBy, TStr SimCol, TStr DistanceColName, TSimType const & SimType, TFlt Threshold) -> PTable

        Parameters
        ----------
        GroupBy: TStr64V const &
        SimCol: TStr const &
        DistanceColName: TStr const &
        SimType: TSimType const &
        Threshold: TFlt const &

        """
        return _SnapTime.TTable_SelfSimJoinPerGroup(self, *args)


    def SimJoin(self, Cols1, Table, Cols2, DistanceColName, SimType, Threshold):
        """
        SimJoin(TTable self, TStr64V Cols1, TTable Table, TStr64V Cols2, TStr DistanceColName, TSimType const & SimType, TFlt Threshold) -> PTable

        Parameters
        ----------
        Cols1: TStr64V const &
        Table: TTable const &
        Cols2: TStr64V const &
        DistanceColName: TStr const &
        SimType: TSimType const &
        Threshold: TFlt const &

        """
        return _SnapTime.TTable_SimJoin(self, Cols1, Table, Cols2, DistanceColName, SimType, Threshold)


    def SelectFirstNRows(self, N):
        """
        SelectFirstNRows(TTable self, TInt64 N)

        Parameters
        ----------
        N: TInt64 const &

        """
        return _SnapTime.TTable_SelectFirstNRows(self, N)


    def Defrag(self):
        """
        Defrag(TTable self)

        Parameters
        ----------
        self: TTable *

        """
        return _SnapTime.TTable_Defrag(self)


    def StoreIntCol(self, ColName, ColVals):
        """
        StoreIntCol(TTable self, TStr ColName, TInt64V ColVals)

        Parameters
        ----------
        ColName: TStr const &
        ColVals: TInt64V const &

        """
        return _SnapTime.TTable_StoreIntCol(self, ColName, ColVals)


    def StoreFltCol(self, ColName, ColVals):
        """
        StoreFltCol(TTable self, TStr ColName, TFlt64V ColVals)

        Parameters
        ----------
        ColName: TStr const &
        ColVals: TFlt64V const &

        """
        return _SnapTime.TTable_StoreFltCol(self, ColName, ColVals)


    def StoreStrCol(self, ColName, ColVals):
        """
        StoreStrCol(TTable self, TStr ColName, TStr64V ColVals)

        Parameters
        ----------
        ColName: TStr const &
        ColVals: TStr64V const &

        """
        return _SnapTime.TTable_StoreStrCol(self, ColName, ColVals)


    def UpdateFltFromTable(self, KeyAttr, UpdateAttr, Table, FKeyAttr, ReadAttr, DefaultFltVal=0.0):
        """
        UpdateFltFromTable(TTable self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, TStr ReadAttr, TFlt DefaultFltVal=0.0)

        Parameters
        ----------
        KeyAttr: TStr const &
        UpdateAttr: TStr const &
        Table: TTable const &
        FKeyAttr: TStr const &
        ReadAttr: TStr const &
        DefaultFltVal: TFlt

        UpdateFltFromTable(TTable self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, TStr ReadAttr)

        Parameters
        ----------
        KeyAttr: TStr const &
        UpdateAttr: TStr const &
        Table: TTable const &
        FKeyAttr: TStr const &
        ReadAttr: TStr const &

        """
        return _SnapTime.TTable_UpdateFltFromTable(self, KeyAttr, UpdateAttr, Table, FKeyAttr, ReadAttr, DefaultFltVal)


    def UpdateFltFromTableMP(self, KeyAttr, UpdateAttr, Table, FKeyAttr, ReadAttr, DefaultFltVal=0.0):
        """
        UpdateFltFromTableMP(TTable self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, TStr ReadAttr, TFlt DefaultFltVal=0.0)

        Parameters
        ----------
        KeyAttr: TStr const &
        UpdateAttr: TStr const &
        Table: TTable const &
        FKeyAttr: TStr const &
        ReadAttr: TStr const &
        DefaultFltVal: TFlt

        UpdateFltFromTableMP(TTable self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, TStr ReadAttr)

        Parameters
        ----------
        KeyAttr: TStr const &
        UpdateAttr: TStr const &
        Table: TTable const &
        FKeyAttr: TStr const &
        ReadAttr: TStr const &

        """
        return _SnapTime.TTable_UpdateFltFromTableMP(self, KeyAttr, UpdateAttr, Table, FKeyAttr, ReadAttr, DefaultFltVal)


    def SetFltColToConstMP(self, UpdateColIdx, DefaultFltVal):
        """
        SetFltColToConstMP(TTable self, TInt64 UpdateColIdx, TFlt DefaultFltVal)

        Parameters
        ----------
        UpdateColIdx: TInt64
        DefaultFltVal: TFlt

        """
        return _SnapTime.TTable_SetFltColToConstMP(self, UpdateColIdx, DefaultFltVal)


    def Union(self, *args):
        """
        Union(TTable self, TTable Table) -> PTable

        Parameters
        ----------
        Table: TTable const &

        Union(TTable self, PTable Table) -> PTable

        Parameters
        ----------
        Table: PTable const &

        """
        return _SnapTime.TTable_Union(self, *args)


    def UnionAll(self, *args):
        """
        UnionAll(TTable self, TTable Table) -> PTable

        Parameters
        ----------
        Table: TTable const &

        UnionAll(TTable self, PTable Table) -> PTable

        Parameters
        ----------
        Table: PTable const &

        """
        return _SnapTime.TTable_UnionAll(self, *args)


    def UnionAllInPlace(self, *args):
        """
        UnionAllInPlace(TTable self, TTable Table)

        Parameters
        ----------
        Table: TTable const &

        UnionAllInPlace(TTable self, PTable Table)

        Parameters
        ----------
        Table: PTable const &

        """
        return _SnapTime.TTable_UnionAllInPlace(self, *args)


    def Intersection(self, *args):
        """
        Intersection(TTable self, TTable Table) -> PTable

        Parameters
        ----------
        Table: TTable const &

        Intersection(TTable self, PTable Table) -> PTable

        Parameters
        ----------
        Table: PTable const &

        """
        return _SnapTime.TTable_Intersection(self, *args)


    def Minus(self, *args):
        """
        Minus(TTable self, TTable Table) -> PTable

        Parameters
        ----------
        Table: TTable &

        Minus(TTable self, PTable Table) -> PTable

        Parameters
        ----------
        Table: PTable const &

        """
        return _SnapTime.TTable_Minus(self, *args)


    def Project(self, ProjectCols):
        """
        Project(TTable self, TStr64V ProjectCols) -> PTable

        Parameters
        ----------
        ProjectCols: TStr64V const &

        """
        return _SnapTime.TTable_Project(self, ProjectCols)


    def ProjectInPlace(self, ProjectCols):
        """
        ProjectInPlace(TTable self, TStr64V ProjectCols)

        Parameters
        ----------
        ProjectCols: TStr64V const &

        """
        return _SnapTime.TTable_ProjectInPlace(self, ProjectCols)


    def ColMin(self, *args):
        """
        ColMin(TTable self, TStr Attr1, TStr Attr2, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResultAttrName: TStr const &

        ColMin(TTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        """
        return _SnapTime.TTable_ColMin(self, *args)


    def ColMax(self, *args):
        """
        ColMax(TTable self, TStr Attr1, TStr Attr2, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResultAttrName: TStr const &

        ColMax(TTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        """
        return _SnapTime.TTable_ColMax(self, *args)


    def ColGenericOp(self, *args):
        """
        ColGenericOp(TTable self, TStr Attr1, TStr Attr2, TStr ResAttr, TArithOp op)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResAttr: TStr const &
        op: enum TArithOp

        ColGenericOp(TTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr, TArithOp op, TBool AddToFirstTable)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &
        op: enum TArithOp
        AddToFirstTable: TBool

        ColGenericOp(TTable self, TStr Attr1, TFlt Num, TStr ResAttr, TArithOp op, TBool floatCast)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResAttr: TStr const &
        op: enum TArithOp
        floatCast: TBool const

        """
        return _SnapTime.TTable_ColGenericOp(self, *args)


    def ColGenericOpMP(self, *args):
        """
        ColGenericOpMP(TTable self, TInt64 ArgColIdx1, TInt64 ArgColIdx2, TAttrType ArgType1, TAttrType ArgType2, TInt64 ResColIdx, TArithOp op)

        Parameters
        ----------
        ArgColIdx1: TInt64
        ArgColIdx2: TInt64
        ArgType1: enum TAttrType
        ArgType2: enum TAttrType
        ResColIdx: TInt64
        op: enum TArithOp

        ColGenericOpMP(TTable self, TInt64 ColIdx1, TInt64 ColIdx2, TAttrType ArgType, TFlt Num, TArithOp op, TBool ShouldCast)

        Parameters
        ----------
        ColIdx1: TInt64 const &
        ColIdx2: TInt64 const &
        ArgType: enum TAttrType
        Num: TFlt const &
        op: enum TArithOp
        ShouldCast: TBool

        """
        return _SnapTime.TTable_ColGenericOpMP(self, *args)


    def ColAdd(self, *args):
        """
        ColAdd(TTable self, TStr Attr1, TStr Attr2, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResultAttrName: TStr const &

        ColAdd(TTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        ColAdd(TTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr, TBool AddToFirstTable=True)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &
        AddToFirstTable: TBool

        ColAdd(TTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &

        ColAdd(TTable self, TStr Attr1, TTable Table, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &

        ColAdd(TTable self, TStr Attr1, TFlt Num, TStr ResultAttrName, TBool floatCast=False)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &
        floatCast: TBool const

        ColAdd(TTable self, TStr Attr1, TFlt Num, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &

        ColAdd(TTable self, TStr Attr1, TFlt Num)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &

        """
        return _SnapTime.TTable_ColAdd(self, *args)


    def ColSub(self, *args):
        """
        ColSub(TTable self, TStr Attr1, TStr Attr2, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResultAttrName: TStr const &

        ColSub(TTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        ColSub(TTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr, TBool AddToFirstTable=True)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &
        AddToFirstTable: TBool

        ColSub(TTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &

        ColSub(TTable self, TStr Attr1, TTable Table, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &

        ColSub(TTable self, TStr Attr1, TFlt Num, TStr ResultAttrName, TBool floatCast=False)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &
        floatCast: TBool const

        ColSub(TTable self, TStr Attr1, TFlt Num, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &

        ColSub(TTable self, TStr Attr1, TFlt Num)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &

        """
        return _SnapTime.TTable_ColSub(self, *args)


    def ColMul(self, *args):
        """
        ColMul(TTable self, TStr Attr1, TStr Attr2, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResultAttrName: TStr const &

        ColMul(TTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        ColMul(TTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr, TBool AddToFirstTable=True)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &
        AddToFirstTable: TBool

        ColMul(TTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &

        ColMul(TTable self, TStr Attr1, TTable Table, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &

        ColMul(TTable self, TStr Attr1, TFlt Num, TStr ResultAttrName, TBool floatCast=False)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &
        floatCast: TBool const

        ColMul(TTable self, TStr Attr1, TFlt Num, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &

        ColMul(TTable self, TStr Attr1, TFlt Num)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &

        """
        return _SnapTime.TTable_ColMul(self, *args)


    def ColDiv(self, *args):
        """
        ColDiv(TTable self, TStr Attr1, TStr Attr2, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResultAttrName: TStr const &

        ColDiv(TTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        ColDiv(TTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr, TBool AddToFirstTable=True)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &
        AddToFirstTable: TBool

        ColDiv(TTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &

        ColDiv(TTable self, TStr Attr1, TTable Table, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &

        ColDiv(TTable self, TStr Attr1, TFlt Num, TStr ResultAttrName, TBool floatCast=False)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &
        floatCast: TBool const

        ColDiv(TTable self, TStr Attr1, TFlt Num, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &

        ColDiv(TTable self, TStr Attr1, TFlt Num)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &

        """
        return _SnapTime.TTable_ColDiv(self, *args)


    def ColMod(self, *args):
        """
        ColMod(TTable self, TStr Attr1, TStr Attr2, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResultAttrName: TStr const &

        ColMod(TTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        ColMod(TTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr, TBool AddToFirstTable=True)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &
        AddToFirstTable: TBool

        ColMod(TTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &

        ColMod(TTable self, TStr Attr1, TTable Table, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &

        ColMod(TTable self, TStr Attr1, TFlt Num, TStr ResultAttrName, TBool floatCast=False)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &
        floatCast: TBool const

        ColMod(TTable self, TStr Attr1, TFlt Num, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &

        ColMod(TTable self, TStr Attr1, TFlt Num)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &

        """
        return _SnapTime.TTable_ColMod(self, *args)


    def ColConcat(self, *args):
        """
        ColConcat(TTable self, TStr Attr1, TStr Attr2, TStr Sep, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        Sep: TStr const &
        ResAttr: TStr const &

        ColConcat(TTable self, TStr Attr1, TStr Attr2, TStr Sep)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        Sep: TStr const &

        ColConcat(TTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        ColConcat(TTable self, TStr Attr1, TTable Table, TStr Attr2, TStr Sep, TStr ResAttr, TBool AddToFirstTable=True)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        Sep: TStr const &
        ResAttr: TStr const &
        AddToFirstTable: TBool

        ColConcat(TTable self, TStr Attr1, TTable Table, TStr Attr2, TStr Sep, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        Sep: TStr const &
        ResAttr: TStr const &

        ColConcat(TTable self, TStr Attr1, TTable Table, TStr Attr2, TStr Sep)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        Sep: TStr const &

        ColConcat(TTable self, TStr Attr1, TTable Table, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &

        """
        return _SnapTime.TTable_ColConcat(self, *args)


    def ColConcatConst(self, *args):
        """
        ColConcatConst(TTable self, TStr Attr1, TStr Val, TStr Sep, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Val: TStr const &
        Sep: TStr const &
        ResAttr: TStr const &

        ColConcatConst(TTable self, TStr Attr1, TStr Val, TStr Sep)

        Parameters
        ----------
        Attr1: TStr const &
        Val: TStr const &
        Sep: TStr const &

        ColConcatConst(TTable self, TStr Attr1, TStr Val)

        Parameters
        ----------
        Attr1: TStr const &
        Val: TStr const &

        """
        return _SnapTime.TTable_ColConcatConst(self, *args)


    def ReadIntCol(self, ColName, Result):
        """
        ReadIntCol(TTable self, TStr ColName, TInt64V Result)

        Parameters
        ----------
        ColName: TStr const &
        Result: TInt64V &

        """
        return _SnapTime.TTable_ReadIntCol(self, ColName, Result)


    def ReadFltCol(self, ColName, Result):
        """
        ReadFltCol(TTable self, TStr ColName, TFlt64V Result)

        Parameters
        ----------
        ColName: TStr const &
        Result: TFlt64V &

        """
        return _SnapTime.TTable_ReadFltCol(self, ColName, Result)


    def ReadStrCol(self, ColName, Result):
        """
        ReadStrCol(TTable self, TStr ColName, TStr64V Result)

        Parameters
        ----------
        ColName: TStr const &
        Result: TStr64V &

        """
        return _SnapTime.TTable_ReadStrCol(self, ColName, Result)


    def InitIds(self):
        """
        InitIds(TTable self)

        Parameters
        ----------
        self: TTable *

        """
        return _SnapTime.TTable_InitIds(self)


    def IsNextK(self, *args):
        """
        IsNextK(TTable self, TStr OrderCol, TInt64 K, TStr GroupBy, TStr RankColName) -> PTable

        Parameters
        ----------
        OrderCol: TStr const &
        K: TInt64
        GroupBy: TStr const &
        RankColName: TStr const &

        IsNextK(TTable self, TStr OrderCol, TInt64 K, TStr GroupBy) -> PTable

        Parameters
        ----------
        OrderCol: TStr const &
        K: TInt64
        GroupBy: TStr const &

        """
        return _SnapTime.TTable_IsNextK(self, *args)


    def PrintSize(self):
        """
        PrintSize(TTable self)

        Parameters
        ----------
        self: TTable *

        """
        return _SnapTime.TTable_PrintSize(self)


    def PrintContextSize(self):
        """
        PrintContextSize(TTable self)

        Parameters
        ----------
        self: TTable *

        """
        return _SnapTime.TTable_PrintContextSize(self)


    def GetMemUsedKB(self):
        """
        GetMemUsedKB(TTable self) -> TSize

        Parameters
        ----------
        self: TTable *

        """
        return _SnapTime.TTable_GetMemUsedKB(self)


    def GetContextMemUsedKB(self):
        """
        GetContextMemUsedKB(TTable self) -> TSize

        Parameters
        ----------
        self: TTable *

        """
        return _SnapTime.TTable_GetContextMemUsedKB(self)

    __swig_destroy__ = _SnapTime.delete_TTable
TTable.AddIntCol = new_instancemethod(_SnapTime.TTable_AddIntCol, None, TTable)
TTable.AddFltCol = new_instancemethod(_SnapTime.TTable_AddFltCol, None, TTable)
TTable.AddStrCol = new_instancemethod(_SnapTime.TTable_AddStrCol, None, TTable)
TTable.GroupByIntColMP = new_instancemethod(_SnapTime.TTable_GroupByIntColMP, None, TTable)
TTable.SaveSS = new_instancemethod(_SnapTime.TTable_SaveSS, None, TTable)
TTable.SaveBin = new_instancemethod(_SnapTime.TTable_SaveBin, None, TTable)
TTable.Save = new_instancemethod(_SnapTime.TTable_Save, None, TTable)
TTable.Dump = new_instancemethod(_SnapTime.TTable_Dump, None, TTable)
TTable.AddRow = new_instancemethod(_SnapTime.TTable_AddRow, None, TTable)
TTable.GetContext = new_instancemethod(_SnapTime.TTable_GetContext, None, TTable)
TTable.ChangeContext = new_instancemethod(_SnapTime.TTable_ChangeContext, None, TTable)
TTable.GetColIdx = new_instancemethod(_SnapTime.TTable_GetColIdx, None, TTable)
TTable.GetIntVal = new_instancemethod(_SnapTime.TTable_GetIntVal, None, TTable)
TTable.GetFltVal = new_instancemethod(_SnapTime.TTable_GetFltVal, None, TTable)
TTable.GetStrVal = new_instancemethod(_SnapTime.TTable_GetStrVal, None, TTable)
TTable.GetStrMapById = new_instancemethod(_SnapTime.TTable_GetStrMapById, None, TTable)
TTable.GetStrMapByName = new_instancemethod(_SnapTime.TTable_GetStrMapByName, None, TTable)
TTable.GetStrValById = new_instancemethod(_SnapTime.TTable_GetStrValById, None, TTable)
TTable.GetStrValByName = new_instancemethod(_SnapTime.TTable_GetStrValByName, None, TTable)
TTable.GetIntRowIdxByVal = new_instancemethod(_SnapTime.TTable_GetIntRowIdxByVal, None, TTable)
TTable.GetStrRowIdxByMap = new_instancemethod(_SnapTime.TTable_GetStrRowIdxByMap, None, TTable)
TTable.GetFltRowIdxByVal = new_instancemethod(_SnapTime.TTable_GetFltRowIdxByVal, None, TTable)
TTable.RequestIndexInt = new_instancemethod(_SnapTime.TTable_RequestIndexInt, None, TTable)
TTable.RequestIndexFlt = new_instancemethod(_SnapTime.TTable_RequestIndexFlt, None, TTable)
TTable.RequestIndexStrMap = new_instancemethod(_SnapTime.TTable_RequestIndexStrMap, None, TTable)
TTable.GetStr = new_instancemethod(_SnapTime.TTable_GetStr, None, TTable)
TTable.GetIntValAtRowIdx = new_instancemethod(_SnapTime.TTable_GetIntValAtRowIdx, None, TTable)
TTable.GetFltValAtRowIdx = new_instancemethod(_SnapTime.TTable_GetFltValAtRowIdx, None, TTable)
TTable.GetSchema = new_instancemethod(_SnapTime.TTable_GetSchema, None, TTable)
TTable.ToGraphSequence = new_instancemethod(_SnapTime.TTable_ToGraphSequence, None, TTable)
TTable.ToVarGraphSequence = new_instancemethod(_SnapTime.TTable_ToVarGraphSequence, None, TTable)
TTable.ToGraphPerGroup = new_instancemethod(_SnapTime.TTable_ToGraphPerGroup, None, TTable)
TTable.ToGraphSequenceIterator = new_instancemethod(_SnapTime.TTable_ToGraphSequenceIterator, None, TTable)
TTable.ToVarGraphSequenceIterator = new_instancemethod(_SnapTime.TTable_ToVarGraphSequenceIterator, None, TTable)
TTable.ToGraphPerGroupIterator = new_instancemethod(_SnapTime.TTable_ToGraphPerGroupIterator, None, TTable)
TTable.NextGraphIterator = new_instancemethod(_SnapTime.TTable_NextGraphIterator, None, TTable)
TTable.IsLastGraphOfSequence = new_instancemethod(_SnapTime.TTable_IsLastGraphOfSequence, None, TTable)
TTable.GetSrcCol = new_instancemethod(_SnapTime.TTable_GetSrcCol, None, TTable)
TTable.SetSrcCol = new_instancemethod(_SnapTime.TTable_SetSrcCol, None, TTable)
TTable.GetDstCol = new_instancemethod(_SnapTime.TTable_GetDstCol, None, TTable)
TTable.SetDstCol = new_instancemethod(_SnapTime.TTable_SetDstCol, None, TTable)
TTable.AddEdgeAttr = new_instancemethod(_SnapTime.TTable_AddEdgeAttr, None, TTable)
TTable.AddSrcNodeAttr = new_instancemethod(_SnapTime.TTable_AddSrcNodeAttr, None, TTable)
TTable.AddDstNodeAttr = new_instancemethod(_SnapTime.TTable_AddDstNodeAttr, None, TTable)
TTable.AddNodeAttr = new_instancemethod(_SnapTime.TTable_AddNodeAttr, None, TTable)
TTable.SetCommonNodeAttrs = new_instancemethod(_SnapTime.TTable_SetCommonNodeAttrs, None, TTable)
TTable.GetSrcNodeIntAttrV = new_instancemethod(_SnapTime.TTable_GetSrcNodeIntAttrV, None, TTable)
TTable.GetDstNodeIntAttrV = new_instancemethod(_SnapTime.TTable_GetDstNodeIntAttrV, None, TTable)
TTable.GetEdgeIntAttrV = new_instancemethod(_SnapTime.TTable_GetEdgeIntAttrV, None, TTable)
TTable.GetSrcNodeFltAttrV = new_instancemethod(_SnapTime.TTable_GetSrcNodeFltAttrV, None, TTable)
TTable.GetDstNodeFltAttrV = new_instancemethod(_SnapTime.TTable_GetDstNodeFltAttrV, None, TTable)
TTable.GetEdgeFltAttrV = new_instancemethod(_SnapTime.TTable_GetEdgeFltAttrV, None, TTable)
TTable.GetSrcNodeStrAttrV = new_instancemethod(_SnapTime.TTable_GetSrcNodeStrAttrV, None, TTable)
TTable.GetDstNodeStrAttrV = new_instancemethod(_SnapTime.TTable_GetDstNodeStrAttrV, None, TTable)
TTable.GetEdgeStrAttrV = new_instancemethod(_SnapTime.TTable_GetEdgeStrAttrV, None, TTable)
TTable.GetColType = new_instancemethod(_SnapTime.TTable_GetColType, None, TTable)
TTable.GetNumRows = new_instancemethod(_SnapTime.TTable_GetNumRows, None, TTable)
TTable.GetNumValidRows = new_instancemethod(_SnapTime.TTable_GetNumValidRows, None, TTable)
TTable.GetRowIdMap = new_instancemethod(_SnapTime.TTable_GetRowIdMap, None, TTable)
TTable.BegRI = new_instancemethod(_SnapTime.TTable_BegRI, None, TTable)
TTable.EndRI = new_instancemethod(_SnapTime.TTable_EndRI, None, TTable)
TTable.GetRI = new_instancemethod(_SnapTime.TTable_GetRI, None, TTable)
TTable.BegRIWR = new_instancemethod(_SnapTime.TTable_BegRIWR, None, TTable)
TTable.EndRIWR = new_instancemethod(_SnapTime.TTable_EndRIWR, None, TTable)
TTable.GetRIWR = new_instancemethod(_SnapTime.TTable_GetRIWR, None, TTable)
TTable.GetPartitionRanges = new_instancemethod(_SnapTime.TTable_GetPartitionRanges, None, TTable)
TTable.Rename = new_instancemethod(_SnapTime.TTable_Rename, None, TTable)
TTable.Unique = new_instancemethod(_SnapTime.TTable_Unique, None, TTable)
TTable.Select = new_instancemethod(_SnapTime.TTable_Select, None, TTable)
TTable.Classify = new_instancemethod(_SnapTime.TTable_Classify, None, TTable)
TTable.SelectAtomic = new_instancemethod(_SnapTime.TTable_SelectAtomic, None, TTable)
TTable.ClassifyAtomic = new_instancemethod(_SnapTime.TTable_ClassifyAtomic, None, TTable)
TTable.SelectAtomicConst = new_instancemethod(_SnapTime.TTable_SelectAtomicConst, None, TTable)
TTable.SelectAtomicIntConst = new_instancemethod(_SnapTime.TTable_SelectAtomicIntConst, None, TTable)
TTable.SelectAtomicStrConst = new_instancemethod(_SnapTime.TTable_SelectAtomicStrConst, None, TTable)
TTable.SelectAtomicFltConst = new_instancemethod(_SnapTime.TTable_SelectAtomicFltConst, None, TTable)
TTable.Group = new_instancemethod(_SnapTime.TTable_Group, None, TTable)
TTable.Count = new_instancemethod(_SnapTime.TTable_Count, None, TTable)
TTable.Order = new_instancemethod(_SnapTime.TTable_Order, None, TTable)
TTable.Aggregate = new_instancemethod(_SnapTime.TTable_Aggregate, None, TTable)
TTable.AggregateCols = new_instancemethod(_SnapTime.TTable_AggregateCols, None, TTable)
TTable.SpliceByGroup = new_instancemethod(_SnapTime.TTable_SpliceByGroup, None, TTable)
TTable.Join = new_instancemethod(_SnapTime.TTable_Join, None, TTable)
TTable.ThresholdJoin = new_instancemethod(_SnapTime.TTable_ThresholdJoin, None, TTable)
TTable.SelfJoin = new_instancemethod(_SnapTime.TTable_SelfJoin, None, TTable)
TTable.SelfSimJoin = new_instancemethod(_SnapTime.TTable_SelfSimJoin, None, TTable)
TTable.SelfSimJoinPerGroup = new_instancemethod(_SnapTime.TTable_SelfSimJoinPerGroup, None, TTable)
TTable.SimJoin = new_instancemethod(_SnapTime.TTable_SimJoin, None, TTable)
TTable.SelectFirstNRows = new_instancemethod(_SnapTime.TTable_SelectFirstNRows, None, TTable)
TTable.Defrag = new_instancemethod(_SnapTime.TTable_Defrag, None, TTable)
TTable.StoreIntCol = new_instancemethod(_SnapTime.TTable_StoreIntCol, None, TTable)
TTable.StoreFltCol = new_instancemethod(_SnapTime.TTable_StoreFltCol, None, TTable)
TTable.StoreStrCol = new_instancemethod(_SnapTime.TTable_StoreStrCol, None, TTable)
TTable.UpdateFltFromTable = new_instancemethod(_SnapTime.TTable_UpdateFltFromTable, None, TTable)
TTable.UpdateFltFromTableMP = new_instancemethod(_SnapTime.TTable_UpdateFltFromTableMP, None, TTable)
TTable.SetFltColToConstMP = new_instancemethod(_SnapTime.TTable_SetFltColToConstMP, None, TTable)
TTable.Union = new_instancemethod(_SnapTime.TTable_Union, None, TTable)
TTable.UnionAll = new_instancemethod(_SnapTime.TTable_UnionAll, None, TTable)
TTable.UnionAllInPlace = new_instancemethod(_SnapTime.TTable_UnionAllInPlace, None, TTable)
TTable.Intersection = new_instancemethod(_SnapTime.TTable_Intersection, None, TTable)
TTable.Minus = new_instancemethod(_SnapTime.TTable_Minus, None, TTable)
TTable.Project = new_instancemethod(_SnapTime.TTable_Project, None, TTable)
TTable.ProjectInPlace = new_instancemethod(_SnapTime.TTable_ProjectInPlace, None, TTable)
TTable.ColMin = new_instancemethod(_SnapTime.TTable_ColMin, None, TTable)
TTable.ColMax = new_instancemethod(_SnapTime.TTable_ColMax, None, TTable)
TTable.ColGenericOp = new_instancemethod(_SnapTime.TTable_ColGenericOp, None, TTable)
TTable.ColGenericOpMP = new_instancemethod(_SnapTime.TTable_ColGenericOpMP, None, TTable)
TTable.ColAdd = new_instancemethod(_SnapTime.TTable_ColAdd, None, TTable)
TTable.ColSub = new_instancemethod(_SnapTime.TTable_ColSub, None, TTable)
TTable.ColMul = new_instancemethod(_SnapTime.TTable_ColMul, None, TTable)
TTable.ColDiv = new_instancemethod(_SnapTime.TTable_ColDiv, None, TTable)
TTable.ColMod = new_instancemethod(_SnapTime.TTable_ColMod, None, TTable)
TTable.ColConcat = new_instancemethod(_SnapTime.TTable_ColConcat, None, TTable)
TTable.ColConcatConst = new_instancemethod(_SnapTime.TTable_ColConcatConst, None, TTable)
TTable.ReadIntCol = new_instancemethod(_SnapTime.TTable_ReadIntCol, None, TTable)
TTable.ReadFltCol = new_instancemethod(_SnapTime.TTable_ReadFltCol, None, TTable)
TTable.ReadStrCol = new_instancemethod(_SnapTime.TTable_ReadStrCol, None, TTable)
TTable.InitIds = new_instancemethod(_SnapTime.TTable_InitIds, None, TTable)
TTable.IsNextK = new_instancemethod(_SnapTime.TTable_IsNextK, None, TTable)
TTable.PrintSize = new_instancemethod(_SnapTime.TTable_PrintSize, None, TTable)
TTable.PrintContextSize = new_instancemethod(_SnapTime.TTable_PrintContextSize, None, TTable)
TTable.GetMemUsedKB = new_instancemethod(_SnapTime.TTable_GetMemUsedKB, None, TTable)
TTable.GetContextMemUsedKB = new_instancemethod(_SnapTime.TTable_GetContextMemUsedKB, None, TTable)
TTable_swigregister = _SnapTime.TTable_swigregister
TTable_swigregister(TTable)

def TTable_SetMP(Value):
    """
    TTable_SetMP(TInt64 Value)

    Parameters
    ----------
    Value: TInt64

    """
    return _SnapTime.TTable_SetMP(Value)

def TTable_GetMP():
    """TTable_GetMP() -> TInt64"""
    return _SnapTime.TTable_GetMP()

def TTable_NormalizeColName(ColName):
    """
    TTable_NormalizeColName(TStr ColName) -> TStr

    Parameters
    ----------
    ColName: TStr const &

    """
    return _SnapTime.TTable_NormalizeColName(ColName)

def TTable_NormalizeColNameV(Cols):
    """
    TTable_NormalizeColNameV(TStr64V Cols) -> TStr64V

    Parameters
    ----------
    Cols: TStr64V const &

    """
    return _SnapTime.TTable_NormalizeColNameV(Cols)

def TTable_New(*args):
    """
    New() -> PTable
    New(TTableContext Context) -> PTable

    Parameters
    ----------
    Context: TTableContext *

    New(Schema S, TTableContext Context) -> PTable

    Parameters
    ----------
    S: Schema const &
    Context: TTableContext *

    New(TInt64H H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> PTable

    Parameters
    ----------
    H: THash< TInt64,TInt64,int64 > const &
    Col1: TStr const &
    Col2: TStr const &
    Context: TTableContext *
    IsStrKeys: TBool const

    New(TInt64H H, TStr Col1, TStr Col2, TTableContext Context) -> PTable

    Parameters
    ----------
    H: THash< TInt64,TInt64,int64 > const &
    Col1: TStr const &
    Col2: TStr const &
    Context: TTableContext *

    New(TIntFlt64H H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> PTable

    Parameters
    ----------
    H: THash< TInt64,TFlt,int64 > const &
    Col1: TStr const &
    Col2: TStr const &
    Context: TTableContext *
    IsStrKeys: TBool const

    New(TIntFlt64H H, TStr Col1, TStr Col2, TTableContext Context) -> PTable

    Parameters
    ----------
    H: THash< TInt64,TFlt,int64 > const &
    Col1: TStr const &
    Col2: TStr const &
    Context: TTableContext *

    TTable_New(PTable Table) -> PTable

    Parameters
    ----------
    Table: PTable const

    """
    return _SnapTime.TTable_New(*args)

def TTable_LoadSS(*args):
    """
    LoadSS(Schema S, TStr InFNm, TTableContext Context, char const & Separator, TBool HasTitleLine=False) -> PTable

    Parameters
    ----------
    S: Schema const &
    InFNm: TStr const &
    Context: TTableContext *
    Separator: char const &
    HasTitleLine: TBool

    LoadSS(Schema S, TStr InFNm, TTableContext Context, char const & Separator) -> PTable

    Parameters
    ----------
    S: Schema const &
    InFNm: TStr const &
    Context: TTableContext *
    Separator: char const &

    LoadSS(Schema S, TStr InFNm, TTableContext Context) -> PTable

    Parameters
    ----------
    S: Schema const &
    InFNm: TStr const &
    Context: TTableContext *

    LoadSS(Schema S, TStr InFNm, TTableContext Context, TInt64V RelevantCols, char const & Separator, TBool HasTitleLine=False) -> PTable

    Parameters
    ----------
    S: Schema const &
    InFNm: TStr const &
    Context: TTableContext *
    RelevantCols: TInt64V const &
    Separator: char const &
    HasTitleLine: TBool

    LoadSS(Schema S, TStr InFNm, TTableContext Context, TInt64V RelevantCols, char const & Separator) -> PTable

    Parameters
    ----------
    S: Schema const &
    InFNm: TStr const &
    Context: TTableContext *
    RelevantCols: TInt64V const &
    Separator: char const &

    TTable_LoadSS(Schema S, TStr InFNm, TTableContext Context, TInt64V RelevantCols) -> PTable

    Parameters
    ----------
    S: Schema const &
    InFNm: TStr const &
    Context: TTableContext *
    RelevantCols: TInt64V const &

    """
    return _SnapTime.TTable_LoadSS(*args)

def TTable_Load(SIn, Context):
    """
    TTable_Load(TSIn SIn, TTableContext Context) -> PTable

    Parameters
    ----------
    SIn: TSIn &
    Context: TTableContext *

    """
    return _SnapTime.TTable_Load(SIn, Context)

def TTable_LoadShM(ShMIn, Context):
    """
    TTable_LoadShM(TShMIn ShMIn, TTableContext Context) -> PTable

    Parameters
    ----------
    ShMIn: TShMIn &
    Context: TTableContext *

    """
    return _SnapTime.TTable_LoadShM(ShMIn, Context)

def TTable_TableFromHashMap(*args):
    """
    TableFromHashMap(TInt64H H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> PTable

    Parameters
    ----------
    H: THash< TInt64,TInt64,int64 > const &
    Col1: TStr const &
    Col2: TStr const &
    Context: TTableContext *
    IsStrKeys: TBool const

    TableFromHashMap(TInt64H H, TStr Col1, TStr Col2, TTableContext Context) -> PTable

    Parameters
    ----------
    H: THash< TInt64,TInt64,int64 > const &
    Col1: TStr const &
    Col2: TStr const &
    Context: TTableContext *

    TableFromHashMap(TIntFlt64H H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> PTable

    Parameters
    ----------
    H: THash< TInt64,TFlt,int64 > const &
    Col1: TStr const &
    Col2: TStr const &
    Context: TTableContext *
    IsStrKeys: TBool const

    TTable_TableFromHashMap(TIntFlt64H H, TStr Col1, TStr Col2, TTableContext Context) -> PTable

    Parameters
    ----------
    H: THash< TInt64,TFlt,int64 > const &
    Col1: TStr const &
    Col2: TStr const &
    Context: TTableContext *

    """
    return _SnapTime.TTable_TableFromHashMap(*args)

def TTable_GetNodeTable(Network, Context):
    """
    TTable_GetNodeTable(PNEANet Network, TTableContext Context) -> PTable

    Parameters
    ----------
    Network: PNEANet const &
    Context: TTableContext *

    """
    return _SnapTime.TTable_GetNodeTable(Network, Context)

def TTable_GetEdgeTable(Network, Context):
    """
    TTable_GetEdgeTable(PNEANet Network, TTableContext Context) -> PTable

    Parameters
    ----------
    Network: PNEANet const &
    Context: TTableContext *

    """
    return _SnapTime.TTable_GetEdgeTable(Network, Context)

def TTable_GetEdgeTablePN(Network, Context):
    """
    TTable_GetEdgeTablePN(PNGraphMP Network, TTableContext Context) -> PTable

    Parameters
    ----------
    Network: PNGraphMP const &
    Context: TTableContext *

    """
    return _SnapTime.TTable_GetEdgeTablePN(Network, Context)

def TTable_GetFltNodePropertyTable(Network, Property, NodeAttrName, NodeAttrType, PropertyAttrName, Context):
    """
    TTable_GetFltNodePropertyTable(PNEANet Network, TIntFlt64H Property, TStr NodeAttrName, TAttrType const & NodeAttrType, TStr PropertyAttrName, TTableContext Context) -> PTable

    Parameters
    ----------
    Network: PNEANet const &
    Property: TIntFlt64H const &
    NodeAttrName: TStr const &
    NodeAttrType: TAttrType const &
    PropertyAttrName: TStr const &
    Context: TTableContext *

    """
    return _SnapTime.TTable_GetFltNodePropertyTable(Network, Property, NodeAttrName, NodeAttrType, PropertyAttrName, Context)

class TAttr(object):
    """Proxy of C++ TAttr class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TAttr self) -> TAttr
        __init__(TAttr self, TAttr Attrs) -> TAttr

        Parameters
        ----------
        Attrs: TAttr const &

        __init__(TAttr self, TSIn SIn) -> TAttr

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TAttr_swiginit(self, _SnapTime.new_TAttr(*args))

    def Load(self, SIn):
        """
        Load(TAttr self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TAttr_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TAttr self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TAttr_Save(self, SOut)


    def Clr(self):
        """
        Clr(TAttr self)

        Parameters
        ----------
        self: TAttr *

        """
        return _SnapTime.TAttr_Clr(self)


    def GetMemUsed(self):
        """
        GetMemUsed(TAttr self) -> size_t

        Parameters
        ----------
        self: TAttr const *

        """
        return _SnapTime.TAttr_GetMemUsed(self)


    def AddSAttrDat(self, *args):
        """
        AddSAttrDat(TAttr self, TInt64 Id, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        Id: TInt64 const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDat(TAttr self, TInt64 Id, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        Id: TInt64 const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDat(TAttr self, TInt64 Id, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        Id: TInt64 const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDat(TAttr self, TInt64 Id, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        Id: TInt64 const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDat(TAttr self, TInt64 Id, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        Id: TInt64 const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDat(TAttr self, TInt64 Id, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        Id: TInt64 const &
        AttrId: TInt64 const &
        Val: TStr const &

        """
        return _SnapTime.TAttr_AddSAttrDat(self, *args)


    def GetSAttrDat(self, *args):
        """
        GetSAttrDat(TAttr self, TInt64 Id, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        Id: TInt64 const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDat(TAttr self, TInt64 Id, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        Id: TInt64 const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDat(TAttr self, TInt64 Id, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        Id: TInt64 const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDat(TAttr self, TInt64 Id, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        Id: TInt64 const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDat(TAttr self, TInt64 Id, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        Id: TInt64 const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDat(TAttr self, TInt64 Id, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        Id: TInt64 const &
        AttrId: TInt64 const &
        ValX: TStr &

        """
        return _SnapTime.TAttr_GetSAttrDat(self, *args)


    def DelSAttrDat(self, *args):
        """
        DelSAttrDat(TAttr self, TInt64 Id, TStr AttrName) -> int64

        Parameters
        ----------
        Id: TInt64 const &
        AttrName: TStr const &

        DelSAttrDat(TAttr self, TInt64 Id, TInt64 AttrId) -> int64

        Parameters
        ----------
        Id: TInt64 const &
        AttrId: TInt64 const &

        """
        return _SnapTime.TAttr_DelSAttrDat(self, *args)


    def DelSAttrId(self, Id):
        """
        DelSAttrId(TAttr self, TInt64 Id)

        Parameters
        ----------
        Id: TInt64 const &

        """
        return _SnapTime.TAttr_DelSAttrId(self, Id)


    def GetSAttrV(self, Id, AttrType, AttrV):
        """
        GetSAttrV(TAttr self, TInt64 Id, TAttrType const AttrType, Schema AttrV)

        Parameters
        ----------
        Id: TInt64 const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        """
        return _SnapTime.TAttr_GetSAttrV(self, Id, AttrType, AttrV)


    def GetIdVSAttr(self, *args):
        """
        GetIdVSAttr(TAttr self, TStr AttrName, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrName: TStr const &
        IdV: TInt64V &

        GetIdVSAttr(TAttr self, TInt64 AttrId, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        IdV: TInt64V &

        """
        return _SnapTime.TAttr_GetIdVSAttr(self, *args)


    def AddSAttr(self, Name, AttrType, AttrIdX):
        """
        AddSAttr(TAttr self, TStr Name, TAttrType const & AttrType, TInt64 AttrIdX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrType: TAttrType const &
        AttrIdX: TInt64 &

        """
        return _SnapTime.TAttr_AddSAttr(self, Name, AttrType, AttrIdX)


    def GetSAttrId(self, Name, AttrIdX, AttrTypeX):
        """
        GetSAttrId(TAttr self, TStr Name, TInt64 AttrIdX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrIdX: TInt64 &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TAttr_GetSAttrId(self, Name, AttrIdX, AttrTypeX)


    def GetSAttrName(self, AttrId, NameX, AttrTypeX):
        """
        GetSAttrName(TAttr self, TInt64 AttrId, TStr NameX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        NameX: TStr &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TAttr_GetSAttrName(self, AttrId, NameX, AttrTypeX)

    __swig_destroy__ = _SnapTime.delete_TAttr
TAttr.Load = new_instancemethod(_SnapTime.TAttr_Load, None, TAttr)
TAttr.Save = new_instancemethod(_SnapTime.TAttr_Save, None, TAttr)
TAttr.Clr = new_instancemethod(_SnapTime.TAttr_Clr, None, TAttr)
TAttr.GetMemUsed = new_instancemethod(_SnapTime.TAttr_GetMemUsed, None, TAttr)
TAttr.AddSAttrDat = new_instancemethod(_SnapTime.TAttr_AddSAttrDat, None, TAttr)
TAttr.GetSAttrDat = new_instancemethod(_SnapTime.TAttr_GetSAttrDat, None, TAttr)
TAttr.DelSAttrDat = new_instancemethod(_SnapTime.TAttr_DelSAttrDat, None, TAttr)
TAttr.DelSAttrId = new_instancemethod(_SnapTime.TAttr_DelSAttrId, None, TAttr)
TAttr.GetSAttrV = new_instancemethod(_SnapTime.TAttr_GetSAttrV, None, TAttr)
TAttr.GetIdVSAttr = new_instancemethod(_SnapTime.TAttr_GetIdVSAttr, None, TAttr)
TAttr.AddSAttr = new_instancemethod(_SnapTime.TAttr_AddSAttr, None, TAttr)
TAttr.GetSAttrId = new_instancemethod(_SnapTime.TAttr_GetSAttrId, None, TAttr)
TAttr.GetSAttrName = new_instancemethod(_SnapTime.TAttr_GetSAttrName, None, TAttr)
TAttr_swigregister = _SnapTime.TAttr_swigregister
TAttr_swigregister(TAttr)

class TAttrPair(object):
    """Proxy of C++ TAttrPair class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TAttrPair self) -> TAttrPair
        __init__(TAttrPair self, TAttrPair Attrs) -> TAttrPair

        Parameters
        ----------
        Attrs: TAttrPair const &

        __init__(TAttrPair self, TSIn SIn) -> TAttrPair

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TAttrPair_swiginit(self, _SnapTime.new_TAttrPair(*args))

    def Save(self, SOut):
        """
        Save(TAttrPair self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TAttrPair_Save(self, SOut)


    def Clr(self):
        """
        Clr(TAttrPair self)

        Parameters
        ----------
        self: TAttrPair *

        """
        return _SnapTime.TAttrPair_Clr(self)


    def AddSAttrDat(self, *args):
        """
        AddSAttrDat(TAttrPair self, TInt64Pr Id, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        Id: TInt64Pr const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDat(TAttrPair self, TInt64Pr Id, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        Id: TInt64Pr const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDat(TAttrPair self, TInt64Pr Id, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        Id: TInt64Pr const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDat(TAttrPair self, TInt64Pr Id, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        Id: TInt64Pr const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDat(TAttrPair self, TInt64Pr Id, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        Id: TInt64Pr const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDat(TAttrPair self, TInt64Pr Id, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        Id: TInt64Pr const &
        AttrId: TInt64 const &
        Val: TStr const &

        """
        return _SnapTime.TAttrPair_AddSAttrDat(self, *args)


    def GetSAttrDat(self, *args):
        """
        GetSAttrDat(TAttrPair self, TInt64Pr Id, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        Id: TInt64Pr const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDat(TAttrPair self, TInt64Pr Id, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        Id: TInt64Pr const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDat(TAttrPair self, TInt64Pr Id, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        Id: TInt64Pr const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDat(TAttrPair self, TInt64Pr Id, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        Id: TInt64Pr const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDat(TAttrPair self, TInt64Pr Id, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        Id: TInt64Pr const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDat(TAttrPair self, TInt64Pr Id, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        Id: TInt64Pr const &
        AttrId: TInt64 const &
        ValX: TStr &

        """
        return _SnapTime.TAttrPair_GetSAttrDat(self, *args)


    def DelSAttrDat(self, *args):
        """
        DelSAttrDat(TAttrPair self, TInt64Pr Id, TStr AttrName) -> int64

        Parameters
        ----------
        Id: TInt64Pr const &
        AttrName: TStr const &

        DelSAttrDat(TAttrPair self, TInt64Pr Id, TInt64 AttrId) -> int64

        Parameters
        ----------
        Id: TInt64Pr const &
        AttrId: TInt64 const &

        """
        return _SnapTime.TAttrPair_DelSAttrDat(self, *args)


    def DelSAttrId(self, Id):
        """
        DelSAttrId(TAttrPair self, TInt64Pr Id)

        Parameters
        ----------
        Id: TInt64Pr const &

        """
        return _SnapTime.TAttrPair_DelSAttrId(self, Id)


    def GetSAttrV(self, Id, AttrType, AttrV):
        """
        GetSAttrV(TAttrPair self, TInt64Pr Id, TAttrType const AttrType, Schema AttrV)

        Parameters
        ----------
        Id: TInt64Pr const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        """
        return _SnapTime.TAttrPair_GetSAttrV(self, Id, AttrType, AttrV)


    def GetIdVSAttr(self, *args):
        """
        GetIdVSAttr(TAttrPair self, TStr AttrName, TIntPr64V IdV) -> int64

        Parameters
        ----------
        AttrName: TStr const &
        IdV: TIntPr64V &

        GetIdVSAttr(TAttrPair self, TInt64 AttrId, TIntPr64V IdV) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        IdV: TIntPr64V &

        """
        return _SnapTime.TAttrPair_GetIdVSAttr(self, *args)


    def AddSAttr(self, Name, AttrType, AttrIdX):
        """
        AddSAttr(TAttrPair self, TStr Name, TAttrType const & AttrType, TInt64 AttrIdX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrType: TAttrType const &
        AttrIdX: TInt64 &

        """
        return _SnapTime.TAttrPair_AddSAttr(self, Name, AttrType, AttrIdX)


    def GetSAttrId(self, Name, AttrIdX, AttrTypeX):
        """
        GetSAttrId(TAttrPair self, TStr Name, TInt64 AttrIdX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrIdX: TInt64 &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TAttrPair_GetSAttrId(self, Name, AttrIdX, AttrTypeX)


    def GetSAttrName(self, AttrId, NameX, AttrTypeX):
        """
        GetSAttrName(TAttrPair self, TInt64 AttrId, TStr NameX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        NameX: TStr &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.TAttrPair_GetSAttrName(self, AttrId, NameX, AttrTypeX)

    __swig_destroy__ = _SnapTime.delete_TAttrPair
TAttrPair.Save = new_instancemethod(_SnapTime.TAttrPair_Save, None, TAttrPair)
TAttrPair.Clr = new_instancemethod(_SnapTime.TAttrPair_Clr, None, TAttrPair)
TAttrPair.AddSAttrDat = new_instancemethod(_SnapTime.TAttrPair_AddSAttrDat, None, TAttrPair)
TAttrPair.GetSAttrDat = new_instancemethod(_SnapTime.TAttrPair_GetSAttrDat, None, TAttrPair)
TAttrPair.DelSAttrDat = new_instancemethod(_SnapTime.TAttrPair_DelSAttrDat, None, TAttrPair)
TAttrPair.DelSAttrId = new_instancemethod(_SnapTime.TAttrPair_DelSAttrId, None, TAttrPair)
TAttrPair.GetSAttrV = new_instancemethod(_SnapTime.TAttrPair_GetSAttrV, None, TAttrPair)
TAttrPair.GetIdVSAttr = new_instancemethod(_SnapTime.TAttrPair_GetIdVSAttr, None, TAttrPair)
TAttrPair.AddSAttr = new_instancemethod(_SnapTime.TAttrPair_AddSAttr, None, TAttrPair)
TAttrPair.GetSAttrId = new_instancemethod(_SnapTime.TAttrPair_GetSAttrId, None, TAttrPair)
TAttrPair.GetSAttrName = new_instancemethod(_SnapTime.TAttrPair_GetSAttrName, None, TAttrPair)
TAttrPair_swigregister = _SnapTime.TAttrPair_swigregister
TAttrPair_swigregister(TAttrPair)


def CalcEffDiam(*args):
    """
    CalcEffDiam(TIntFltKd64V DistNbrsCdfV, double const & Percentile=0.9) -> double

    Parameters
    ----------
    DistNbrsCdfV: TIntFltKd64V const &
    Percentile: double const &

    CalcEffDiam(TIntFltKd64V DistNbrsCdfV) -> double

    Parameters
    ----------
    DistNbrsCdfV: TIntFltKd64V const &

    CalcEffDiam(TFltPr64V DistNbrsCdfV, double const & Percentile=0.9) -> double

    Parameters
    ----------
    DistNbrsCdfV: TFltPr64V const &
    Percentile: double const &

    CalcEffDiam(TFltPr64V DistNbrsCdfV) -> double

    Parameters
    ----------
    DistNbrsCdfV: TFltPr64V const &

    """
    return _SnapTime.CalcEffDiam(*args)

def CalcEffDiamPdf(*args):
    """
    CalcEffDiamPdf(TIntFltKd64V DistNbrsPdfV, double const & Percentile=0.9) -> double

    Parameters
    ----------
    DistNbrsPdfV: TIntFltKd64V const &
    Percentile: double const &

    CalcEffDiamPdf(TIntFltKd64V DistNbrsPdfV) -> double

    Parameters
    ----------
    DistNbrsPdfV: TIntFltKd64V const &

    CalcEffDiamPdf(TFltPr64V DistNbrsPdfV, double const & Percentile=0.9) -> double

    Parameters
    ----------
    DistNbrsPdfV: TFltPr64V const &
    Percentile: double const &

    CalcEffDiamPdf(TFltPr64V DistNbrsPdfV) -> double

    Parameters
    ----------
    DistNbrsPdfV: TFltPr64V const &

    """
    return _SnapTime.CalcEffDiamPdf(*args)

def CalcAvgDiamPdf(*args):
    """
    CalcAvgDiamPdf(TIntFltKd64V DistNbrsPdfV) -> double

    Parameters
    ----------
    DistNbrsPdfV: TIntFltKd64V const &

    CalcAvgDiamPdf(TFltPr64V DistNbrsPdfV) -> double

    Parameters
    ----------
    DistNbrsPdfV: TFltPr64V const &

    """
    return _SnapTime.CalcAvgDiamPdf(*args)

def GetDegreeCentr(Graph, NId):
    """
    GetDegreeCentr(PUNGraph Graph, int64 const & NId) -> double

    Parameters
    ----------
    Graph: PUNGraph const &
    NId: int64 const &

    """
    return _SnapTime.GetDegreeCentr(Graph, NId)

def GetGroupDegreeCentr(Graph, GroupNodes):
    """
    GetGroupDegreeCentr(PUNGraph Graph, TInt64H GroupNodes) -> double

    Parameters
    ----------
    Graph: PUNGraph const &
    GroupNodes: TInt64H const &

    """
    return _SnapTime.GetGroupDegreeCentr(Graph, GroupNodes)

def GetGroupClosenessCentr(Graph, GroupNodes):
    """
    GetGroupClosenessCentr(PUNGraph Graph, TInt64H GroupNodes) -> double

    Parameters
    ----------
    Graph: PUNGraph const &
    GroupNodes: TInt64H const &

    """
    return _SnapTime.GetGroupClosenessCentr(Graph, GroupNodes)

def MaxCPGreedyBetter(Graph, k):
    """
    MaxCPGreedyBetter(PUNGraph Graph, int64 const k) -> TInt64H

    Parameters
    ----------
    Graph: PUNGraph const &
    k: int64 const

    """
    return _SnapTime.MaxCPGreedyBetter(Graph, k)

def MaxCPGreedyBetter1(Graph, k):
    """
    MaxCPGreedyBetter1(PUNGraph Graph, int64 const k) -> TInt64H

    Parameters
    ----------
    Graph: PUNGraph const &
    k: int64 const

    """
    return _SnapTime.MaxCPGreedyBetter1(Graph, k)

def MaxCPGreedyBetter2(Graph, k):
    """
    MaxCPGreedyBetter2(PUNGraph Graph, int64 const k) -> TInt64H

    Parameters
    ----------
    Graph: PUNGraph const &
    k: int64 const

    """
    return _SnapTime.MaxCPGreedyBetter2(Graph, k)

def MaxCPGreedyBetter3(Graph, k):
    """
    MaxCPGreedyBetter3(PUNGraph Graph, int64 const k) -> TInt64H

    Parameters
    ----------
    Graph: PUNGraph const &
    k: int64 const

    """
    return _SnapTime.MaxCPGreedyBetter3(Graph, k)

def EventImportance(Graph, k):
    """
    EventImportance(PNGraph Graph, int64 const k) -> TIntFlt64H

    Parameters
    ----------
    Graph: PNGraph const &
    k: int64 const

    """
    return _SnapTime.EventImportance(Graph, k)

def Intersect(*args):
    """
    Intersect(TUNGraph::TNodeI Node, TInt64H NNodes) -> int64

    Parameters
    ----------
    Node: TUNGraph::TNodeI
    NNodes: TInt64H

    Intersect(TUNGraph::TNodeI Node, TStr NNodes) -> int64

    Parameters
    ----------
    Node: TUNGraph::TNodeI
    NNodes: TStr

    Intersect(TUNGraph::TNodeI Node, int64 * NNodes, int64 NNodes_br) -> int64

    Parameters
    ----------
    Node: TUNGraph::TNodeI
    NNodes: int64 *
    NNodes_br: int64

    """
    return _SnapTime.Intersect(*args)

def Intersect1(Node, NNodes):
    """
    Intersect1(TUNGraph::TNodeI Node, TStr NNodes) -> int64

    Parameters
    ----------
    Node: TUNGraph::TNodeI
    NNodes: TStr

    """
    return _SnapTime.Intersect1(Node, NNodes)

def LoadNodeList(InFNmNodes):
    """
    LoadNodeList(TStr InFNmNodes) -> TInt64H

    Parameters
    ----------
    InFNmNodes: TStr

    """
    return _SnapTime.LoadNodeList(InFNmNodes)

def GetWeightedFarnessCentr(Graph, NId, Attr, Normalized=True, IsDir=False):
    """
    GetWeightedFarnessCentr(PNEANet Graph, int64 const & NId, TFlt64V Attr, bool const & Normalized=True, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: PNEANet const
    NId: int64 const &
    Attr: TFlt64V const &
    Normalized: bool const &
    IsDir: bool const &

    GetWeightedFarnessCentr(PNEANet Graph, int64 const & NId, TFlt64V Attr, bool const & Normalized=True) -> double

    Parameters
    ----------
    Graph: PNEANet const
    NId: int64 const &
    Attr: TFlt64V const &
    Normalized: bool const &

    GetWeightedFarnessCentr(PNEANet Graph, int64 const & NId, TFlt64V Attr) -> double

    Parameters
    ----------
    Graph: PNEANet const
    NId: int64 const &
    Attr: TFlt64V const &

    """
    return _SnapTime.GetWeightedFarnessCentr(Graph, NId, Attr, Normalized, IsDir)

def GetWeightedClosenessCentr(Graph, NId, Attr, Normalized=True, IsDir=False):
    """
    GetWeightedClosenessCentr(PNEANet Graph, int64 const & NId, TFlt64V Attr, bool const & Normalized=True, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: PNEANet const
    NId: int64 const &
    Attr: TFlt64V const &
    Normalized: bool const &
    IsDir: bool const &

    GetWeightedClosenessCentr(PNEANet Graph, int64 const & NId, TFlt64V Attr, bool const & Normalized=True) -> double

    Parameters
    ----------
    Graph: PNEANet const
    NId: int64 const &
    Attr: TFlt64V const &
    Normalized: bool const &

    GetWeightedClosenessCentr(PNEANet Graph, int64 const & NId, TFlt64V Attr) -> double

    Parameters
    ----------
    Graph: PNEANet const
    NId: int64 const &
    Attr: TFlt64V const &

    """
    return _SnapTime.GetWeightedClosenessCentr(Graph, NId, Attr, Normalized, IsDir)

def GetWeightedBetweennessCentr(*args):
    """
    GetWeightedBetweennessCentr(PNEANet Graph, TIntFlt64H NIdBtwH, TFlt64V Attr, double const & NodeFrac=1.0, bool const & IsDir=False)

    Parameters
    ----------
    Graph: PNEANet const
    NIdBtwH: TIntFlt64H &
    Attr: TFlt64V const &
    NodeFrac: double const &
    IsDir: bool const &

    GetWeightedBetweennessCentr(PNEANet Graph, TIntFlt64H NIdBtwH, TFlt64V Attr, double const & NodeFrac=1.0)

    Parameters
    ----------
    Graph: PNEANet const
    NIdBtwH: TIntFlt64H &
    Attr: TFlt64V const &
    NodeFrac: double const &

    GetWeightedBetweennessCentr(PNEANet Graph, TIntFlt64H NIdBtwH, TFlt64V Attr)

    Parameters
    ----------
    Graph: PNEANet const
    NIdBtwH: TIntFlt64H &
    Attr: TFlt64V const &

    GetWeightedBetweennessCentr(PNEANet Graph, TIntPrFlt64H EdgeBtwH, TFlt64V Attr, double const & NodeFrac=1.0, bool const & IsDir=False)

    Parameters
    ----------
    Graph: PNEANet const
    EdgeBtwH: TIntPrFlt64H &
    Attr: TFlt64V const &
    NodeFrac: double const &
    IsDir: bool const &

    GetWeightedBetweennessCentr(PNEANet Graph, TIntPrFlt64H EdgeBtwH, TFlt64V Attr, double const & NodeFrac=1.0)

    Parameters
    ----------
    Graph: PNEANet const
    EdgeBtwH: TIntPrFlt64H &
    Attr: TFlt64V const &
    NodeFrac: double const &

    GetWeightedBetweennessCentr(PNEANet Graph, TIntPrFlt64H EdgeBtwH, TFlt64V Attr)

    Parameters
    ----------
    Graph: PNEANet const
    EdgeBtwH: TIntPrFlt64H &
    Attr: TFlt64V const &

    GetWeightedBetweennessCentr(PNEANet Graph, TIntFlt64H NIdBtwH, TIntPrFlt64H EdgeBtwH, TFlt64V Attr, double const & NodeFrac=1.0, bool const & IsDir=False)

    Parameters
    ----------
    Graph: PNEANet const
    NIdBtwH: TIntFlt64H &
    EdgeBtwH: TIntPrFlt64H &
    Attr: TFlt64V const &
    NodeFrac: double const &
    IsDir: bool const &

    GetWeightedBetweennessCentr(PNEANet Graph, TIntFlt64H NIdBtwH, TIntPrFlt64H EdgeBtwH, TFlt64V Attr, double const & NodeFrac=1.0)

    Parameters
    ----------
    Graph: PNEANet const
    NIdBtwH: TIntFlt64H &
    EdgeBtwH: TIntPrFlt64H &
    Attr: TFlt64V const &
    NodeFrac: double const &

    GetWeightedBetweennessCentr(PNEANet Graph, TIntFlt64H NIdBtwH, TIntPrFlt64H EdgeBtwH, TFlt64V Attr)

    Parameters
    ----------
    Graph: PNEANet const
    NIdBtwH: TIntFlt64H &
    EdgeBtwH: TIntPrFlt64H &
    Attr: TFlt64V const &

    GetWeightedBetweennessCentr(PNEANet Graph, TInt64V BtwNIdV, TIntFlt64H NodeBtwH, bool const & DoNodeCent, TIntPrFlt64H EdgeBtwH, bool const & DoEdgeCent, TFlt64V Attr, bool const & IsDir)

    Parameters
    ----------
    Graph: PNEANet const
    BtwNIdV: TInt64V const &
    NodeBtwH: TIntFlt64H &
    DoNodeCent: bool const &
    EdgeBtwH: TIntPrFlt64H &
    DoEdgeCent: bool const &
    Attr: TFlt64V const &
    IsDir: bool const &

    """
    return _SnapTime.GetWeightedBetweennessCentr(*args)

def GetEigenVectorCentr(Graph, NIdEigenH, Eps=1e-4, MaxIter=100):
    """
    GetEigenVectorCentr(PUNGraph Graph, TIntFlt64H NIdEigenH, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: PUNGraph const &
    NIdEigenH: TIntFlt64H &
    Eps: double const &
    MaxIter: int64 const &

    GetEigenVectorCentr(PUNGraph Graph, TIntFlt64H NIdEigenH, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: PUNGraph const &
    NIdEigenH: TIntFlt64H &
    Eps: double const &

    GetEigenVectorCentr(PUNGraph Graph, TIntFlt64H NIdEigenH)

    Parameters
    ----------
    Graph: PUNGraph const &
    NIdEigenH: TIntFlt64H &

    """
    return _SnapTime.GetEigenVectorCentr(Graph, NIdEigenH, Eps, MaxIter)

def GetWeightedPageRank(Graph, PRankH, Attr, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetWeightedPageRank(PNEANet Graph, TIntFlt64H PRankH, TStr Attr, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100) -> int64

    Parameters
    ----------
    Graph: PNEANet const
    PRankH: TIntFlt64H &
    Attr: TStr const &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetWeightedPageRank(PNEANet Graph, TIntFlt64H PRankH, TStr Attr, double const & C=0.85, double const & Eps=1e-4) -> int64

    Parameters
    ----------
    Graph: PNEANet const
    PRankH: TIntFlt64H &
    Attr: TStr const &
    C: double const &
    Eps: double const &

    GetWeightedPageRank(PNEANet Graph, TIntFlt64H PRankH, TStr Attr, double const & C=0.85) -> int64

    Parameters
    ----------
    Graph: PNEANet const
    PRankH: TIntFlt64H &
    Attr: TStr const &
    C: double const &

    GetWeightedPageRank(PNEANet Graph, TIntFlt64H PRankH, TStr Attr) -> int64

    Parameters
    ----------
    Graph: PNEANet const
    PRankH: TIntFlt64H &
    Attr: TStr const &

    """
    return _SnapTime.GetWeightedPageRank(Graph, PRankH, Attr, C, Eps, MaxIter)

def GetWeightedPageRankMP(Graph, PRankH, Attr, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetWeightedPageRankMP(PNEANet Graph, TIntFlt64H PRankH, TStr Attr, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100) -> int64

    Parameters
    ----------
    Graph: PNEANet const
    PRankH: TIntFlt64H &
    Attr: TStr const &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetWeightedPageRankMP(PNEANet Graph, TIntFlt64H PRankH, TStr Attr, double const & C=0.85, double const & Eps=1e-4) -> int64

    Parameters
    ----------
    Graph: PNEANet const
    PRankH: TIntFlt64H &
    Attr: TStr const &
    C: double const &
    Eps: double const &

    GetWeightedPageRankMP(PNEANet Graph, TIntFlt64H PRankH, TStr Attr, double const & C=0.85) -> int64

    Parameters
    ----------
    Graph: PNEANet const
    PRankH: TIntFlt64H &
    Attr: TStr const &
    C: double const &

    GetWeightedPageRankMP(PNEANet Graph, TIntFlt64H PRankH, TStr Attr) -> int64

    Parameters
    ----------
    Graph: PNEANet const
    PRankH: TIntFlt64H &
    Attr: TStr const &

    """
    return _SnapTime.GetWeightedPageRankMP(Graph, PRankH, Attr, C, Eps, MaxIter)

def GetMapPageRank(GraphSeq, Context, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetMapPageRank(TVec< PNEANet,int64 > const & GraphSeq, TTableContext Context, double const & C=0.85, double const & Eps=1e-4, int const & MaxIter=100) -> TTableIterator

    Parameters
    ----------
    GraphSeq: TVec< PNEANet,int64 > const &
    Context: TTableContext *
    C: double const &
    Eps: double const &
    MaxIter: int const &

    GetMapPageRank(TVec< PNEANet,int64 > const & GraphSeq, TTableContext Context, double const & C=0.85, double const & Eps=1e-4) -> TTableIterator

    Parameters
    ----------
    GraphSeq: TVec< PNEANet,int64 > const &
    Context: TTableContext *
    C: double const &
    Eps: double const &

    GetMapPageRank(TVec< PNEANet,int64 > const & GraphSeq, TTableContext Context, double const & C=0.85) -> TTableIterator

    Parameters
    ----------
    GraphSeq: TVec< PNEANet,int64 > const &
    Context: TTableContext *
    C: double const &

    GetMapPageRank(TVec< PNEANet,int64 > const & GraphSeq, TTableContext Context) -> TTableIterator

    Parameters
    ----------
    GraphSeq: TVec< PNEANet,int64 > const &
    Context: TTableContext *

    """
    return _SnapTime.GetMapPageRank(GraphSeq, Context, C, Eps, MaxIter)

def GetMapHitsIterator(GraphSeq, Context, MaxIter=20):
    """
    GetMapHitsIterator(TVec< PNEANet,int64 > const & GraphSeq, TTableContext Context, int const & MaxIter=20) -> TTableIterator

    Parameters
    ----------
    GraphSeq: TVec< PNEANet,int64 > const &
    Context: TTableContext *
    MaxIter: int const &

    GetMapHitsIterator(TVec< PNEANet,int64 > const & GraphSeq, TTableContext Context) -> TTableIterator

    Parameters
    ----------
    GraphSeq: TVec< PNEANet,int64 > const &
    Context: TTableContext *

    """
    return _SnapTime.GetMapHitsIterator(GraphSeq, Context, MaxIter)

def GetWeightedShortestPath(Graph, SrcNId, NIdDistH, Attr):
    """
    GetWeightedShortestPath(PNEANet Graph, int64 const & SrcNId, TIntFlt64H NIdDistH, TFlt64V Attr) -> int64

    Parameters
    ----------
    Graph: PNEANet const
    SrcNId: int64 const &
    NIdDistH: TIntFlt64H &
    Attr: TFlt64V const &

    """
    return _SnapTime.GetWeightedShortestPath(Graph, SrcNId, NIdDistH, Attr)

def CommunityGirvanNewman(Graph, CmtyV):
    """
    CommunityGirvanNewman(PUNGraph Graph, TCnComV CmtyV) -> double

    Parameters
    ----------
    Graph: PUNGraph &
    CmtyV: TCnComV &

    """
    return _SnapTime.CommunityGirvanNewman(Graph, CmtyV)

def CommunityCNM(Graph, CmtyV):
    """
    CommunityCNM(PUNGraph Graph, TCnComV CmtyV) -> double

    Parameters
    ----------
    Graph: PUNGraph const &
    CmtyV: TCnComV &

    """
    return _SnapTime.CommunityCNM(Graph, CmtyV)

def Infomap(Graph, CmtyV):
    """
    Infomap(PUNGraph Graph, TCnComV CmtyV) -> double

    Parameters
    ----------
    Graph: PUNGraph &
    CmtyV: TCnComV &

    """
    return _SnapTime.Infomap(Graph, CmtyV)

def InfomapOnline(Graph, n1, n2, PAlpha, SumPAlphaLogPAlpha, Qi, Module, Br, CmtyV):
    """
    InfomapOnline(PUNGraph Graph, int64 n1, int64 n2, TIntFlt64H PAlpha, double & SumPAlphaLogPAlpha, TIntFlt64H Qi, TInt64H Module, int64 & Br, TCnComV CmtyV) -> double

    Parameters
    ----------
    Graph: PUNGraph &
    n1: int64
    n2: int64
    PAlpha: TIntFlt64H &
    SumPAlphaLogPAlpha: double &
    Qi: TIntFlt64H &
    Module: TInt64H &
    Br: int64 &
    CmtyV: TCnComV &

    """
    return _SnapTime.InfomapOnline(Graph, n1, n2, PAlpha, SumPAlphaLogPAlpha, Qi, Module, Br, CmtyV)

def CmtyEvolutionFileBatch(InFNm, sizesCont, cCont, edges, alpha, beta, CmtyAlg):
    """
    CmtyEvolutionFileBatch(TStr InFNm, TIntInt64HH & sizesCont, TIntInt64HH & cCont, TIntInt64V64H & edges, double alpha, double beta, int64 CmtyAlg)

    Parameters
    ----------
    InFNm: TStr
    sizesCont: TIntInt64HH &
    cCont: TIntInt64HH &
    edges: TIntInt64V64H &
    alpha: double
    beta: double
    CmtyAlg: int64

    """
    return _SnapTime.CmtyEvolutionFileBatch(InFNm, sizesCont, cCont, edges, alpha, beta, CmtyAlg)

def CmtyEvolutionFileBatchV(InFNm, sizesContV, cContV, edges, alpha, beta, CmtyAlg):
    """
    CmtyEvolutionFileBatchV(TStr InFNm, TIntInt64V64H & sizesContV, TIntInt64V64H & cContV, TIntInt64V64H & edges, double alpha, double beta, int64 CmtyAlg)

    Parameters
    ----------
    InFNm: TStr
    sizesContV: TIntInt64V64H &
    cContV: TIntInt64V64H &
    edges: TIntInt64V64H &
    alpha: double
    beta: double
    CmtyAlg: int64

    """
    return _SnapTime.CmtyEvolutionFileBatchV(InFNm, sizesContV, cContV, edges, alpha, beta, CmtyAlg)

def CmtyEvolutionJson(Json, sizesContV, cContV, edges):
    """
    CmtyEvolutionJson(TStr Json, TIntInt64V64H & sizesContV, TIntInt64V64H & cContV, TIntInt64V64H & edges)

    Parameters
    ----------
    Json: TStr &
    sizesContV: TIntInt64V64H &
    cContV: TIntInt64V64H &
    edges: TIntInt64V64H &

    """
    return _SnapTime.CmtyEvolutionJson(Json, sizesContV, cContV, edges)

def CmtyTest(t, CmtyAlg):
    """
    CmtyTest(TStr t, int64 CmtyAlg) -> TStr

    Parameters
    ----------
    t: TStr
    CmtyAlg: int64

    """
    return _SnapTime.CmtyTest(t, CmtyAlg)

def ReebSimplify(Graph, t, e, gFinal, tFinal, collapse):
    """
    ReebSimplify(PNGraph Graph, TInt64H t, int64 e, PNGraph gFinal, TInt64H tFinal, bool collapse)

    Parameters
    ----------
    Graph: PNGraph &
    t: TInt64H &
    e: int64
    gFinal: PNGraph &
    tFinal: TInt64H &
    collapse: bool

    """
    return _SnapTime.ReebSimplify(Graph, t, e, gFinal, tFinal, collapse)

def ReebRefine(Graph, t, e, gFinal, tFinal, collapse):
    """
    ReebRefine(PNGraph Graph, TInt64H t, int64 e, PNGraph gFinal, TInt64H tFinal, bool collapse)

    Parameters
    ----------
    Graph: PNGraph &
    t: TInt64H &
    e: int64
    gFinal: PNGraph &
    tFinal: TInt64H &
    collapse: bool

    """
    return _SnapTime.ReebRefine(Graph, t, e, gFinal, tFinal, collapse)

def CmtyGirvanNewmanStep(Graph, Cmty1, Cmty2):
    """
    CmtyGirvanNewmanStep(PUNGraph Graph, TInt64V Cmty1, TInt64V Cmty2)

    Parameters
    ----------
    Graph: PUNGraph &
    Cmty1: TInt64V &
    Cmty2: TInt64V &

    """
    return _SnapTime.CmtyGirvanNewmanStep(Graph, Cmty1, Cmty2)

def GetBiConSzCnt(Graph, SzCntV):
    """
    GetBiConSzCnt(PUNGraph Graph, TIntPr64V SzCntV)

    Parameters
    ----------
    Graph: PUNGraph const &
    SzCntV: TIntPr64V &

    """
    return _SnapTime.GetBiConSzCnt(Graph, SzCntV)

def GetBiCon(Graph, BiCnComV):
    """
    GetBiCon(PUNGraph Graph, TCnComV BiCnComV)

    Parameters
    ----------
    Graph: PUNGraph const &
    BiCnComV: TCnComV &

    """
    return _SnapTime.GetBiCon(Graph, BiCnComV)

def GetArtPoints(Graph, ArtNIdV):
    """
    GetArtPoints(PUNGraph Graph, TInt64V ArtNIdV)

    Parameters
    ----------
    Graph: PUNGraph const &
    ArtNIdV: TInt64V &

    """
    return _SnapTime.GetArtPoints(Graph, ArtNIdV)

def GetEdgeBridges(Graph, EdgeV):
    """
    GetEdgeBridges(PUNGraph Graph, TIntPr64V EdgeV)

    Parameters
    ----------
    Graph: PUNGraph const &
    EdgeV: TIntPr64V &

    """
    return _SnapTime.GetEdgeBridges(Graph, EdgeV)

def Get1CnComSzCnt(Graph, SzCntV):
    """
    Get1CnComSzCnt(PUNGraph Graph, TIntPr64V SzCntV)

    Parameters
    ----------
    Graph: PUNGraph const &
    SzCntV: TIntPr64V &

    """
    return _SnapTime.Get1CnComSzCnt(Graph, SzCntV)

def Get1CnCom(Graph, Cn1ComV):
    """
    Get1CnCom(PUNGraph Graph, TCnComV Cn1ComV)

    Parameters
    ----------
    Graph: PUNGraph const &
    Cn1ComV: TCnComV &

    """
    return _SnapTime.Get1CnCom(Graph, Cn1ComV)

def GetMxBiCon(Graph, RenumberNodes=False):
    """
    GetMxBiCon(PUNGraph Graph, bool const & RenumberNodes=False) -> PUNGraph

    Parameters
    ----------
    Graph: PUNGraph const &
    RenumberNodes: bool const &

    GetMxBiCon(PUNGraph Graph) -> PUNGraph

    Parameters
    ----------
    Graph: PUNGraph const &

    """
    return _SnapTime.GetMxBiCon(Graph, RenumberNodes)
class TCnCom(object):
    """Proxy of C++ TCnCom class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NIdV = _swig_property(_SnapTime.TCnCom_NIdV_get, _SnapTime.TCnCom_NIdV_set)

    def __init__(self, *args):
        """
        __init__(TCnCom self) -> TCnCom
        __init__(TCnCom self, TInt64V NodeIdV) -> TCnCom

        Parameters
        ----------
        NodeIdV: TInt64V const &

        __init__(TCnCom self, TCnCom CC) -> TCnCom

        Parameters
        ----------
        CC: TCnCom const &

        __init__(TCnCom self, TSIn SIn) -> TCnCom

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TCnCom_swiginit(self, _SnapTime.new_TCnCom(*args))

    def Save(self, SOut):
        """
        Save(TCnCom self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TCnCom_Save(self, SOut)


    def __eq__(self, CC):
        """
        __eq__(TCnCom self, TCnCom CC) -> bool

        Parameters
        ----------
        CC: TCnCom const &

        """
        return _SnapTime.TCnCom___eq__(self, CC)


    def __lt__(self, CC):
        """
        __lt__(TCnCom self, TCnCom CC) -> bool

        Parameters
        ----------
        CC: TCnCom const &

        """
        return _SnapTime.TCnCom___lt__(self, CC)


    def Len(self):
        """
        Len(TCnCom self) -> int64

        Parameters
        ----------
        self: TCnCom const *

        """
        return _SnapTime.TCnCom_Len(self)


    def Empty(self):
        """
        Empty(TCnCom self) -> bool

        Parameters
        ----------
        self: TCnCom const *

        """
        return _SnapTime.TCnCom_Empty(self)


    def Clr(self):
        """
        Clr(TCnCom self)

        Parameters
        ----------
        self: TCnCom *

        """
        return _SnapTime.TCnCom_Clr(self)


    def Add(self, NodeId):
        """
        Add(TCnCom self, int64 const & NodeId)

        Parameters
        ----------
        NodeId: int64 const &

        """
        return _SnapTime.TCnCom_Add(self, NodeId)


    def __call__(self, *args):
        """
        __call__(TCnCom self) -> TInt64V
        __call__(TCnCom self) -> TInt64V

        Parameters
        ----------
        self: TCnCom *

        """
        return _SnapTime.TCnCom___call__(self, *args)


    def GetVal(self, NIdN):
        """
        GetVal(TCnCom self, int64 const & NIdN) -> TInt64

        Parameters
        ----------
        NIdN: int64 const &

        """
        return _SnapTime.TCnCom_GetVal(self, NIdN)


    def Sort(self, Asc=True):
        """
        Sort(TCnCom self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TCnCom self)

        Parameters
        ----------
        self: TCnCom *

        """
        return _SnapTime.TCnCom_Sort(self, Asc)


    def IsNIdIn(self, NId):
        """
        IsNIdIn(TCnCom self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TCnCom_IsNIdIn(self, NId)


    def GetRndNId(self):
        """
        GetRndNId(TCnCom self) -> TInt64

        Parameters
        ----------
        self: TCnCom const *

        """
        return _SnapTime.TCnCom_GetRndNId(self)


    def Dump(*args):
        """
        Dump(TCnComV CnComV, TStr Desc)

        Parameters
        ----------
        CnComV: TCnComV const &
        Desc: TStr const &

        Dump(TCnComV CnComV)

        Parameters
        ----------
        CnComV: TCnComV const &

        """
        return _SnapTime.TCnCom_Dump(*args)

    Dump = staticmethod(Dump)

    def SaveTxt(*args):
        """
        SaveTxt(TCnComV CnComV, TStr FNm, TStr Desc)

        Parameters
        ----------
        CnComV: TCnComV const &
        FNm: TStr const &
        Desc: TStr const &

        SaveTxt(TCnComV CnComV, TStr FNm)

        Parameters
        ----------
        CnComV: TCnComV const &
        FNm: TStr const &

        """
        return _SnapTime.TCnCom_SaveTxt(*args)

    SaveTxt = staticmethod(SaveTxt)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TCnCom self) -> int64

        Parameters
        ----------
        self: TCnCom const *

        """
        return _SnapTime.TCnCom_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TCnCom self) -> int64

        Parameters
        ----------
        self: TCnCom const *

        """
        return _SnapTime.TCnCom_GetSecHashCd(self)

    __swig_destroy__ = _SnapTime.delete_TCnCom
TCnCom.Save = new_instancemethod(_SnapTime.TCnCom_Save, None, TCnCom)
TCnCom.__eq__ = new_instancemethod(_SnapTime.TCnCom___eq__, None, TCnCom)
TCnCom.__lt__ = new_instancemethod(_SnapTime.TCnCom___lt__, None, TCnCom)
TCnCom.Len = new_instancemethod(_SnapTime.TCnCom_Len, None, TCnCom)
TCnCom.Empty = new_instancemethod(_SnapTime.TCnCom_Empty, None, TCnCom)
TCnCom.Clr = new_instancemethod(_SnapTime.TCnCom_Clr, None, TCnCom)
TCnCom.Add = new_instancemethod(_SnapTime.TCnCom_Add, None, TCnCom)
TCnCom.__call__ = new_instancemethod(_SnapTime.TCnCom___call__, None, TCnCom)
TCnCom.GetVal = new_instancemethod(_SnapTime.TCnCom_GetVal, None, TCnCom)
TCnCom.Sort = new_instancemethod(_SnapTime.TCnCom_Sort, None, TCnCom)
TCnCom.IsNIdIn = new_instancemethod(_SnapTime.TCnCom_IsNIdIn, None, TCnCom)
TCnCom.GetRndNId = new_instancemethod(_SnapTime.TCnCom_GetRndNId, None, TCnCom)
TCnCom.GetPrimHashCd = new_instancemethod(_SnapTime.TCnCom_GetPrimHashCd, None, TCnCom)
TCnCom.GetSecHashCd = new_instancemethod(_SnapTime.TCnCom_GetSecHashCd, None, TCnCom)
TCnCom_swigregister = _SnapTime.TCnCom_swigregister
TCnCom_swigregister(TCnCom)

def TCnCom_Dump(*args):
    """
    Dump(TCnComV CnComV, TStr Desc)

    Parameters
    ----------
    CnComV: TCnComV const &
    Desc: TStr const &

    TCnCom_Dump(TCnComV CnComV)

    Parameters
    ----------
    CnComV: TCnComV const &

    """
    return _SnapTime.TCnCom_Dump(*args)

def TCnCom_SaveTxt(*args):
    """
    SaveTxt(TCnComV CnComV, TStr FNm, TStr Desc)

    Parameters
    ----------
    CnComV: TCnComV const &
    FNm: TStr const &
    Desc: TStr const &

    TCnCom_SaveTxt(TCnComV CnComV, TStr FNm)

    Parameters
    ----------
    CnComV: TCnComV const &
    FNm: TStr const &

    """
    return _SnapTime.TCnCom_SaveTxt(*args)

class TArtPointVisitor(object):
    """Proxy of C++ TArtPointVisitor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    VnLowH = _swig_property(_SnapTime.TArtPointVisitor_VnLowH_get, _SnapTime.TArtPointVisitor_VnLowH_set)
    ParentH = _swig_property(_SnapTime.TArtPointVisitor_ParentH_get, _SnapTime.TArtPointVisitor_ParentH_set)
    ArtSet = _swig_property(_SnapTime.TArtPointVisitor_ArtSet_get, _SnapTime.TArtPointVisitor_ArtSet_set)
    Time = _swig_property(_SnapTime.TArtPointVisitor_Time_get, _SnapTime.TArtPointVisitor_Time_set)

    def __init__(self, *args):
        """
        __init__(TArtPointVisitor self) -> TArtPointVisitor
        __init__(TArtPointVisitor self, int64 const & Nodes) -> TArtPointVisitor

        Parameters
        ----------
        Nodes: int64 const &

        """
        _SnapTime.TArtPointVisitor_swiginit(self, _SnapTime.new_TArtPointVisitor(*args))

    def DiscoverNode(self, NId):
        """
        DiscoverNode(TArtPointVisitor self, int64 NId)

        Parameters
        ----------
        NId: int64

        """
        return _SnapTime.TArtPointVisitor_DiscoverNode(self, NId)


    def FinishNode(self, NId):
        """
        FinishNode(TArtPointVisitor self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TArtPointVisitor_FinishNode(self, NId)


    def ExamineEdge(self, NId1, NId2):
        """
        ExamineEdge(TArtPointVisitor self, int64 const & NId1, int64 const & NId2)

        Parameters
        ----------
        NId1: int64 const &
        NId2: int64 const &

        """
        return _SnapTime.TArtPointVisitor_ExamineEdge(self, NId1, NId2)


    def TreeEdge(self, NId1, NId2):
        """
        TreeEdge(TArtPointVisitor self, int64 const & NId1, int64 const & NId2)

        Parameters
        ----------
        NId1: int64 const &
        NId2: int64 const &

        """
        return _SnapTime.TArtPointVisitor_TreeEdge(self, NId1, NId2)


    def BackEdge(self, NId1, NId2):
        """
        BackEdge(TArtPointVisitor self, int64 const & NId1, int64 const & NId2)

        Parameters
        ----------
        NId1: int64 const &
        NId2: int64 const &

        """
        return _SnapTime.TArtPointVisitor_BackEdge(self, NId1, NId2)


    def FwdEdge(self, NId1, NId2):
        """
        FwdEdge(TArtPointVisitor self, int64 const & NId1, int64 const & NId2)

        Parameters
        ----------
        NId1: int64 const &
        NId2: int64 const &

        """
        return _SnapTime.TArtPointVisitor_FwdEdge(self, NId1, NId2)

    __swig_destroy__ = _SnapTime.delete_TArtPointVisitor
TArtPointVisitor.DiscoverNode = new_instancemethod(_SnapTime.TArtPointVisitor_DiscoverNode, None, TArtPointVisitor)
TArtPointVisitor.FinishNode = new_instancemethod(_SnapTime.TArtPointVisitor_FinishNode, None, TArtPointVisitor)
TArtPointVisitor.ExamineEdge = new_instancemethod(_SnapTime.TArtPointVisitor_ExamineEdge, None, TArtPointVisitor)
TArtPointVisitor.TreeEdge = new_instancemethod(_SnapTime.TArtPointVisitor_TreeEdge, None, TArtPointVisitor)
TArtPointVisitor.BackEdge = new_instancemethod(_SnapTime.TArtPointVisitor_BackEdge, None, TArtPointVisitor)
TArtPointVisitor.FwdEdge = new_instancemethod(_SnapTime.TArtPointVisitor_FwdEdge, None, TArtPointVisitor)
TArtPointVisitor_swigregister = _SnapTime.TArtPointVisitor_swigregister
TArtPointVisitor_swigregister(TArtPointVisitor)

class TBiConVisitor(object):
    """Proxy of C++ TBiConVisitor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    VnLowH = _swig_property(_SnapTime.TBiConVisitor_VnLowH_get, _SnapTime.TBiConVisitor_VnLowH_set)
    ParentH = _swig_property(_SnapTime.TBiConVisitor_ParentH_get, _SnapTime.TBiConVisitor_ParentH_set)
    Stack = _swig_property(_SnapTime.TBiConVisitor_Stack_get, _SnapTime.TBiConVisitor_Stack_set)
    CnComV = _swig_property(_SnapTime.TBiConVisitor_CnComV_get, _SnapTime.TBiConVisitor_CnComV_set)
    NSet = _swig_property(_SnapTime.TBiConVisitor_NSet_get, _SnapTime.TBiConVisitor_NSet_set)
    Time = _swig_property(_SnapTime.TBiConVisitor_Time_get, _SnapTime.TBiConVisitor_Time_set)

    def __init__(self, *args):
        """
        __init__(TBiConVisitor self) -> TBiConVisitor
        __init__(TBiConVisitor self, int64 const & Nodes) -> TBiConVisitor

        Parameters
        ----------
        Nodes: int64 const &

        """
        _SnapTime.TBiConVisitor_swiginit(self, _SnapTime.new_TBiConVisitor(*args))

    def DiscoverNode(self, NId):
        """
        DiscoverNode(TBiConVisitor self, int64 NId)

        Parameters
        ----------
        NId: int64

        """
        return _SnapTime.TBiConVisitor_DiscoverNode(self, NId)


    def FinishNode(self, NId):
        """
        FinishNode(TBiConVisitor self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TBiConVisitor_FinishNode(self, NId)


    def ExamineEdge(self, NId1, NId2):
        """
        ExamineEdge(TBiConVisitor self, int64 const & NId1, int64 const & NId2)

        Parameters
        ----------
        NId1: int64 const &
        NId2: int64 const &

        """
        return _SnapTime.TBiConVisitor_ExamineEdge(self, NId1, NId2)


    def TreeEdge(self, NId1, NId2):
        """
        TreeEdge(TBiConVisitor self, int64 const & NId1, int64 const & NId2)

        Parameters
        ----------
        NId1: int64 const &
        NId2: int64 const &

        """
        return _SnapTime.TBiConVisitor_TreeEdge(self, NId1, NId2)


    def BackEdge(self, NId1, NId2):
        """
        BackEdge(TBiConVisitor self, int64 const & NId1, int64 const & NId2)

        Parameters
        ----------
        NId1: int64 const &
        NId2: int64 const &

        """
        return _SnapTime.TBiConVisitor_BackEdge(self, NId1, NId2)


    def FwdEdge(self, NId1, NId2):
        """
        FwdEdge(TBiConVisitor self, int64 const & NId1, int64 const & NId2)

        Parameters
        ----------
        NId1: int64 const &
        NId2: int64 const &

        """
        return _SnapTime.TBiConVisitor_FwdEdge(self, NId1, NId2)

    __swig_destroy__ = _SnapTime.delete_TBiConVisitor
TBiConVisitor.DiscoverNode = new_instancemethod(_SnapTime.TBiConVisitor_DiscoverNode, None, TBiConVisitor)
TBiConVisitor.FinishNode = new_instancemethod(_SnapTime.TBiConVisitor_FinishNode, None, TBiConVisitor)
TBiConVisitor.ExamineEdge = new_instancemethod(_SnapTime.TBiConVisitor_ExamineEdge, None, TBiConVisitor)
TBiConVisitor.TreeEdge = new_instancemethod(_SnapTime.TBiConVisitor_TreeEdge, None, TBiConVisitor)
TBiConVisitor.BackEdge = new_instancemethod(_SnapTime.TBiConVisitor_BackEdge, None, TBiConVisitor)
TBiConVisitor.FwdEdge = new_instancemethod(_SnapTime.TBiConVisitor_FwdEdge, None, TBiConVisitor)
TBiConVisitor_swigregister = _SnapTime.TBiConVisitor_swigregister
TBiConVisitor_swigregister(TBiConVisitor)

class TForestFire(object):
    """Proxy of C++ TForestFire class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TForestFire self) -> TForestFire
        __init__(TForestFire self, PNGraph GraphPt, double const & ForwBurnProb, double const & BackBurnProb, double const & DecayProb=1.0, int64 const & RndSeed=1) -> TForestFire

        Parameters
        ----------
        GraphPt: PNGraph const &
        ForwBurnProb: double const &
        BackBurnProb: double const &
        DecayProb: double const &
        RndSeed: int64 const &

        __init__(TForestFire self, PNGraph GraphPt, double const & ForwBurnProb, double const & BackBurnProb, double const & DecayProb=1.0) -> TForestFire

        Parameters
        ----------
        GraphPt: PNGraph const &
        ForwBurnProb: double const &
        BackBurnProb: double const &
        DecayProb: double const &

        __init__(TForestFire self, PNGraph GraphPt, double const & ForwBurnProb, double const & BackBurnProb) -> TForestFire

        Parameters
        ----------
        GraphPt: PNGraph const &
        ForwBurnProb: double const &
        BackBurnProb: double const &

        """
        _SnapTime.TForestFire_swiginit(self, _SnapTime.new_TForestFire(*args))

    def SetGraph(self, GraphPt):
        """
        SetGraph(TForestFire self, PNGraph GraphPt)

        Parameters
        ----------
        GraphPt: PNGraph const &

        """
        return _SnapTime.TForestFire_SetGraph(self, GraphPt)


    def GetGraph(self):
        """
        GetGraph(TForestFire self) -> PNGraph

        Parameters
        ----------
        self: TForestFire const *

        """
        return _SnapTime.TForestFire_GetGraph(self)


    def SetBurnProb(self, ForwBurnProb, BackBurnProb):
        """
        SetBurnProb(TForestFire self, double const & ForwBurnProb, double const & BackBurnProb)

        Parameters
        ----------
        ForwBurnProb: double const &
        BackBurnProb: double const &

        """
        return _SnapTime.TForestFire_SetBurnProb(self, ForwBurnProb, BackBurnProb)


    def SetProbDecay(self, DecayProb):
        """
        SetProbDecay(TForestFire self, double const & DecayProb)

        Parameters
        ----------
        DecayProb: double const &

        """
        return _SnapTime.TForestFire_SetProbDecay(self, DecayProb)


    def Infect(self, *args):
        """
        Infect(TForestFire self, int64 const & NodeId)

        Parameters
        ----------
        NodeId: int64 const &

        Infect(TForestFire self, TInt64V InfectedNIdV)

        Parameters
        ----------
        InfectedNIdV: TInt64V const &

        """
        return _SnapTime.TForestFire_Infect(self, *args)


    def InfectAll(self):
        """
        InfectAll(TForestFire self)

        Parameters
        ----------
        self: TForestFire *

        """
        return _SnapTime.TForestFire_InfectAll(self)


    def InfectRnd(self, NInfect):
        """
        InfectRnd(TForestFire self, int64 const & NInfect)

        Parameters
        ----------
        NInfect: int64 const &

        """
        return _SnapTime.TForestFire_InfectRnd(self, NInfect)


    def BurnExpFire(self):
        """
        BurnExpFire(TForestFire self)

        Parameters
        ----------
        self: TForestFire *

        """
        return _SnapTime.TForestFire_BurnExpFire(self)


    def BurnGeoFire(self):
        """
        BurnGeoFire(TForestFire self)

        Parameters
        ----------
        self: TForestFire *

        """
        return _SnapTime.TForestFire_BurnGeoFire(self)


    def GetFireTm(self):
        """
        GetFireTm(TForestFire self) -> int64

        Parameters
        ----------
        self: TForestFire const *

        """
        return _SnapTime.TForestFire_GetFireTm(self)


    def GetBurned(self):
        """
        GetBurned(TForestFire self) -> int64

        Parameters
        ----------
        self: TForestFire const *

        """
        return _SnapTime.TForestFire_GetBurned(self)


    def GetBurnedNId(self, NIdN):
        """
        GetBurnedNId(TForestFire self, int64 const & NIdN) -> int64

        Parameters
        ----------
        NIdN: int64 const &

        """
        return _SnapTime.TForestFire_GetBurnedNId(self, NIdN)


    def GetBurnedNIdV(self, *args):
        """
        GetBurnedNIdV(TForestFire self) -> TInt64V
        GetBurnedNIdV(TForestFire self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.TForestFire_GetBurnedNIdV(self, *args)


    def PlotFire(self, FNmPref, Desc, PlotAllBurned=False):
        """
        PlotFire(TForestFire self, TStr FNmPref, TStr Desc, bool const & PlotAllBurned=False)

        Parameters
        ----------
        FNmPref: TStr const &
        Desc: TStr const &
        PlotAllBurned: bool const &

        PlotFire(TForestFire self, TStr FNmPref, TStr Desc)

        Parameters
        ----------
        FNmPref: TStr const &
        Desc: TStr const &

        """
        return _SnapTime.TForestFire_PlotFire(self, FNmPref, Desc, PlotAllBurned)


    def GenGraph(Nodes, FwdProb, BckProb):
        """
        GenGraph(int64 const & Nodes, double const & FwdProb, double const & BckProb) -> PNGraph

        Parameters
        ----------
        Nodes: int64 const &
        FwdProb: double const &
        BckProb: double const &

        """
        return _SnapTime.TForestFire_GenGraph(Nodes, FwdProb, BckProb)

    GenGraph = staticmethod(GenGraph)
    __swig_destroy__ = _SnapTime.delete_TForestFire
TForestFire.SetGraph = new_instancemethod(_SnapTime.TForestFire_SetGraph, None, TForestFire)
TForestFire.GetGraph = new_instancemethod(_SnapTime.TForestFire_GetGraph, None, TForestFire)
TForestFire.SetBurnProb = new_instancemethod(_SnapTime.TForestFire_SetBurnProb, None, TForestFire)
TForestFire.SetProbDecay = new_instancemethod(_SnapTime.TForestFire_SetProbDecay, None, TForestFire)
TForestFire.Infect = new_instancemethod(_SnapTime.TForestFire_Infect, None, TForestFire)
TForestFire.InfectAll = new_instancemethod(_SnapTime.TForestFire_InfectAll, None, TForestFire)
TForestFire.InfectRnd = new_instancemethod(_SnapTime.TForestFire_InfectRnd, None, TForestFire)
TForestFire.BurnExpFire = new_instancemethod(_SnapTime.TForestFire_BurnExpFire, None, TForestFire)
TForestFire.BurnGeoFire = new_instancemethod(_SnapTime.TForestFire_BurnGeoFire, None, TForestFire)
TForestFire.GetFireTm = new_instancemethod(_SnapTime.TForestFire_GetFireTm, None, TForestFire)
TForestFire.GetBurned = new_instancemethod(_SnapTime.TForestFire_GetBurned, None, TForestFire)
TForestFire.GetBurnedNId = new_instancemethod(_SnapTime.TForestFire_GetBurnedNId, None, TForestFire)
TForestFire.GetBurnedNIdV = new_instancemethod(_SnapTime.TForestFire_GetBurnedNIdV, None, TForestFire)
TForestFire.PlotFire = new_instancemethod(_SnapTime.TForestFire_PlotFire, None, TForestFire)
TForestFire_swigregister = _SnapTime.TForestFire_swigregister
TForestFire_swigregister(TForestFire)

def TForestFire_GenGraph(Nodes, FwdProb, BckProb):
    """
    TForestFire_GenGraph(int64 const & Nodes, double const & FwdProb, double const & BckProb) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &
    FwdProb: double const &
    BckProb: double const &

    """
    return _SnapTime.TForestFire_GenGraph(Nodes, FwdProb, BckProb)

class TFfGGen(object):
    """Proxy of C++ TFfGGen class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    srUndef = _SnapTime.TFfGGen_srUndef
    srOk = _SnapTime.TFfGGen_srOk
    srFlood = _SnapTime.TFfGGen_srFlood
    srTimeLimit = _SnapTime.TFfGGen_srTimeLimit
    TimeLimitSec = _swig_property(_SnapTime.TFfGGen_TimeLimitSec_get, _SnapTime.TFfGGen_TimeLimitSec_set)

    def __init__(self, BurnExpFireP, StartNNodes, ForwBurnProb, BackBurnProb, DecayProb, Take2AmbasPrb, OrphanPrb):
        """
        __init__(TFfGGen self, bool const & BurnExpFireP, int64 const & StartNNodes, double const & ForwBurnProb, double const & BackBurnProb, double const & DecayProb, double const & Take2AmbasPrb, double const & OrphanPrb) -> TFfGGen

        Parameters
        ----------
        BurnExpFireP: bool const &
        StartNNodes: int64 const &
        ForwBurnProb: double const &
        BackBurnProb: double const &
        DecayProb: double const &
        Take2AmbasPrb: double const &
        OrphanPrb: double const &

        """
        _SnapTime.TFfGGen_swiginit(self, _SnapTime.new_TFfGGen(BurnExpFireP, StartNNodes, ForwBurnProb, BackBurnProb, DecayProb, Take2AmbasPrb, OrphanPrb))

    def GetGraph(self):
        """
        GetGraph(TFfGGen self) -> PNGraph

        Parameters
        ----------
        self: TFfGGen const *

        """
        return _SnapTime.TFfGGen_GetGraph(self)


    def SetGraph(self, NGraph):
        """
        SetGraph(TFfGGen self, PNGraph NGraph)

        Parameters
        ----------
        NGraph: PNGraph const &

        """
        return _SnapTime.TFfGGen_SetGraph(self, NGraph)


    def Clr(self):
        """
        Clr(TFfGGen self)

        Parameters
        ----------
        self: TFfGGen *

        """
        return _SnapTime.TFfGGen_Clr(self)


    def GetParamStr(self):
        """
        GetParamStr(TFfGGen self) -> TStr

        Parameters
        ----------
        self: TFfGGen const *

        """
        return _SnapTime.TFfGGen_GetParamStr(self)


    def AddNodes(self, GraphNodes, FloodStop=True):
        """
        AddNodes(TFfGGen self, int64 const & GraphNodes, bool const & FloodStop=True) -> TFfGGen::TStopReason

        Parameters
        ----------
        GraphNodes: int64 const &
        FloodStop: bool const &

        AddNodes(TFfGGen self, int64 const & GraphNodes) -> TFfGGen::TStopReason

        Parameters
        ----------
        GraphNodes: int64 const &

        """
        return _SnapTime.TFfGGen_AddNodes(self, GraphNodes, FloodStop)


    def GenGraph(self, *args):
        """
        GenGraph(TFfGGen self, int64 const & GraphNodes, bool const & FloodStop=True) -> TFfGGen::TStopReason

        Parameters
        ----------
        GraphNodes: int64 const &
        FloodStop: bool const &

        GenGraph(TFfGGen self, int64 const & GraphNodes) -> TFfGGen::TStopReason

        Parameters
        ----------
        GraphNodes: int64 const &

        GenGraph(TFfGGen self, int64 const & GraphNodes, PGStatVec & EvolStat, bool const & FloodStop=True) -> TFfGGen::TStopReason

        Parameters
        ----------
        GraphNodes: int64 const &
        EvolStat: PGStatVec &
        FloodStop: bool const &

        GenGraph(TFfGGen self, int64 const & GraphNodes, PGStatVec & EvolStat) -> TFfGGen::TStopReason

        Parameters
        ----------
        GraphNodes: int64 const &
        EvolStat: PGStatVec &

        """
        return _SnapTime.TFfGGen_GenGraph(self, *args)


    def PlotFireSize(self, FNmPref, DescStr):
        """
        PlotFireSize(TFfGGen self, TStr FNmPref, TStr DescStr)

        Parameters
        ----------
        FNmPref: TStr const &
        DescStr: TStr const &

        """
        return _SnapTime.TFfGGen_PlotFireSize(self, FNmPref, DescStr)


    def GenFFGraphs(FProb, BProb, FNm):
        """
        GenFFGraphs(double const & FProb, double const & BProb, TStr FNm)

        Parameters
        ----------
        FProb: double const &
        BProb: double const &
        FNm: TStr const &

        """
        return _SnapTime.TFfGGen_GenFFGraphs(FProb, BProb, FNm)

    GenFFGraphs = staticmethod(GenFFGraphs)
    __swig_destroy__ = _SnapTime.delete_TFfGGen
TFfGGen.GetGraph = new_instancemethod(_SnapTime.TFfGGen_GetGraph, None, TFfGGen)
TFfGGen.SetGraph = new_instancemethod(_SnapTime.TFfGGen_SetGraph, None, TFfGGen)
TFfGGen.Clr = new_instancemethod(_SnapTime.TFfGGen_Clr, None, TFfGGen)
TFfGGen.GetParamStr = new_instancemethod(_SnapTime.TFfGGen_GetParamStr, None, TFfGGen)
TFfGGen.AddNodes = new_instancemethod(_SnapTime.TFfGGen_AddNodes, None, TFfGGen)
TFfGGen.GenGraph = new_instancemethod(_SnapTime.TFfGGen_GenGraph, None, TFfGGen)
TFfGGen.PlotFireSize = new_instancemethod(_SnapTime.TFfGGen_PlotFireSize, None, TFfGGen)
TFfGGen_swigregister = _SnapTime.TFfGGen_swigregister
TFfGGen_swigregister(TFfGGen)

def TFfGGen_GenFFGraphs(FProb, BProb, FNm):
    """
    TFfGGen_GenFFGraphs(double const & FProb, double const & BProb, TStr FNm)

    Parameters
    ----------
    FProb: double const &
    BProb: double const &
    FNm: TStr const &

    """
    return _SnapTime.TFfGGen_GenFFGraphs(FProb, BProb, FNm)

class TUndirFFire(object):
    """Proxy of C++ TUndirFFire class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _BurnProb=0.3):
        """
        __init__(TUndirFFire self, double const & _BurnProb=0.3) -> TUndirFFire

        Parameters
        ----------
        _BurnProb: double const &

        __init__(TUndirFFire self) -> TUndirFFire
        """
        _SnapTime.TUndirFFire_swiginit(self, _SnapTime.new_TUndirFFire(_BurnProb))

    def SetGraph(self, GraphPt):
        """
        SetGraph(TUndirFFire self, PUNGraph GraphPt)

        Parameters
        ----------
        GraphPt: PUNGraph const &

        """
        return _SnapTime.TUndirFFire_SetGraph(self, GraphPt)


    def GetGraph(self):
        """
        GetGraph(TUndirFFire self) -> PUNGraph

        Parameters
        ----------
        self: TUndirFFire const *

        """
        return _SnapTime.TUndirFFire_GetGraph(self)


    def GetNBurned(self):
        """
        GetNBurned(TUndirFFire self) -> int64

        Parameters
        ----------
        self: TUndirFFire const *

        """
        return _SnapTime.TUndirFFire_GetNBurned(self)


    def GetBurnedNId(self, n):
        """
        GetBurnedNId(TUndirFFire self, int64 const & n) -> int64

        Parameters
        ----------
        n: int64 const &

        """
        return _SnapTime.TUndirFFire_GetBurnedNId(self, n)


    def BurnGeoFire(self, StartNId):
        """
        BurnGeoFire(TUndirFFire self, int64 const & StartNId) -> int64

        Parameters
        ----------
        StartNId: int64 const &

        """
        return _SnapTime.TUndirFFire_BurnGeoFire(self, StartNId)


    def AddNodes(self, GraphNodes, FloodStop=True):
        """
        AddNodes(TUndirFFire self, int64 const & GraphNodes, bool const & FloodStop=True) -> TFfGGen::TStopReason

        Parameters
        ----------
        GraphNodes: int64 const &
        FloodStop: bool const &

        AddNodes(TUndirFFire self, int64 const & GraphNodes) -> TFfGGen::TStopReason

        Parameters
        ----------
        GraphNodes: int64 const &

        """
        return _SnapTime.TUndirFFire_AddNodes(self, GraphNodes, FloodStop)

    __swig_destroy__ = _SnapTime.delete_TUndirFFire
TUndirFFire.SetGraph = new_instancemethod(_SnapTime.TUndirFFire_SetGraph, None, TUndirFFire)
TUndirFFire.GetGraph = new_instancemethod(_SnapTime.TUndirFFire_GetGraph, None, TUndirFFire)
TUndirFFire.GetNBurned = new_instancemethod(_SnapTime.TUndirFFire_GetNBurned, None, TUndirFFire)
TUndirFFire.GetBurnedNId = new_instancemethod(_SnapTime.TUndirFFire_GetBurnedNId, None, TUndirFFire)
TUndirFFire.BurnGeoFire = new_instancemethod(_SnapTime.TUndirFFire_BurnGeoFire, None, TUndirFFire)
TUndirFFire.AddNodes = new_instancemethod(_SnapTime.TUndirFFire_AddNodes, None, TUndirFFire)
TUndirFFire_swigregister = _SnapTime.TUndirFFire_swigregister
TUndirFFire_swigregister(TUndirFFire)

class TNGraphMtx(object):
    """Proxy of C++ TNGraphMtx class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNGraphMtx self, PNGraph GraphPt) -> TNGraphMtx

        Parameters
        ----------
        GraphPt: PNGraph const &

        __init__(TNGraphMtx self, TNGraphMtx GraphMtx) -> TNGraphMtx

        Parameters
        ----------
        GraphMtx: TNGraphMtx const &

        """
        _SnapTime.TNGraphMtx_swiginit(self, _SnapTime.new_TNGraphMtx(*args))

    def PGetRows(self):
        """
        PGetRows(TNGraphMtx self) -> int64

        Parameters
        ----------
        self: TNGraphMtx const *

        """
        return _SnapTime.TNGraphMtx_PGetRows(self)


    def PGetCols(self):
        """
        PGetCols(TNGraphMtx self) -> int64

        Parameters
        ----------
        self: TNGraphMtx const *

        """
        return _SnapTime.TNGraphMtx_PGetCols(self)


    def PMultiply(self, *args):
        """
        PMultiply(TNGraphMtx self, TFltVV const & B, int ColId, TFltV Result)

        Parameters
        ----------
        B: TFltVV const &
        ColId: int
        Result: TFltV &

        PMultiply(TNGraphMtx self, TFltV Vec, TFltV Result)

        Parameters
        ----------
        Vec: TFltV const &
        Result: TFltV &

        """
        return _SnapTime.TNGraphMtx_PMultiply(self, *args)


    def PMultiplyT(self, *args):
        """
        PMultiplyT(TNGraphMtx self, TFltVV const & B, int ColId, TFltV Result)

        Parameters
        ----------
        B: TFltVV const &
        ColId: int
        Result: TFltV &

        PMultiplyT(TNGraphMtx self, TFltV Vec, TFltV Result)

        Parameters
        ----------
        Vec: TFltV const &
        Result: TFltV &

        """
        return _SnapTime.TNGraphMtx_PMultiplyT(self, *args)

    __swig_destroy__ = _SnapTime.delete_TNGraphMtx
TNGraphMtx.PGetRows = new_instancemethod(_SnapTime.TNGraphMtx_PGetRows, None, TNGraphMtx)
TNGraphMtx.PGetCols = new_instancemethod(_SnapTime.TNGraphMtx_PGetCols, None, TNGraphMtx)
TNGraphMtx.PMultiply = new_instancemethod(_SnapTime.TNGraphMtx_PMultiply, None, TNGraphMtx)
TNGraphMtx.PMultiplyT = new_instancemethod(_SnapTime.TNGraphMtx_PMultiplyT, None, TNGraphMtx)
TNGraphMtx_swigregister = _SnapTime.TNGraphMtx_swigregister
TNGraphMtx_swigregister(TNGraphMtx)

class TUNGraphMtx(object):
    """Proxy of C++ TUNGraphMtx class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TUNGraphMtx self, PUNGraph GraphPt) -> TUNGraphMtx

        Parameters
        ----------
        GraphPt: PUNGraph const &

        __init__(TUNGraphMtx self, TUNGraphMtx GraphMtx) -> TUNGraphMtx

        Parameters
        ----------
        GraphMtx: TUNGraphMtx const &

        """
        _SnapTime.TUNGraphMtx_swiginit(self, _SnapTime.new_TUNGraphMtx(*args))

    def PGetRows(self):
        """
        PGetRows(TUNGraphMtx self) -> int64

        Parameters
        ----------
        self: TUNGraphMtx const *

        """
        return _SnapTime.TUNGraphMtx_PGetRows(self)


    def PGetCols(self):
        """
        PGetCols(TUNGraphMtx self) -> int64

        Parameters
        ----------
        self: TUNGraphMtx const *

        """
        return _SnapTime.TUNGraphMtx_PGetCols(self)


    def PMultiply(self, *args):
        """
        PMultiply(TUNGraphMtx self, TFltVV const & B, int ColId, TFltV Result)

        Parameters
        ----------
        B: TFltVV const &
        ColId: int
        Result: TFltV &

        PMultiply(TUNGraphMtx self, TFltV Vec, TFltV Result)

        Parameters
        ----------
        Vec: TFltV const &
        Result: TFltV &

        """
        return _SnapTime.TUNGraphMtx_PMultiply(self, *args)


    def PMultiplyT(self, *args):
        """
        PMultiplyT(TUNGraphMtx self, TFltVV const & B, int ColId, TFltV Result)

        Parameters
        ----------
        B: TFltVV const &
        ColId: int
        Result: TFltV &

        PMultiplyT(TUNGraphMtx self, TFltV Vec, TFltV Result)

        Parameters
        ----------
        Vec: TFltV const &
        Result: TFltV &

        """
        return _SnapTime.TUNGraphMtx_PMultiplyT(self, *args)

    __swig_destroy__ = _SnapTime.delete_TUNGraphMtx
TUNGraphMtx.PGetRows = new_instancemethod(_SnapTime.TUNGraphMtx_PGetRows, None, TUNGraphMtx)
TUNGraphMtx.PGetCols = new_instancemethod(_SnapTime.TUNGraphMtx_PGetCols, None, TUNGraphMtx)
TUNGraphMtx.PMultiply = new_instancemethod(_SnapTime.TUNGraphMtx_PMultiply, None, TUNGraphMtx)
TUNGraphMtx.PMultiplyT = new_instancemethod(_SnapTime.TUNGraphMtx_PMultiplyT, None, TUNGraphMtx)
TUNGraphMtx_swigregister = _SnapTime.TUNGraphMtx_swigregister
TUNGraphMtx_swigregister(TUNGraphMtx)


def GetSngVals(Graph, SngVals, SngValV):
    """
    GetSngVals(PNGraph Graph, int const & SngVals, TFltV SngValV)

    Parameters
    ----------
    Graph: PNGraph const &
    SngVals: int const &
    SngValV: TFltV &

    """
    return _SnapTime.GetSngVals(Graph, SngVals, SngValV)

def GetSngVec(*args):
    """
    GetSngVec(PNGraph Graph, TFltV LeftSV, TFltV RightSV)

    Parameters
    ----------
    Graph: PNGraph const &
    LeftSV: TFltV &
    RightSV: TFltV &

    GetSngVec(PNGraph Graph, int const & SngVecs, TFltV SngValV, TVec< TFltV > & LeftSV, TVec< TFltV > & RightSV)

    Parameters
    ----------
    Graph: PNGraph const &
    SngVecs: int const &
    SngValV: TFltV &
    LeftSV: TVec< TFltV > &
    RightSV: TVec< TFltV > &

    """
    return _SnapTime.GetSngVec(*args)

def GetEigVals(Graph, EigVals, EigValV):
    """
    GetEigVals(PUNGraph Graph, int const & EigVals, TFltV EigValV)

    Parameters
    ----------
    Graph: PUNGraph const &
    EigVals: int const &
    EigValV: TFltV &

    """
    return _SnapTime.GetEigVals(Graph, EigVals, EigValV)

def GetEigVec(*args):
    """
    GetEigVec(PUNGraph Graph, TFltV EigVecV)

    Parameters
    ----------
    Graph: PUNGraph const &
    EigVecV: TFltV &

    GetEigVec(PUNGraph Graph, int const & EigVecs, TFltV EigValV, TVec< TFltV > & EigVecV)

    Parameters
    ----------
    Graph: PUNGraph const &
    EigVecs: int const &
    EigValV: TFltV &
    EigVecV: TVec< TFltV > &

    """
    return _SnapTime.GetEigVec(*args)

def GetInvParticipRat(Graph, MaxEigVecs, TimeLimit, EigValIprV):
    """
    GetInvParticipRat(PUNGraph Graph, int MaxEigVecs, int TimeLimit, TFltPrV EigValIprV)

    Parameters
    ----------
    Graph: PUNGraph const &
    MaxEigVecs: int
    TimeLimit: int
    EigValIprV: TFltPrV &

    """
    return _SnapTime.GetInvParticipRat(Graph, MaxEigVecs, TimeLimit, EigValIprV)

def GetInvParticipRatEig(EigVec):
    """
    GetInvParticipRatEig(TFltV EigVec) -> double

    Parameters
    ----------
    EigVec: TFltV const &

    """
    return _SnapTime.GetInvParticipRatEig(EigVec)

def LoadEdgeListNet(InFNm, Separator):
    """
    LoadEdgeListNet(TStr InFNm, char const & Separator) -> PNEANet

    Parameters
    ----------
    InFNm: TStr const &
    Separator: char const &

    """
    return _SnapTime.LoadEdgeListNet(InFNm, Separator)

def LoadDyNet(FNm):
    """
    LoadDyNet(TStr FNm) -> PNGraph

    Parameters
    ----------
    FNm: TStr const &

    """
    return _SnapTime.LoadDyNet(FNm)

def LoadDyNetGraphV(FNm):
    """
    LoadDyNetGraphV(TStr FNm) -> TVec< PNGraph >

    Parameters
    ----------
    FNm: TStr const &

    """
    return _SnapTime.LoadDyNetGraphV(FNm)

def SaveEdgeListNet(Graph, OutFNm, Desc):
    """
    SaveEdgeListNet(PNEANet Graph, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    Graph: PNEANet const &
    OutFNm: TStr const &
    Desc: TStr const &

    """
    return _SnapTime.SaveEdgeListNet(Graph, OutFNm, Desc)
gvlDot = _SnapTime.gvlDot
gvlNeato = _SnapTime.gvlNeato
gvlTwopi = _SnapTime.gvlTwopi
gvlCirco = _SnapTime.gvlCirco
gvlSfdp = _SnapTime.gvlSfdp

def GVizDoLayout(GraphInFNm, OutFNm, Layout):
    """
    GVizDoLayout(TStr GraphInFNm, TStr OutFNm, TGVizLayout const & Layout)

    Parameters
    ----------
    GraphInFNm: TStr const &
    OutFNm: TStr
    Layout: TGVizLayout const &

    """
    return _SnapTime.GVizDoLayout(GraphInFNm, OutFNm, Layout)

def GVizGetLayoutStr(Layout):
    """
    GVizGetLayoutStr(TGVizLayout const & Layout) -> TStr

    Parameters
    ----------
    Layout: TGVizLayout const &

    """
    return _SnapTime.GVizGetLayoutStr(Layout)

def GenRndBipart(*args):
    """
    GenRndBipart(int64 const & LeftNodes, int64 const & RightNodes, int64 const & Edges, TRnd Rnd) -> PBPGraph

    Parameters
    ----------
    LeftNodes: int64 const &
    RightNodes: int64 const &
    Edges: int64 const &
    Rnd: TRnd &

    GenRndBipart(int64 const & LeftNodes, int64 const & RightNodes, int64 const & Edges) -> PBPGraph

    Parameters
    ----------
    LeftNodes: int64 const &
    RightNodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.GenRndBipart(*args)

def GenRndDegK(*args):
    """
    GenRndDegK(int64 const & Nodes, int64 const & NodeDeg, int64 const & NSwitch=100, TRnd Rnd) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    NodeDeg: int64 const &
    NSwitch: int64 const &
    Rnd: TRnd &

    GenRndDegK(int64 const & Nodes, int64 const & NodeDeg, int64 const & NSwitch=100) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    NodeDeg: int64 const &
    NSwitch: int64 const &

    GenRndDegK(int64 const & Nodes, int64 const & NodeDeg) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    NodeDeg: int64 const &

    """
    return _SnapTime.GenRndDegK(*args)

def GenRndPowerLaw(*args):
    """
    GenRndPowerLaw(int64 const & Nodes, double const & PowerExp, bool const & ConfModel=True, TRnd Rnd) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    PowerExp: double const &
    ConfModel: bool const &
    Rnd: TRnd &

    GenRndPowerLaw(int64 const & Nodes, double const & PowerExp, bool const & ConfModel=True) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    PowerExp: double const &
    ConfModel: bool const &

    GenRndPowerLaw(int64 const & Nodes, double const & PowerExp) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    PowerExp: double const &

    """
    return _SnapTime.GenRndPowerLaw(*args)

def GenDegSeq(*args):
    """
    GenDegSeq(TInt64V DegSeqV, TRnd Rnd) -> PUNGraph

    Parameters
    ----------
    DegSeqV: TInt64V const &
    Rnd: TRnd &

    GenDegSeq(TInt64V DegSeqV) -> PUNGraph

    Parameters
    ----------
    DegSeqV: TInt64V const &

    """
    return _SnapTime.GenDegSeq(*args)

def GenPrefAttach(*args):
    """
    GenPrefAttach(int64 const & Nodes, int64 const & NodeOutDeg, TRnd Rnd) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &
    Rnd: TRnd &

    GenPrefAttach(int64 const & Nodes, int64 const & NodeOutDeg) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &

    """
    return _SnapTime.GenPrefAttach(*args)

def GenGeoPrefAttach(*args):
    """
    GenGeoPrefAttach(int64 const & Nodes, int64 const & OutDeg, double const & Beta, TRnd Rnd) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    OutDeg: int64 const &
    Beta: double const &
    Rnd: TRnd &

    GenGeoPrefAttach(int64 const & Nodes, int64 const & OutDeg, double const & Beta) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    OutDeg: int64 const &
    Beta: double const &

    """
    return _SnapTime.GenGeoPrefAttach(*args)

def GenSmallWorld(*args):
    """
    GenSmallWorld(int64 const & Nodes, int64 const & NodeOutDeg, double const & RewireProb, TRnd Rnd) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &
    RewireProb: double const &
    Rnd: TRnd &

    GenSmallWorld(int64 const & Nodes, int64 const & NodeOutDeg, double const & RewireProb) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &
    RewireProb: double const &

    """
    return _SnapTime.GenSmallWorld(*args)

def GenForestFire(Nodes, FwdProb, BckProb):
    """
    GenForestFire(int64 const & Nodes, double const & FwdProb, double const & BckProb) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &
    FwdProb: double const &
    BckProb: double const &

    """
    return _SnapTime.GenForestFire(Nodes, FwdProb, BckProb)

def GenCopyModel(*args):
    """
    GenCopyModel(int64 const & Nodes, double const & Beta, TRnd Rnd) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &
    Beta: double const &
    Rnd: TRnd &

    GenCopyModel(int64 const & Nodes, double const & Beta) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &
    Beta: double const &

    """
    return _SnapTime.GenCopyModel(*args)

def GenRMat(*args):
    """
    GenRMat(int64 const & Nodes, int64 const & Edges, double const & A, double const & B, double const & C, TRnd Rnd) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &
    A: double const &
    B: double const &
    C: double const &
    Rnd: TRnd &

    GenRMat(int64 const & Nodes, int64 const & Edges, double const & A, double const & B, double const & C) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &
    A: double const &
    B: double const &
    C: double const &

    """
    return _SnapTime.GenRMat(*args)

def GenRMatEpinions():
    """GenRMatEpinions() -> PNGraph"""
    return _SnapTime.GenRMatEpinions()

def GenRewire(*args):
    """
    GenRewire(PUNGraph Graph, int64 const & NSwitch=100, TRnd Rnd) -> PUNGraph

    Parameters
    ----------
    Graph: PUNGraph const &
    NSwitch: int64 const &
    Rnd: TRnd &

    GenRewire(PUNGraph Graph, int64 const & NSwitch=100) -> PUNGraph

    Parameters
    ----------
    Graph: PUNGraph const &
    NSwitch: int64 const &

    GenRewire(PUNGraph Graph) -> PUNGraph

    Parameters
    ----------
    Graph: PUNGraph const &

    GenRewire(PNGraph Graph, int64 const & NSwitch=100, TRnd Rnd) -> PNGraph

    Parameters
    ----------
    Graph: PNGraph const &
    NSwitch: int64 const &
    Rnd: TRnd &

    GenRewire(PNGraph Graph, int64 const & NSwitch=100) -> PNGraph

    Parameters
    ----------
    Graph: PNGraph const &
    NSwitch: int64 const &

    GenRewire(PNGraph Graph) -> PNGraph

    Parameters
    ----------
    Graph: PNGraph const &

    GenRewire(PBPGraph const & Graph, int64 const & NSwitch=100, TRnd Rnd) -> PBPGraph

    Parameters
    ----------
    Graph: PBPGraph const &
    NSwitch: int64 const &
    Rnd: TRnd &

    GenRewire(PBPGraph const & Graph, int64 const & NSwitch=100) -> PBPGraph

    Parameters
    ----------
    Graph: PBPGraph const &
    NSwitch: int64 const &

    GenRewire(PBPGraph const & Graph) -> PBPGraph

    Parameters
    ----------
    Graph: PBPGraph const &

    """
    return _SnapTime.GenRewire(*args)

def GenConfModel(*args):
    """
    GenConfModel(TInt64V DegSeqV, TRnd Rnd) -> PUNGraph

    Parameters
    ----------
    DegSeqV: TInt64V const &
    Rnd: TRnd &

    GenConfModel(TInt64V DegSeqV) -> PUNGraph

    Parameters
    ----------
    DegSeqV: TInt64V const &

    GenConfModel(PUNGraph G) -> PUNGraph

    Parameters
    ----------
    G: PUNGraph const &

    """
    return _SnapTime.GenConfModel(*args)

def GetSubGraph(*args):
    """
    GetSubGraph(PUNGraph Graph, TInt64V NIdV, bool const & RenumberNodes=False) -> PUNGraph

    Parameters
    ----------
    Graph: PUNGraph const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    GetSubGraph(PUNGraph Graph, TInt64V NIdV) -> PUNGraph

    Parameters
    ----------
    Graph: PUNGraph const &
    NIdV: TInt64V const &

    GetSubGraph(PNGraph Graph, TInt64V NIdV, bool const & RenumberNodes=False) -> PNGraph

    Parameters
    ----------
    Graph: PNGraph const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    GetSubGraph(PNGraph Graph, TInt64V NIdV) -> PNGraph

    Parameters
    ----------
    Graph: PNGraph const &
    NIdV: TInt64V const &

    """
    return _SnapTime.GetSubGraph(*args)

def GetEgonet(*args):
    """
    GetEgonet(PUNGraph Graph, int64 const CtrNId, int64 & ArndEdges) -> PUNGraph

    Parameters
    ----------
    Graph: PUNGraph const &
    CtrNId: int64 const
    ArndEdges: int64 &

    GetEgonet(PNGraph Graph, int64 const CtrNId, int64 & InEdges, int64 & OutEdges) -> PNGraph

    Parameters
    ----------
    Graph: PNGraph const &
    CtrNId: int64 const
    InEdges: int64 &
    OutEdges: int64 &

    """
    return _SnapTime.GetEgonet(*args)

def GetCommon(A, B):
    """
    GetCommon(TInt64V A, TInt64V B) -> int64

    Parameters
    ----------
    A: TInt64V &
    B: TInt64V &

    """
    return _SnapTime.GetCommon(A, B)

def PlotEigValRank(*args):
    """
    PlotEigValRank(PUNGraph Graph, int const & EigVals, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: PUNGraph const &
    EigVals: int const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotEigValRank(PUNGraph Graph, int const & EigVals, TStr FNmPref)

    Parameters
    ----------
    Graph: PUNGraph const &
    EigVals: int const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotEigValRank(*args)

def PlotEigValDistr(*args):
    """
    PlotEigValDistr(PUNGraph Graph, int const & EigVals, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: PUNGraph const &
    EigVals: int const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotEigValDistr(PUNGraph Graph, int const & EigVals, TStr FNmPref)

    Parameters
    ----------
    Graph: PUNGraph const &
    EigVals: int const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotEigValDistr(*args)

def PlotInvParticipRat(*args):
    """
    PlotInvParticipRat(PUNGraph Graph, int const & MaxEigVecs, int const & TimeLimit, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: PUNGraph const &
    MaxEigVecs: int const &
    TimeLimit: int const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotInvParticipRat(PUNGraph Graph, int const & MaxEigVecs, int const & TimeLimit, TStr FNmPref)

    Parameters
    ----------
    Graph: PUNGraph const &
    MaxEigVecs: int const &
    TimeLimit: int const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotInvParticipRat(*args)

def PlotSngValRank(*args):
    """
    PlotSngValRank(PNGraph Graph, int const & SngVals, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: PNGraph const &
    SngVals: int const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotSngValRank(PNGraph Graph, int const & SngVals, TStr FNmPref)

    Parameters
    ----------
    Graph: PNGraph const &
    SngVals: int const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotSngValRank(*args)

def PlotSngValDistr(*args):
    """
    PlotSngValDistr(PNGraph Graph, int const & SngVals, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: PNGraph const &
    SngVals: int const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotSngValDistr(PNGraph Graph, int const & SngVals, TStr FNmPref)

    Parameters
    ----------
    Graph: PNGraph const &
    SngVals: int const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotSngValDistr(*args)

def PlotSngVec(*args):
    """
    PlotSngVec(PNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: PNGraph const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotSngVec(PNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: PNGraph const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotSngVec(*args)
class TIntPr(object):
    """Proxy of C++ TPair<(TInt,TInt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_SnapTime.TIntPr_Val1_get, _SnapTime.TIntPr_Val1_set)
    Val2 = _swig_property(_SnapTime.TIntPr_Val2_get, _SnapTime.TIntPr_Val2_set)

    def __init__(self, *args):
        """
        __init__(TPair<(TInt,TInt)> self) -> TIntPr
        __init__(TPair<(TInt,TInt)> self, TIntPr Pair) -> TIntPr

        Parameters
        ----------
        Pair: TPair< TInt,TInt > const &

        __init__(TPair<(TInt,TInt)> self, TIntPr Pair) -> TIntPr

        Parameters
        ----------
        Pair: TPair< TInt,TInt > const &&

        __init__(TPair<(TInt,TInt)> self, TInt _Val1, TInt _Val2) -> TIntPr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TInt const &

        __init__(TPair<(TInt,TInt)> self, TSIn SIn) -> TIntPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntPr_swiginit(self, _SnapTime.new_TIntPr(*args))

    def Save(self, SOut):
        """
        Save(TIntPr self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntPr_Save(self, SOut)


    def Load(self, SIn):
        """
        Load(TIntPr self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntPr_Load(self, SIn)


    def __eq__(self, Pair):
        """
        __eq__(TIntPr self, TIntPr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPr___eq__(self, Pair)


    def __lt__(self, Pair):
        """
        __lt__(TIntPr self, TIntPr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPr___lt__(self, Pair)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntPr self) -> int

        Parameters
        ----------
        self: TPair< TInt,TInt > const *

        """
        return _SnapTime.TIntPr_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntPr self) -> int

        Parameters
        ----------
        self: TPair< TInt,TInt > const *

        """
        return _SnapTime.TIntPr_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntPr self) -> int

        Parameters
        ----------
        self: TPair< TInt,TInt > const *

        """
        return _SnapTime.TIntPr_GetSecHashCd(self)


    def GetVal(self, _Val1, _Val2):
        """
        GetVal(TIntPr self, TInt _Val1, TInt _Val2)

        Parameters
        ----------
        _Val1: TInt &
        _Val2: TInt &

        """
        return _SnapTime.TIntPr_GetVal(self, _Val1, _Val2)


    def GetVal1(self):
        """
        GetVal1(TIntPr self) -> TInt

        Parameters
        ----------
        self: TPair< TInt,TInt > const *

        """
        return _SnapTime.TIntPr_GetVal1(self)


    def GetVal2(self):
        """
        GetVal2(TIntPr self) -> TInt

        Parameters
        ----------
        self: TPair< TInt,TInt > const *

        """
        return _SnapTime.TIntPr_GetVal2(self)

    __swig_destroy__ = _SnapTime.delete_TIntPr
TIntPr.Save = new_instancemethod(_SnapTime.TIntPr_Save, None, TIntPr)
TIntPr.Load = new_instancemethod(_SnapTime.TIntPr_Load, None, TIntPr)
TIntPr.__eq__ = new_instancemethod(_SnapTime.TIntPr___eq__, None, TIntPr)
TIntPr.__lt__ = new_instancemethod(_SnapTime.TIntPr___lt__, None, TIntPr)
TIntPr.GetMemUsed = new_instancemethod(_SnapTime.TIntPr_GetMemUsed, None, TIntPr)
TIntPr.GetPrimHashCd = new_instancemethod(_SnapTime.TIntPr_GetPrimHashCd, None, TIntPr)
TIntPr.GetSecHashCd = new_instancemethod(_SnapTime.TIntPr_GetSecHashCd, None, TIntPr)
TIntPr.GetVal = new_instancemethod(_SnapTime.TIntPr_GetVal, None, TIntPr)
TIntPr.GetVal1 = new_instancemethod(_SnapTime.TIntPr_GetVal1, None, TIntPr)
TIntPr.GetVal2 = new_instancemethod(_SnapTime.TIntPr_GetVal2, None, TIntPr)
TIntPr_swigregister = _SnapTime.TIntPr_swigregister
TIntPr_swigregister(TIntPr)
EDGES_START = cvar.EDGES_START
NODES_START = cvar.NODES_START
END_SENTINEL = cvar.END_SENTINEL
SRC_ID_NAME = cvar.SRC_ID_NAME
DST_ID_NAME = cvar.DST_ID_NAME
NID_NAME = cvar.NID_NAME
INT_TYPE_PREFIX = cvar.INT_TYPE_PREFIX
FLT_TYPE_PREFIX = cvar.FLT_TYPE_PREFIX
STR_TYPE_PREFIX = cvar.STR_TYPE_PREFIX
NULL_VAL = cvar.NULL_VAL

class TInt64Pr(object):
    """Proxy of C++ TPair<(TInt64,TInt64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_SnapTime.TInt64Pr_Val1_get, _SnapTime.TInt64Pr_Val1_set)
    Val2 = _swig_property(_SnapTime.TInt64Pr_Val2_get, _SnapTime.TInt64Pr_Val2_set)

    def __init__(self, *args):
        """
        __init__(TPair<(TInt64,TInt64)> self) -> TInt64Pr
        __init__(TPair<(TInt64,TInt64)> self, TInt64Pr Pair) -> TInt64Pr

        Parameters
        ----------
        Pair: TPair< TInt64,TInt64 > const &

        __init__(TPair<(TInt64,TInt64)> self, TInt64Pr Pair) -> TInt64Pr

        Parameters
        ----------
        Pair: TPair< TInt64,TInt64 > const &&

        __init__(TPair<(TInt64,TInt64)> self, TInt64 _Val1, TInt64 _Val2) -> TInt64Pr

        Parameters
        ----------
        _Val1: TInt64 const &
        _Val2: TInt64 const &

        __init__(TPair<(TInt64,TInt64)> self, TSIn SIn) -> TInt64Pr

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TInt64Pr_swiginit(self, _SnapTime.new_TInt64Pr(*args))

    def Save(self, SOut):
        """
        Save(TInt64Pr self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TInt64Pr_Save(self, SOut)


    def Load(self, SIn):
        """
        Load(TInt64Pr self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TInt64Pr_Load(self, SIn)


    def __eq__(self, Pair):
        """
        __eq__(TInt64Pr self, TInt64Pr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TInt64Pr___eq__(self, Pair)


    def __lt__(self, Pair):
        """
        __lt__(TInt64Pr self, TInt64Pr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TInt64Pr___lt__(self, Pair)


    def GetMemUsed(self):
        """
        GetMemUsed(TInt64Pr self) -> int

        Parameters
        ----------
        self: TPair< TInt64,TInt64 > const *

        """
        return _SnapTime.TInt64Pr_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TInt64Pr self) -> int

        Parameters
        ----------
        self: TPair< TInt64,TInt64 > const *

        """
        return _SnapTime.TInt64Pr_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TInt64Pr self) -> int

        Parameters
        ----------
        self: TPair< TInt64,TInt64 > const *

        """
        return _SnapTime.TInt64Pr_GetSecHashCd(self)


    def GetVal(self, _Val1, _Val2):
        """
        GetVal(TInt64Pr self, TInt64 _Val1, TInt64 _Val2)

        Parameters
        ----------
        _Val1: TInt64 &
        _Val2: TInt64 &

        """
        return _SnapTime.TInt64Pr_GetVal(self, _Val1, _Val2)


    def GetVal1(self):
        """
        GetVal1(TInt64Pr self) -> TInt64

        Parameters
        ----------
        self: TPair< TInt64,TInt64 > const *

        """
        return _SnapTime.TInt64Pr_GetVal1(self)


    def GetVal2(self):
        """
        GetVal2(TInt64Pr self) -> TInt64

        Parameters
        ----------
        self: TPair< TInt64,TInt64 > const *

        """
        return _SnapTime.TInt64Pr_GetVal2(self)

    __swig_destroy__ = _SnapTime.delete_TInt64Pr
TInt64Pr.Save = new_instancemethod(_SnapTime.TInt64Pr_Save, None, TInt64Pr)
TInt64Pr.Load = new_instancemethod(_SnapTime.TInt64Pr_Load, None, TInt64Pr)
TInt64Pr.__eq__ = new_instancemethod(_SnapTime.TInt64Pr___eq__, None, TInt64Pr)
TInt64Pr.__lt__ = new_instancemethod(_SnapTime.TInt64Pr___lt__, None, TInt64Pr)
TInt64Pr.GetMemUsed = new_instancemethod(_SnapTime.TInt64Pr_GetMemUsed, None, TInt64Pr)
TInt64Pr.GetPrimHashCd = new_instancemethod(_SnapTime.TInt64Pr_GetPrimHashCd, None, TInt64Pr)
TInt64Pr.GetSecHashCd = new_instancemethod(_SnapTime.TInt64Pr_GetSecHashCd, None, TInt64Pr)
TInt64Pr.GetVal = new_instancemethod(_SnapTime.TInt64Pr_GetVal, None, TInt64Pr)
TInt64Pr.GetVal1 = new_instancemethod(_SnapTime.TInt64Pr_GetVal1, None, TInt64Pr)
TInt64Pr.GetVal2 = new_instancemethod(_SnapTime.TInt64Pr_GetVal2, None, TInt64Pr)
TInt64Pr_swigregister = _SnapTime.TInt64Pr_swigregister
TInt64Pr_swigregister(TInt64Pr)

class TFltPr(object):
    """Proxy of C++ TPair<(TFlt,TFlt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_SnapTime.TFltPr_Val1_get, _SnapTime.TFltPr_Val1_set)
    Val2 = _swig_property(_SnapTime.TFltPr_Val2_get, _SnapTime.TFltPr_Val2_set)

    def __init__(self, *args):
        """
        __init__(TPair<(TFlt,TFlt)> self) -> TFltPr
        __init__(TPair<(TFlt,TFlt)> self, TFltPr Pair) -> TFltPr

        Parameters
        ----------
        Pair: TPair< TFlt,TFlt > const &

        __init__(TPair<(TFlt,TFlt)> self, TFltPr Pair) -> TFltPr

        Parameters
        ----------
        Pair: TPair< TFlt,TFlt > const &&

        __init__(TPair<(TFlt,TFlt)> self, TFlt _Val1, TFlt _Val2) -> TFltPr

        Parameters
        ----------
        _Val1: TFlt const &
        _Val2: TFlt const &

        __init__(TPair<(TFlt,TFlt)> self, TSIn SIn) -> TFltPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TFltPr_swiginit(self, _SnapTime.new_TFltPr(*args))

    def Save(self, SOut):
        """
        Save(TFltPr self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TFltPr_Save(self, SOut)


    def Load(self, SIn):
        """
        Load(TFltPr self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TFltPr_Load(self, SIn)


    def __eq__(self, Pair):
        """
        __eq__(TFltPr self, TFltPr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr___eq__(self, Pair)


    def __lt__(self, Pair):
        """
        __lt__(TFltPr self, TFltPr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr___lt__(self, Pair)


    def GetMemUsed(self):
        """
        GetMemUsed(TFltPr self) -> int

        Parameters
        ----------
        self: TPair< TFlt,TFlt > const *

        """
        return _SnapTime.TFltPr_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TFltPr self) -> int

        Parameters
        ----------
        self: TPair< TFlt,TFlt > const *

        """
        return _SnapTime.TFltPr_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TFltPr self) -> int

        Parameters
        ----------
        self: TPair< TFlt,TFlt > const *

        """
        return _SnapTime.TFltPr_GetSecHashCd(self)


    def GetVal(self, _Val1, _Val2):
        """
        GetVal(TFltPr self, TFlt _Val1, TFlt _Val2)

        Parameters
        ----------
        _Val1: TFlt &
        _Val2: TFlt &

        """
        return _SnapTime.TFltPr_GetVal(self, _Val1, _Val2)


    def GetVal1(self):
        """
        GetVal1(TFltPr self) -> TFlt

        Parameters
        ----------
        self: TPair< TFlt,TFlt > const *

        """
        return _SnapTime.TFltPr_GetVal1(self)


    def GetVal2(self):
        """
        GetVal2(TFltPr self) -> TFlt

        Parameters
        ----------
        self: TPair< TFlt,TFlt > const *

        """
        return _SnapTime.TFltPr_GetVal2(self)

    __swig_destroy__ = _SnapTime.delete_TFltPr
TFltPr.Save = new_instancemethod(_SnapTime.TFltPr_Save, None, TFltPr)
TFltPr.Load = new_instancemethod(_SnapTime.TFltPr_Load, None, TFltPr)
TFltPr.__eq__ = new_instancemethod(_SnapTime.TFltPr___eq__, None, TFltPr)
TFltPr.__lt__ = new_instancemethod(_SnapTime.TFltPr___lt__, None, TFltPr)
TFltPr.GetMemUsed = new_instancemethod(_SnapTime.TFltPr_GetMemUsed, None, TFltPr)
TFltPr.GetPrimHashCd = new_instancemethod(_SnapTime.TFltPr_GetPrimHashCd, None, TFltPr)
TFltPr.GetSecHashCd = new_instancemethod(_SnapTime.TFltPr_GetSecHashCd, None, TFltPr)
TFltPr.GetVal = new_instancemethod(_SnapTime.TFltPr_GetVal, None, TFltPr)
TFltPr.GetVal1 = new_instancemethod(_SnapTime.TFltPr_GetVal1, None, TFltPr)
TFltPr.GetVal2 = new_instancemethod(_SnapTime.TFltPr_GetVal2, None, TFltPr)
TFltPr_swigregister = _SnapTime.TFltPr_swigregister
TFltPr_swigregister(TFltPr)

class TStrIntPr(object):
    """Proxy of C++ TPair<(TStr,TInt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_SnapTime.TStrIntPr_Val1_get, _SnapTime.TStrIntPr_Val1_set)
    Val2 = _swig_property(_SnapTime.TStrIntPr_Val2_get, _SnapTime.TStrIntPr_Val2_set)

    def __init__(self, *args):
        """
        __init__(TPair<(TStr,TInt)> self) -> TStrIntPr
        __init__(TPair<(TStr,TInt)> self, TStrIntPr Pair) -> TStrIntPr

        Parameters
        ----------
        Pair: TPair< TStr,TInt > const &

        __init__(TPair<(TStr,TInt)> self, TStrIntPr Pair) -> TStrIntPr

        Parameters
        ----------
        Pair: TPair< TStr,TInt > const &&

        __init__(TPair<(TStr,TInt)> self, TStr _Val1, TInt _Val2) -> TStrIntPr

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: TInt const &

        __init__(TPair<(TStr,TInt)> self, TSIn SIn) -> TStrIntPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TStrIntPr_swiginit(self, _SnapTime.new_TStrIntPr(*args))

    def Save(self, SOut):
        """
        Save(TStrIntPr self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TStrIntPr_Save(self, SOut)


    def Load(self, SIn):
        """
        Load(TStrIntPr self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TStrIntPr_Load(self, SIn)


    def __eq__(self, Pair):
        """
        __eq__(TStrIntPr self, TStrIntPr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPr___eq__(self, Pair)


    def __lt__(self, Pair):
        """
        __lt__(TStrIntPr self, TStrIntPr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPr___lt__(self, Pair)


    def GetMemUsed(self):
        """
        GetMemUsed(TStrIntPr self) -> int

        Parameters
        ----------
        self: TPair< TStr,TInt > const *

        """
        return _SnapTime.TStrIntPr_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TStrIntPr self) -> int

        Parameters
        ----------
        self: TPair< TStr,TInt > const *

        """
        return _SnapTime.TStrIntPr_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TStrIntPr self) -> int

        Parameters
        ----------
        self: TPair< TStr,TInt > const *

        """
        return _SnapTime.TStrIntPr_GetSecHashCd(self)


    def GetVal(self, _Val1, _Val2):
        """
        GetVal(TStrIntPr self, TStr _Val1, TInt _Val2)

        Parameters
        ----------
        _Val1: TStr &
        _Val2: TInt &

        """
        return _SnapTime.TStrIntPr_GetVal(self, _Val1, _Val2)


    def GetVal1(self):
        """
        GetVal1(TStrIntPr self) -> TStr

        Parameters
        ----------
        self: TPair< TStr,TInt > const *

        """
        return _SnapTime.TStrIntPr_GetVal1(self)


    def GetVal2(self):
        """
        GetVal2(TStrIntPr self) -> TInt

        Parameters
        ----------
        self: TPair< TStr,TInt > const *

        """
        return _SnapTime.TStrIntPr_GetVal2(self)

    __swig_destroy__ = _SnapTime.delete_TStrIntPr
TStrIntPr.Save = new_instancemethod(_SnapTime.TStrIntPr_Save, None, TStrIntPr)
TStrIntPr.Load = new_instancemethod(_SnapTime.TStrIntPr_Load, None, TStrIntPr)
TStrIntPr.__eq__ = new_instancemethod(_SnapTime.TStrIntPr___eq__, None, TStrIntPr)
TStrIntPr.__lt__ = new_instancemethod(_SnapTime.TStrIntPr___lt__, None, TStrIntPr)
TStrIntPr.GetMemUsed = new_instancemethod(_SnapTime.TStrIntPr_GetMemUsed, None, TStrIntPr)
TStrIntPr.GetPrimHashCd = new_instancemethod(_SnapTime.TStrIntPr_GetPrimHashCd, None, TStrIntPr)
TStrIntPr.GetSecHashCd = new_instancemethod(_SnapTime.TStrIntPr_GetSecHashCd, None, TStrIntPr)
TStrIntPr.GetVal = new_instancemethod(_SnapTime.TStrIntPr_GetVal, None, TStrIntPr)
TStrIntPr.GetVal1 = new_instancemethod(_SnapTime.TStrIntPr_GetVal1, None, TStrIntPr)
TStrIntPr.GetVal2 = new_instancemethod(_SnapTime.TStrIntPr_GetVal2, None, TStrIntPr)
TStrIntPr_swigregister = _SnapTime.TStrIntPr_swigregister
TStrIntPr_swigregister(TStrIntPr)

class TStrInt64Pr(object):
    """Proxy of C++ TPair<(TStr,TInt64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_SnapTime.TStrInt64Pr_Val1_get, _SnapTime.TStrInt64Pr_Val1_set)
    Val2 = _swig_property(_SnapTime.TStrInt64Pr_Val2_get, _SnapTime.TStrInt64Pr_Val2_set)

    def __init__(self, *args):
        """
        __init__(TPair<(TStr,TInt64)> self) -> TStrInt64Pr
        __init__(TPair<(TStr,TInt64)> self, TStrInt64Pr Pair) -> TStrInt64Pr

        Parameters
        ----------
        Pair: TPair< TStr,TInt64 > const &

        __init__(TPair<(TStr,TInt64)> self, TStrInt64Pr Pair) -> TStrInt64Pr

        Parameters
        ----------
        Pair: TPair< TStr,TInt64 > const &&

        __init__(TPair<(TStr,TInt64)> self, TStr _Val1, TInt64 _Val2) -> TStrInt64Pr

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: TInt64 const &

        __init__(TPair<(TStr,TInt64)> self, TSIn SIn) -> TStrInt64Pr

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TStrInt64Pr_swiginit(self, _SnapTime.new_TStrInt64Pr(*args))

    def Save(self, SOut):
        """
        Save(TStrInt64Pr self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TStrInt64Pr_Save(self, SOut)


    def Load(self, SIn):
        """
        Load(TStrInt64Pr self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TStrInt64Pr_Load(self, SIn)


    def __eq__(self, Pair):
        """
        __eq__(TStrInt64Pr self, TStrInt64Pr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TStr,TInt64 > const &

        """
        return _SnapTime.TStrInt64Pr___eq__(self, Pair)


    def __lt__(self, Pair):
        """
        __lt__(TStrInt64Pr self, TStrInt64Pr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TStr,TInt64 > const &

        """
        return _SnapTime.TStrInt64Pr___lt__(self, Pair)


    def GetMemUsed(self):
        """
        GetMemUsed(TStrInt64Pr self) -> int

        Parameters
        ----------
        self: TPair< TStr,TInt64 > const *

        """
        return _SnapTime.TStrInt64Pr_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TStrInt64Pr self) -> int

        Parameters
        ----------
        self: TPair< TStr,TInt64 > const *

        """
        return _SnapTime.TStrInt64Pr_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TStrInt64Pr self) -> int

        Parameters
        ----------
        self: TPair< TStr,TInt64 > const *

        """
        return _SnapTime.TStrInt64Pr_GetSecHashCd(self)


    def GetVal(self, _Val1, _Val2):
        """
        GetVal(TStrInt64Pr self, TStr _Val1, TInt64 _Val2)

        Parameters
        ----------
        _Val1: TStr &
        _Val2: TInt64 &

        """
        return _SnapTime.TStrInt64Pr_GetVal(self, _Val1, _Val2)


    def GetVal1(self):
        """
        GetVal1(TStrInt64Pr self) -> TStr

        Parameters
        ----------
        self: TPair< TStr,TInt64 > const *

        """
        return _SnapTime.TStrInt64Pr_GetVal1(self)


    def GetVal2(self):
        """
        GetVal2(TStrInt64Pr self) -> TInt64

        Parameters
        ----------
        self: TPair< TStr,TInt64 > const *

        """
        return _SnapTime.TStrInt64Pr_GetVal2(self)

    __swig_destroy__ = _SnapTime.delete_TStrInt64Pr
TStrInt64Pr.Save = new_instancemethod(_SnapTime.TStrInt64Pr_Save, None, TStrInt64Pr)
TStrInt64Pr.Load = new_instancemethod(_SnapTime.TStrInt64Pr_Load, None, TStrInt64Pr)
TStrInt64Pr.__eq__ = new_instancemethod(_SnapTime.TStrInt64Pr___eq__, None, TStrInt64Pr)
TStrInt64Pr.__lt__ = new_instancemethod(_SnapTime.TStrInt64Pr___lt__, None, TStrInt64Pr)
TStrInt64Pr.GetMemUsed = new_instancemethod(_SnapTime.TStrInt64Pr_GetMemUsed, None, TStrInt64Pr)
TStrInt64Pr.GetPrimHashCd = new_instancemethod(_SnapTime.TStrInt64Pr_GetPrimHashCd, None, TStrInt64Pr)
TStrInt64Pr.GetSecHashCd = new_instancemethod(_SnapTime.TStrInt64Pr_GetSecHashCd, None, TStrInt64Pr)
TStrInt64Pr.GetVal = new_instancemethod(_SnapTime.TStrInt64Pr_GetVal, None, TStrInt64Pr)
TStrInt64Pr.GetVal1 = new_instancemethod(_SnapTime.TStrInt64Pr_GetVal1, None, TStrInt64Pr)
TStrInt64Pr.GetVal2 = new_instancemethod(_SnapTime.TStrInt64Pr_GetVal2, None, TStrInt64Pr)
TStrInt64Pr_swigregister = _SnapTime.TStrInt64Pr_swigregister
TStrInt64Pr_swigregister(TStrInt64Pr)

class TIntTr(object):
    """Proxy of C++ TTriple<(TInt,TInt,TInt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_SnapTime.TIntTr_Val1_get, _SnapTime.TIntTr_Val1_set)
    Val2 = _swig_property(_SnapTime.TIntTr_Val2_get, _SnapTime.TIntTr_Val2_set)
    Val3 = _swig_property(_SnapTime.TIntTr_Val3_get, _SnapTime.TIntTr_Val3_set)

    def __init__(self, *args):
        """
        __init__(TTriple<(TInt,TInt,TInt)> self) -> TIntTr
        __init__(TTriple<(TInt,TInt,TInt)> self, TIntTr Triple) -> TIntTr

        Parameters
        ----------
        Triple: TTriple< TInt,TInt,TInt > const &

        __init__(TTriple<(TInt,TInt,TInt)> self, TIntTr Triple) -> TIntTr

        Parameters
        ----------
        Triple: TTriple< TInt,TInt,TInt > &&

        __init__(TTriple<(TInt,TInt,TInt)> self, TInt _Val1, TInt _Val2, TInt _Val3) -> TIntTr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TInt const &
        _Val3: TInt const &

        __init__(TTriple<(TInt,TInt,TInt)> self, TSIn SIn) -> TIntTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntTr_swiginit(self, _SnapTime.new_TIntTr(*args))

    def Save(self, SOut):
        """
        Save(TIntTr self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntTr_Save(self, SOut)


    def __eq__(self, Triple):
        """
        __eq__(TIntTr self, TIntTr Triple) -> bool

        Parameters
        ----------
        Triple: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTr___eq__(self, Triple)


    def __lt__(self, Triple):
        """
        __lt__(TIntTr self, TIntTr Triple) -> bool

        Parameters
        ----------
        Triple: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTr___lt__(self, Triple)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntTr self) -> int

        Parameters
        ----------
        self: TTriple< TInt,TInt,TInt > const *

        """
        return _SnapTime.TIntTr_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntTr self) -> int

        Parameters
        ----------
        self: TTriple< TInt,TInt,TInt > const *

        """
        return _SnapTime.TIntTr_GetSecHashCd(self)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntTr self) -> int

        Parameters
        ----------
        self: TTriple< TInt,TInt,TInt > const *

        """
        return _SnapTime.TIntTr_GetMemUsed(self)


    def GetVal(self, _Val1, _Val2, _Val3):
        """
        GetVal(TIntTr self, TInt _Val1, TInt _Val2, TInt _Val3)

        Parameters
        ----------
        _Val1: TInt &
        _Val2: TInt &
        _Val3: TInt &

        """
        return _SnapTime.TIntTr_GetVal(self, _Val1, _Val2, _Val3)


    def GetVal1(self):
        """
        GetVal1(TIntTr self) -> TInt

        Parameters
        ----------
        self: TTriple< TInt,TInt,TInt > const *

        """
        return _SnapTime.TIntTr_GetVal1(self)


    def GetVal2(self):
        """
        GetVal2(TIntTr self) -> TInt

        Parameters
        ----------
        self: TTriple< TInt,TInt,TInt > const *

        """
        return _SnapTime.TIntTr_GetVal2(self)


    def GetVal3(self):
        """
        GetVal3(TIntTr self) -> TInt

        Parameters
        ----------
        self: TTriple< TInt,TInt,TInt > const *

        """
        return _SnapTime.TIntTr_GetVal3(self)

    __swig_destroy__ = _SnapTime.delete_TIntTr
TIntTr.Save = new_instancemethod(_SnapTime.TIntTr_Save, None, TIntTr)
TIntTr.__eq__ = new_instancemethod(_SnapTime.TIntTr___eq__, None, TIntTr)
TIntTr.__lt__ = new_instancemethod(_SnapTime.TIntTr___lt__, None, TIntTr)
TIntTr.GetPrimHashCd = new_instancemethod(_SnapTime.TIntTr_GetPrimHashCd, None, TIntTr)
TIntTr.GetSecHashCd = new_instancemethod(_SnapTime.TIntTr_GetSecHashCd, None, TIntTr)
TIntTr.GetMemUsed = new_instancemethod(_SnapTime.TIntTr_GetMemUsed, None, TIntTr)
TIntTr.GetVal = new_instancemethod(_SnapTime.TIntTr_GetVal, None, TIntTr)
TIntTr.GetVal1 = new_instancemethod(_SnapTime.TIntTr_GetVal1, None, TIntTr)
TIntTr.GetVal2 = new_instancemethod(_SnapTime.TIntTr_GetVal2, None, TIntTr)
TIntTr.GetVal3 = new_instancemethod(_SnapTime.TIntTr_GetVal3, None, TIntTr)
TIntTr_swigregister = _SnapTime.TIntTr_swigregister
TIntTr_swigregister(TIntTr)

class TInt64Tr(object):
    """Proxy of C++ TTriple<(TInt64,TInt64,TInt64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_SnapTime.TInt64Tr_Val1_get, _SnapTime.TInt64Tr_Val1_set)
    Val2 = _swig_property(_SnapTime.TInt64Tr_Val2_get, _SnapTime.TInt64Tr_Val2_set)
    Val3 = _swig_property(_SnapTime.TInt64Tr_Val3_get, _SnapTime.TInt64Tr_Val3_set)

    def __init__(self, *args):
        """
        __init__(TTriple<(TInt64,TInt64,TInt64)> self) -> TInt64Tr
        __init__(TTriple<(TInt64,TInt64,TInt64)> self, TInt64Tr Triple) -> TInt64Tr

        Parameters
        ----------
        Triple: TTriple< TInt64,TInt64,TInt64 > const &

        __init__(TTriple<(TInt64,TInt64,TInt64)> self, TInt64Tr Triple) -> TInt64Tr

        Parameters
        ----------
        Triple: TTriple< TInt64,TInt64,TInt64 > &&

        __init__(TTriple<(TInt64,TInt64,TInt64)> self, TInt64 _Val1, TInt64 _Val2, TInt64 _Val3) -> TInt64Tr

        Parameters
        ----------
        _Val1: TInt64 const &
        _Val2: TInt64 const &
        _Val3: TInt64 const &

        __init__(TTriple<(TInt64,TInt64,TInt64)> self, TSIn SIn) -> TInt64Tr

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TInt64Tr_swiginit(self, _SnapTime.new_TInt64Tr(*args))

    def Save(self, SOut):
        """
        Save(TInt64Tr self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TInt64Tr_Save(self, SOut)


    def __eq__(self, Triple):
        """
        __eq__(TInt64Tr self, TInt64Tr Triple) -> bool

        Parameters
        ----------
        Triple: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TInt64Tr___eq__(self, Triple)


    def __lt__(self, Triple):
        """
        __lt__(TInt64Tr self, TInt64Tr Triple) -> bool

        Parameters
        ----------
        Triple: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TInt64Tr___lt__(self, Triple)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TInt64Tr self) -> int

        Parameters
        ----------
        self: TTriple< TInt64,TInt64,TInt64 > const *

        """
        return _SnapTime.TInt64Tr_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TInt64Tr self) -> int

        Parameters
        ----------
        self: TTriple< TInt64,TInt64,TInt64 > const *

        """
        return _SnapTime.TInt64Tr_GetSecHashCd(self)


    def GetMemUsed(self):
        """
        GetMemUsed(TInt64Tr self) -> int

        Parameters
        ----------
        self: TTriple< TInt64,TInt64,TInt64 > const *

        """
        return _SnapTime.TInt64Tr_GetMemUsed(self)


    def GetVal(self, _Val1, _Val2, _Val3):
        """
        GetVal(TInt64Tr self, TInt64 _Val1, TInt64 _Val2, TInt64 _Val3)

        Parameters
        ----------
        _Val1: TInt64 &
        _Val2: TInt64 &
        _Val3: TInt64 &

        """
        return _SnapTime.TInt64Tr_GetVal(self, _Val1, _Val2, _Val3)


    def GetVal1(self):
        """
        GetVal1(TInt64Tr self) -> TInt64

        Parameters
        ----------
        self: TTriple< TInt64,TInt64,TInt64 > const *

        """
        return _SnapTime.TInt64Tr_GetVal1(self)


    def GetVal2(self):
        """
        GetVal2(TInt64Tr self) -> TInt64

        Parameters
        ----------
        self: TTriple< TInt64,TInt64,TInt64 > const *

        """
        return _SnapTime.TInt64Tr_GetVal2(self)


    def GetVal3(self):
        """
        GetVal3(TInt64Tr self) -> TInt64

        Parameters
        ----------
        self: TTriple< TInt64,TInt64,TInt64 > const *

        """
        return _SnapTime.TInt64Tr_GetVal3(self)

    __swig_destroy__ = _SnapTime.delete_TInt64Tr
TInt64Tr.Save = new_instancemethod(_SnapTime.TInt64Tr_Save, None, TInt64Tr)
TInt64Tr.__eq__ = new_instancemethod(_SnapTime.TInt64Tr___eq__, None, TInt64Tr)
TInt64Tr.__lt__ = new_instancemethod(_SnapTime.TInt64Tr___lt__, None, TInt64Tr)
TInt64Tr.GetPrimHashCd = new_instancemethod(_SnapTime.TInt64Tr_GetPrimHashCd, None, TInt64Tr)
TInt64Tr.GetSecHashCd = new_instancemethod(_SnapTime.TInt64Tr_GetSecHashCd, None, TInt64Tr)
TInt64Tr.GetMemUsed = new_instancemethod(_SnapTime.TInt64Tr_GetMemUsed, None, TInt64Tr)
TInt64Tr.GetVal = new_instancemethod(_SnapTime.TInt64Tr_GetVal, None, TInt64Tr)
TInt64Tr.GetVal1 = new_instancemethod(_SnapTime.TInt64Tr_GetVal1, None, TInt64Tr)
TInt64Tr.GetVal2 = new_instancemethod(_SnapTime.TInt64Tr_GetVal2, None, TInt64Tr)
TInt64Tr.GetVal3 = new_instancemethod(_SnapTime.TInt64Tr_GetVal3, None, TInt64Tr)
TInt64Tr_swigregister = _SnapTime.TInt64Tr_swigregister
TInt64Tr_swigregister(TInt64Tr)

class TIntFltKd(object):
    """Proxy of C++ TKeyDat<(TInt,TFlt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = _swig_property(_SnapTime.TIntFltKd_Key_get, _SnapTime.TIntFltKd_Key_set)
    Dat = _swig_property(_SnapTime.TIntFltKd_Dat_get, _SnapTime.TIntFltKd_Dat_set)

    def __init__(self, *args):
        """
        __init__(TKeyDat<(TInt,TFlt)> self) -> TIntFltKd
        __init__(TKeyDat<(TInt,TFlt)> self, TIntFltKd KeyDat) -> TIntFltKd

        Parameters
        ----------
        KeyDat: TKeyDat< TInt,TFlt > const &

        __init__(TKeyDat<(TInt,TFlt)> self, TIntFltKd KeyDat) -> TIntFltKd

        Parameters
        ----------
        KeyDat: TKeyDat< TInt,TFlt > &&

        __init__(TKeyDat<(TInt,TFlt)> self, TInt _Key) -> TIntFltKd

        Parameters
        ----------
        _Key: TInt const &

        __init__(TKeyDat<(TInt,TFlt)> self, TInt _Key, TFlt _Dat) -> TIntFltKd

        Parameters
        ----------
        _Key: TInt const &
        _Dat: TFlt const &

        __init__(TKeyDat<(TInt,TFlt)> self, TSIn SIn) -> TIntFltKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntFltKd_swiginit(self, _SnapTime.new_TIntFltKd(*args))

    def Save(self, SOut):
        """
        Save(TIntFltKd self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntFltKd_Save(self, SOut)


    def __eq__(self, KeyDat):
        """
        __eq__(TIntFltKd self, TIntFltKd KeyDat) -> bool

        Parameters
        ----------
        KeyDat: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKd___eq__(self, KeyDat)


    def __lt__(self, KeyDat):
        """
        __lt__(TIntFltKd self, TIntFltKd KeyDat) -> bool

        Parameters
        ----------
        KeyDat: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKd___lt__(self, KeyDat)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntFltKd self) -> int

        Parameters
        ----------
        self: TKeyDat< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltKd_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntFltKd self) -> int

        Parameters
        ----------
        self: TKeyDat< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltKd_GetSecHashCd(self)

    __swig_destroy__ = _SnapTime.delete_TIntFltKd
TIntFltKd.Save = new_instancemethod(_SnapTime.TIntFltKd_Save, None, TIntFltKd)
TIntFltKd.__eq__ = new_instancemethod(_SnapTime.TIntFltKd___eq__, None, TIntFltKd)
TIntFltKd.__lt__ = new_instancemethod(_SnapTime.TIntFltKd___lt__, None, TIntFltKd)
TIntFltKd.GetPrimHashCd = new_instancemethod(_SnapTime.TIntFltKd_GetPrimHashCd, None, TIntFltKd)
TIntFltKd.GetSecHashCd = new_instancemethod(_SnapTime.TIntFltKd_GetSecHashCd, None, TIntFltKd)
TIntFltKd_swigregister = _SnapTime.TIntFltKd_swigregister
TIntFltKd_swigregister(TIntFltKd)

class TIntFlt64Kd(object):
    """Proxy of C++ TKeyDat<(TInt64,TFlt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = _swig_property(_SnapTime.TIntFlt64Kd_Key_get, _SnapTime.TIntFlt64Kd_Key_set)
    Dat = _swig_property(_SnapTime.TIntFlt64Kd_Dat_get, _SnapTime.TIntFlt64Kd_Dat_set)

    def __init__(self, *args):
        """
        __init__(TKeyDat<(TInt64,TFlt)> self) -> TIntFlt64Kd
        __init__(TKeyDat<(TInt64,TFlt)> self, TIntFlt64Kd KeyDat) -> TIntFlt64Kd

        Parameters
        ----------
        KeyDat: TKeyDat< TInt64,TFlt > const &

        __init__(TKeyDat<(TInt64,TFlt)> self, TIntFlt64Kd KeyDat) -> TIntFlt64Kd

        Parameters
        ----------
        KeyDat: TKeyDat< TInt64,TFlt > &&

        __init__(TKeyDat<(TInt64,TFlt)> self, TInt64 _Key) -> TIntFlt64Kd

        Parameters
        ----------
        _Key: TInt64 const &

        __init__(TKeyDat<(TInt64,TFlt)> self, TInt64 _Key, TFlt _Dat) -> TIntFlt64Kd

        Parameters
        ----------
        _Key: TInt64 const &
        _Dat: TFlt const &

        __init__(TKeyDat<(TInt64,TFlt)> self, TSIn SIn) -> TIntFlt64Kd

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntFlt64Kd_swiginit(self, _SnapTime.new_TIntFlt64Kd(*args))

    def Save(self, SOut):
        """
        Save(TIntFlt64Kd self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntFlt64Kd_Save(self, SOut)


    def __eq__(self, KeyDat):
        """
        __eq__(TIntFlt64Kd self, TIntFlt64Kd KeyDat) -> bool

        Parameters
        ----------
        KeyDat: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFlt64Kd___eq__(self, KeyDat)


    def __lt__(self, KeyDat):
        """
        __lt__(TIntFlt64Kd self, TIntFlt64Kd KeyDat) -> bool

        Parameters
        ----------
        KeyDat: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFlt64Kd___lt__(self, KeyDat)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntFlt64Kd self) -> int

        Parameters
        ----------
        self: TKeyDat< TInt64,TFlt > const *

        """
        return _SnapTime.TIntFlt64Kd_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntFlt64Kd self) -> int

        Parameters
        ----------
        self: TKeyDat< TInt64,TFlt > const *

        """
        return _SnapTime.TIntFlt64Kd_GetSecHashCd(self)

    __swig_destroy__ = _SnapTime.delete_TIntFlt64Kd
TIntFlt64Kd.Save = new_instancemethod(_SnapTime.TIntFlt64Kd_Save, None, TIntFlt64Kd)
TIntFlt64Kd.__eq__ = new_instancemethod(_SnapTime.TIntFlt64Kd___eq__, None, TIntFlt64Kd)
TIntFlt64Kd.__lt__ = new_instancemethod(_SnapTime.TIntFlt64Kd___lt__, None, TIntFlt64Kd)
TIntFlt64Kd.GetPrimHashCd = new_instancemethod(_SnapTime.TIntFlt64Kd_GetPrimHashCd, None, TIntFlt64Kd)
TIntFlt64Kd.GetSecHashCd = new_instancemethod(_SnapTime.TIntFlt64Kd_GetSecHashCd, None, TIntFlt64Kd)
TIntFlt64Kd_swigregister = _SnapTime.TIntFlt64Kd_swigregister
TIntFlt64Kd_swigregister(TIntFlt64Kd)

class TIntV(object):
    """Proxy of C++ TVec<(TInt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TIntV

    def __init__(self, *args):
        """
        __init__(TVec<(TInt)> self) -> TIntV
        __init__(TVec<(TInt)> self, TIntV Vec) -> TIntV

        Parameters
        ----------
        Vec: TVec< TInt,int > const &

        __init__(TVec<(TInt)> self, TIntV Vec) -> TIntV

        Parameters
        ----------
        Vec: TVec< TInt,int > &&

        __init__(TVec<(TInt)> self, int const & _Vals) -> TIntV

        Parameters
        ----------
        _Vals: int const &

        __init__(TVec<(TInt)> self, int const & _MxVals, int const & _Vals) -> TIntV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TVec<(TInt)> self, int const & _MxVals, int const & _Vals, TInt Dat) -> TIntV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &
        Dat: TInt

        __init__(TVec<(TInt)> self, TInt _ValT, int const & _Vals) -> TIntV

        Parameters
        ----------
        _ValT: TInt *
        _Vals: int const &

        __init__(TVec<(TInt)> self, TSIn SIn) -> TIntV

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntV_swiginit(self, _SnapTime.new_TIntV(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntV self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntV_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntV self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntV_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntV self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntV_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TIntV self, TInt Val) -> TIntV

        Parameters
        ----------
        Val: TInt const &

        """
        return _SnapTime.TIntV___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TIntV self, TIntV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TInt,int > const &

        """
        return _SnapTime.TIntV___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TIntV self, TIntV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TInt,int > const &

        """
        return _SnapTime.TIntV___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntV self) -> int

        Parameters
        ----------
        self: TVec< TInt > const *

        """
        return _SnapTime.TIntV_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TIntV self) -> int

        Parameters
        ----------
        self: TVec< TInt > const *

        """
        return _SnapTime.TIntV_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntV self) -> int

        Parameters
        ----------
        self: TVec< TInt > const *

        """
        return _SnapTime.TIntV_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntV self) -> int

        Parameters
        ----------
        self: TVec< TInt > const *

        """
        return _SnapTime.TIntV_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TIntV self, int const & _Vals)

        Parameters
        ----------
        _Vals: int const &

        Gen(TIntV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TIntV_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TIntV self, TInt _ValT, int const & _Vals)

        Parameters
        ----------
        _ValT: TInt *
        _Vals: int const &

        """
        return _SnapTime.TIntV_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TIntV self) -> bool

        Parameters
        ----------
        self: TVec< TInt > const *

        """
        return _SnapTime.TIntV_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TIntV self, int const & _MxVals)

        Parameters
        ----------
        _MxVals: int const &

        Reserve(TIntV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TIntV_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TIntV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TIntV self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntV self)

        Parameters
        ----------
        self: TVec< TInt > *

        """
        return _SnapTime.TIntV_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TIntV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Trunc(TIntV self)

        Parameters
        ----------
        self: TVec< TInt > *

        """
        return _SnapTime.TIntV_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TIntV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Reduce(TIntV self)

        Parameters
        ----------
        self: TVec< TInt > *

        """
        return _SnapTime.TIntV_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TIntV self)

        Parameters
        ----------
        self: TVec< TInt > *

        """
        return _SnapTime.TIntV_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TIntV self, TIntV Vec)

        Parameters
        ----------
        Vec: TVec< TInt,int > &

        """
        return _SnapTime.TIntV_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TIntV self, TIntV Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TInt,int > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TIntV_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TIntV self) -> bool

        Parameters
        ----------
        self: TVec< TInt > const *

        """
        return _SnapTime.TIntV_Empty(self)


    def Len(self):
        """
        Len(TIntV self) -> int

        Parameters
        ----------
        self: TVec< TInt > const *

        """
        return _SnapTime.TIntV_Len(self)


    def Reserved(self):
        """
        Reserved(TIntV self) -> int

        Parameters
        ----------
        self: TVec< TInt > const *

        """
        return _SnapTime.TIntV_Reserved(self)


    def Last(self, *args):
        """
        Last(TIntV self) -> TInt
        Last(TIntV self) -> TInt

        Parameters
        ----------
        self: TVec< TInt > *

        """
        return _SnapTime.TIntV_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TIntV self) -> int

        Parameters
        ----------
        self: TVec< TInt > const *

        """
        return _SnapTime.TIntV_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TIntV self) -> TInt
        LastLast(TIntV self) -> TInt

        Parameters
        ----------
        self: TVec< TInt > *

        """
        return _SnapTime.TIntV_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TIntV self, TRnd Rnd) -> TInt

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntV self) -> TInt
        GetRndVal(TIntV self, TRnd Rnd) -> TInt

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntV self) -> TInt

        Parameters
        ----------
        self: TVec< TInt > *

        """
        return _SnapTime.TIntV_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TIntV self) -> TInt

        Parameters
        ----------
        self: TVec< TInt > const *

        """
        return _SnapTime.TIntV_BegI(self)


    def begin(self):
        """
        begin(TIntV self) -> TInt

        Parameters
        ----------
        self: TVec< TInt > const *

        """
        return _SnapTime.TIntV_begin(self)


    def EndI(self):
        """
        EndI(TIntV self) -> TInt

        Parameters
        ----------
        self: TVec< TInt > const *

        """
        return _SnapTime.TIntV_EndI(self)


    def end(self):
        """
        end(TIntV self) -> TInt

        Parameters
        ----------
        self: TVec< TInt > const *

        """
        return _SnapTime.TIntV_end(self)


    def GetI(self, ValN):
        """
        GetI(TIntV self, int const & ValN) -> TInt

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TIntV_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TIntV self) -> int
        Add(TIntV self, TInt Val) -> int

        Parameters
        ----------
        Val: TInt const &

        Add(TIntV self, TInt Val) -> int

        Parameters
        ----------
        Val: TInt &

        Add(TIntV self, TInt Val, int const & ResizeLen) -> int

        Parameters
        ----------
        Val: TInt const &
        ResizeLen: int const &

        """
        return _SnapTime.TIntV_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TIntV self, TInt Val) -> int

        Parameters
        ----------
        Val: TInt const &

        """
        return _SnapTime.TIntV_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TIntV self, TInt Val, int Inc) -> int

        Parameters
        ----------
        Val: TInt const &
        Inc: int

        """
        return _SnapTime.TIntV_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TIntV self, TIntV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TInt,int > const &

        """
        return _SnapTime.TIntV_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TIntV self, TInt Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters
        ----------
        Val: TInt const &
        Asc: bool const &
        _MxVals: int const &

        AddSorted(TIntV self, TInt Val, bool const & Asc=True) -> int

        Parameters
        ----------
        Val: TInt const &
        Asc: bool const &

        AddSorted(TIntV self, TInt Val) -> int

        Parameters
        ----------
        Val: TInt const &

        """
        return _SnapTime.TIntV_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TIntV self, TInt Val, bool const & Asc) -> int

        Parameters
        ----------
        Val: TInt const &
        Asc: bool const &

        """
        return _SnapTime.TIntV_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TIntV self, TInt Val) -> int

        Parameters
        ----------
        Val: TInt const &

        """
        return _SnapTime.TIntV_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TIntV self, TIntV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TInt,int > const &

        """
        return _SnapTime.TIntV_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TIntV self, TInt Val) -> int

        Parameters
        ----------
        Val: TInt const &

        """
        return _SnapTime.TIntV_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TIntV self, int const & ValN) -> TInt

        Parameters
        ----------
        ValN: int const &

        GetVal(TIntV self, int const & ValN) -> TInt

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TIntV_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TIntV self, int const & ValN, TInt Val)

        Parameters
        ----------
        ValN: int const &
        Val: TInt const &

        """
        return _SnapTime.TIntV_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TIntV self, int const & BValN, int const & EValN, TIntV ValV)

        Parameters
        ----------
        BValN: int const &
        EValN: int const &
        ValV: TVec< TInt,int > &

        """
        return _SnapTime.TIntV_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TIntV self, int const & ValN, TInt Val)

        Parameters
        ----------
        ValN: int const &
        Val: TInt const &

        """
        return _SnapTime.TIntV_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TIntV self, int const & ValN)

        Parameters
        ----------
        ValN: int const &

        Del(TIntV self, int const & MnValN, int const & MxValN)

        Parameters
        ----------
        MnValN: int const &
        MxValN: int const &

        """
        return _SnapTime.TIntV_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TIntV self)

        Parameters
        ----------
        self: TVec< TInt > *

        """
        return _SnapTime.TIntV_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TIntV self, TInt Val) -> bool

        Parameters
        ----------
        Val: TInt const &

        """
        return _SnapTime.TIntV_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TIntV self, TInt Val)

        Parameters
        ----------
        Val: TInt const &

        """
        return _SnapTime.TIntV_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TIntV self, TInt Val)

        Parameters
        ----------
        Val: TInt const &

        """
        return _SnapTime.TIntV_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TIntV self, int const & FromValN, int const & ToValN)

        Parameters
        ----------
        FromValN: int const &
        ToValN: int const &

        """
        return _SnapTime.TIntV_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TIntV self, TIntV Vec)

        Parameters
        ----------
        Vec: TVec< TInt,int > &

        Swap(TIntV self, int const & ValN1, int const & ValN2)

        Parameters
        ----------
        ValN1: int const &
        ValN2: int const &

        """
        return _SnapTime.TIntV_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TInt LVal, TInt RVal)

        Parameters
        ----------
        LVal: TVec< TInt >::TIter
        RVal: TVec< TInt >::TIter

        """
        return _SnapTime.TIntV_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TIntV self) -> TIntV

        Parameters
        ----------
        self: TVec< TInt > *

        """
        return _SnapTime.TIntV_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TIntV self) -> bool

        Parameters
        ----------
        self: TVec< TInt > *

        """
        return _SnapTime.TIntV_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TIntV self) -> bool

        Parameters
        ----------
        self: TVec< TInt > *

        """
        return _SnapTime.TIntV_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TIntV self, int const & LValN, int const & RValN) -> int

        Parameters
        ----------
        LValN: int const &
        RValN: int const &

        """
        return _SnapTime.TIntV_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TIntV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntV_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TIntV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntV_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TIntV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntV_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TIntV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntV_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TIntV self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TIntV self)

        Parameters
        ----------
        self: TVec< TInt > *

        """
        return _SnapTime.TIntV_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TIntV self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TIntV self) -> bool

        Parameters
        ----------
        self: TVec< TInt > const *

        """
        return _SnapTime.TIntV_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TIntV self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TIntV_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TIntV self)
        Reverse(TIntV self, int LValN, int RValN)

        Parameters
        ----------
        LValN: int
        RValN: int

        """
        return _SnapTime.TIntV_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TIntV self)

        Parameters
        ----------
        self: TVec< TInt > *

        """
        return _SnapTime.TIntV_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TIntV self, TIntV ValV)

        Parameters
        ----------
        ValV: TVec< TInt,int > const &

        Intrs(TIntV self, TIntV ValV, TIntV DstValV)

        Parameters
        ----------
        ValV: TVec< TInt,int > const &
        DstValV: TVec< TInt,int > &

        """
        return _SnapTime.TIntV_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TIntV self, TIntV ValV)

        Parameters
        ----------
        ValV: TVec< TInt,int > const &

        Union(TIntV self, TIntV ValV, TIntV DstValV)

        Parameters
        ----------
        ValV: TVec< TInt,int > const &
        DstValV: TVec< TInt,int > &

        """
        return _SnapTime.TIntV_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TIntV self, TIntV ValV)

        Parameters
        ----------
        ValV: TVec< TInt,int > const &

        Diff(TIntV self, TIntV ValV, TIntV DstValV)

        Parameters
        ----------
        ValV: TVec< TInt,int > const &
        DstValV: TVec< TInt,int > &

        """
        return _SnapTime.TIntV_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TIntV self, TIntV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TInt,int > const &

        """
        return _SnapTime.TIntV_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TIntV self, TIntV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TInt,int > const &

        """
        return _SnapTime.TIntV_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TIntV self, TInt Val) -> int

        Parameters
        ----------
        Val: TInt const &

        """
        return _SnapTime.TIntV_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TIntV self, TInt Val) -> int

        Parameters
        ----------
        Val: TInt const &

        SearchBin(TIntV self, TInt Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TInt const &
        InsValN: int &

        """
        return _SnapTime.TIntV_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TIntV self, TInt Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TInt const &
        InsValN: int &

        """
        return _SnapTime.TIntV_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TIntV self, TInt Val, int const & BValN=0) -> int

        Parameters
        ----------
        Val: TInt const &
        BValN: int const &

        SearchForw(TIntV self, TInt Val) -> int

        Parameters
        ----------
        Val: TInt const &

        """
        return _SnapTime.TIntV_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TIntV self, TInt Val) -> int

        Parameters
        ----------
        Val: TInt const &

        """
        return _SnapTime.TIntV_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TIntV self, TIntV ValV, int const & BValN=0) -> int

        Parameters
        ----------
        ValV: TVec< TInt,int > const &
        BValN: int const &

        SearchVForw(TIntV self, TIntV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TInt,int > const &

        """
        return _SnapTime.TIntV_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TIntV self, TInt Val) -> bool

        Parameters
        ----------
        Val: TInt const &

        IsIn(TIntV self, TInt Val, int & ValN) -> bool

        Parameters
        ----------
        Val: TInt const &
        ValN: int &

        """
        return _SnapTime.TIntV_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TIntV self, TInt Val) -> bool

        Parameters
        ----------
        Val: TInt const &

        """
        return _SnapTime.TIntV_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TIntV self, TInt Val) -> TInt

        Parameters
        ----------
        Val: TInt const &

        """
        return _SnapTime.TIntV_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TIntV self, TInt Val) -> TInt

        Parameters
        ----------
        Val: TInt const &

        """
        return _SnapTime.TIntV_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TIntV self) -> int

        Parameters
        ----------
        self: TVec< TInt > const *

        """
        return _SnapTime.TIntV_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TInt Val1) -> TIntV

        Parameters
        ----------
        Val1: TInt const &

        GetV(TInt Val1, TInt Val2) -> TIntV

        Parameters
        ----------
        Val1: TInt const &
        Val2: TInt const &

        GetV(TInt Val1, TInt Val2, TInt Val3) -> TIntV

        Parameters
        ----------
        Val1: TInt const &
        Val2: TInt const &
        Val3: TInt const &

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4) -> TIntV

        Parameters
        ----------
        Val1: TInt const &
        Val2: TInt const &
        Val3: TInt const &
        Val4: TInt const &

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5) -> TIntV

        Parameters
        ----------
        Val1: TInt const &
        Val2: TInt const &
        Val3: TInt const &
        Val4: TInt const &
        Val5: TInt const &

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6) -> TIntV

        Parameters
        ----------
        Val1: TInt const &
        Val2: TInt const &
        Val3: TInt const &
        Val4: TInt const &
        Val5: TInt const &
        Val6: TInt const &

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6, TInt Val7) -> TIntV

        Parameters
        ----------
        Val1: TInt const &
        Val2: TInt const &
        Val3: TInt const &
        Val4: TInt const &
        Val5: TInt const &
        Val6: TInt const &
        Val7: TInt const &

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6, TInt Val7, TInt Val8) -> TIntV

        Parameters
        ----------
        Val1: TInt const &
        Val2: TInt const &
        Val3: TInt const &
        Val4: TInt const &
        Val5: TInt const &
        Val6: TInt const &
        Val7: TInt const &
        Val8: TInt const &

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6, TInt Val7, TInt Val8, TInt Val9) -> TIntV

        Parameters
        ----------
        Val1: TInt const &
        Val2: TInt const &
        Val3: TInt const &
        Val4: TInt const &
        Val5: TInt const &
        Val6: TInt const &
        Val7: TInt const &
        Val8: TInt const &
        Val9: TInt const &

        """
        return _SnapTime.TIntV_GetV(*args)

    GetV = staticmethod(GetV)
TIntV.LoadShM = new_instancemethod(_SnapTime.TIntV_LoadShM, None, TIntV)
TIntV.Load = new_instancemethod(_SnapTime.TIntV_Load, None, TIntV)
TIntV.Save = new_instancemethod(_SnapTime.TIntV_Save, None, TIntV)
TIntV.__add__ = new_instancemethod(_SnapTime.TIntV___add__, None, TIntV)
TIntV.__eq__ = new_instancemethod(_SnapTime.TIntV___eq__, None, TIntV)
TIntV.__lt__ = new_instancemethod(_SnapTime.TIntV___lt__, None, TIntV)
TIntV.GetMemUsed = new_instancemethod(_SnapTime.TIntV_GetMemUsed, None, TIntV)
TIntV.GetMemSize = new_instancemethod(_SnapTime.TIntV_GetMemSize, None, TIntV)
TIntV.GetPrimHashCd = new_instancemethod(_SnapTime.TIntV_GetPrimHashCd, None, TIntV)
TIntV.GetSecHashCd = new_instancemethod(_SnapTime.TIntV_GetSecHashCd, None, TIntV)
TIntV.Gen = new_instancemethod(_SnapTime.TIntV_Gen, None, TIntV)
TIntV.GenExt = new_instancemethod(_SnapTime.TIntV_GenExt, None, TIntV)
TIntV.IsExt = new_instancemethod(_SnapTime.TIntV_IsExt, None, TIntV)
TIntV.Reserve = new_instancemethod(_SnapTime.TIntV_Reserve, None, TIntV)
TIntV.Clr = new_instancemethod(_SnapTime.TIntV_Clr, None, TIntV)
TIntV.Trunc = new_instancemethod(_SnapTime.TIntV_Trunc, None, TIntV)
TIntV.Reduce = new_instancemethod(_SnapTime.TIntV_Reduce, None, TIntV)
TIntV.Pack = new_instancemethod(_SnapTime.TIntV_Pack, None, TIntV)
TIntV.MoveFrom = new_instancemethod(_SnapTime.TIntV_MoveFrom, None, TIntV)
TIntV.CopyUniqueFrom = new_instancemethod(_SnapTime.TIntV_CopyUniqueFrom, None, TIntV)
TIntV.Empty = new_instancemethod(_SnapTime.TIntV_Empty, None, TIntV)
TIntV.Len = new_instancemethod(_SnapTime.TIntV_Len, None, TIntV)
TIntV.Reserved = new_instancemethod(_SnapTime.TIntV_Reserved, None, TIntV)
TIntV.Last = new_instancemethod(_SnapTime.TIntV_Last, None, TIntV)
TIntV.LastValN = new_instancemethod(_SnapTime.TIntV_LastValN, None, TIntV)
TIntV.LastLast = new_instancemethod(_SnapTime.TIntV_LastLast, None, TIntV)
TIntV.GetRndVal = new_instancemethod(_SnapTime.TIntV_GetRndVal, None, TIntV)
TIntV.BegI = new_instancemethod(_SnapTime.TIntV_BegI, None, TIntV)
TIntV.begin = new_instancemethod(_SnapTime.TIntV_begin, None, TIntV)
TIntV.EndI = new_instancemethod(_SnapTime.TIntV_EndI, None, TIntV)
TIntV.end = new_instancemethod(_SnapTime.TIntV_end, None, TIntV)
TIntV.GetI = new_instancemethod(_SnapTime.TIntV_GetI, None, TIntV)
TIntV.Add = new_instancemethod(_SnapTime.TIntV_Add, None, TIntV)
TIntV.AddMP = new_instancemethod(_SnapTime.TIntV_AddMP, None, TIntV)
TIntV.MoveLastMP = new_instancemethod(_SnapTime.TIntV_MoveLastMP, None, TIntV)
TIntV.AddV = new_instancemethod(_SnapTime.TIntV_AddV, None, TIntV)
TIntV.AddSorted = new_instancemethod(_SnapTime.TIntV_AddSorted, None, TIntV)
TIntV.AddBackSorted = new_instancemethod(_SnapTime.TIntV_AddBackSorted, None, TIntV)
TIntV.AddMerged = new_instancemethod(_SnapTime.TIntV_AddMerged, None, TIntV)
TIntV.AddVMerged = new_instancemethod(_SnapTime.TIntV_AddVMerged, None, TIntV)
TIntV.AddUnique = new_instancemethod(_SnapTime.TIntV_AddUnique, None, TIntV)
TIntV.GetVal = new_instancemethod(_SnapTime.TIntV_GetVal, None, TIntV)
TIntV.SetVal = new_instancemethod(_SnapTime.TIntV_SetVal, None, TIntV)
TIntV.GetSubValV = new_instancemethod(_SnapTime.TIntV_GetSubValV, None, TIntV)
TIntV.Ins = new_instancemethod(_SnapTime.TIntV_Ins, None, TIntV)
TIntV.Del = new_instancemethod(_SnapTime.TIntV_Del, None, TIntV)
TIntV.DelLast = new_instancemethod(_SnapTime.TIntV_DelLast, None, TIntV)
TIntV.DelIfIn = new_instancemethod(_SnapTime.TIntV_DelIfIn, None, TIntV)
TIntV.DelAll = new_instancemethod(_SnapTime.TIntV_DelAll, None, TIntV)
TIntV.PutAll = new_instancemethod(_SnapTime.TIntV_PutAll, None, TIntV)
TIntV.Move = new_instancemethod(_SnapTime.TIntV_Move, None, TIntV)
TIntV.Swap = new_instancemethod(_SnapTime.TIntV_Swap, None, TIntV)
TIntV.Get32BitVector = new_instancemethod(_SnapTime.TIntV_Get32BitVector, None, TIntV)
TIntV.NextPerm = new_instancemethod(_SnapTime.TIntV_NextPerm, None, TIntV)
TIntV.PrevPerm = new_instancemethod(_SnapTime.TIntV_PrevPerm, None, TIntV)
TIntV.GetPivotValN = new_instancemethod(_SnapTime.TIntV_GetPivotValN, None, TIntV)
TIntV.BSort = new_instancemethod(_SnapTime.TIntV_BSort, None, TIntV)
TIntV.ISort = new_instancemethod(_SnapTime.TIntV_ISort, None, TIntV)
TIntV.Partition = new_instancemethod(_SnapTime.TIntV_Partition, None, TIntV)
TIntV.QSort = new_instancemethod(_SnapTime.TIntV_QSort, None, TIntV)
TIntV.Sort = new_instancemethod(_SnapTime.TIntV_Sort, None, TIntV)
TIntV.IsSorted = new_instancemethod(_SnapTime.TIntV_IsSorted, None, TIntV)
TIntV.Shuffle = new_instancemethod(_SnapTime.TIntV_Shuffle, None, TIntV)
TIntV.Reverse = new_instancemethod(_SnapTime.TIntV_Reverse, None, TIntV)
TIntV.Merge = new_instancemethod(_SnapTime.TIntV_Merge, None, TIntV)
TIntV.Intrs = new_instancemethod(_SnapTime.TIntV_Intrs, None, TIntV)
TIntV.Union = new_instancemethod(_SnapTime.TIntV_Union, None, TIntV)
TIntV.Diff = new_instancemethod(_SnapTime.TIntV_Diff, None, TIntV)
TIntV.IntrsLen = new_instancemethod(_SnapTime.TIntV_IntrsLen, None, TIntV)
TIntV.UnionLen = new_instancemethod(_SnapTime.TIntV_UnionLen, None, TIntV)
TIntV.Count = new_instancemethod(_SnapTime.TIntV_Count, None, TIntV)
TIntV.SearchBin = new_instancemethod(_SnapTime.TIntV_SearchBin, None, TIntV)
TIntV.SearchBinLeft = new_instancemethod(_SnapTime.TIntV_SearchBinLeft, None, TIntV)
TIntV.SearchForw = new_instancemethod(_SnapTime.TIntV_SearchForw, None, TIntV)
TIntV.SearchBack = new_instancemethod(_SnapTime.TIntV_SearchBack, None, TIntV)
TIntV.SearchVForw = new_instancemethod(_SnapTime.TIntV_SearchVForw, None, TIntV)
TIntV.IsIn = new_instancemethod(_SnapTime.TIntV_IsIn, None, TIntV)
TIntV.IsInBin = new_instancemethod(_SnapTime.TIntV_IsInBin, None, TIntV)
TIntV.GetDat = new_instancemethod(_SnapTime.TIntV_GetDat, None, TIntV)
TIntV.GetAddDat = new_instancemethod(_SnapTime.TIntV_GetAddDat, None, TIntV)
TIntV.GetMxValN = new_instancemethod(_SnapTime.TIntV_GetMxValN, None, TIntV)
TIntV_swigregister = _SnapTime.TIntV_swigregister
TIntV_swigregister(TIntV)

def TIntV_SwapI(LVal, RVal):
    """
    TIntV_SwapI(TInt LVal, TInt RVal)

    Parameters
    ----------
    LVal: TVec< TInt >::TIter
    RVal: TVec< TInt >::TIter

    """
    return _SnapTime.TIntV_SwapI(LVal, RVal)

def TIntV_GetV(*args):
    """
    GetV(TInt Val1) -> TIntV

    Parameters
    ----------
    Val1: TInt const &

    GetV(TInt Val1, TInt Val2) -> TIntV

    Parameters
    ----------
    Val1: TInt const &
    Val2: TInt const &

    GetV(TInt Val1, TInt Val2, TInt Val3) -> TIntV

    Parameters
    ----------
    Val1: TInt const &
    Val2: TInt const &
    Val3: TInt const &

    GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4) -> TIntV

    Parameters
    ----------
    Val1: TInt const &
    Val2: TInt const &
    Val3: TInt const &
    Val4: TInt const &

    GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5) -> TIntV

    Parameters
    ----------
    Val1: TInt const &
    Val2: TInt const &
    Val3: TInt const &
    Val4: TInt const &
    Val5: TInt const &

    GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6) -> TIntV

    Parameters
    ----------
    Val1: TInt const &
    Val2: TInt const &
    Val3: TInt const &
    Val4: TInt const &
    Val5: TInt const &
    Val6: TInt const &

    GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6, TInt Val7) -> TIntV

    Parameters
    ----------
    Val1: TInt const &
    Val2: TInt const &
    Val3: TInt const &
    Val4: TInt const &
    Val5: TInt const &
    Val6: TInt const &
    Val7: TInt const &

    GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6, TInt Val7, TInt Val8) -> TIntV

    Parameters
    ----------
    Val1: TInt const &
    Val2: TInt const &
    Val3: TInt const &
    Val4: TInt const &
    Val5: TInt const &
    Val6: TInt const &
    Val7: TInt const &
    Val8: TInt const &

    TIntV_GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6, TInt Val7, TInt Val8, TInt Val9) -> TIntV

    Parameters
    ----------
    Val1: TInt const &
    Val2: TInt const &
    Val3: TInt const &
    Val4: TInt const &
    Val5: TInt const &
    Val6: TInt const &
    Val7: TInt const &
    Val8: TInt const &
    Val9: TInt const &

    """
    return _SnapTime.TIntV_GetV(*args)

class TInt64V(object):
    """Proxy of C++ TVec<(TInt64,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TInt64V

    def __init__(self, *args):
        """
        __init__(TVec<(TInt64,int64)> self) -> TInt64V
        __init__(TVec<(TInt64,int64)> self, TInt64V Vec) -> TInt64V

        Parameters
        ----------
        Vec: TVec< TInt64,long long > const &

        __init__(TVec<(TInt64,int64)> self, TInt64V Vec) -> TInt64V

        Parameters
        ----------
        Vec: TVec< TInt64,long long > &&

        __init__(TVec<(TInt64,int64)> self, long long const & _Vals) -> TInt64V

        Parameters
        ----------
        _Vals: long long const &

        __init__(TVec<(TInt64,int64)> self, long long const & _MxVals, long long const & _Vals) -> TInt64V

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        __init__(TVec<(TInt64,int64)> self, long long const & _MxVals, long long const & _Vals, TInt64 Dat) -> TInt64V

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &
        Dat: TInt64

        __init__(TVec<(TInt64,int64)> self, TInt64 _ValT, long long const & _Vals) -> TInt64V

        Parameters
        ----------
        _ValT: TInt64 *
        _Vals: long long const &

        __init__(TVec<(TInt64,int64)> self, TSIn SIn) -> TInt64V

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TInt64V_swiginit(self, _SnapTime.new_TInt64V(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TInt64V self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TInt64V_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TInt64V self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TInt64V_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TInt64V self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TInt64V_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TInt64V self, TInt64 Val) -> TInt64V

        Parameters
        ----------
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TInt64V self, TInt64V Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TInt64,long long > const &

        """
        return _SnapTime.TInt64V___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TInt64V self, TInt64V Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TInt64,long long > const &

        """
        return _SnapTime.TInt64V___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TInt64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64,int64 > const *

        """
        return _SnapTime.TInt64V_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TInt64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64,int64 > const *

        """
        return _SnapTime.TInt64V_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TInt64V self) -> int

        Parameters
        ----------
        self: TVec< TInt64,int64 > const *

        """
        return _SnapTime.TInt64V_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TInt64V self) -> int

        Parameters
        ----------
        self: TVec< TInt64,int64 > const *

        """
        return _SnapTime.TInt64V_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TInt64V self, long long const & _Vals)

        Parameters
        ----------
        _Vals: long long const &

        Gen(TInt64V self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TInt64V_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TInt64V self, TInt64 _ValT, long long const & _Vals)

        Parameters
        ----------
        _ValT: TInt64 *
        _Vals: long long const &

        """
        return _SnapTime.TInt64V_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TInt64V self) -> bool

        Parameters
        ----------
        self: TVec< TInt64,int64 > const *

        """
        return _SnapTime.TInt64V_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TInt64V self, long long const & _MxVals)

        Parameters
        ----------
        _MxVals: long long const &

        Reserve(TInt64V self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TInt64V_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TInt64V self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(TInt64V self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TInt64V self)

        Parameters
        ----------
        self: TVec< TInt64,int64 > *

        """
        return _SnapTime.TInt64V_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TInt64V self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Trunc(TInt64V self)

        Parameters
        ----------
        self: TVec< TInt64,int64 > *

        """
        return _SnapTime.TInt64V_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TInt64V self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Reduce(TInt64V self)

        Parameters
        ----------
        self: TVec< TInt64,int64 > *

        """
        return _SnapTime.TInt64V_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TInt64V self)

        Parameters
        ----------
        self: TVec< TInt64,int64 > *

        """
        return _SnapTime.TInt64V_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TInt64V self, TInt64V Vec)

        Parameters
        ----------
        Vec: TVec< TInt64,long long > &

        """
        return _SnapTime.TInt64V_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TInt64V self, TInt64V Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TInt64,long long > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TInt64V_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TInt64V self) -> bool

        Parameters
        ----------
        self: TVec< TInt64,int64 > const *

        """
        return _SnapTime.TInt64V_Empty(self)


    def Len(self):
        """
        Len(TInt64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64,int64 > const *

        """
        return _SnapTime.TInt64V_Len(self)


    def Reserved(self):
        """
        Reserved(TInt64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64,int64 > const *

        """
        return _SnapTime.TInt64V_Reserved(self)


    def Last(self, *args):
        """
        Last(TInt64V self) -> TInt64
        Last(TInt64V self) -> TInt64

        Parameters
        ----------
        self: TVec< TInt64,int64 > *

        """
        return _SnapTime.TInt64V_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TInt64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64,int64 > const *

        """
        return _SnapTime.TInt64V_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TInt64V self) -> TInt64
        LastLast(TInt64V self) -> TInt64

        Parameters
        ----------
        self: TVec< TInt64,int64 > *

        """
        return _SnapTime.TInt64V_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TInt64V self, TRnd Rnd) -> TInt64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TInt64V self) -> TInt64
        GetRndVal(TInt64V self, TRnd Rnd) -> TInt64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TInt64V self) -> TInt64

        Parameters
        ----------
        self: TVec< TInt64,int64 > *

        """
        return _SnapTime.TInt64V_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TInt64V self) -> TInt64

        Parameters
        ----------
        self: TVec< TInt64,int64 > const *

        """
        return _SnapTime.TInt64V_BegI(self)


    def begin(self):
        """
        begin(TInt64V self) -> TInt64

        Parameters
        ----------
        self: TVec< TInt64,int64 > const *

        """
        return _SnapTime.TInt64V_begin(self)


    def EndI(self):
        """
        EndI(TInt64V self) -> TInt64

        Parameters
        ----------
        self: TVec< TInt64,int64 > const *

        """
        return _SnapTime.TInt64V_EndI(self)


    def end(self):
        """
        end(TInt64V self) -> TInt64

        Parameters
        ----------
        self: TVec< TInt64,int64 > const *

        """
        return _SnapTime.TInt64V_end(self)


    def GetI(self, ValN):
        """
        GetI(TInt64V self, long long const & ValN) -> TInt64

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TInt64V_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TInt64V self) -> long long
        Add(TInt64V self, TInt64 Val) -> long long

        Parameters
        ----------
        Val: TInt64 const &

        Add(TInt64V self, TInt64 Val) -> long long

        Parameters
        ----------
        Val: TInt64 &

        Add(TInt64V self, TInt64 Val, long long const & ResizeLen) -> long long

        Parameters
        ----------
        Val: TInt64 const &
        ResizeLen: long long const &

        """
        return _SnapTime.TInt64V_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TInt64V self, TInt64 Val) -> long long

        Parameters
        ----------
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TInt64V self, TInt64 Val, int Inc) -> long long

        Parameters
        ----------
        Val: TInt64 const &
        Inc: int

        """
        return _SnapTime.TInt64V_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TInt64V self, TInt64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TInt64,long long > const &

        """
        return _SnapTime.TInt64V_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TInt64V self, TInt64 Val, bool const & Asc=True, long long const & _MxVals=-1) -> long long

        Parameters
        ----------
        Val: TInt64 const &
        Asc: bool const &
        _MxVals: long long const &

        AddSorted(TInt64V self, TInt64 Val, bool const & Asc=True) -> long long

        Parameters
        ----------
        Val: TInt64 const &
        Asc: bool const &

        AddSorted(TInt64V self, TInt64 Val) -> long long

        Parameters
        ----------
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TInt64V self, TInt64 Val, bool const & Asc) -> long long

        Parameters
        ----------
        Val: TInt64 const &
        Asc: bool const &

        """
        return _SnapTime.TInt64V_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TInt64V self, TInt64 Val) -> long long

        Parameters
        ----------
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TInt64V self, TInt64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TInt64,long long > const &

        """
        return _SnapTime.TInt64V_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TInt64V self, TInt64 Val) -> long long

        Parameters
        ----------
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TInt64V self, long long const & ValN) -> TInt64

        Parameters
        ----------
        ValN: long long const &

        GetVal(TInt64V self, long long const & ValN) -> TInt64

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TInt64V_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TInt64V self, long long const & ValN, TInt64 Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TInt64V self, long long const & BValN, long long const & EValN, TInt64V ValV)

        Parameters
        ----------
        BValN: long long const &
        EValN: long long const &
        ValV: TVec< TInt64,long long > &

        """
        return _SnapTime.TInt64V_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TInt64V self, long long const & ValN, TInt64 Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TInt64V self, long long const & ValN)

        Parameters
        ----------
        ValN: long long const &

        Del(TInt64V self, long long const & MnValN, long long const & MxValN)

        Parameters
        ----------
        MnValN: long long const &
        MxValN: long long const &

        """
        return _SnapTime.TInt64V_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TInt64V self)

        Parameters
        ----------
        self: TVec< TInt64,int64 > *

        """
        return _SnapTime.TInt64V_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TInt64V self, TInt64 Val) -> bool

        Parameters
        ----------
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TInt64V self, TInt64 Val)

        Parameters
        ----------
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TInt64V self, TInt64 Val)

        Parameters
        ----------
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TInt64V self, long long const & FromValN, long long const & ToValN)

        Parameters
        ----------
        FromValN: long long const &
        ToValN: long long const &

        """
        return _SnapTime.TInt64V_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TInt64V self, TInt64V Vec)

        Parameters
        ----------
        Vec: TVec< TInt64,long long > &

        Swap(TInt64V self, long long const & ValN1, long long const & ValN2)

        Parameters
        ----------
        ValN1: long long const &
        ValN2: long long const &

        """
        return _SnapTime.TInt64V_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TInt64 LVal, TInt64 RVal)

        Parameters
        ----------
        LVal: TVec< TInt64,long long >::TIter
        RVal: TVec< TInt64,long long >::TIter

        """
        return _SnapTime.TInt64V_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TInt64V self) -> TVec< TInt64,int >

        Parameters
        ----------
        self: TVec< TInt64,int64 > *

        """
        return _SnapTime.TInt64V_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TInt64V self) -> bool

        Parameters
        ----------
        self: TVec< TInt64,int64 > *

        """
        return _SnapTime.TInt64V_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TInt64V self) -> bool

        Parameters
        ----------
        self: TVec< TInt64,int64 > *

        """
        return _SnapTime.TInt64V_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TInt64V self, long long const & LValN, long long const & RValN) -> long long

        Parameters
        ----------
        LValN: long long const &
        RValN: long long const &

        """
        return _SnapTime.TInt64V_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TInt64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TInt64V_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TInt64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TInt64V_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TInt64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc) -> long long

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TInt64V_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TInt64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TInt64V_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TInt64V self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TInt64V self)

        Parameters
        ----------
        self: TVec< TInt64,int64 > *

        """
        return _SnapTime.TInt64V_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TInt64V self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TInt64V self) -> bool

        Parameters
        ----------
        self: TVec< TInt64,int64 > const *

        """
        return _SnapTime.TInt64V_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TInt64V self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TInt64V_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TInt64V self)
        Reverse(TInt64V self, long long LValN, long long RValN)

        Parameters
        ----------
        LValN: long long
        RValN: long long

        """
        return _SnapTime.TInt64V_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TInt64V self)

        Parameters
        ----------
        self: TVec< TInt64,int64 > *

        """
        return _SnapTime.TInt64V_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TInt64V self, TInt64V ValV)

        Parameters
        ----------
        ValV: TVec< TInt64,long long > const &

        Intrs(TInt64V self, TInt64V ValV, TInt64V DstValV)

        Parameters
        ----------
        ValV: TVec< TInt64,long long > const &
        DstValV: TVec< TInt64,long long > &

        """
        return _SnapTime.TInt64V_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TInt64V self, TInt64V ValV)

        Parameters
        ----------
        ValV: TVec< TInt64,long long > const &

        Union(TInt64V self, TInt64V ValV, TInt64V DstValV)

        Parameters
        ----------
        ValV: TVec< TInt64,long long > const &
        DstValV: TVec< TInt64,long long > &

        """
        return _SnapTime.TInt64V_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TInt64V self, TInt64V ValV)

        Parameters
        ----------
        ValV: TVec< TInt64,long long > const &

        Diff(TInt64V self, TInt64V ValV, TInt64V DstValV)

        Parameters
        ----------
        ValV: TVec< TInt64,long long > const &
        DstValV: TVec< TInt64,long long > &

        """
        return _SnapTime.TInt64V_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TInt64V self, TInt64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TInt64,long long > const &

        """
        return _SnapTime.TInt64V_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TInt64V self, TInt64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TInt64,long long > const &

        """
        return _SnapTime.TInt64V_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TInt64V self, TInt64 Val) -> long long

        Parameters
        ----------
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TInt64V self, TInt64 Val) -> long long

        Parameters
        ----------
        Val: TInt64 const &

        SearchBin(TInt64V self, TInt64 Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TInt64 const &
        InsValN: long long &

        """
        return _SnapTime.TInt64V_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TInt64V self, TInt64 Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TInt64 const &
        InsValN: long long &

        """
        return _SnapTime.TInt64V_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TInt64V self, TInt64 Val, long long const & BValN=0) -> long long

        Parameters
        ----------
        Val: TInt64 const &
        BValN: long long const &

        SearchForw(TInt64V self, TInt64 Val) -> long long

        Parameters
        ----------
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TInt64V self, TInt64 Val) -> long long

        Parameters
        ----------
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TInt64V self, TInt64V ValV, long long const & BValN=0) -> long long

        Parameters
        ----------
        ValV: TVec< TInt64,long long > const &
        BValN: long long const &

        SearchVForw(TInt64V self, TInt64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TInt64,long long > const &

        """
        return _SnapTime.TInt64V_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TInt64V self, TInt64 Val) -> bool

        Parameters
        ----------
        Val: TInt64 const &

        IsIn(TInt64V self, TInt64 Val, long long & ValN) -> bool

        Parameters
        ----------
        Val: TInt64 const &
        ValN: long long &

        """
        return _SnapTime.TInt64V_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TInt64V self, TInt64 Val) -> bool

        Parameters
        ----------
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TInt64V self, TInt64 Val) -> TInt64

        Parameters
        ----------
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TInt64V self, TInt64 Val) -> TInt64

        Parameters
        ----------
        Val: TInt64 const &

        """
        return _SnapTime.TInt64V_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TInt64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64,int64 > const *

        """
        return _SnapTime.TInt64V_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TInt64 Val1) -> TInt64V

        Parameters
        ----------
        Val1: TInt64 const &

        GetV(TInt64 Val1, TInt64 Val2) -> TInt64V

        Parameters
        ----------
        Val1: TInt64 const &
        Val2: TInt64 const &

        GetV(TInt64 Val1, TInt64 Val2, TInt64 Val3) -> TInt64V

        Parameters
        ----------
        Val1: TInt64 const &
        Val2: TInt64 const &
        Val3: TInt64 const &

        GetV(TInt64 Val1, TInt64 Val2, TInt64 Val3, TInt64 Val4) -> TInt64V

        Parameters
        ----------
        Val1: TInt64 const &
        Val2: TInt64 const &
        Val3: TInt64 const &
        Val4: TInt64 const &

        GetV(TInt64 Val1, TInt64 Val2, TInt64 Val3, TInt64 Val4, TInt64 Val5) -> TInt64V

        Parameters
        ----------
        Val1: TInt64 const &
        Val2: TInt64 const &
        Val3: TInt64 const &
        Val4: TInt64 const &
        Val5: TInt64 const &

        GetV(TInt64 Val1, TInt64 Val2, TInt64 Val3, TInt64 Val4, TInt64 Val5, TInt64 Val6) -> TInt64V

        Parameters
        ----------
        Val1: TInt64 const &
        Val2: TInt64 const &
        Val3: TInt64 const &
        Val4: TInt64 const &
        Val5: TInt64 const &
        Val6: TInt64 const &

        GetV(TInt64 Val1, TInt64 Val2, TInt64 Val3, TInt64 Val4, TInt64 Val5, TInt64 Val6, TInt64 Val7) -> TInt64V

        Parameters
        ----------
        Val1: TInt64 const &
        Val2: TInt64 const &
        Val3: TInt64 const &
        Val4: TInt64 const &
        Val5: TInt64 const &
        Val6: TInt64 const &
        Val7: TInt64 const &

        GetV(TInt64 Val1, TInt64 Val2, TInt64 Val3, TInt64 Val4, TInt64 Val5, TInt64 Val6, TInt64 Val7, TInt64 Val8) -> TInt64V

        Parameters
        ----------
        Val1: TInt64 const &
        Val2: TInt64 const &
        Val3: TInt64 const &
        Val4: TInt64 const &
        Val5: TInt64 const &
        Val6: TInt64 const &
        Val7: TInt64 const &
        Val8: TInt64 const &

        GetV(TInt64 Val1, TInt64 Val2, TInt64 Val3, TInt64 Val4, TInt64 Val5, TInt64 Val6, TInt64 Val7, TInt64 Val8, TInt64 Val9) -> TInt64V

        Parameters
        ----------
        Val1: TInt64 const &
        Val2: TInt64 const &
        Val3: TInt64 const &
        Val4: TInt64 const &
        Val5: TInt64 const &
        Val6: TInt64 const &
        Val7: TInt64 const &
        Val8: TInt64 const &
        Val9: TInt64 const &

        """
        return _SnapTime.TInt64V_GetV(*args)

    GetV = staticmethod(GetV)
TInt64V.LoadShM = new_instancemethod(_SnapTime.TInt64V_LoadShM, None, TInt64V)
TInt64V.Load = new_instancemethod(_SnapTime.TInt64V_Load, None, TInt64V)
TInt64V.Save = new_instancemethod(_SnapTime.TInt64V_Save, None, TInt64V)
TInt64V.__add__ = new_instancemethod(_SnapTime.TInt64V___add__, None, TInt64V)
TInt64V.__eq__ = new_instancemethod(_SnapTime.TInt64V___eq__, None, TInt64V)
TInt64V.__lt__ = new_instancemethod(_SnapTime.TInt64V___lt__, None, TInt64V)
TInt64V.GetMemUsed = new_instancemethod(_SnapTime.TInt64V_GetMemUsed, None, TInt64V)
TInt64V.GetMemSize = new_instancemethod(_SnapTime.TInt64V_GetMemSize, None, TInt64V)
TInt64V.GetPrimHashCd = new_instancemethod(_SnapTime.TInt64V_GetPrimHashCd, None, TInt64V)
TInt64V.GetSecHashCd = new_instancemethod(_SnapTime.TInt64V_GetSecHashCd, None, TInt64V)
TInt64V.Gen = new_instancemethod(_SnapTime.TInt64V_Gen, None, TInt64V)
TInt64V.GenExt = new_instancemethod(_SnapTime.TInt64V_GenExt, None, TInt64V)
TInt64V.IsExt = new_instancemethod(_SnapTime.TInt64V_IsExt, None, TInt64V)
TInt64V.Reserve = new_instancemethod(_SnapTime.TInt64V_Reserve, None, TInt64V)
TInt64V.Clr = new_instancemethod(_SnapTime.TInt64V_Clr, None, TInt64V)
TInt64V.Trunc = new_instancemethod(_SnapTime.TInt64V_Trunc, None, TInt64V)
TInt64V.Reduce = new_instancemethod(_SnapTime.TInt64V_Reduce, None, TInt64V)
TInt64V.Pack = new_instancemethod(_SnapTime.TInt64V_Pack, None, TInt64V)
TInt64V.MoveFrom = new_instancemethod(_SnapTime.TInt64V_MoveFrom, None, TInt64V)
TInt64V.CopyUniqueFrom = new_instancemethod(_SnapTime.TInt64V_CopyUniqueFrom, None, TInt64V)
TInt64V.Empty = new_instancemethod(_SnapTime.TInt64V_Empty, None, TInt64V)
TInt64V.Len = new_instancemethod(_SnapTime.TInt64V_Len, None, TInt64V)
TInt64V.Reserved = new_instancemethod(_SnapTime.TInt64V_Reserved, None, TInt64V)
TInt64V.Last = new_instancemethod(_SnapTime.TInt64V_Last, None, TInt64V)
TInt64V.LastValN = new_instancemethod(_SnapTime.TInt64V_LastValN, None, TInt64V)
TInt64V.LastLast = new_instancemethod(_SnapTime.TInt64V_LastLast, None, TInt64V)
TInt64V.GetRndVal = new_instancemethod(_SnapTime.TInt64V_GetRndVal, None, TInt64V)
TInt64V.BegI = new_instancemethod(_SnapTime.TInt64V_BegI, None, TInt64V)
TInt64V.begin = new_instancemethod(_SnapTime.TInt64V_begin, None, TInt64V)
TInt64V.EndI = new_instancemethod(_SnapTime.TInt64V_EndI, None, TInt64V)
TInt64V.end = new_instancemethod(_SnapTime.TInt64V_end, None, TInt64V)
TInt64V.GetI = new_instancemethod(_SnapTime.TInt64V_GetI, None, TInt64V)
TInt64V.Add = new_instancemethod(_SnapTime.TInt64V_Add, None, TInt64V)
TInt64V.AddMP = new_instancemethod(_SnapTime.TInt64V_AddMP, None, TInt64V)
TInt64V.MoveLastMP = new_instancemethod(_SnapTime.TInt64V_MoveLastMP, None, TInt64V)
TInt64V.AddV = new_instancemethod(_SnapTime.TInt64V_AddV, None, TInt64V)
TInt64V.AddSorted = new_instancemethod(_SnapTime.TInt64V_AddSorted, None, TInt64V)
TInt64V.AddBackSorted = new_instancemethod(_SnapTime.TInt64V_AddBackSorted, None, TInt64V)
TInt64V.AddMerged = new_instancemethod(_SnapTime.TInt64V_AddMerged, None, TInt64V)
TInt64V.AddVMerged = new_instancemethod(_SnapTime.TInt64V_AddVMerged, None, TInt64V)
TInt64V.AddUnique = new_instancemethod(_SnapTime.TInt64V_AddUnique, None, TInt64V)
TInt64V.GetVal = new_instancemethod(_SnapTime.TInt64V_GetVal, None, TInt64V)
TInt64V.SetVal = new_instancemethod(_SnapTime.TInt64V_SetVal, None, TInt64V)
TInt64V.GetSubValV = new_instancemethod(_SnapTime.TInt64V_GetSubValV, None, TInt64V)
TInt64V.Ins = new_instancemethod(_SnapTime.TInt64V_Ins, None, TInt64V)
TInt64V.Del = new_instancemethod(_SnapTime.TInt64V_Del, None, TInt64V)
TInt64V.DelLast = new_instancemethod(_SnapTime.TInt64V_DelLast, None, TInt64V)
TInt64V.DelIfIn = new_instancemethod(_SnapTime.TInt64V_DelIfIn, None, TInt64V)
TInt64V.DelAll = new_instancemethod(_SnapTime.TInt64V_DelAll, None, TInt64V)
TInt64V.PutAll = new_instancemethod(_SnapTime.TInt64V_PutAll, None, TInt64V)
TInt64V.Move = new_instancemethod(_SnapTime.TInt64V_Move, None, TInt64V)
TInt64V.Swap = new_instancemethod(_SnapTime.TInt64V_Swap, None, TInt64V)
TInt64V.Get32BitVector = new_instancemethod(_SnapTime.TInt64V_Get32BitVector, None, TInt64V)
TInt64V.NextPerm = new_instancemethod(_SnapTime.TInt64V_NextPerm, None, TInt64V)
TInt64V.PrevPerm = new_instancemethod(_SnapTime.TInt64V_PrevPerm, None, TInt64V)
TInt64V.GetPivotValN = new_instancemethod(_SnapTime.TInt64V_GetPivotValN, None, TInt64V)
TInt64V.BSort = new_instancemethod(_SnapTime.TInt64V_BSort, None, TInt64V)
TInt64V.ISort = new_instancemethod(_SnapTime.TInt64V_ISort, None, TInt64V)
TInt64V.Partition = new_instancemethod(_SnapTime.TInt64V_Partition, None, TInt64V)
TInt64V.QSort = new_instancemethod(_SnapTime.TInt64V_QSort, None, TInt64V)
TInt64V.Sort = new_instancemethod(_SnapTime.TInt64V_Sort, None, TInt64V)
TInt64V.IsSorted = new_instancemethod(_SnapTime.TInt64V_IsSorted, None, TInt64V)
TInt64V.Shuffle = new_instancemethod(_SnapTime.TInt64V_Shuffle, None, TInt64V)
TInt64V.Reverse = new_instancemethod(_SnapTime.TInt64V_Reverse, None, TInt64V)
TInt64V.Merge = new_instancemethod(_SnapTime.TInt64V_Merge, None, TInt64V)
TInt64V.Intrs = new_instancemethod(_SnapTime.TInt64V_Intrs, None, TInt64V)
TInt64V.Union = new_instancemethod(_SnapTime.TInt64V_Union, None, TInt64V)
TInt64V.Diff = new_instancemethod(_SnapTime.TInt64V_Diff, None, TInt64V)
TInt64V.IntrsLen = new_instancemethod(_SnapTime.TInt64V_IntrsLen, None, TInt64V)
TInt64V.UnionLen = new_instancemethod(_SnapTime.TInt64V_UnionLen, None, TInt64V)
TInt64V.Count = new_instancemethod(_SnapTime.TInt64V_Count, None, TInt64V)
TInt64V.SearchBin = new_instancemethod(_SnapTime.TInt64V_SearchBin, None, TInt64V)
TInt64V.SearchBinLeft = new_instancemethod(_SnapTime.TInt64V_SearchBinLeft, None, TInt64V)
TInt64V.SearchForw = new_instancemethod(_SnapTime.TInt64V_SearchForw, None, TInt64V)
TInt64V.SearchBack = new_instancemethod(_SnapTime.TInt64V_SearchBack, None, TInt64V)
TInt64V.SearchVForw = new_instancemethod(_SnapTime.TInt64V_SearchVForw, None, TInt64V)
TInt64V.IsIn = new_instancemethod(_SnapTime.TInt64V_IsIn, None, TInt64V)
TInt64V.IsInBin = new_instancemethod(_SnapTime.TInt64V_IsInBin, None, TInt64V)
TInt64V.GetDat = new_instancemethod(_SnapTime.TInt64V_GetDat, None, TInt64V)
TInt64V.GetAddDat = new_instancemethod(_SnapTime.TInt64V_GetAddDat, None, TInt64V)
TInt64V.GetMxValN = new_instancemethod(_SnapTime.TInt64V_GetMxValN, None, TInt64V)
TInt64V_swigregister = _SnapTime.TInt64V_swigregister
TInt64V_swigregister(TInt64V)

def TInt64V_SwapI(LVal, RVal):
    """
    TInt64V_SwapI(TInt64 LVal, TInt64 RVal)

    Parameters
    ----------
    LVal: TVec< TInt64,long long >::TIter
    RVal: TVec< TInt64,long long >::TIter

    """
    return _SnapTime.TInt64V_SwapI(LVal, RVal)

def TInt64V_GetV(*args):
    """
    GetV(TInt64 Val1) -> TInt64V

    Parameters
    ----------
    Val1: TInt64 const &

    GetV(TInt64 Val1, TInt64 Val2) -> TInt64V

    Parameters
    ----------
    Val1: TInt64 const &
    Val2: TInt64 const &

    GetV(TInt64 Val1, TInt64 Val2, TInt64 Val3) -> TInt64V

    Parameters
    ----------
    Val1: TInt64 const &
    Val2: TInt64 const &
    Val3: TInt64 const &

    GetV(TInt64 Val1, TInt64 Val2, TInt64 Val3, TInt64 Val4) -> TInt64V

    Parameters
    ----------
    Val1: TInt64 const &
    Val2: TInt64 const &
    Val3: TInt64 const &
    Val4: TInt64 const &

    GetV(TInt64 Val1, TInt64 Val2, TInt64 Val3, TInt64 Val4, TInt64 Val5) -> TInt64V

    Parameters
    ----------
    Val1: TInt64 const &
    Val2: TInt64 const &
    Val3: TInt64 const &
    Val4: TInt64 const &
    Val5: TInt64 const &

    GetV(TInt64 Val1, TInt64 Val2, TInt64 Val3, TInt64 Val4, TInt64 Val5, TInt64 Val6) -> TInt64V

    Parameters
    ----------
    Val1: TInt64 const &
    Val2: TInt64 const &
    Val3: TInt64 const &
    Val4: TInt64 const &
    Val5: TInt64 const &
    Val6: TInt64 const &

    GetV(TInt64 Val1, TInt64 Val2, TInt64 Val3, TInt64 Val4, TInt64 Val5, TInt64 Val6, TInt64 Val7) -> TInt64V

    Parameters
    ----------
    Val1: TInt64 const &
    Val2: TInt64 const &
    Val3: TInt64 const &
    Val4: TInt64 const &
    Val5: TInt64 const &
    Val6: TInt64 const &
    Val7: TInt64 const &

    GetV(TInt64 Val1, TInt64 Val2, TInt64 Val3, TInt64 Val4, TInt64 Val5, TInt64 Val6, TInt64 Val7, TInt64 Val8) -> TInt64V

    Parameters
    ----------
    Val1: TInt64 const &
    Val2: TInt64 const &
    Val3: TInt64 const &
    Val4: TInt64 const &
    Val5: TInt64 const &
    Val6: TInt64 const &
    Val7: TInt64 const &
    Val8: TInt64 const &

    TInt64V_GetV(TInt64 Val1, TInt64 Val2, TInt64 Val3, TInt64 Val4, TInt64 Val5, TInt64 Val6, TInt64 Val7, TInt64 Val8, TInt64 Val9) -> TInt64V

    Parameters
    ----------
    Val1: TInt64 const &
    Val2: TInt64 const &
    Val3: TInt64 const &
    Val4: TInt64 const &
    Val5: TInt64 const &
    Val6: TInt64 const &
    Val7: TInt64 const &
    Val8: TInt64 const &
    Val9: TInt64 const &

    """
    return _SnapTime.TInt64V_GetV(*args)

class TFltV(object):
    """Proxy of C++ TVec<(TFlt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TFltV

    def __init__(self, *args):
        """
        __init__(TVec<(TFlt)> self) -> TFltV
        __init__(TVec<(TFlt)> self, TFltV Vec) -> TFltV

        Parameters
        ----------
        Vec: TVec< TFlt,int > const &

        __init__(TVec<(TFlt)> self, TFltV Vec) -> TFltV

        Parameters
        ----------
        Vec: TVec< TFlt,int > &&

        __init__(TVec<(TFlt)> self, int const & _Vals) -> TFltV

        Parameters
        ----------
        _Vals: int const &

        __init__(TVec<(TFlt)> self, int const & _MxVals, int const & _Vals) -> TFltV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TVec<(TFlt)> self, int const & _MxVals, int const & _Vals, TFlt Dat) -> TFltV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &
        Dat: TFlt

        __init__(TVec<(TFlt)> self, TFlt _ValT, int const & _Vals) -> TFltV

        Parameters
        ----------
        _ValT: TFlt *
        _Vals: int const &

        __init__(TVec<(TFlt)> self, TSIn SIn) -> TFltV

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TFltV_swiginit(self, _SnapTime.new_TFltV(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TFltV self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TFltV_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TFltV self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TFltV_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TFltV self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TFltV_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TFltV self, TFlt Val) -> TFltV

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFltV___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TFltV self, TFltV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TFlt,int > const &

        """
        return _SnapTime.TFltV___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TFltV self, TFltV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TFlt,int > const &

        """
        return _SnapTime.TFltV___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TFltV self) -> int

        Parameters
        ----------
        self: TVec< TFlt > const *

        """
        return _SnapTime.TFltV_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TFltV self) -> int

        Parameters
        ----------
        self: TVec< TFlt > const *

        """
        return _SnapTime.TFltV_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TFltV self) -> int

        Parameters
        ----------
        self: TVec< TFlt > const *

        """
        return _SnapTime.TFltV_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TFltV self) -> int

        Parameters
        ----------
        self: TVec< TFlt > const *

        """
        return _SnapTime.TFltV_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TFltV self, int const & _Vals)

        Parameters
        ----------
        _Vals: int const &

        Gen(TFltV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TFltV_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TFltV self, TFlt _ValT, int const & _Vals)

        Parameters
        ----------
        _ValT: TFlt *
        _Vals: int const &

        """
        return _SnapTime.TFltV_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TFltV self) -> bool

        Parameters
        ----------
        self: TVec< TFlt > const *

        """
        return _SnapTime.TFltV_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TFltV self, int const & _MxVals)

        Parameters
        ----------
        _MxVals: int const &

        Reserve(TFltV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TFltV_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TFltV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TFltV self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TFltV self)

        Parameters
        ----------
        self: TVec< TFlt > *

        """
        return _SnapTime.TFltV_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TFltV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Trunc(TFltV self)

        Parameters
        ----------
        self: TVec< TFlt > *

        """
        return _SnapTime.TFltV_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TFltV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Reduce(TFltV self)

        Parameters
        ----------
        self: TVec< TFlt > *

        """
        return _SnapTime.TFltV_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TFltV self)

        Parameters
        ----------
        self: TVec< TFlt > *

        """
        return _SnapTime.TFltV_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TFltV self, TFltV Vec)

        Parameters
        ----------
        Vec: TVec< TFlt,int > &

        """
        return _SnapTime.TFltV_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TFltV self, TFltV Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TFlt,int > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TFltV_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TFltV self) -> bool

        Parameters
        ----------
        self: TVec< TFlt > const *

        """
        return _SnapTime.TFltV_Empty(self)


    def Len(self):
        """
        Len(TFltV self) -> int

        Parameters
        ----------
        self: TVec< TFlt > const *

        """
        return _SnapTime.TFltV_Len(self)


    def Reserved(self):
        """
        Reserved(TFltV self) -> int

        Parameters
        ----------
        self: TVec< TFlt > const *

        """
        return _SnapTime.TFltV_Reserved(self)


    def Last(self, *args):
        """
        Last(TFltV self) -> TFlt
        Last(TFltV self) -> TFlt

        Parameters
        ----------
        self: TVec< TFlt > *

        """
        return _SnapTime.TFltV_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TFltV self) -> int

        Parameters
        ----------
        self: TVec< TFlt > const *

        """
        return _SnapTime.TFltV_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TFltV self) -> TFlt
        LastLast(TFltV self) -> TFlt

        Parameters
        ----------
        self: TVec< TFlt > *

        """
        return _SnapTime.TFltV_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TFltV self, TRnd Rnd) -> TFlt

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TFltV self) -> TFlt
        GetRndVal(TFltV self, TRnd Rnd) -> TFlt

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TFltV self) -> TFlt

        Parameters
        ----------
        self: TVec< TFlt > *

        """
        return _SnapTime.TFltV_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TFltV self) -> TFlt

        Parameters
        ----------
        self: TVec< TFlt > const *

        """
        return _SnapTime.TFltV_BegI(self)


    def begin(self):
        """
        begin(TFltV self) -> TFlt

        Parameters
        ----------
        self: TVec< TFlt > const *

        """
        return _SnapTime.TFltV_begin(self)


    def EndI(self):
        """
        EndI(TFltV self) -> TFlt

        Parameters
        ----------
        self: TVec< TFlt > const *

        """
        return _SnapTime.TFltV_EndI(self)


    def end(self):
        """
        end(TFltV self) -> TFlt

        Parameters
        ----------
        self: TVec< TFlt > const *

        """
        return _SnapTime.TFltV_end(self)


    def GetI(self, ValN):
        """
        GetI(TFltV self, int const & ValN) -> TFlt

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TFltV_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TFltV self) -> int
        Add(TFltV self, TFlt Val) -> int

        Parameters
        ----------
        Val: TFlt const &

        Add(TFltV self, TFlt Val) -> int

        Parameters
        ----------
        Val: TFlt &

        Add(TFltV self, TFlt Val, int const & ResizeLen) -> int

        Parameters
        ----------
        Val: TFlt const &
        ResizeLen: int const &

        """
        return _SnapTime.TFltV_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TFltV self, TFlt Val) -> int

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFltV_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TFltV self, TFlt Val, int Inc) -> int

        Parameters
        ----------
        Val: TFlt const &
        Inc: int

        """
        return _SnapTime.TFltV_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TFltV self, TFltV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TFlt,int > const &

        """
        return _SnapTime.TFltV_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TFltV self, TFlt Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters
        ----------
        Val: TFlt const &
        Asc: bool const &
        _MxVals: int const &

        AddSorted(TFltV self, TFlt Val, bool const & Asc=True) -> int

        Parameters
        ----------
        Val: TFlt const &
        Asc: bool const &

        AddSorted(TFltV self, TFlt Val) -> int

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFltV_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TFltV self, TFlt Val, bool const & Asc) -> int

        Parameters
        ----------
        Val: TFlt const &
        Asc: bool const &

        """
        return _SnapTime.TFltV_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TFltV self, TFlt Val) -> int

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFltV_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TFltV self, TFltV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TFlt,int > const &

        """
        return _SnapTime.TFltV_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TFltV self, TFlt Val) -> int

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFltV_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TFltV self, int const & ValN) -> TFlt

        Parameters
        ----------
        ValN: int const &

        GetVal(TFltV self, int const & ValN) -> TFlt

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TFltV_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TFltV self, int const & ValN, TFlt Val)

        Parameters
        ----------
        ValN: int const &
        Val: TFlt const &

        """
        return _SnapTime.TFltV_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TFltV self, int const & BValN, int const & EValN, TFltV ValV)

        Parameters
        ----------
        BValN: int const &
        EValN: int const &
        ValV: TVec< TFlt,int > &

        """
        return _SnapTime.TFltV_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TFltV self, int const & ValN, TFlt Val)

        Parameters
        ----------
        ValN: int const &
        Val: TFlt const &

        """
        return _SnapTime.TFltV_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TFltV self, int const & ValN)

        Parameters
        ----------
        ValN: int const &

        Del(TFltV self, int const & MnValN, int const & MxValN)

        Parameters
        ----------
        MnValN: int const &
        MxValN: int const &

        """
        return _SnapTime.TFltV_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TFltV self)

        Parameters
        ----------
        self: TVec< TFlt > *

        """
        return _SnapTime.TFltV_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TFltV self, TFlt Val) -> bool

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFltV_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TFltV self, TFlt Val)

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFltV_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TFltV self, TFlt Val)

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFltV_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TFltV self, int const & FromValN, int const & ToValN)

        Parameters
        ----------
        FromValN: int const &
        ToValN: int const &

        """
        return _SnapTime.TFltV_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TFltV self, TFltV Vec)

        Parameters
        ----------
        Vec: TVec< TFlt,int > &

        Swap(TFltV self, int const & ValN1, int const & ValN2)

        Parameters
        ----------
        ValN1: int const &
        ValN2: int const &

        """
        return _SnapTime.TFltV_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TFlt LVal, TFlt RVal)

        Parameters
        ----------
        LVal: TVec< TFlt >::TIter
        RVal: TVec< TFlt >::TIter

        """
        return _SnapTime.TFltV_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TFltV self) -> TFltV

        Parameters
        ----------
        self: TVec< TFlt > *

        """
        return _SnapTime.TFltV_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TFltV self) -> bool

        Parameters
        ----------
        self: TVec< TFlt > *

        """
        return _SnapTime.TFltV_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TFltV self) -> bool

        Parameters
        ----------
        self: TVec< TFlt > *

        """
        return _SnapTime.TFltV_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TFltV self, int const & LValN, int const & RValN) -> int

        Parameters
        ----------
        LValN: int const &
        RValN: int const &

        """
        return _SnapTime.TFltV_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TFltV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TFltV_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TFltV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TFltV_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TFltV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TFltV_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TFltV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TFltV_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TFltV self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TFltV self)

        Parameters
        ----------
        self: TVec< TFlt > *

        """
        return _SnapTime.TFltV_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TFltV self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TFltV self) -> bool

        Parameters
        ----------
        self: TVec< TFlt > const *

        """
        return _SnapTime.TFltV_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TFltV self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TFltV_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TFltV self)
        Reverse(TFltV self, int LValN, int RValN)

        Parameters
        ----------
        LValN: int
        RValN: int

        """
        return _SnapTime.TFltV_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TFltV self)

        Parameters
        ----------
        self: TVec< TFlt > *

        """
        return _SnapTime.TFltV_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TFltV self, TFltV ValV)

        Parameters
        ----------
        ValV: TVec< TFlt,int > const &

        Intrs(TFltV self, TFltV ValV, TFltV DstValV)

        Parameters
        ----------
        ValV: TVec< TFlt,int > const &
        DstValV: TVec< TFlt,int > &

        """
        return _SnapTime.TFltV_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TFltV self, TFltV ValV)

        Parameters
        ----------
        ValV: TVec< TFlt,int > const &

        Union(TFltV self, TFltV ValV, TFltV DstValV)

        Parameters
        ----------
        ValV: TVec< TFlt,int > const &
        DstValV: TVec< TFlt,int > &

        """
        return _SnapTime.TFltV_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TFltV self, TFltV ValV)

        Parameters
        ----------
        ValV: TVec< TFlt,int > const &

        Diff(TFltV self, TFltV ValV, TFltV DstValV)

        Parameters
        ----------
        ValV: TVec< TFlt,int > const &
        DstValV: TVec< TFlt,int > &

        """
        return _SnapTime.TFltV_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TFltV self, TFltV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TFlt,int > const &

        """
        return _SnapTime.TFltV_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TFltV self, TFltV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TFlt,int > const &

        """
        return _SnapTime.TFltV_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TFltV self, TFlt Val) -> int

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFltV_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TFltV self, TFlt Val) -> int

        Parameters
        ----------
        Val: TFlt const &

        SearchBin(TFltV self, TFlt Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TFlt const &
        InsValN: int &

        """
        return _SnapTime.TFltV_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TFltV self, TFlt Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TFlt const &
        InsValN: int &

        """
        return _SnapTime.TFltV_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TFltV self, TFlt Val, int const & BValN=0) -> int

        Parameters
        ----------
        Val: TFlt const &
        BValN: int const &

        SearchForw(TFltV self, TFlt Val) -> int

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFltV_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TFltV self, TFlt Val) -> int

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFltV_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TFltV self, TFltV ValV, int const & BValN=0) -> int

        Parameters
        ----------
        ValV: TVec< TFlt,int > const &
        BValN: int const &

        SearchVForw(TFltV self, TFltV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TFlt,int > const &

        """
        return _SnapTime.TFltV_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TFltV self, TFlt Val) -> bool

        Parameters
        ----------
        Val: TFlt const &

        IsIn(TFltV self, TFlt Val, int & ValN) -> bool

        Parameters
        ----------
        Val: TFlt const &
        ValN: int &

        """
        return _SnapTime.TFltV_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TFltV self, TFlt Val) -> bool

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFltV_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TFltV self, TFlt Val) -> TFlt

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFltV_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TFltV self, TFlt Val) -> TFlt

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFltV_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TFltV self) -> int

        Parameters
        ----------
        self: TVec< TFlt > const *

        """
        return _SnapTime.TFltV_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TFlt Val1) -> TFltV

        Parameters
        ----------
        Val1: TFlt const &

        GetV(TFlt Val1, TFlt Val2) -> TFltV

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3) -> TFltV

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4) -> TFltV

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5) -> TFltV

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &
        Val5: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6) -> TFltV

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &
        Val5: TFlt const &
        Val6: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7) -> TFltV

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &
        Val5: TFlt const &
        Val6: TFlt const &
        Val7: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7, TFlt Val8) -> TFltV

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &
        Val5: TFlt const &
        Val6: TFlt const &
        Val7: TFlt const &
        Val8: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7, TFlt Val8, TFlt Val9) -> TFltV

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &
        Val5: TFlt const &
        Val6: TFlt const &
        Val7: TFlt const &
        Val8: TFlt const &
        Val9: TFlt const &

        """
        return _SnapTime.TFltV_GetV(*args)

    GetV = staticmethod(GetV)
TFltV.LoadShM = new_instancemethod(_SnapTime.TFltV_LoadShM, None, TFltV)
TFltV.Load = new_instancemethod(_SnapTime.TFltV_Load, None, TFltV)
TFltV.Save = new_instancemethod(_SnapTime.TFltV_Save, None, TFltV)
TFltV.__add__ = new_instancemethod(_SnapTime.TFltV___add__, None, TFltV)
TFltV.__eq__ = new_instancemethod(_SnapTime.TFltV___eq__, None, TFltV)
TFltV.__lt__ = new_instancemethod(_SnapTime.TFltV___lt__, None, TFltV)
TFltV.GetMemUsed = new_instancemethod(_SnapTime.TFltV_GetMemUsed, None, TFltV)
TFltV.GetMemSize = new_instancemethod(_SnapTime.TFltV_GetMemSize, None, TFltV)
TFltV.GetPrimHashCd = new_instancemethod(_SnapTime.TFltV_GetPrimHashCd, None, TFltV)
TFltV.GetSecHashCd = new_instancemethod(_SnapTime.TFltV_GetSecHashCd, None, TFltV)
TFltV.Gen = new_instancemethod(_SnapTime.TFltV_Gen, None, TFltV)
TFltV.GenExt = new_instancemethod(_SnapTime.TFltV_GenExt, None, TFltV)
TFltV.IsExt = new_instancemethod(_SnapTime.TFltV_IsExt, None, TFltV)
TFltV.Reserve = new_instancemethod(_SnapTime.TFltV_Reserve, None, TFltV)
TFltV.Clr = new_instancemethod(_SnapTime.TFltV_Clr, None, TFltV)
TFltV.Trunc = new_instancemethod(_SnapTime.TFltV_Trunc, None, TFltV)
TFltV.Reduce = new_instancemethod(_SnapTime.TFltV_Reduce, None, TFltV)
TFltV.Pack = new_instancemethod(_SnapTime.TFltV_Pack, None, TFltV)
TFltV.MoveFrom = new_instancemethod(_SnapTime.TFltV_MoveFrom, None, TFltV)
TFltV.CopyUniqueFrom = new_instancemethod(_SnapTime.TFltV_CopyUniqueFrom, None, TFltV)
TFltV.Empty = new_instancemethod(_SnapTime.TFltV_Empty, None, TFltV)
TFltV.Len = new_instancemethod(_SnapTime.TFltV_Len, None, TFltV)
TFltV.Reserved = new_instancemethod(_SnapTime.TFltV_Reserved, None, TFltV)
TFltV.Last = new_instancemethod(_SnapTime.TFltV_Last, None, TFltV)
TFltV.LastValN = new_instancemethod(_SnapTime.TFltV_LastValN, None, TFltV)
TFltV.LastLast = new_instancemethod(_SnapTime.TFltV_LastLast, None, TFltV)
TFltV.GetRndVal = new_instancemethod(_SnapTime.TFltV_GetRndVal, None, TFltV)
TFltV.BegI = new_instancemethod(_SnapTime.TFltV_BegI, None, TFltV)
TFltV.begin = new_instancemethod(_SnapTime.TFltV_begin, None, TFltV)
TFltV.EndI = new_instancemethod(_SnapTime.TFltV_EndI, None, TFltV)
TFltV.end = new_instancemethod(_SnapTime.TFltV_end, None, TFltV)
TFltV.GetI = new_instancemethod(_SnapTime.TFltV_GetI, None, TFltV)
TFltV.Add = new_instancemethod(_SnapTime.TFltV_Add, None, TFltV)
TFltV.AddMP = new_instancemethod(_SnapTime.TFltV_AddMP, None, TFltV)
TFltV.MoveLastMP = new_instancemethod(_SnapTime.TFltV_MoveLastMP, None, TFltV)
TFltV.AddV = new_instancemethod(_SnapTime.TFltV_AddV, None, TFltV)
TFltV.AddSorted = new_instancemethod(_SnapTime.TFltV_AddSorted, None, TFltV)
TFltV.AddBackSorted = new_instancemethod(_SnapTime.TFltV_AddBackSorted, None, TFltV)
TFltV.AddMerged = new_instancemethod(_SnapTime.TFltV_AddMerged, None, TFltV)
TFltV.AddVMerged = new_instancemethod(_SnapTime.TFltV_AddVMerged, None, TFltV)
TFltV.AddUnique = new_instancemethod(_SnapTime.TFltV_AddUnique, None, TFltV)
TFltV.GetVal = new_instancemethod(_SnapTime.TFltV_GetVal, None, TFltV)
TFltV.SetVal = new_instancemethod(_SnapTime.TFltV_SetVal, None, TFltV)
TFltV.GetSubValV = new_instancemethod(_SnapTime.TFltV_GetSubValV, None, TFltV)
TFltV.Ins = new_instancemethod(_SnapTime.TFltV_Ins, None, TFltV)
TFltV.Del = new_instancemethod(_SnapTime.TFltV_Del, None, TFltV)
TFltV.DelLast = new_instancemethod(_SnapTime.TFltV_DelLast, None, TFltV)
TFltV.DelIfIn = new_instancemethod(_SnapTime.TFltV_DelIfIn, None, TFltV)
TFltV.DelAll = new_instancemethod(_SnapTime.TFltV_DelAll, None, TFltV)
TFltV.PutAll = new_instancemethod(_SnapTime.TFltV_PutAll, None, TFltV)
TFltV.Move = new_instancemethod(_SnapTime.TFltV_Move, None, TFltV)
TFltV.Swap = new_instancemethod(_SnapTime.TFltV_Swap, None, TFltV)
TFltV.Get32BitVector = new_instancemethod(_SnapTime.TFltV_Get32BitVector, None, TFltV)
TFltV.NextPerm = new_instancemethod(_SnapTime.TFltV_NextPerm, None, TFltV)
TFltV.PrevPerm = new_instancemethod(_SnapTime.TFltV_PrevPerm, None, TFltV)
TFltV.GetPivotValN = new_instancemethod(_SnapTime.TFltV_GetPivotValN, None, TFltV)
TFltV.BSort = new_instancemethod(_SnapTime.TFltV_BSort, None, TFltV)
TFltV.ISort = new_instancemethod(_SnapTime.TFltV_ISort, None, TFltV)
TFltV.Partition = new_instancemethod(_SnapTime.TFltV_Partition, None, TFltV)
TFltV.QSort = new_instancemethod(_SnapTime.TFltV_QSort, None, TFltV)
TFltV.Sort = new_instancemethod(_SnapTime.TFltV_Sort, None, TFltV)
TFltV.IsSorted = new_instancemethod(_SnapTime.TFltV_IsSorted, None, TFltV)
TFltV.Shuffle = new_instancemethod(_SnapTime.TFltV_Shuffle, None, TFltV)
TFltV.Reverse = new_instancemethod(_SnapTime.TFltV_Reverse, None, TFltV)
TFltV.Merge = new_instancemethod(_SnapTime.TFltV_Merge, None, TFltV)
TFltV.Intrs = new_instancemethod(_SnapTime.TFltV_Intrs, None, TFltV)
TFltV.Union = new_instancemethod(_SnapTime.TFltV_Union, None, TFltV)
TFltV.Diff = new_instancemethod(_SnapTime.TFltV_Diff, None, TFltV)
TFltV.IntrsLen = new_instancemethod(_SnapTime.TFltV_IntrsLen, None, TFltV)
TFltV.UnionLen = new_instancemethod(_SnapTime.TFltV_UnionLen, None, TFltV)
TFltV.Count = new_instancemethod(_SnapTime.TFltV_Count, None, TFltV)
TFltV.SearchBin = new_instancemethod(_SnapTime.TFltV_SearchBin, None, TFltV)
TFltV.SearchBinLeft = new_instancemethod(_SnapTime.TFltV_SearchBinLeft, None, TFltV)
TFltV.SearchForw = new_instancemethod(_SnapTime.TFltV_SearchForw, None, TFltV)
TFltV.SearchBack = new_instancemethod(_SnapTime.TFltV_SearchBack, None, TFltV)
TFltV.SearchVForw = new_instancemethod(_SnapTime.TFltV_SearchVForw, None, TFltV)
TFltV.IsIn = new_instancemethod(_SnapTime.TFltV_IsIn, None, TFltV)
TFltV.IsInBin = new_instancemethod(_SnapTime.TFltV_IsInBin, None, TFltV)
TFltV.GetDat = new_instancemethod(_SnapTime.TFltV_GetDat, None, TFltV)
TFltV.GetAddDat = new_instancemethod(_SnapTime.TFltV_GetAddDat, None, TFltV)
TFltV.GetMxValN = new_instancemethod(_SnapTime.TFltV_GetMxValN, None, TFltV)
TFltV_swigregister = _SnapTime.TFltV_swigregister
TFltV_swigregister(TFltV)

def TFltV_SwapI(LVal, RVal):
    """
    TFltV_SwapI(TFlt LVal, TFlt RVal)

    Parameters
    ----------
    LVal: TVec< TFlt >::TIter
    RVal: TVec< TFlt >::TIter

    """
    return _SnapTime.TFltV_SwapI(LVal, RVal)

def TFltV_GetV(*args):
    """
    GetV(TFlt Val1) -> TFltV

    Parameters
    ----------
    Val1: TFlt const &

    GetV(TFlt Val1, TFlt Val2) -> TFltV

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3) -> TFltV

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &
    Val3: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4) -> TFltV

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &
    Val3: TFlt const &
    Val4: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5) -> TFltV

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &
    Val3: TFlt const &
    Val4: TFlt const &
    Val5: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6) -> TFltV

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &
    Val3: TFlt const &
    Val4: TFlt const &
    Val5: TFlt const &
    Val6: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7) -> TFltV

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &
    Val3: TFlt const &
    Val4: TFlt const &
    Val5: TFlt const &
    Val6: TFlt const &
    Val7: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7, TFlt Val8) -> TFltV

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &
    Val3: TFlt const &
    Val4: TFlt const &
    Val5: TFlt const &
    Val6: TFlt const &
    Val7: TFlt const &
    Val8: TFlt const &

    TFltV_GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7, TFlt Val8, TFlt Val9) -> TFltV

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &
    Val3: TFlt const &
    Val4: TFlt const &
    Val5: TFlt const &
    Val6: TFlt const &
    Val7: TFlt const &
    Val8: TFlt const &
    Val9: TFlt const &

    """
    return _SnapTime.TFltV_GetV(*args)

class TFlt64V(object):
    """Proxy of C++ TVec<(TFlt,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TFlt64V

    def __init__(self, *args):
        """
        __init__(TVec<(TFlt,int64)> self) -> TFlt64V
        __init__(TVec<(TFlt,int64)> self, TFlt64V Vec) -> TFlt64V

        Parameters
        ----------
        Vec: TVec< TFlt,long long > const &

        __init__(TVec<(TFlt,int64)> self, TFlt64V Vec) -> TFlt64V

        Parameters
        ----------
        Vec: TVec< TFlt,long long > &&

        __init__(TVec<(TFlt,int64)> self, long long const & _Vals) -> TFlt64V

        Parameters
        ----------
        _Vals: long long const &

        __init__(TVec<(TFlt,int64)> self, long long const & _MxVals, long long const & _Vals) -> TFlt64V

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        __init__(TVec<(TFlt,int64)> self, long long const & _MxVals, long long const & _Vals, TFlt Dat) -> TFlt64V

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &
        Dat: TFlt

        __init__(TVec<(TFlt,int64)> self, TFlt _ValT, long long const & _Vals) -> TFlt64V

        Parameters
        ----------
        _ValT: TFlt *
        _Vals: long long const &

        __init__(TVec<(TFlt,int64)> self, TSIn SIn) -> TFlt64V

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TFlt64V_swiginit(self, _SnapTime.new_TFlt64V(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TFlt64V self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TFlt64V_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TFlt64V self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TFlt64V_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TFlt64V self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TFlt64V_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TFlt64V self, TFlt Val) -> TFlt64V

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TFlt64V self, TFlt64V Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TFlt,long long > const &

        """
        return _SnapTime.TFlt64V___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TFlt64V self, TFlt64V Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TFlt,long long > const &

        """
        return _SnapTime.TFlt64V___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TFlt64V self) -> long long

        Parameters
        ----------
        self: TVec< TFlt,int64 > const *

        """
        return _SnapTime.TFlt64V_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TFlt64V self) -> long long

        Parameters
        ----------
        self: TVec< TFlt,int64 > const *

        """
        return _SnapTime.TFlt64V_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TFlt64V self) -> int

        Parameters
        ----------
        self: TVec< TFlt,int64 > const *

        """
        return _SnapTime.TFlt64V_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TFlt64V self) -> int

        Parameters
        ----------
        self: TVec< TFlt,int64 > const *

        """
        return _SnapTime.TFlt64V_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TFlt64V self, long long const & _Vals)

        Parameters
        ----------
        _Vals: long long const &

        Gen(TFlt64V self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TFlt64V_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TFlt64V self, TFlt _ValT, long long const & _Vals)

        Parameters
        ----------
        _ValT: TFlt *
        _Vals: long long const &

        """
        return _SnapTime.TFlt64V_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TFlt64V self) -> bool

        Parameters
        ----------
        self: TVec< TFlt,int64 > const *

        """
        return _SnapTime.TFlt64V_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TFlt64V self, long long const & _MxVals)

        Parameters
        ----------
        _MxVals: long long const &

        Reserve(TFlt64V self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TFlt64V_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TFlt64V self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(TFlt64V self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TFlt64V self)

        Parameters
        ----------
        self: TVec< TFlt,int64 > *

        """
        return _SnapTime.TFlt64V_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TFlt64V self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Trunc(TFlt64V self)

        Parameters
        ----------
        self: TVec< TFlt,int64 > *

        """
        return _SnapTime.TFlt64V_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TFlt64V self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Reduce(TFlt64V self)

        Parameters
        ----------
        self: TVec< TFlt,int64 > *

        """
        return _SnapTime.TFlt64V_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TFlt64V self)

        Parameters
        ----------
        self: TVec< TFlt,int64 > *

        """
        return _SnapTime.TFlt64V_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TFlt64V self, TFlt64V Vec)

        Parameters
        ----------
        Vec: TVec< TFlt,long long > &

        """
        return _SnapTime.TFlt64V_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TFlt64V self, TFlt64V Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TFlt,long long > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TFlt64V_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TFlt64V self) -> bool

        Parameters
        ----------
        self: TVec< TFlt,int64 > const *

        """
        return _SnapTime.TFlt64V_Empty(self)


    def Len(self):
        """
        Len(TFlt64V self) -> long long

        Parameters
        ----------
        self: TVec< TFlt,int64 > const *

        """
        return _SnapTime.TFlt64V_Len(self)


    def Reserved(self):
        """
        Reserved(TFlt64V self) -> long long

        Parameters
        ----------
        self: TVec< TFlt,int64 > const *

        """
        return _SnapTime.TFlt64V_Reserved(self)


    def Last(self, *args):
        """
        Last(TFlt64V self) -> TFlt
        Last(TFlt64V self) -> TFlt

        Parameters
        ----------
        self: TVec< TFlt,int64 > *

        """
        return _SnapTime.TFlt64V_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TFlt64V self) -> long long

        Parameters
        ----------
        self: TVec< TFlt,int64 > const *

        """
        return _SnapTime.TFlt64V_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TFlt64V self) -> TFlt
        LastLast(TFlt64V self) -> TFlt

        Parameters
        ----------
        self: TVec< TFlt,int64 > *

        """
        return _SnapTime.TFlt64V_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TFlt64V self, TRnd Rnd) -> TFlt

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TFlt64V self) -> TFlt
        GetRndVal(TFlt64V self, TRnd Rnd) -> TFlt

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TFlt64V self) -> TFlt

        Parameters
        ----------
        self: TVec< TFlt,int64 > *

        """
        return _SnapTime.TFlt64V_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TFlt64V self) -> TFlt

        Parameters
        ----------
        self: TVec< TFlt,int64 > const *

        """
        return _SnapTime.TFlt64V_BegI(self)


    def begin(self):
        """
        begin(TFlt64V self) -> TFlt

        Parameters
        ----------
        self: TVec< TFlt,int64 > const *

        """
        return _SnapTime.TFlt64V_begin(self)


    def EndI(self):
        """
        EndI(TFlt64V self) -> TFlt

        Parameters
        ----------
        self: TVec< TFlt,int64 > const *

        """
        return _SnapTime.TFlt64V_EndI(self)


    def end(self):
        """
        end(TFlt64V self) -> TFlt

        Parameters
        ----------
        self: TVec< TFlt,int64 > const *

        """
        return _SnapTime.TFlt64V_end(self)


    def GetI(self, ValN):
        """
        GetI(TFlt64V self, long long const & ValN) -> TFlt

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TFlt64V_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TFlt64V self) -> long long
        Add(TFlt64V self, TFlt Val) -> long long

        Parameters
        ----------
        Val: TFlt const &

        Add(TFlt64V self, TFlt Val) -> long long

        Parameters
        ----------
        Val: TFlt &

        Add(TFlt64V self, TFlt Val, long long const & ResizeLen) -> long long

        Parameters
        ----------
        Val: TFlt const &
        ResizeLen: long long const &

        """
        return _SnapTime.TFlt64V_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TFlt64V self, TFlt Val) -> long long

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TFlt64V self, TFlt Val, int Inc) -> long long

        Parameters
        ----------
        Val: TFlt const &
        Inc: int

        """
        return _SnapTime.TFlt64V_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TFlt64V self, TFlt64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TFlt,long long > const &

        """
        return _SnapTime.TFlt64V_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TFlt64V self, TFlt Val, bool const & Asc=True, long long const & _MxVals=-1) -> long long

        Parameters
        ----------
        Val: TFlt const &
        Asc: bool const &
        _MxVals: long long const &

        AddSorted(TFlt64V self, TFlt Val, bool const & Asc=True) -> long long

        Parameters
        ----------
        Val: TFlt const &
        Asc: bool const &

        AddSorted(TFlt64V self, TFlt Val) -> long long

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TFlt64V self, TFlt Val, bool const & Asc) -> long long

        Parameters
        ----------
        Val: TFlt const &
        Asc: bool const &

        """
        return _SnapTime.TFlt64V_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TFlt64V self, TFlt Val) -> long long

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TFlt64V self, TFlt64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TFlt,long long > const &

        """
        return _SnapTime.TFlt64V_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TFlt64V self, TFlt Val) -> long long

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TFlt64V self, long long const & ValN) -> TFlt

        Parameters
        ----------
        ValN: long long const &

        GetVal(TFlt64V self, long long const & ValN) -> TFlt

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TFlt64V_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TFlt64V self, long long const & ValN, TFlt Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TFlt64V self, long long const & BValN, long long const & EValN, TFlt64V ValV)

        Parameters
        ----------
        BValN: long long const &
        EValN: long long const &
        ValV: TVec< TFlt,long long > &

        """
        return _SnapTime.TFlt64V_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TFlt64V self, long long const & ValN, TFlt Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TFlt64V self, long long const & ValN)

        Parameters
        ----------
        ValN: long long const &

        Del(TFlt64V self, long long const & MnValN, long long const & MxValN)

        Parameters
        ----------
        MnValN: long long const &
        MxValN: long long const &

        """
        return _SnapTime.TFlt64V_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TFlt64V self)

        Parameters
        ----------
        self: TVec< TFlt,int64 > *

        """
        return _SnapTime.TFlt64V_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TFlt64V self, TFlt Val) -> bool

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TFlt64V self, TFlt Val)

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TFlt64V self, TFlt Val)

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TFlt64V self, long long const & FromValN, long long const & ToValN)

        Parameters
        ----------
        FromValN: long long const &
        ToValN: long long const &

        """
        return _SnapTime.TFlt64V_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TFlt64V self, TFlt64V Vec)

        Parameters
        ----------
        Vec: TVec< TFlt,long long > &

        Swap(TFlt64V self, long long const & ValN1, long long const & ValN2)

        Parameters
        ----------
        ValN1: long long const &
        ValN2: long long const &

        """
        return _SnapTime.TFlt64V_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TFlt LVal, TFlt RVal)

        Parameters
        ----------
        LVal: TVec< TFlt,long long >::TIter
        RVal: TVec< TFlt,long long >::TIter

        """
        return _SnapTime.TFlt64V_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TFlt64V self) -> TFltV

        Parameters
        ----------
        self: TVec< TFlt,int64 > *

        """
        return _SnapTime.TFlt64V_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TFlt64V self) -> bool

        Parameters
        ----------
        self: TVec< TFlt,int64 > *

        """
        return _SnapTime.TFlt64V_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TFlt64V self) -> bool

        Parameters
        ----------
        self: TVec< TFlt,int64 > *

        """
        return _SnapTime.TFlt64V_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TFlt64V self, long long const & LValN, long long const & RValN) -> long long

        Parameters
        ----------
        LValN: long long const &
        RValN: long long const &

        """
        return _SnapTime.TFlt64V_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TFlt64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TFlt64V_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TFlt64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TFlt64V_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TFlt64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc) -> long long

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TFlt64V_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TFlt64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TFlt64V_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TFlt64V self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TFlt64V self)

        Parameters
        ----------
        self: TVec< TFlt,int64 > *

        """
        return _SnapTime.TFlt64V_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TFlt64V self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TFlt64V self) -> bool

        Parameters
        ----------
        self: TVec< TFlt,int64 > const *

        """
        return _SnapTime.TFlt64V_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TFlt64V self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TFlt64V_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TFlt64V self)
        Reverse(TFlt64V self, long long LValN, long long RValN)

        Parameters
        ----------
        LValN: long long
        RValN: long long

        """
        return _SnapTime.TFlt64V_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TFlt64V self)

        Parameters
        ----------
        self: TVec< TFlt,int64 > *

        """
        return _SnapTime.TFlt64V_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TFlt64V self, TFlt64V ValV)

        Parameters
        ----------
        ValV: TVec< TFlt,long long > const &

        Intrs(TFlt64V self, TFlt64V ValV, TFlt64V DstValV)

        Parameters
        ----------
        ValV: TVec< TFlt,long long > const &
        DstValV: TVec< TFlt,long long > &

        """
        return _SnapTime.TFlt64V_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TFlt64V self, TFlt64V ValV)

        Parameters
        ----------
        ValV: TVec< TFlt,long long > const &

        Union(TFlt64V self, TFlt64V ValV, TFlt64V DstValV)

        Parameters
        ----------
        ValV: TVec< TFlt,long long > const &
        DstValV: TVec< TFlt,long long > &

        """
        return _SnapTime.TFlt64V_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TFlt64V self, TFlt64V ValV)

        Parameters
        ----------
        ValV: TVec< TFlt,long long > const &

        Diff(TFlt64V self, TFlt64V ValV, TFlt64V DstValV)

        Parameters
        ----------
        ValV: TVec< TFlt,long long > const &
        DstValV: TVec< TFlt,long long > &

        """
        return _SnapTime.TFlt64V_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TFlt64V self, TFlt64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TFlt,long long > const &

        """
        return _SnapTime.TFlt64V_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TFlt64V self, TFlt64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TFlt,long long > const &

        """
        return _SnapTime.TFlt64V_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TFlt64V self, TFlt Val) -> long long

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TFlt64V self, TFlt Val) -> long long

        Parameters
        ----------
        Val: TFlt const &

        SearchBin(TFlt64V self, TFlt Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TFlt const &
        InsValN: long long &

        """
        return _SnapTime.TFlt64V_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TFlt64V self, TFlt Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TFlt const &
        InsValN: long long &

        """
        return _SnapTime.TFlt64V_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TFlt64V self, TFlt Val, long long const & BValN=0) -> long long

        Parameters
        ----------
        Val: TFlt const &
        BValN: long long const &

        SearchForw(TFlt64V self, TFlt Val) -> long long

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TFlt64V self, TFlt Val) -> long long

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TFlt64V self, TFlt64V ValV, long long const & BValN=0) -> long long

        Parameters
        ----------
        ValV: TVec< TFlt,long long > const &
        BValN: long long const &

        SearchVForw(TFlt64V self, TFlt64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TFlt,long long > const &

        """
        return _SnapTime.TFlt64V_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TFlt64V self, TFlt Val) -> bool

        Parameters
        ----------
        Val: TFlt const &

        IsIn(TFlt64V self, TFlt Val, long long & ValN) -> bool

        Parameters
        ----------
        Val: TFlt const &
        ValN: long long &

        """
        return _SnapTime.TFlt64V_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TFlt64V self, TFlt Val) -> bool

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TFlt64V self, TFlt Val) -> TFlt

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TFlt64V self, TFlt Val) -> TFlt

        Parameters
        ----------
        Val: TFlt const &

        """
        return _SnapTime.TFlt64V_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TFlt64V self) -> long long

        Parameters
        ----------
        self: TVec< TFlt,int64 > const *

        """
        return _SnapTime.TFlt64V_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TFlt Val1) -> TFlt64V

        Parameters
        ----------
        Val1: TFlt const &

        GetV(TFlt Val1, TFlt Val2) -> TFlt64V

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3) -> TFlt64V

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4) -> TFlt64V

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5) -> TFlt64V

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &
        Val5: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6) -> TFlt64V

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &
        Val5: TFlt const &
        Val6: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7) -> TFlt64V

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &
        Val5: TFlt const &
        Val6: TFlt const &
        Val7: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7, TFlt Val8) -> TFlt64V

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &
        Val5: TFlt const &
        Val6: TFlt const &
        Val7: TFlt const &
        Val8: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7, TFlt Val8, TFlt Val9) -> TFlt64V

        Parameters
        ----------
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &
        Val5: TFlt const &
        Val6: TFlt const &
        Val7: TFlt const &
        Val8: TFlt const &
        Val9: TFlt const &

        """
        return _SnapTime.TFlt64V_GetV(*args)

    GetV = staticmethod(GetV)
TFlt64V.LoadShM = new_instancemethod(_SnapTime.TFlt64V_LoadShM, None, TFlt64V)
TFlt64V.Load = new_instancemethod(_SnapTime.TFlt64V_Load, None, TFlt64V)
TFlt64V.Save = new_instancemethod(_SnapTime.TFlt64V_Save, None, TFlt64V)
TFlt64V.__add__ = new_instancemethod(_SnapTime.TFlt64V___add__, None, TFlt64V)
TFlt64V.__eq__ = new_instancemethod(_SnapTime.TFlt64V___eq__, None, TFlt64V)
TFlt64V.__lt__ = new_instancemethod(_SnapTime.TFlt64V___lt__, None, TFlt64V)
TFlt64V.GetMemUsed = new_instancemethod(_SnapTime.TFlt64V_GetMemUsed, None, TFlt64V)
TFlt64V.GetMemSize = new_instancemethod(_SnapTime.TFlt64V_GetMemSize, None, TFlt64V)
TFlt64V.GetPrimHashCd = new_instancemethod(_SnapTime.TFlt64V_GetPrimHashCd, None, TFlt64V)
TFlt64V.GetSecHashCd = new_instancemethod(_SnapTime.TFlt64V_GetSecHashCd, None, TFlt64V)
TFlt64V.Gen = new_instancemethod(_SnapTime.TFlt64V_Gen, None, TFlt64V)
TFlt64V.GenExt = new_instancemethod(_SnapTime.TFlt64V_GenExt, None, TFlt64V)
TFlt64V.IsExt = new_instancemethod(_SnapTime.TFlt64V_IsExt, None, TFlt64V)
TFlt64V.Reserve = new_instancemethod(_SnapTime.TFlt64V_Reserve, None, TFlt64V)
TFlt64V.Clr = new_instancemethod(_SnapTime.TFlt64V_Clr, None, TFlt64V)
TFlt64V.Trunc = new_instancemethod(_SnapTime.TFlt64V_Trunc, None, TFlt64V)
TFlt64V.Reduce = new_instancemethod(_SnapTime.TFlt64V_Reduce, None, TFlt64V)
TFlt64V.Pack = new_instancemethod(_SnapTime.TFlt64V_Pack, None, TFlt64V)
TFlt64V.MoveFrom = new_instancemethod(_SnapTime.TFlt64V_MoveFrom, None, TFlt64V)
TFlt64V.CopyUniqueFrom = new_instancemethod(_SnapTime.TFlt64V_CopyUniqueFrom, None, TFlt64V)
TFlt64V.Empty = new_instancemethod(_SnapTime.TFlt64V_Empty, None, TFlt64V)
TFlt64V.Len = new_instancemethod(_SnapTime.TFlt64V_Len, None, TFlt64V)
TFlt64V.Reserved = new_instancemethod(_SnapTime.TFlt64V_Reserved, None, TFlt64V)
TFlt64V.Last = new_instancemethod(_SnapTime.TFlt64V_Last, None, TFlt64V)
TFlt64V.LastValN = new_instancemethod(_SnapTime.TFlt64V_LastValN, None, TFlt64V)
TFlt64V.LastLast = new_instancemethod(_SnapTime.TFlt64V_LastLast, None, TFlt64V)
TFlt64V.GetRndVal = new_instancemethod(_SnapTime.TFlt64V_GetRndVal, None, TFlt64V)
TFlt64V.BegI = new_instancemethod(_SnapTime.TFlt64V_BegI, None, TFlt64V)
TFlt64V.begin = new_instancemethod(_SnapTime.TFlt64V_begin, None, TFlt64V)
TFlt64V.EndI = new_instancemethod(_SnapTime.TFlt64V_EndI, None, TFlt64V)
TFlt64V.end = new_instancemethod(_SnapTime.TFlt64V_end, None, TFlt64V)
TFlt64V.GetI = new_instancemethod(_SnapTime.TFlt64V_GetI, None, TFlt64V)
TFlt64V.Add = new_instancemethod(_SnapTime.TFlt64V_Add, None, TFlt64V)
TFlt64V.AddMP = new_instancemethod(_SnapTime.TFlt64V_AddMP, None, TFlt64V)
TFlt64V.MoveLastMP = new_instancemethod(_SnapTime.TFlt64V_MoveLastMP, None, TFlt64V)
TFlt64V.AddV = new_instancemethod(_SnapTime.TFlt64V_AddV, None, TFlt64V)
TFlt64V.AddSorted = new_instancemethod(_SnapTime.TFlt64V_AddSorted, None, TFlt64V)
TFlt64V.AddBackSorted = new_instancemethod(_SnapTime.TFlt64V_AddBackSorted, None, TFlt64V)
TFlt64V.AddMerged = new_instancemethod(_SnapTime.TFlt64V_AddMerged, None, TFlt64V)
TFlt64V.AddVMerged = new_instancemethod(_SnapTime.TFlt64V_AddVMerged, None, TFlt64V)
TFlt64V.AddUnique = new_instancemethod(_SnapTime.TFlt64V_AddUnique, None, TFlt64V)
TFlt64V.GetVal = new_instancemethod(_SnapTime.TFlt64V_GetVal, None, TFlt64V)
TFlt64V.SetVal = new_instancemethod(_SnapTime.TFlt64V_SetVal, None, TFlt64V)
TFlt64V.GetSubValV = new_instancemethod(_SnapTime.TFlt64V_GetSubValV, None, TFlt64V)
TFlt64V.Ins = new_instancemethod(_SnapTime.TFlt64V_Ins, None, TFlt64V)
TFlt64V.Del = new_instancemethod(_SnapTime.TFlt64V_Del, None, TFlt64V)
TFlt64V.DelLast = new_instancemethod(_SnapTime.TFlt64V_DelLast, None, TFlt64V)
TFlt64V.DelIfIn = new_instancemethod(_SnapTime.TFlt64V_DelIfIn, None, TFlt64V)
TFlt64V.DelAll = new_instancemethod(_SnapTime.TFlt64V_DelAll, None, TFlt64V)
TFlt64V.PutAll = new_instancemethod(_SnapTime.TFlt64V_PutAll, None, TFlt64V)
TFlt64V.Move = new_instancemethod(_SnapTime.TFlt64V_Move, None, TFlt64V)
TFlt64V.Swap = new_instancemethod(_SnapTime.TFlt64V_Swap, None, TFlt64V)
TFlt64V.Get32BitVector = new_instancemethod(_SnapTime.TFlt64V_Get32BitVector, None, TFlt64V)
TFlt64V.NextPerm = new_instancemethod(_SnapTime.TFlt64V_NextPerm, None, TFlt64V)
TFlt64V.PrevPerm = new_instancemethod(_SnapTime.TFlt64V_PrevPerm, None, TFlt64V)
TFlt64V.GetPivotValN = new_instancemethod(_SnapTime.TFlt64V_GetPivotValN, None, TFlt64V)
TFlt64V.BSort = new_instancemethod(_SnapTime.TFlt64V_BSort, None, TFlt64V)
TFlt64V.ISort = new_instancemethod(_SnapTime.TFlt64V_ISort, None, TFlt64V)
TFlt64V.Partition = new_instancemethod(_SnapTime.TFlt64V_Partition, None, TFlt64V)
TFlt64V.QSort = new_instancemethod(_SnapTime.TFlt64V_QSort, None, TFlt64V)
TFlt64V.Sort = new_instancemethod(_SnapTime.TFlt64V_Sort, None, TFlt64V)
TFlt64V.IsSorted = new_instancemethod(_SnapTime.TFlt64V_IsSorted, None, TFlt64V)
TFlt64V.Shuffle = new_instancemethod(_SnapTime.TFlt64V_Shuffle, None, TFlt64V)
TFlt64V.Reverse = new_instancemethod(_SnapTime.TFlt64V_Reverse, None, TFlt64V)
TFlt64V.Merge = new_instancemethod(_SnapTime.TFlt64V_Merge, None, TFlt64V)
TFlt64V.Intrs = new_instancemethod(_SnapTime.TFlt64V_Intrs, None, TFlt64V)
TFlt64V.Union = new_instancemethod(_SnapTime.TFlt64V_Union, None, TFlt64V)
TFlt64V.Diff = new_instancemethod(_SnapTime.TFlt64V_Diff, None, TFlt64V)
TFlt64V.IntrsLen = new_instancemethod(_SnapTime.TFlt64V_IntrsLen, None, TFlt64V)
TFlt64V.UnionLen = new_instancemethod(_SnapTime.TFlt64V_UnionLen, None, TFlt64V)
TFlt64V.Count = new_instancemethod(_SnapTime.TFlt64V_Count, None, TFlt64V)
TFlt64V.SearchBin = new_instancemethod(_SnapTime.TFlt64V_SearchBin, None, TFlt64V)
TFlt64V.SearchBinLeft = new_instancemethod(_SnapTime.TFlt64V_SearchBinLeft, None, TFlt64V)
TFlt64V.SearchForw = new_instancemethod(_SnapTime.TFlt64V_SearchForw, None, TFlt64V)
TFlt64V.SearchBack = new_instancemethod(_SnapTime.TFlt64V_SearchBack, None, TFlt64V)
TFlt64V.SearchVForw = new_instancemethod(_SnapTime.TFlt64V_SearchVForw, None, TFlt64V)
TFlt64V.IsIn = new_instancemethod(_SnapTime.TFlt64V_IsIn, None, TFlt64V)
TFlt64V.IsInBin = new_instancemethod(_SnapTime.TFlt64V_IsInBin, None, TFlt64V)
TFlt64V.GetDat = new_instancemethod(_SnapTime.TFlt64V_GetDat, None, TFlt64V)
TFlt64V.GetAddDat = new_instancemethod(_SnapTime.TFlt64V_GetAddDat, None, TFlt64V)
TFlt64V.GetMxValN = new_instancemethod(_SnapTime.TFlt64V_GetMxValN, None, TFlt64V)
TFlt64V_swigregister = _SnapTime.TFlt64V_swigregister
TFlt64V_swigregister(TFlt64V)

def TFlt64V_SwapI(LVal, RVal):
    """
    TFlt64V_SwapI(TFlt LVal, TFlt RVal)

    Parameters
    ----------
    LVal: TVec< TFlt,long long >::TIter
    RVal: TVec< TFlt,long long >::TIter

    """
    return _SnapTime.TFlt64V_SwapI(LVal, RVal)

def TFlt64V_GetV(*args):
    """
    GetV(TFlt Val1) -> TFlt64V

    Parameters
    ----------
    Val1: TFlt const &

    GetV(TFlt Val1, TFlt Val2) -> TFlt64V

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3) -> TFlt64V

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &
    Val3: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4) -> TFlt64V

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &
    Val3: TFlt const &
    Val4: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5) -> TFlt64V

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &
    Val3: TFlt const &
    Val4: TFlt const &
    Val5: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6) -> TFlt64V

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &
    Val3: TFlt const &
    Val4: TFlt const &
    Val5: TFlt const &
    Val6: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7) -> TFlt64V

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &
    Val3: TFlt const &
    Val4: TFlt const &
    Val5: TFlt const &
    Val6: TFlt const &
    Val7: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7, TFlt Val8) -> TFlt64V

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &
    Val3: TFlt const &
    Val4: TFlt const &
    Val5: TFlt const &
    Val6: TFlt const &
    Val7: TFlt const &
    Val8: TFlt const &

    TFlt64V_GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7, TFlt Val8, TFlt Val9) -> TFlt64V

    Parameters
    ----------
    Val1: TFlt const &
    Val2: TFlt const &
    Val3: TFlt const &
    Val4: TFlt const &
    Val5: TFlt const &
    Val6: TFlt const &
    Val7: TFlt const &
    Val8: TFlt const &
    Val9: TFlt const &

    """
    return _SnapTime.TFlt64V_GetV(*args)

class TStrV(object):
    """Proxy of C++ TVec<(TStr)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TStrV

    def __init__(self, *args):
        """
        __init__(TVec<(TStr)> self) -> TStrV
        __init__(TVec<(TStr)> self, TStrV Vec) -> TStrV

        Parameters
        ----------
        Vec: TVec< TStr,int > const &

        __init__(TVec<(TStr)> self, TStrV Vec) -> TStrV

        Parameters
        ----------
        Vec: TVec< TStr,int > &&

        __init__(TVec<(TStr)> self, int const & _Vals) -> TStrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TVec<(TStr)> self, int const & _MxVals, int const & _Vals) -> TStrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TVec<(TStr)> self, int const & _MxVals, int const & _Vals, TStr Dat) -> TStrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &
        Dat: TStr

        __init__(TVec<(TStr)> self, TStr _ValT, int const & _Vals) -> TStrV

        Parameters
        ----------
        _ValT: TStr *
        _Vals: int const &

        __init__(TVec<(TStr)> self, TSIn SIn) -> TStrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TStrV_swiginit(self, _SnapTime.new_TStrV(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TStrV self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TStrV_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TStrV self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TStrV_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TStrV self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TStrV_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TStrV self, TStr Val) -> TStrV

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStrV___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TStrV self, TStrV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TStr,int > const &

        """
        return _SnapTime.TStrV___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TStrV self, TStrV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TStr,int > const &

        """
        return _SnapTime.TStrV___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TStrV self) -> int

        Parameters
        ----------
        self: TVec< TStr > const *

        """
        return _SnapTime.TStrV_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TStrV self) -> int

        Parameters
        ----------
        self: TVec< TStr > const *

        """
        return _SnapTime.TStrV_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TStrV self) -> int

        Parameters
        ----------
        self: TVec< TStr > const *

        """
        return _SnapTime.TStrV_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TStrV self) -> int

        Parameters
        ----------
        self: TVec< TStr > const *

        """
        return _SnapTime.TStrV_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TStrV self, int const & _Vals)

        Parameters
        ----------
        _Vals: int const &

        Gen(TStrV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TStrV_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TStrV self, TStr _ValT, int const & _Vals)

        Parameters
        ----------
        _ValT: TStr *
        _Vals: int const &

        """
        return _SnapTime.TStrV_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TStrV self) -> bool

        Parameters
        ----------
        self: TVec< TStr > const *

        """
        return _SnapTime.TStrV_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TStrV self, int const & _MxVals)

        Parameters
        ----------
        _MxVals: int const &

        Reserve(TStrV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TStrV_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TStrV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TStrV self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TStrV self)

        Parameters
        ----------
        self: TVec< TStr > *

        """
        return _SnapTime.TStrV_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TStrV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Trunc(TStrV self)

        Parameters
        ----------
        self: TVec< TStr > *

        """
        return _SnapTime.TStrV_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TStrV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Reduce(TStrV self)

        Parameters
        ----------
        self: TVec< TStr > *

        """
        return _SnapTime.TStrV_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TStrV self)

        Parameters
        ----------
        self: TVec< TStr > *

        """
        return _SnapTime.TStrV_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TStrV self, TStrV Vec)

        Parameters
        ----------
        Vec: TVec< TStr,int > &

        """
        return _SnapTime.TStrV_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TStrV self, TStrV Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TStr,int > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TStrV_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TStrV self) -> bool

        Parameters
        ----------
        self: TVec< TStr > const *

        """
        return _SnapTime.TStrV_Empty(self)


    def Len(self):
        """
        Len(TStrV self) -> int

        Parameters
        ----------
        self: TVec< TStr > const *

        """
        return _SnapTime.TStrV_Len(self)


    def Reserved(self):
        """
        Reserved(TStrV self) -> int

        Parameters
        ----------
        self: TVec< TStr > const *

        """
        return _SnapTime.TStrV_Reserved(self)


    def Last(self, *args):
        """
        Last(TStrV self) -> TStr
        Last(TStrV self) -> TStr

        Parameters
        ----------
        self: TVec< TStr > *

        """
        return _SnapTime.TStrV_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TStrV self) -> int

        Parameters
        ----------
        self: TVec< TStr > const *

        """
        return _SnapTime.TStrV_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TStrV self) -> TStr
        LastLast(TStrV self) -> TStr

        Parameters
        ----------
        self: TVec< TStr > *

        """
        return _SnapTime.TStrV_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TStrV self, TRnd Rnd) -> TStr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TStrV self) -> TStr
        GetRndVal(TStrV self, TRnd Rnd) -> TStr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TStrV self) -> TStr

        Parameters
        ----------
        self: TVec< TStr > *

        """
        return _SnapTime.TStrV_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TStrV self) -> TStr

        Parameters
        ----------
        self: TVec< TStr > const *

        """
        return _SnapTime.TStrV_BegI(self)


    def begin(self):
        """
        begin(TStrV self) -> TStr

        Parameters
        ----------
        self: TVec< TStr > const *

        """
        return _SnapTime.TStrV_begin(self)


    def EndI(self):
        """
        EndI(TStrV self) -> TStr

        Parameters
        ----------
        self: TVec< TStr > const *

        """
        return _SnapTime.TStrV_EndI(self)


    def end(self):
        """
        end(TStrV self) -> TStr

        Parameters
        ----------
        self: TVec< TStr > const *

        """
        return _SnapTime.TStrV_end(self)


    def GetI(self, ValN):
        """
        GetI(TStrV self, int const & ValN) -> TStr

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TStrV_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TStrV self) -> int
        Add(TStrV self, TStr Val) -> int

        Parameters
        ----------
        Val: TStr const &

        Add(TStrV self, TStr Val) -> int

        Parameters
        ----------
        Val: TStr &

        Add(TStrV self, TStr Val, int const & ResizeLen) -> int

        Parameters
        ----------
        Val: TStr const &
        ResizeLen: int const &

        """
        return _SnapTime.TStrV_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TStrV self, TStr Val) -> int

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStrV_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TStrV self, TStr Val, int Inc) -> int

        Parameters
        ----------
        Val: TStr const &
        Inc: int

        """
        return _SnapTime.TStrV_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TStrV self, TStrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TStr,int > const &

        """
        return _SnapTime.TStrV_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TStrV self, TStr Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters
        ----------
        Val: TStr const &
        Asc: bool const &
        _MxVals: int const &

        AddSorted(TStrV self, TStr Val, bool const & Asc=True) -> int

        Parameters
        ----------
        Val: TStr const &
        Asc: bool const &

        AddSorted(TStrV self, TStr Val) -> int

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStrV_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TStrV self, TStr Val, bool const & Asc) -> int

        Parameters
        ----------
        Val: TStr const &
        Asc: bool const &

        """
        return _SnapTime.TStrV_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TStrV self, TStr Val) -> int

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStrV_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TStrV self, TStrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TStr,int > const &

        """
        return _SnapTime.TStrV_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TStrV self, TStr Val) -> int

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStrV_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TStrV self, int const & ValN) -> TStr

        Parameters
        ----------
        ValN: int const &

        GetVal(TStrV self, int const & ValN) -> TStr

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TStrV_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TStrV self, int const & ValN, TStr Val)

        Parameters
        ----------
        ValN: int const &
        Val: TStr const &

        """
        return _SnapTime.TStrV_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TStrV self, int const & BValN, int const & EValN, TStrV ValV)

        Parameters
        ----------
        BValN: int const &
        EValN: int const &
        ValV: TVec< TStr,int > &

        """
        return _SnapTime.TStrV_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TStrV self, int const & ValN, TStr Val)

        Parameters
        ----------
        ValN: int const &
        Val: TStr const &

        """
        return _SnapTime.TStrV_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TStrV self, int const & ValN)

        Parameters
        ----------
        ValN: int const &

        Del(TStrV self, int const & MnValN, int const & MxValN)

        Parameters
        ----------
        MnValN: int const &
        MxValN: int const &

        """
        return _SnapTime.TStrV_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TStrV self)

        Parameters
        ----------
        self: TVec< TStr > *

        """
        return _SnapTime.TStrV_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TStrV self, TStr Val) -> bool

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStrV_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TStrV self, TStr Val)

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStrV_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TStrV self, TStr Val)

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStrV_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TStrV self, int const & FromValN, int const & ToValN)

        Parameters
        ----------
        FromValN: int const &
        ToValN: int const &

        """
        return _SnapTime.TStrV_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TStrV self, TStrV Vec)

        Parameters
        ----------
        Vec: TVec< TStr,int > &

        Swap(TStrV self, int const & ValN1, int const & ValN2)

        Parameters
        ----------
        ValN1: int const &
        ValN2: int const &

        """
        return _SnapTime.TStrV_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TStr LVal, TStr RVal)

        Parameters
        ----------
        LVal: TVec< TStr >::TIter
        RVal: TVec< TStr >::TIter

        """
        return _SnapTime.TStrV_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TStrV self) -> TStrV

        Parameters
        ----------
        self: TVec< TStr > *

        """
        return _SnapTime.TStrV_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TStrV self) -> bool

        Parameters
        ----------
        self: TVec< TStr > *

        """
        return _SnapTime.TStrV_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TStrV self) -> bool

        Parameters
        ----------
        self: TVec< TStr > *

        """
        return _SnapTime.TStrV_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TStrV self, int const & LValN, int const & RValN) -> int

        Parameters
        ----------
        LValN: int const &
        RValN: int const &

        """
        return _SnapTime.TStrV_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TStrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TStrV_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TStrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TStrV_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TStrV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TStrV_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TStrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TStrV_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TStrV self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TStrV self)

        Parameters
        ----------
        self: TVec< TStr > *

        """
        return _SnapTime.TStrV_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TStrV self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TStrV self) -> bool

        Parameters
        ----------
        self: TVec< TStr > const *

        """
        return _SnapTime.TStrV_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TStrV self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TStrV_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TStrV self)
        Reverse(TStrV self, int LValN, int RValN)

        Parameters
        ----------
        LValN: int
        RValN: int

        """
        return _SnapTime.TStrV_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TStrV self)

        Parameters
        ----------
        self: TVec< TStr > *

        """
        return _SnapTime.TStrV_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TStrV self, TStrV ValV)

        Parameters
        ----------
        ValV: TVec< TStr,int > const &

        Intrs(TStrV self, TStrV ValV, TStrV DstValV)

        Parameters
        ----------
        ValV: TVec< TStr,int > const &
        DstValV: TVec< TStr,int > &

        """
        return _SnapTime.TStrV_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TStrV self, TStrV ValV)

        Parameters
        ----------
        ValV: TVec< TStr,int > const &

        Union(TStrV self, TStrV ValV, TStrV DstValV)

        Parameters
        ----------
        ValV: TVec< TStr,int > const &
        DstValV: TVec< TStr,int > &

        """
        return _SnapTime.TStrV_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TStrV self, TStrV ValV)

        Parameters
        ----------
        ValV: TVec< TStr,int > const &

        Diff(TStrV self, TStrV ValV, TStrV DstValV)

        Parameters
        ----------
        ValV: TVec< TStr,int > const &
        DstValV: TVec< TStr,int > &

        """
        return _SnapTime.TStrV_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TStrV self, TStrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TStr,int > const &

        """
        return _SnapTime.TStrV_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TStrV self, TStrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TStr,int > const &

        """
        return _SnapTime.TStrV_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TStrV self, TStr Val) -> int

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStrV_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TStrV self, TStr Val) -> int

        Parameters
        ----------
        Val: TStr const &

        SearchBin(TStrV self, TStr Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TStr const &
        InsValN: int &

        """
        return _SnapTime.TStrV_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TStrV self, TStr Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TStr const &
        InsValN: int &

        """
        return _SnapTime.TStrV_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TStrV self, TStr Val, int const & BValN=0) -> int

        Parameters
        ----------
        Val: TStr const &
        BValN: int const &

        SearchForw(TStrV self, TStr Val) -> int

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStrV_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TStrV self, TStr Val) -> int

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStrV_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TStrV self, TStrV ValV, int const & BValN=0) -> int

        Parameters
        ----------
        ValV: TVec< TStr,int > const &
        BValN: int const &

        SearchVForw(TStrV self, TStrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TStr,int > const &

        """
        return _SnapTime.TStrV_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TStrV self, TStr Val) -> bool

        Parameters
        ----------
        Val: TStr const &

        IsIn(TStrV self, TStr Val, int & ValN) -> bool

        Parameters
        ----------
        Val: TStr const &
        ValN: int &

        """
        return _SnapTime.TStrV_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TStrV self, TStr Val) -> bool

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStrV_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TStrV self, TStr Val) -> TStr

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStrV_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TStrV self, TStr Val) -> TStr

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStrV_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TStrV self) -> int

        Parameters
        ----------
        self: TVec< TStr > const *

        """
        return _SnapTime.TStrV_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TStr Val1) -> TStrV

        Parameters
        ----------
        Val1: TStr const &

        GetV(TStr Val1, TStr Val2) -> TStrV

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3) -> TStrV

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4) -> TStrV

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5) -> TStrV

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &
        Val5: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6) -> TStrV

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &
        Val5: TStr const &
        Val6: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7) -> TStrV

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &
        Val5: TStr const &
        Val6: TStr const &
        Val7: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7, TStr Val8) -> TStrV

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &
        Val5: TStr const &
        Val6: TStr const &
        Val7: TStr const &
        Val8: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7, TStr Val8, TStr Val9) -> TStrV

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &
        Val5: TStr const &
        Val6: TStr const &
        Val7: TStr const &
        Val8: TStr const &
        Val9: TStr const &

        """
        return _SnapTime.TStrV_GetV(*args)

    GetV = staticmethod(GetV)
TStrV.LoadShM = new_instancemethod(_SnapTime.TStrV_LoadShM, None, TStrV)
TStrV.Load = new_instancemethod(_SnapTime.TStrV_Load, None, TStrV)
TStrV.Save = new_instancemethod(_SnapTime.TStrV_Save, None, TStrV)
TStrV.__add__ = new_instancemethod(_SnapTime.TStrV___add__, None, TStrV)
TStrV.__eq__ = new_instancemethod(_SnapTime.TStrV___eq__, None, TStrV)
TStrV.__lt__ = new_instancemethod(_SnapTime.TStrV___lt__, None, TStrV)
TStrV.GetMemUsed = new_instancemethod(_SnapTime.TStrV_GetMemUsed, None, TStrV)
TStrV.GetMemSize = new_instancemethod(_SnapTime.TStrV_GetMemSize, None, TStrV)
TStrV.GetPrimHashCd = new_instancemethod(_SnapTime.TStrV_GetPrimHashCd, None, TStrV)
TStrV.GetSecHashCd = new_instancemethod(_SnapTime.TStrV_GetSecHashCd, None, TStrV)
TStrV.Gen = new_instancemethod(_SnapTime.TStrV_Gen, None, TStrV)
TStrV.GenExt = new_instancemethod(_SnapTime.TStrV_GenExt, None, TStrV)
TStrV.IsExt = new_instancemethod(_SnapTime.TStrV_IsExt, None, TStrV)
TStrV.Reserve = new_instancemethod(_SnapTime.TStrV_Reserve, None, TStrV)
TStrV.Clr = new_instancemethod(_SnapTime.TStrV_Clr, None, TStrV)
TStrV.Trunc = new_instancemethod(_SnapTime.TStrV_Trunc, None, TStrV)
TStrV.Reduce = new_instancemethod(_SnapTime.TStrV_Reduce, None, TStrV)
TStrV.Pack = new_instancemethod(_SnapTime.TStrV_Pack, None, TStrV)
TStrV.MoveFrom = new_instancemethod(_SnapTime.TStrV_MoveFrom, None, TStrV)
TStrV.CopyUniqueFrom = new_instancemethod(_SnapTime.TStrV_CopyUniqueFrom, None, TStrV)
TStrV.Empty = new_instancemethod(_SnapTime.TStrV_Empty, None, TStrV)
TStrV.Len = new_instancemethod(_SnapTime.TStrV_Len, None, TStrV)
TStrV.Reserved = new_instancemethod(_SnapTime.TStrV_Reserved, None, TStrV)
TStrV.Last = new_instancemethod(_SnapTime.TStrV_Last, None, TStrV)
TStrV.LastValN = new_instancemethod(_SnapTime.TStrV_LastValN, None, TStrV)
TStrV.LastLast = new_instancemethod(_SnapTime.TStrV_LastLast, None, TStrV)
TStrV.GetRndVal = new_instancemethod(_SnapTime.TStrV_GetRndVal, None, TStrV)
TStrV.BegI = new_instancemethod(_SnapTime.TStrV_BegI, None, TStrV)
TStrV.begin = new_instancemethod(_SnapTime.TStrV_begin, None, TStrV)
TStrV.EndI = new_instancemethod(_SnapTime.TStrV_EndI, None, TStrV)
TStrV.end = new_instancemethod(_SnapTime.TStrV_end, None, TStrV)
TStrV.GetI = new_instancemethod(_SnapTime.TStrV_GetI, None, TStrV)
TStrV.Add = new_instancemethod(_SnapTime.TStrV_Add, None, TStrV)
TStrV.AddMP = new_instancemethod(_SnapTime.TStrV_AddMP, None, TStrV)
TStrV.MoveLastMP = new_instancemethod(_SnapTime.TStrV_MoveLastMP, None, TStrV)
TStrV.AddV = new_instancemethod(_SnapTime.TStrV_AddV, None, TStrV)
TStrV.AddSorted = new_instancemethod(_SnapTime.TStrV_AddSorted, None, TStrV)
TStrV.AddBackSorted = new_instancemethod(_SnapTime.TStrV_AddBackSorted, None, TStrV)
TStrV.AddMerged = new_instancemethod(_SnapTime.TStrV_AddMerged, None, TStrV)
TStrV.AddVMerged = new_instancemethod(_SnapTime.TStrV_AddVMerged, None, TStrV)
TStrV.AddUnique = new_instancemethod(_SnapTime.TStrV_AddUnique, None, TStrV)
TStrV.GetVal = new_instancemethod(_SnapTime.TStrV_GetVal, None, TStrV)
TStrV.SetVal = new_instancemethod(_SnapTime.TStrV_SetVal, None, TStrV)
TStrV.GetSubValV = new_instancemethod(_SnapTime.TStrV_GetSubValV, None, TStrV)
TStrV.Ins = new_instancemethod(_SnapTime.TStrV_Ins, None, TStrV)
TStrV.Del = new_instancemethod(_SnapTime.TStrV_Del, None, TStrV)
TStrV.DelLast = new_instancemethod(_SnapTime.TStrV_DelLast, None, TStrV)
TStrV.DelIfIn = new_instancemethod(_SnapTime.TStrV_DelIfIn, None, TStrV)
TStrV.DelAll = new_instancemethod(_SnapTime.TStrV_DelAll, None, TStrV)
TStrV.PutAll = new_instancemethod(_SnapTime.TStrV_PutAll, None, TStrV)
TStrV.Move = new_instancemethod(_SnapTime.TStrV_Move, None, TStrV)
TStrV.Swap = new_instancemethod(_SnapTime.TStrV_Swap, None, TStrV)
TStrV.Get32BitVector = new_instancemethod(_SnapTime.TStrV_Get32BitVector, None, TStrV)
TStrV.NextPerm = new_instancemethod(_SnapTime.TStrV_NextPerm, None, TStrV)
TStrV.PrevPerm = new_instancemethod(_SnapTime.TStrV_PrevPerm, None, TStrV)
TStrV.GetPivotValN = new_instancemethod(_SnapTime.TStrV_GetPivotValN, None, TStrV)
TStrV.BSort = new_instancemethod(_SnapTime.TStrV_BSort, None, TStrV)
TStrV.ISort = new_instancemethod(_SnapTime.TStrV_ISort, None, TStrV)
TStrV.Partition = new_instancemethod(_SnapTime.TStrV_Partition, None, TStrV)
TStrV.QSort = new_instancemethod(_SnapTime.TStrV_QSort, None, TStrV)
TStrV.Sort = new_instancemethod(_SnapTime.TStrV_Sort, None, TStrV)
TStrV.IsSorted = new_instancemethod(_SnapTime.TStrV_IsSorted, None, TStrV)
TStrV.Shuffle = new_instancemethod(_SnapTime.TStrV_Shuffle, None, TStrV)
TStrV.Reverse = new_instancemethod(_SnapTime.TStrV_Reverse, None, TStrV)
TStrV.Merge = new_instancemethod(_SnapTime.TStrV_Merge, None, TStrV)
TStrV.Intrs = new_instancemethod(_SnapTime.TStrV_Intrs, None, TStrV)
TStrV.Union = new_instancemethod(_SnapTime.TStrV_Union, None, TStrV)
TStrV.Diff = new_instancemethod(_SnapTime.TStrV_Diff, None, TStrV)
TStrV.IntrsLen = new_instancemethod(_SnapTime.TStrV_IntrsLen, None, TStrV)
TStrV.UnionLen = new_instancemethod(_SnapTime.TStrV_UnionLen, None, TStrV)
TStrV.Count = new_instancemethod(_SnapTime.TStrV_Count, None, TStrV)
TStrV.SearchBin = new_instancemethod(_SnapTime.TStrV_SearchBin, None, TStrV)
TStrV.SearchBinLeft = new_instancemethod(_SnapTime.TStrV_SearchBinLeft, None, TStrV)
TStrV.SearchForw = new_instancemethod(_SnapTime.TStrV_SearchForw, None, TStrV)
TStrV.SearchBack = new_instancemethod(_SnapTime.TStrV_SearchBack, None, TStrV)
TStrV.SearchVForw = new_instancemethod(_SnapTime.TStrV_SearchVForw, None, TStrV)
TStrV.IsIn = new_instancemethod(_SnapTime.TStrV_IsIn, None, TStrV)
TStrV.IsInBin = new_instancemethod(_SnapTime.TStrV_IsInBin, None, TStrV)
TStrV.GetDat = new_instancemethod(_SnapTime.TStrV_GetDat, None, TStrV)
TStrV.GetAddDat = new_instancemethod(_SnapTime.TStrV_GetAddDat, None, TStrV)
TStrV.GetMxValN = new_instancemethod(_SnapTime.TStrV_GetMxValN, None, TStrV)
TStrV_swigregister = _SnapTime.TStrV_swigregister
TStrV_swigregister(TStrV)

def TStrV_SwapI(LVal, RVal):
    """
    TStrV_SwapI(TStr LVal, TStr RVal)

    Parameters
    ----------
    LVal: TVec< TStr >::TIter
    RVal: TVec< TStr >::TIter

    """
    return _SnapTime.TStrV_SwapI(LVal, RVal)

def TStrV_GetV(*args):
    """
    GetV(TStr Val1) -> TStrV

    Parameters
    ----------
    Val1: TStr const &

    GetV(TStr Val1, TStr Val2) -> TStrV

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3) -> TStrV

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &
    Val3: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4) -> TStrV

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &
    Val3: TStr const &
    Val4: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5) -> TStrV

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &
    Val3: TStr const &
    Val4: TStr const &
    Val5: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6) -> TStrV

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &
    Val3: TStr const &
    Val4: TStr const &
    Val5: TStr const &
    Val6: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7) -> TStrV

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &
    Val3: TStr const &
    Val4: TStr const &
    Val5: TStr const &
    Val6: TStr const &
    Val7: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7, TStr Val8) -> TStrV

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &
    Val3: TStr const &
    Val4: TStr const &
    Val5: TStr const &
    Val6: TStr const &
    Val7: TStr const &
    Val8: TStr const &

    TStrV_GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7, TStr Val8, TStr Val9) -> TStrV

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &
    Val3: TStr const &
    Val4: TStr const &
    Val5: TStr const &
    Val6: TStr const &
    Val7: TStr const &
    Val8: TStr const &
    Val9: TStr const &

    """
    return _SnapTime.TStrV_GetV(*args)

class TStr64V(object):
    """Proxy of C++ TVec<(TStr,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TStr64V

    def __init__(self, *args):
        """
        __init__(TVec<(TStr,int64)> self) -> TStr64V
        __init__(TVec<(TStr,int64)> self, TStr64V Vec) -> TStr64V

        Parameters
        ----------
        Vec: TVec< TStr,long long > const &

        __init__(TVec<(TStr,int64)> self, TStr64V Vec) -> TStr64V

        Parameters
        ----------
        Vec: TVec< TStr,long long > &&

        __init__(TVec<(TStr,int64)> self, long long const & _Vals) -> TStr64V

        Parameters
        ----------
        _Vals: long long const &

        __init__(TVec<(TStr,int64)> self, long long const & _MxVals, long long const & _Vals) -> TStr64V

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        __init__(TVec<(TStr,int64)> self, long long const & _MxVals, long long const & _Vals, TStr Dat) -> TStr64V

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &
        Dat: TStr

        __init__(TVec<(TStr,int64)> self, TStr _ValT, long long const & _Vals) -> TStr64V

        Parameters
        ----------
        _ValT: TStr *
        _Vals: long long const &

        __init__(TVec<(TStr,int64)> self, TSIn SIn) -> TStr64V

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TStr64V_swiginit(self, _SnapTime.new_TStr64V(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TStr64V self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TStr64V_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TStr64V self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TStr64V_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TStr64V self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TStr64V_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TStr64V self, TStr Val) -> TStr64V

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStr64V___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TStr64V self, TStr64V Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TStr,long long > const &

        """
        return _SnapTime.TStr64V___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TStr64V self, TStr64V Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TStr,long long > const &

        """
        return _SnapTime.TStr64V___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TStr64V self) -> long long

        Parameters
        ----------
        self: TVec< TStr,int64 > const *

        """
        return _SnapTime.TStr64V_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TStr64V self) -> long long

        Parameters
        ----------
        self: TVec< TStr,int64 > const *

        """
        return _SnapTime.TStr64V_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TStr64V self) -> int

        Parameters
        ----------
        self: TVec< TStr,int64 > const *

        """
        return _SnapTime.TStr64V_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TStr64V self) -> int

        Parameters
        ----------
        self: TVec< TStr,int64 > const *

        """
        return _SnapTime.TStr64V_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TStr64V self, long long const & _Vals)

        Parameters
        ----------
        _Vals: long long const &

        Gen(TStr64V self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TStr64V_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TStr64V self, TStr _ValT, long long const & _Vals)

        Parameters
        ----------
        _ValT: TStr *
        _Vals: long long const &

        """
        return _SnapTime.TStr64V_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TStr64V self) -> bool

        Parameters
        ----------
        self: TVec< TStr,int64 > const *

        """
        return _SnapTime.TStr64V_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TStr64V self, long long const & _MxVals)

        Parameters
        ----------
        _MxVals: long long const &

        Reserve(TStr64V self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TStr64V_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TStr64V self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(TStr64V self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TStr64V self)

        Parameters
        ----------
        self: TVec< TStr,int64 > *

        """
        return _SnapTime.TStr64V_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TStr64V self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Trunc(TStr64V self)

        Parameters
        ----------
        self: TVec< TStr,int64 > *

        """
        return _SnapTime.TStr64V_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TStr64V self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Reduce(TStr64V self)

        Parameters
        ----------
        self: TVec< TStr,int64 > *

        """
        return _SnapTime.TStr64V_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TStr64V self)

        Parameters
        ----------
        self: TVec< TStr,int64 > *

        """
        return _SnapTime.TStr64V_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TStr64V self, TStr64V Vec)

        Parameters
        ----------
        Vec: TVec< TStr,long long > &

        """
        return _SnapTime.TStr64V_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TStr64V self, TStr64V Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TStr,long long > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TStr64V_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TStr64V self) -> bool

        Parameters
        ----------
        self: TVec< TStr,int64 > const *

        """
        return _SnapTime.TStr64V_Empty(self)


    def Len(self):
        """
        Len(TStr64V self) -> long long

        Parameters
        ----------
        self: TVec< TStr,int64 > const *

        """
        return _SnapTime.TStr64V_Len(self)


    def Reserved(self):
        """
        Reserved(TStr64V self) -> long long

        Parameters
        ----------
        self: TVec< TStr,int64 > const *

        """
        return _SnapTime.TStr64V_Reserved(self)


    def Last(self, *args):
        """
        Last(TStr64V self) -> TStr
        Last(TStr64V self) -> TStr

        Parameters
        ----------
        self: TVec< TStr,int64 > *

        """
        return _SnapTime.TStr64V_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TStr64V self) -> long long

        Parameters
        ----------
        self: TVec< TStr,int64 > const *

        """
        return _SnapTime.TStr64V_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TStr64V self) -> TStr
        LastLast(TStr64V self) -> TStr

        Parameters
        ----------
        self: TVec< TStr,int64 > *

        """
        return _SnapTime.TStr64V_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TStr64V self, TRnd Rnd) -> TStr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TStr64V self) -> TStr
        GetRndVal(TStr64V self, TRnd Rnd) -> TStr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TStr64V self) -> TStr

        Parameters
        ----------
        self: TVec< TStr,int64 > *

        """
        return _SnapTime.TStr64V_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TStr64V self) -> TStr

        Parameters
        ----------
        self: TVec< TStr,int64 > const *

        """
        return _SnapTime.TStr64V_BegI(self)


    def begin(self):
        """
        begin(TStr64V self) -> TStr

        Parameters
        ----------
        self: TVec< TStr,int64 > const *

        """
        return _SnapTime.TStr64V_begin(self)


    def EndI(self):
        """
        EndI(TStr64V self) -> TStr

        Parameters
        ----------
        self: TVec< TStr,int64 > const *

        """
        return _SnapTime.TStr64V_EndI(self)


    def end(self):
        """
        end(TStr64V self) -> TStr

        Parameters
        ----------
        self: TVec< TStr,int64 > const *

        """
        return _SnapTime.TStr64V_end(self)


    def GetI(self, ValN):
        """
        GetI(TStr64V self, long long const & ValN) -> TStr

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TStr64V_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TStr64V self) -> long long
        Add(TStr64V self, TStr Val) -> long long

        Parameters
        ----------
        Val: TStr const &

        Add(TStr64V self, TStr Val) -> long long

        Parameters
        ----------
        Val: TStr &

        Add(TStr64V self, TStr Val, long long const & ResizeLen) -> long long

        Parameters
        ----------
        Val: TStr const &
        ResizeLen: long long const &

        """
        return _SnapTime.TStr64V_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TStr64V self, TStr Val) -> long long

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStr64V_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TStr64V self, TStr Val, int Inc) -> long long

        Parameters
        ----------
        Val: TStr const &
        Inc: int

        """
        return _SnapTime.TStr64V_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TStr64V self, TStr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TStr,long long > const &

        """
        return _SnapTime.TStr64V_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TStr64V self, TStr Val, bool const & Asc=True, long long const & _MxVals=-1) -> long long

        Parameters
        ----------
        Val: TStr const &
        Asc: bool const &
        _MxVals: long long const &

        AddSorted(TStr64V self, TStr Val, bool const & Asc=True) -> long long

        Parameters
        ----------
        Val: TStr const &
        Asc: bool const &

        AddSorted(TStr64V self, TStr Val) -> long long

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStr64V_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TStr64V self, TStr Val, bool const & Asc) -> long long

        Parameters
        ----------
        Val: TStr const &
        Asc: bool const &

        """
        return _SnapTime.TStr64V_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TStr64V self, TStr Val) -> long long

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStr64V_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TStr64V self, TStr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TStr,long long > const &

        """
        return _SnapTime.TStr64V_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TStr64V self, TStr Val) -> long long

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStr64V_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TStr64V self, long long const & ValN) -> TStr

        Parameters
        ----------
        ValN: long long const &

        GetVal(TStr64V self, long long const & ValN) -> TStr

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TStr64V_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TStr64V self, long long const & ValN, TStr Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TStr const &

        """
        return _SnapTime.TStr64V_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TStr64V self, long long const & BValN, long long const & EValN, TStr64V ValV)

        Parameters
        ----------
        BValN: long long const &
        EValN: long long const &
        ValV: TVec< TStr,long long > &

        """
        return _SnapTime.TStr64V_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TStr64V self, long long const & ValN, TStr Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TStr const &

        """
        return _SnapTime.TStr64V_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TStr64V self, long long const & ValN)

        Parameters
        ----------
        ValN: long long const &

        Del(TStr64V self, long long const & MnValN, long long const & MxValN)

        Parameters
        ----------
        MnValN: long long const &
        MxValN: long long const &

        """
        return _SnapTime.TStr64V_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TStr64V self)

        Parameters
        ----------
        self: TVec< TStr,int64 > *

        """
        return _SnapTime.TStr64V_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TStr64V self, TStr Val) -> bool

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStr64V_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TStr64V self, TStr Val)

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStr64V_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TStr64V self, TStr Val)

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStr64V_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TStr64V self, long long const & FromValN, long long const & ToValN)

        Parameters
        ----------
        FromValN: long long const &
        ToValN: long long const &

        """
        return _SnapTime.TStr64V_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TStr64V self, TStr64V Vec)

        Parameters
        ----------
        Vec: TVec< TStr,long long > &

        Swap(TStr64V self, long long const & ValN1, long long const & ValN2)

        Parameters
        ----------
        ValN1: long long const &
        ValN2: long long const &

        """
        return _SnapTime.TStr64V_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TStr LVal, TStr RVal)

        Parameters
        ----------
        LVal: TVec< TStr,long long >::TIter
        RVal: TVec< TStr,long long >::TIter

        """
        return _SnapTime.TStr64V_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TStr64V self) -> TStrV

        Parameters
        ----------
        self: TVec< TStr,int64 > *

        """
        return _SnapTime.TStr64V_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TStr64V self) -> bool

        Parameters
        ----------
        self: TVec< TStr,int64 > *

        """
        return _SnapTime.TStr64V_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TStr64V self) -> bool

        Parameters
        ----------
        self: TVec< TStr,int64 > *

        """
        return _SnapTime.TStr64V_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TStr64V self, long long const & LValN, long long const & RValN) -> long long

        Parameters
        ----------
        LValN: long long const &
        RValN: long long const &

        """
        return _SnapTime.TStr64V_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TStr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TStr64V_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TStr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TStr64V_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TStr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc) -> long long

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TStr64V_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TStr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TStr64V_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TStr64V self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TStr64V self)

        Parameters
        ----------
        self: TVec< TStr,int64 > *

        """
        return _SnapTime.TStr64V_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TStr64V self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TStr64V self) -> bool

        Parameters
        ----------
        self: TVec< TStr,int64 > const *

        """
        return _SnapTime.TStr64V_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TStr64V self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TStr64V_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TStr64V self)
        Reverse(TStr64V self, long long LValN, long long RValN)

        Parameters
        ----------
        LValN: long long
        RValN: long long

        """
        return _SnapTime.TStr64V_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TStr64V self)

        Parameters
        ----------
        self: TVec< TStr,int64 > *

        """
        return _SnapTime.TStr64V_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TStr64V self, TStr64V ValV)

        Parameters
        ----------
        ValV: TVec< TStr,long long > const &

        Intrs(TStr64V self, TStr64V ValV, TStr64V DstValV)

        Parameters
        ----------
        ValV: TVec< TStr,long long > const &
        DstValV: TVec< TStr,long long > &

        """
        return _SnapTime.TStr64V_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TStr64V self, TStr64V ValV)

        Parameters
        ----------
        ValV: TVec< TStr,long long > const &

        Union(TStr64V self, TStr64V ValV, TStr64V DstValV)

        Parameters
        ----------
        ValV: TVec< TStr,long long > const &
        DstValV: TVec< TStr,long long > &

        """
        return _SnapTime.TStr64V_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TStr64V self, TStr64V ValV)

        Parameters
        ----------
        ValV: TVec< TStr,long long > const &

        Diff(TStr64V self, TStr64V ValV, TStr64V DstValV)

        Parameters
        ----------
        ValV: TVec< TStr,long long > const &
        DstValV: TVec< TStr,long long > &

        """
        return _SnapTime.TStr64V_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TStr64V self, TStr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TStr,long long > const &

        """
        return _SnapTime.TStr64V_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TStr64V self, TStr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TStr,long long > const &

        """
        return _SnapTime.TStr64V_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TStr64V self, TStr Val) -> long long

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStr64V_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TStr64V self, TStr Val) -> long long

        Parameters
        ----------
        Val: TStr const &

        SearchBin(TStr64V self, TStr Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TStr const &
        InsValN: long long &

        """
        return _SnapTime.TStr64V_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TStr64V self, TStr Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TStr const &
        InsValN: long long &

        """
        return _SnapTime.TStr64V_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TStr64V self, TStr Val, long long const & BValN=0) -> long long

        Parameters
        ----------
        Val: TStr const &
        BValN: long long const &

        SearchForw(TStr64V self, TStr Val) -> long long

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStr64V_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TStr64V self, TStr Val) -> long long

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStr64V_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TStr64V self, TStr64V ValV, long long const & BValN=0) -> long long

        Parameters
        ----------
        ValV: TVec< TStr,long long > const &
        BValN: long long const &

        SearchVForw(TStr64V self, TStr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TStr,long long > const &

        """
        return _SnapTime.TStr64V_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TStr64V self, TStr Val) -> bool

        Parameters
        ----------
        Val: TStr const &

        IsIn(TStr64V self, TStr Val, long long & ValN) -> bool

        Parameters
        ----------
        Val: TStr const &
        ValN: long long &

        """
        return _SnapTime.TStr64V_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TStr64V self, TStr Val) -> bool

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStr64V_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TStr64V self, TStr Val) -> TStr

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStr64V_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TStr64V self, TStr Val) -> TStr

        Parameters
        ----------
        Val: TStr const &

        """
        return _SnapTime.TStr64V_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TStr64V self) -> long long

        Parameters
        ----------
        self: TVec< TStr,int64 > const *

        """
        return _SnapTime.TStr64V_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TStr Val1) -> TStr64V

        Parameters
        ----------
        Val1: TStr const &

        GetV(TStr Val1, TStr Val2) -> TStr64V

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3) -> TStr64V

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4) -> TStr64V

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5) -> TStr64V

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &
        Val5: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6) -> TStr64V

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &
        Val5: TStr const &
        Val6: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7) -> TStr64V

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &
        Val5: TStr const &
        Val6: TStr const &
        Val7: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7, TStr Val8) -> TStr64V

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &
        Val5: TStr const &
        Val6: TStr const &
        Val7: TStr const &
        Val8: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7, TStr Val8, TStr Val9) -> TStr64V

        Parameters
        ----------
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &
        Val5: TStr const &
        Val6: TStr const &
        Val7: TStr const &
        Val8: TStr const &
        Val9: TStr const &

        """
        return _SnapTime.TStr64V_GetV(*args)

    GetV = staticmethod(GetV)
TStr64V.LoadShM = new_instancemethod(_SnapTime.TStr64V_LoadShM, None, TStr64V)
TStr64V.Load = new_instancemethod(_SnapTime.TStr64V_Load, None, TStr64V)
TStr64V.Save = new_instancemethod(_SnapTime.TStr64V_Save, None, TStr64V)
TStr64V.__add__ = new_instancemethod(_SnapTime.TStr64V___add__, None, TStr64V)
TStr64V.__eq__ = new_instancemethod(_SnapTime.TStr64V___eq__, None, TStr64V)
TStr64V.__lt__ = new_instancemethod(_SnapTime.TStr64V___lt__, None, TStr64V)
TStr64V.GetMemUsed = new_instancemethod(_SnapTime.TStr64V_GetMemUsed, None, TStr64V)
TStr64V.GetMemSize = new_instancemethod(_SnapTime.TStr64V_GetMemSize, None, TStr64V)
TStr64V.GetPrimHashCd = new_instancemethod(_SnapTime.TStr64V_GetPrimHashCd, None, TStr64V)
TStr64V.GetSecHashCd = new_instancemethod(_SnapTime.TStr64V_GetSecHashCd, None, TStr64V)
TStr64V.Gen = new_instancemethod(_SnapTime.TStr64V_Gen, None, TStr64V)
TStr64V.GenExt = new_instancemethod(_SnapTime.TStr64V_GenExt, None, TStr64V)
TStr64V.IsExt = new_instancemethod(_SnapTime.TStr64V_IsExt, None, TStr64V)
TStr64V.Reserve = new_instancemethod(_SnapTime.TStr64V_Reserve, None, TStr64V)
TStr64V.Clr = new_instancemethod(_SnapTime.TStr64V_Clr, None, TStr64V)
TStr64V.Trunc = new_instancemethod(_SnapTime.TStr64V_Trunc, None, TStr64V)
TStr64V.Reduce = new_instancemethod(_SnapTime.TStr64V_Reduce, None, TStr64V)
TStr64V.Pack = new_instancemethod(_SnapTime.TStr64V_Pack, None, TStr64V)
TStr64V.MoveFrom = new_instancemethod(_SnapTime.TStr64V_MoveFrom, None, TStr64V)
TStr64V.CopyUniqueFrom = new_instancemethod(_SnapTime.TStr64V_CopyUniqueFrom, None, TStr64V)
TStr64V.Empty = new_instancemethod(_SnapTime.TStr64V_Empty, None, TStr64V)
TStr64V.Len = new_instancemethod(_SnapTime.TStr64V_Len, None, TStr64V)
TStr64V.Reserved = new_instancemethod(_SnapTime.TStr64V_Reserved, None, TStr64V)
TStr64V.Last = new_instancemethod(_SnapTime.TStr64V_Last, None, TStr64V)
TStr64V.LastValN = new_instancemethod(_SnapTime.TStr64V_LastValN, None, TStr64V)
TStr64V.LastLast = new_instancemethod(_SnapTime.TStr64V_LastLast, None, TStr64V)
TStr64V.GetRndVal = new_instancemethod(_SnapTime.TStr64V_GetRndVal, None, TStr64V)
TStr64V.BegI = new_instancemethod(_SnapTime.TStr64V_BegI, None, TStr64V)
TStr64V.begin = new_instancemethod(_SnapTime.TStr64V_begin, None, TStr64V)
TStr64V.EndI = new_instancemethod(_SnapTime.TStr64V_EndI, None, TStr64V)
TStr64V.end = new_instancemethod(_SnapTime.TStr64V_end, None, TStr64V)
TStr64V.GetI = new_instancemethod(_SnapTime.TStr64V_GetI, None, TStr64V)
TStr64V.Add = new_instancemethod(_SnapTime.TStr64V_Add, None, TStr64V)
TStr64V.AddMP = new_instancemethod(_SnapTime.TStr64V_AddMP, None, TStr64V)
TStr64V.MoveLastMP = new_instancemethod(_SnapTime.TStr64V_MoveLastMP, None, TStr64V)
TStr64V.AddV = new_instancemethod(_SnapTime.TStr64V_AddV, None, TStr64V)
TStr64V.AddSorted = new_instancemethod(_SnapTime.TStr64V_AddSorted, None, TStr64V)
TStr64V.AddBackSorted = new_instancemethod(_SnapTime.TStr64V_AddBackSorted, None, TStr64V)
TStr64V.AddMerged = new_instancemethod(_SnapTime.TStr64V_AddMerged, None, TStr64V)
TStr64V.AddVMerged = new_instancemethod(_SnapTime.TStr64V_AddVMerged, None, TStr64V)
TStr64V.AddUnique = new_instancemethod(_SnapTime.TStr64V_AddUnique, None, TStr64V)
TStr64V.GetVal = new_instancemethod(_SnapTime.TStr64V_GetVal, None, TStr64V)
TStr64V.SetVal = new_instancemethod(_SnapTime.TStr64V_SetVal, None, TStr64V)
TStr64V.GetSubValV = new_instancemethod(_SnapTime.TStr64V_GetSubValV, None, TStr64V)
TStr64V.Ins = new_instancemethod(_SnapTime.TStr64V_Ins, None, TStr64V)
TStr64V.Del = new_instancemethod(_SnapTime.TStr64V_Del, None, TStr64V)
TStr64V.DelLast = new_instancemethod(_SnapTime.TStr64V_DelLast, None, TStr64V)
TStr64V.DelIfIn = new_instancemethod(_SnapTime.TStr64V_DelIfIn, None, TStr64V)
TStr64V.DelAll = new_instancemethod(_SnapTime.TStr64V_DelAll, None, TStr64V)
TStr64V.PutAll = new_instancemethod(_SnapTime.TStr64V_PutAll, None, TStr64V)
TStr64V.Move = new_instancemethod(_SnapTime.TStr64V_Move, None, TStr64V)
TStr64V.Swap = new_instancemethod(_SnapTime.TStr64V_Swap, None, TStr64V)
TStr64V.Get32BitVector = new_instancemethod(_SnapTime.TStr64V_Get32BitVector, None, TStr64V)
TStr64V.NextPerm = new_instancemethod(_SnapTime.TStr64V_NextPerm, None, TStr64V)
TStr64V.PrevPerm = new_instancemethod(_SnapTime.TStr64V_PrevPerm, None, TStr64V)
TStr64V.GetPivotValN = new_instancemethod(_SnapTime.TStr64V_GetPivotValN, None, TStr64V)
TStr64V.BSort = new_instancemethod(_SnapTime.TStr64V_BSort, None, TStr64V)
TStr64V.ISort = new_instancemethod(_SnapTime.TStr64V_ISort, None, TStr64V)
TStr64V.Partition = new_instancemethod(_SnapTime.TStr64V_Partition, None, TStr64V)
TStr64V.QSort = new_instancemethod(_SnapTime.TStr64V_QSort, None, TStr64V)
TStr64V.Sort = new_instancemethod(_SnapTime.TStr64V_Sort, None, TStr64V)
TStr64V.IsSorted = new_instancemethod(_SnapTime.TStr64V_IsSorted, None, TStr64V)
TStr64V.Shuffle = new_instancemethod(_SnapTime.TStr64V_Shuffle, None, TStr64V)
TStr64V.Reverse = new_instancemethod(_SnapTime.TStr64V_Reverse, None, TStr64V)
TStr64V.Merge = new_instancemethod(_SnapTime.TStr64V_Merge, None, TStr64V)
TStr64V.Intrs = new_instancemethod(_SnapTime.TStr64V_Intrs, None, TStr64V)
TStr64V.Union = new_instancemethod(_SnapTime.TStr64V_Union, None, TStr64V)
TStr64V.Diff = new_instancemethod(_SnapTime.TStr64V_Diff, None, TStr64V)
TStr64V.IntrsLen = new_instancemethod(_SnapTime.TStr64V_IntrsLen, None, TStr64V)
TStr64V.UnionLen = new_instancemethod(_SnapTime.TStr64V_UnionLen, None, TStr64V)
TStr64V.Count = new_instancemethod(_SnapTime.TStr64V_Count, None, TStr64V)
TStr64V.SearchBin = new_instancemethod(_SnapTime.TStr64V_SearchBin, None, TStr64V)
TStr64V.SearchBinLeft = new_instancemethod(_SnapTime.TStr64V_SearchBinLeft, None, TStr64V)
TStr64V.SearchForw = new_instancemethod(_SnapTime.TStr64V_SearchForw, None, TStr64V)
TStr64V.SearchBack = new_instancemethod(_SnapTime.TStr64V_SearchBack, None, TStr64V)
TStr64V.SearchVForw = new_instancemethod(_SnapTime.TStr64V_SearchVForw, None, TStr64V)
TStr64V.IsIn = new_instancemethod(_SnapTime.TStr64V_IsIn, None, TStr64V)
TStr64V.IsInBin = new_instancemethod(_SnapTime.TStr64V_IsInBin, None, TStr64V)
TStr64V.GetDat = new_instancemethod(_SnapTime.TStr64V_GetDat, None, TStr64V)
TStr64V.GetAddDat = new_instancemethod(_SnapTime.TStr64V_GetAddDat, None, TStr64V)
TStr64V.GetMxValN = new_instancemethod(_SnapTime.TStr64V_GetMxValN, None, TStr64V)
TStr64V_swigregister = _SnapTime.TStr64V_swigregister
TStr64V_swigregister(TStr64V)

def TStr64V_SwapI(LVal, RVal):
    """
    TStr64V_SwapI(TStr LVal, TStr RVal)

    Parameters
    ----------
    LVal: TVec< TStr,long long >::TIter
    RVal: TVec< TStr,long long >::TIter

    """
    return _SnapTime.TStr64V_SwapI(LVal, RVal)

def TStr64V_GetV(*args):
    """
    GetV(TStr Val1) -> TStr64V

    Parameters
    ----------
    Val1: TStr const &

    GetV(TStr Val1, TStr Val2) -> TStr64V

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3) -> TStr64V

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &
    Val3: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4) -> TStr64V

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &
    Val3: TStr const &
    Val4: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5) -> TStr64V

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &
    Val3: TStr const &
    Val4: TStr const &
    Val5: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6) -> TStr64V

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &
    Val3: TStr const &
    Val4: TStr const &
    Val5: TStr const &
    Val6: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7) -> TStr64V

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &
    Val3: TStr const &
    Val4: TStr const &
    Val5: TStr const &
    Val6: TStr const &
    Val7: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7, TStr Val8) -> TStr64V

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &
    Val3: TStr const &
    Val4: TStr const &
    Val5: TStr const &
    Val6: TStr const &
    Val7: TStr const &
    Val8: TStr const &

    TStr64V_GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7, TStr Val8, TStr Val9) -> TStr64V

    Parameters
    ----------
    Val1: TStr const &
    Val2: TStr const &
    Val3: TStr const &
    Val4: TStr const &
    Val5: TStr const &
    Val6: TStr const &
    Val7: TStr const &
    Val8: TStr const &
    Val9: TStr const &

    """
    return _SnapTime.TStr64V_GetV(*args)

class TIntPrV(object):
    """Proxy of C++ TVec<(TIntPr)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TIntPrV

    def __init__(self, *args):
        """
        __init__(TVec<(TIntPr)> self) -> TIntPrV
        __init__(TVec<(TIntPr)> self, TIntPrV Vec) -> TIntPrV

        Parameters
        ----------
        Vec: TVec< TPair< TInt,TInt >,int > const &

        __init__(TVec<(TIntPr)> self, TIntPrV Vec) -> TIntPrV

        Parameters
        ----------
        Vec: TVec< TPair< TInt,TInt >,int > &&

        __init__(TVec<(TIntPr)> self, int const & _Vals) -> TIntPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TVec<(TIntPr)> self, int const & _MxVals, int const & _Vals) -> TIntPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TVec<(TIntPr)> self, int const & _MxVals, int const & _Vals, TIntPr Dat) -> TIntPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &
        Dat: TPair< TInt,TInt >

        __init__(TVec<(TIntPr)> self, TIntPr _ValT, int const & _Vals) -> TIntPrV

        Parameters
        ----------
        _ValT: TPair< TInt,TInt > *
        _Vals: int const &

        __init__(TVec<(TIntPr)> self, TSIn SIn) -> TIntPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntPrV_swiginit(self, _SnapTime.new_TIntPrV(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntPrV self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntPrV_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntPrV self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntPrV_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntPrV self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntPrV_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TIntPrV self, TIntPr Val) -> TIntPrV

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TIntPrV self, TIntPrV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TPair< TInt,TInt >,int > const &

        """
        return _SnapTime.TIntPrV___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TIntPrV self, TIntPrV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TPair< TInt,TInt >,int > const &

        """
        return _SnapTime.TIntPrV___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TIntPr > const *

        """
        return _SnapTime.TIntPrV_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TIntPr > const *

        """
        return _SnapTime.TIntPrV_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TIntPr > const *

        """
        return _SnapTime.TIntPrV_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TIntPr > const *

        """
        return _SnapTime.TIntPrV_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TIntPrV self, int const & _Vals)

        Parameters
        ----------
        _Vals: int const &

        Gen(TIntPrV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TIntPrV_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TIntPrV self, TIntPr _ValT, int const & _Vals)

        Parameters
        ----------
        _ValT: TPair< TInt,TInt > *
        _Vals: int const &

        """
        return _SnapTime.TIntPrV_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TIntPrV self) -> bool

        Parameters
        ----------
        self: TVec< TIntPr > const *

        """
        return _SnapTime.TIntPrV_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TIntPrV self, int const & _MxVals)

        Parameters
        ----------
        _MxVals: int const &

        Reserve(TIntPrV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TIntPrV_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TIntPrV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TIntPrV self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntPrV self)

        Parameters
        ----------
        self: TVec< TIntPr > *

        """
        return _SnapTime.TIntPrV_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TIntPrV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Trunc(TIntPrV self)

        Parameters
        ----------
        self: TVec< TIntPr > *

        """
        return _SnapTime.TIntPrV_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TIntPrV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Reduce(TIntPrV self)

        Parameters
        ----------
        self: TVec< TIntPr > *

        """
        return _SnapTime.TIntPrV_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TIntPrV self)

        Parameters
        ----------
        self: TVec< TIntPr > *

        """
        return _SnapTime.TIntPrV_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TIntPrV self, TIntPrV Vec)

        Parameters
        ----------
        Vec: TVec< TPair< TInt,TInt >,int > &

        """
        return _SnapTime.TIntPrV_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TIntPrV self, TIntPrV Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TPair< TInt,TInt >,int > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TIntPrV_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TIntPrV self) -> bool

        Parameters
        ----------
        self: TVec< TIntPr > const *

        """
        return _SnapTime.TIntPrV_Empty(self)


    def Len(self):
        """
        Len(TIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TIntPr > const *

        """
        return _SnapTime.TIntPrV_Len(self)


    def Reserved(self):
        """
        Reserved(TIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TIntPr > const *

        """
        return _SnapTime.TIntPrV_Reserved(self)


    def Last(self, *args):
        """
        Last(TIntPrV self) -> TIntPr
        Last(TIntPrV self) -> TIntPr

        Parameters
        ----------
        self: TVec< TIntPr > *

        """
        return _SnapTime.TIntPrV_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TIntPr > const *

        """
        return _SnapTime.TIntPrV_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TIntPrV self) -> TIntPr
        LastLast(TIntPrV self) -> TIntPr

        Parameters
        ----------
        self: TVec< TIntPr > *

        """
        return _SnapTime.TIntPrV_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TIntPrV self, TRnd Rnd) -> TIntPr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntPrV self) -> TIntPr
        GetRndVal(TIntPrV self, TRnd Rnd) -> TIntPr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntPrV self) -> TIntPr

        Parameters
        ----------
        self: TVec< TIntPr > *

        """
        return _SnapTime.TIntPrV_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TIntPrV self) -> TIntPr

        Parameters
        ----------
        self: TVec< TIntPr > const *

        """
        return _SnapTime.TIntPrV_BegI(self)


    def begin(self):
        """
        begin(TIntPrV self) -> TIntPr

        Parameters
        ----------
        self: TVec< TIntPr > const *

        """
        return _SnapTime.TIntPrV_begin(self)


    def EndI(self):
        """
        EndI(TIntPrV self) -> TIntPr

        Parameters
        ----------
        self: TVec< TIntPr > const *

        """
        return _SnapTime.TIntPrV_EndI(self)


    def end(self):
        """
        end(TIntPrV self) -> TIntPr

        Parameters
        ----------
        self: TVec< TIntPr > const *

        """
        return _SnapTime.TIntPrV_end(self)


    def GetI(self, ValN):
        """
        GetI(TIntPrV self, int const & ValN) -> TIntPr

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TIntPrV_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TIntPrV self) -> int
        Add(TIntPrV self, TIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        Add(TIntPrV self, TIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > &

        Add(TIntPrV self, TIntPr Val, int const & ResizeLen) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &
        ResizeLen: int const &

        """
        return _SnapTime.TIntPrV_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TIntPrV self, TIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TIntPrV self, TIntPr Val, int Inc) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &
        Inc: int

        """
        return _SnapTime.TIntPrV_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TIntPrV self, TIntPrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TInt,TInt >,int > const &

        """
        return _SnapTime.TIntPrV_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TIntPrV self, TIntPr Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &
        Asc: bool const &
        _MxVals: int const &

        AddSorted(TIntPrV self, TIntPr Val, bool const & Asc=True) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &
        Asc: bool const &

        AddSorted(TIntPrV self, TIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TIntPrV self, TIntPr Val, bool const & Asc) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &
        Asc: bool const &

        """
        return _SnapTime.TIntPrV_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TIntPrV self, TIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TIntPrV self, TIntPrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TInt,TInt >,int > const &

        """
        return _SnapTime.TIntPrV_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TIntPrV self, TIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TIntPrV self, int const & ValN) -> TIntPr

        Parameters
        ----------
        ValN: int const &

        GetVal(TIntPrV self, int const & ValN) -> TIntPr

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TIntPrV_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TIntPrV self, int const & ValN, TIntPr Val)

        Parameters
        ----------
        ValN: int const &
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TIntPrV self, int const & BValN, int const & EValN, TIntPrV ValV)

        Parameters
        ----------
        BValN: int const &
        EValN: int const &
        ValV: TVec< TPair< TInt,TInt >,int > &

        """
        return _SnapTime.TIntPrV_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TIntPrV self, int const & ValN, TIntPr Val)

        Parameters
        ----------
        ValN: int const &
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TIntPrV self, int const & ValN)

        Parameters
        ----------
        ValN: int const &

        Del(TIntPrV self, int const & MnValN, int const & MxValN)

        Parameters
        ----------
        MnValN: int const &
        MxValN: int const &

        """
        return _SnapTime.TIntPrV_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TIntPrV self)

        Parameters
        ----------
        self: TVec< TIntPr > *

        """
        return _SnapTime.TIntPrV_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TIntPrV self, TIntPr Val) -> bool

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TIntPrV self, TIntPr Val)

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TIntPrV self, TIntPr Val)

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TIntPrV self, int const & FromValN, int const & ToValN)

        Parameters
        ----------
        FromValN: int const &
        ToValN: int const &

        """
        return _SnapTime.TIntPrV_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TIntPrV self, TIntPrV Vec)

        Parameters
        ----------
        Vec: TVec< TPair< TInt,TInt >,int > &

        Swap(TIntPrV self, int const & ValN1, int const & ValN2)

        Parameters
        ----------
        ValN1: int const &
        ValN2: int const &

        """
        return _SnapTime.TIntPrV_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TIntPr LVal, TIntPr RVal)

        Parameters
        ----------
        LVal: TVec< TPair< TInt,TInt > >::TIter
        RVal: TVec< TPair< TInt,TInt > >::TIter

        """
        return _SnapTime.TIntPrV_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TIntPrV self) -> TIntPrV

        Parameters
        ----------
        self: TVec< TIntPr > *

        """
        return _SnapTime.TIntPrV_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TIntPrV self) -> bool

        Parameters
        ----------
        self: TVec< TIntPr > *

        """
        return _SnapTime.TIntPrV_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TIntPrV self) -> bool

        Parameters
        ----------
        self: TVec< TIntPr > *

        """
        return _SnapTime.TIntPrV_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TIntPrV self, int const & LValN, int const & RValN) -> int

        Parameters
        ----------
        LValN: int const &
        RValN: int const &

        """
        return _SnapTime.TIntPrV_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TIntPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntPrV_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TIntPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntPrV_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TIntPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntPrV_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TIntPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntPrV_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TIntPrV self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TIntPrV self)

        Parameters
        ----------
        self: TVec< TIntPr > *

        """
        return _SnapTime.TIntPrV_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TIntPrV self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TIntPrV self) -> bool

        Parameters
        ----------
        self: TVec< TIntPr > const *

        """
        return _SnapTime.TIntPrV_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TIntPrV self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TIntPrV_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TIntPrV self)
        Reverse(TIntPrV self, int LValN, int RValN)

        Parameters
        ----------
        LValN: int
        RValN: int

        """
        return _SnapTime.TIntPrV_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TIntPrV self)

        Parameters
        ----------
        self: TVec< TIntPr > *

        """
        return _SnapTime.TIntPrV_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TIntPrV self, TIntPrV ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TInt,TInt >,int > const &

        Intrs(TIntPrV self, TIntPrV ValV, TIntPrV DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TInt,TInt >,int > const &
        DstValV: TVec< TPair< TInt,TInt >,int > &

        """
        return _SnapTime.TIntPrV_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TIntPrV self, TIntPrV ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TInt,TInt >,int > const &

        Union(TIntPrV self, TIntPrV ValV, TIntPrV DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TInt,TInt >,int > const &
        DstValV: TVec< TPair< TInt,TInt >,int > &

        """
        return _SnapTime.TIntPrV_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TIntPrV self, TIntPrV ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TInt,TInt >,int > const &

        Diff(TIntPrV self, TIntPrV ValV, TIntPrV DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TInt,TInt >,int > const &
        DstValV: TVec< TPair< TInt,TInt >,int > &

        """
        return _SnapTime.TIntPrV_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TIntPrV self, TIntPrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TInt,TInt >,int > const &

        """
        return _SnapTime.TIntPrV_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TIntPrV self, TIntPrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TInt,TInt >,int > const &

        """
        return _SnapTime.TIntPrV_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TIntPrV self, TIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TIntPrV self, TIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        SearchBin(TIntPrV self, TIntPr Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &
        InsValN: int &

        """
        return _SnapTime.TIntPrV_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TIntPrV self, TIntPr Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &
        InsValN: int &

        """
        return _SnapTime.TIntPrV_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TIntPrV self, TIntPr Val, int const & BValN=0) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &
        BValN: int const &

        SearchForw(TIntPrV self, TIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TIntPrV self, TIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TIntPrV self, TIntPrV ValV, int const & BValN=0) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TInt,TInt >,int > const &
        BValN: int const &

        SearchVForw(TIntPrV self, TIntPrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TInt,TInt >,int > const &

        """
        return _SnapTime.TIntPrV_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TIntPrV self, TIntPr Val) -> bool

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        IsIn(TIntPrV self, TIntPr Val, int & ValN) -> bool

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &
        ValN: int &

        """
        return _SnapTime.TIntPrV_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TIntPrV self, TIntPr Val) -> bool

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TIntPrV self, TIntPr Val) -> TIntPr

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TIntPrV self, TIntPr Val) -> TIntPr

        Parameters
        ----------
        Val: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TIntPr > const *

        """
        return _SnapTime.TIntPrV_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TIntPr Val1) -> TIntPrV

        Parameters
        ----------
        Val1: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2) -> TIntPrV

        Parameters
        ----------
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3) -> TIntPrV

        Parameters
        ----------
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &
        Val3: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4) -> TIntPrV

        Parameters
        ----------
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &
        Val3: TPair< TInt,TInt > const &
        Val4: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5) -> TIntPrV

        Parameters
        ----------
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &
        Val3: TPair< TInt,TInt > const &
        Val4: TPair< TInt,TInt > const &
        Val5: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6) -> TIntPrV

        Parameters
        ----------
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &
        Val3: TPair< TInt,TInt > const &
        Val4: TPair< TInt,TInt > const &
        Val5: TPair< TInt,TInt > const &
        Val6: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6, TIntPr Val7) -> TIntPrV

        Parameters
        ----------
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &
        Val3: TPair< TInt,TInt > const &
        Val4: TPair< TInt,TInt > const &
        Val5: TPair< TInt,TInt > const &
        Val6: TPair< TInt,TInt > const &
        Val7: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6, TIntPr Val7, TIntPr Val8) -> TIntPrV

        Parameters
        ----------
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &
        Val3: TPair< TInt,TInt > const &
        Val4: TPair< TInt,TInt > const &
        Val5: TPair< TInt,TInt > const &
        Val6: TPair< TInt,TInt > const &
        Val7: TPair< TInt,TInt > const &
        Val8: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6, TIntPr Val7, TIntPr Val8, TIntPr Val9) -> TIntPrV

        Parameters
        ----------
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &
        Val3: TPair< TInt,TInt > const &
        Val4: TPair< TInt,TInt > const &
        Val5: TPair< TInt,TInt > const &
        Val6: TPair< TInt,TInt > const &
        Val7: TPair< TInt,TInt > const &
        Val8: TPair< TInt,TInt > const &
        Val9: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrV_GetV(*args)

    GetV = staticmethod(GetV)
TIntPrV.LoadShM = new_instancemethod(_SnapTime.TIntPrV_LoadShM, None, TIntPrV)
TIntPrV.Load = new_instancemethod(_SnapTime.TIntPrV_Load, None, TIntPrV)
TIntPrV.Save = new_instancemethod(_SnapTime.TIntPrV_Save, None, TIntPrV)
TIntPrV.__add__ = new_instancemethod(_SnapTime.TIntPrV___add__, None, TIntPrV)
TIntPrV.__eq__ = new_instancemethod(_SnapTime.TIntPrV___eq__, None, TIntPrV)
TIntPrV.__lt__ = new_instancemethod(_SnapTime.TIntPrV___lt__, None, TIntPrV)
TIntPrV.GetMemUsed = new_instancemethod(_SnapTime.TIntPrV_GetMemUsed, None, TIntPrV)
TIntPrV.GetMemSize = new_instancemethod(_SnapTime.TIntPrV_GetMemSize, None, TIntPrV)
TIntPrV.GetPrimHashCd = new_instancemethod(_SnapTime.TIntPrV_GetPrimHashCd, None, TIntPrV)
TIntPrV.GetSecHashCd = new_instancemethod(_SnapTime.TIntPrV_GetSecHashCd, None, TIntPrV)
TIntPrV.Gen = new_instancemethod(_SnapTime.TIntPrV_Gen, None, TIntPrV)
TIntPrV.GenExt = new_instancemethod(_SnapTime.TIntPrV_GenExt, None, TIntPrV)
TIntPrV.IsExt = new_instancemethod(_SnapTime.TIntPrV_IsExt, None, TIntPrV)
TIntPrV.Reserve = new_instancemethod(_SnapTime.TIntPrV_Reserve, None, TIntPrV)
TIntPrV.Clr = new_instancemethod(_SnapTime.TIntPrV_Clr, None, TIntPrV)
TIntPrV.Trunc = new_instancemethod(_SnapTime.TIntPrV_Trunc, None, TIntPrV)
TIntPrV.Reduce = new_instancemethod(_SnapTime.TIntPrV_Reduce, None, TIntPrV)
TIntPrV.Pack = new_instancemethod(_SnapTime.TIntPrV_Pack, None, TIntPrV)
TIntPrV.MoveFrom = new_instancemethod(_SnapTime.TIntPrV_MoveFrom, None, TIntPrV)
TIntPrV.CopyUniqueFrom = new_instancemethod(_SnapTime.TIntPrV_CopyUniqueFrom, None, TIntPrV)
TIntPrV.Empty = new_instancemethod(_SnapTime.TIntPrV_Empty, None, TIntPrV)
TIntPrV.Len = new_instancemethod(_SnapTime.TIntPrV_Len, None, TIntPrV)
TIntPrV.Reserved = new_instancemethod(_SnapTime.TIntPrV_Reserved, None, TIntPrV)
TIntPrV.Last = new_instancemethod(_SnapTime.TIntPrV_Last, None, TIntPrV)
TIntPrV.LastValN = new_instancemethod(_SnapTime.TIntPrV_LastValN, None, TIntPrV)
TIntPrV.LastLast = new_instancemethod(_SnapTime.TIntPrV_LastLast, None, TIntPrV)
TIntPrV.GetRndVal = new_instancemethod(_SnapTime.TIntPrV_GetRndVal, None, TIntPrV)
TIntPrV.BegI = new_instancemethod(_SnapTime.TIntPrV_BegI, None, TIntPrV)
TIntPrV.begin = new_instancemethod(_SnapTime.TIntPrV_begin, None, TIntPrV)
TIntPrV.EndI = new_instancemethod(_SnapTime.TIntPrV_EndI, None, TIntPrV)
TIntPrV.end = new_instancemethod(_SnapTime.TIntPrV_end, None, TIntPrV)
TIntPrV.GetI = new_instancemethod(_SnapTime.TIntPrV_GetI, None, TIntPrV)
TIntPrV.Add = new_instancemethod(_SnapTime.TIntPrV_Add, None, TIntPrV)
TIntPrV.AddMP = new_instancemethod(_SnapTime.TIntPrV_AddMP, None, TIntPrV)
TIntPrV.MoveLastMP = new_instancemethod(_SnapTime.TIntPrV_MoveLastMP, None, TIntPrV)
TIntPrV.AddV = new_instancemethod(_SnapTime.TIntPrV_AddV, None, TIntPrV)
TIntPrV.AddSorted = new_instancemethod(_SnapTime.TIntPrV_AddSorted, None, TIntPrV)
TIntPrV.AddBackSorted = new_instancemethod(_SnapTime.TIntPrV_AddBackSorted, None, TIntPrV)
TIntPrV.AddMerged = new_instancemethod(_SnapTime.TIntPrV_AddMerged, None, TIntPrV)
TIntPrV.AddVMerged = new_instancemethod(_SnapTime.TIntPrV_AddVMerged, None, TIntPrV)
TIntPrV.AddUnique = new_instancemethod(_SnapTime.TIntPrV_AddUnique, None, TIntPrV)
TIntPrV.GetVal = new_instancemethod(_SnapTime.TIntPrV_GetVal, None, TIntPrV)
TIntPrV.SetVal = new_instancemethod(_SnapTime.TIntPrV_SetVal, None, TIntPrV)
TIntPrV.GetSubValV = new_instancemethod(_SnapTime.TIntPrV_GetSubValV, None, TIntPrV)
TIntPrV.Ins = new_instancemethod(_SnapTime.TIntPrV_Ins, None, TIntPrV)
TIntPrV.Del = new_instancemethod(_SnapTime.TIntPrV_Del, None, TIntPrV)
TIntPrV.DelLast = new_instancemethod(_SnapTime.TIntPrV_DelLast, None, TIntPrV)
TIntPrV.DelIfIn = new_instancemethod(_SnapTime.TIntPrV_DelIfIn, None, TIntPrV)
TIntPrV.DelAll = new_instancemethod(_SnapTime.TIntPrV_DelAll, None, TIntPrV)
TIntPrV.PutAll = new_instancemethod(_SnapTime.TIntPrV_PutAll, None, TIntPrV)
TIntPrV.Move = new_instancemethod(_SnapTime.TIntPrV_Move, None, TIntPrV)
TIntPrV.Swap = new_instancemethod(_SnapTime.TIntPrV_Swap, None, TIntPrV)
TIntPrV.Get32BitVector = new_instancemethod(_SnapTime.TIntPrV_Get32BitVector, None, TIntPrV)
TIntPrV.NextPerm = new_instancemethod(_SnapTime.TIntPrV_NextPerm, None, TIntPrV)
TIntPrV.PrevPerm = new_instancemethod(_SnapTime.TIntPrV_PrevPerm, None, TIntPrV)
TIntPrV.GetPivotValN = new_instancemethod(_SnapTime.TIntPrV_GetPivotValN, None, TIntPrV)
TIntPrV.BSort = new_instancemethod(_SnapTime.TIntPrV_BSort, None, TIntPrV)
TIntPrV.ISort = new_instancemethod(_SnapTime.TIntPrV_ISort, None, TIntPrV)
TIntPrV.Partition = new_instancemethod(_SnapTime.TIntPrV_Partition, None, TIntPrV)
TIntPrV.QSort = new_instancemethod(_SnapTime.TIntPrV_QSort, None, TIntPrV)
TIntPrV.Sort = new_instancemethod(_SnapTime.TIntPrV_Sort, None, TIntPrV)
TIntPrV.IsSorted = new_instancemethod(_SnapTime.TIntPrV_IsSorted, None, TIntPrV)
TIntPrV.Shuffle = new_instancemethod(_SnapTime.TIntPrV_Shuffle, None, TIntPrV)
TIntPrV.Reverse = new_instancemethod(_SnapTime.TIntPrV_Reverse, None, TIntPrV)
TIntPrV.Merge = new_instancemethod(_SnapTime.TIntPrV_Merge, None, TIntPrV)
TIntPrV.Intrs = new_instancemethod(_SnapTime.TIntPrV_Intrs, None, TIntPrV)
TIntPrV.Union = new_instancemethod(_SnapTime.TIntPrV_Union, None, TIntPrV)
TIntPrV.Diff = new_instancemethod(_SnapTime.TIntPrV_Diff, None, TIntPrV)
TIntPrV.IntrsLen = new_instancemethod(_SnapTime.TIntPrV_IntrsLen, None, TIntPrV)
TIntPrV.UnionLen = new_instancemethod(_SnapTime.TIntPrV_UnionLen, None, TIntPrV)
TIntPrV.Count = new_instancemethod(_SnapTime.TIntPrV_Count, None, TIntPrV)
TIntPrV.SearchBin = new_instancemethod(_SnapTime.TIntPrV_SearchBin, None, TIntPrV)
TIntPrV.SearchBinLeft = new_instancemethod(_SnapTime.TIntPrV_SearchBinLeft, None, TIntPrV)
TIntPrV.SearchForw = new_instancemethod(_SnapTime.TIntPrV_SearchForw, None, TIntPrV)
TIntPrV.SearchBack = new_instancemethod(_SnapTime.TIntPrV_SearchBack, None, TIntPrV)
TIntPrV.SearchVForw = new_instancemethod(_SnapTime.TIntPrV_SearchVForw, None, TIntPrV)
TIntPrV.IsIn = new_instancemethod(_SnapTime.TIntPrV_IsIn, None, TIntPrV)
TIntPrV.IsInBin = new_instancemethod(_SnapTime.TIntPrV_IsInBin, None, TIntPrV)
TIntPrV.GetDat = new_instancemethod(_SnapTime.TIntPrV_GetDat, None, TIntPrV)
TIntPrV.GetAddDat = new_instancemethod(_SnapTime.TIntPrV_GetAddDat, None, TIntPrV)
TIntPrV.GetMxValN = new_instancemethod(_SnapTime.TIntPrV_GetMxValN, None, TIntPrV)
TIntPrV_swigregister = _SnapTime.TIntPrV_swigregister
TIntPrV_swigregister(TIntPrV)

def TIntPrV_SwapI(LVal, RVal):
    """
    TIntPrV_SwapI(TIntPr LVal, TIntPr RVal)

    Parameters
    ----------
    LVal: TVec< TPair< TInt,TInt > >::TIter
    RVal: TVec< TPair< TInt,TInt > >::TIter

    """
    return _SnapTime.TIntPrV_SwapI(LVal, RVal)

def TIntPrV_GetV(*args):
    """
    GetV(TIntPr Val1) -> TIntPrV

    Parameters
    ----------
    Val1: TPair< TInt,TInt > const &

    GetV(TIntPr Val1, TIntPr Val2) -> TIntPrV

    Parameters
    ----------
    Val1: TPair< TInt,TInt > const &
    Val2: TPair< TInt,TInt > const &

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3) -> TIntPrV

    Parameters
    ----------
    Val1: TPair< TInt,TInt > const &
    Val2: TPair< TInt,TInt > const &
    Val3: TPair< TInt,TInt > const &

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4) -> TIntPrV

    Parameters
    ----------
    Val1: TPair< TInt,TInt > const &
    Val2: TPair< TInt,TInt > const &
    Val3: TPair< TInt,TInt > const &
    Val4: TPair< TInt,TInt > const &

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5) -> TIntPrV

    Parameters
    ----------
    Val1: TPair< TInt,TInt > const &
    Val2: TPair< TInt,TInt > const &
    Val3: TPair< TInt,TInt > const &
    Val4: TPair< TInt,TInt > const &
    Val5: TPair< TInt,TInt > const &

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6) -> TIntPrV

    Parameters
    ----------
    Val1: TPair< TInt,TInt > const &
    Val2: TPair< TInt,TInt > const &
    Val3: TPair< TInt,TInt > const &
    Val4: TPair< TInt,TInt > const &
    Val5: TPair< TInt,TInt > const &
    Val6: TPair< TInt,TInt > const &

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6, TIntPr Val7) -> TIntPrV

    Parameters
    ----------
    Val1: TPair< TInt,TInt > const &
    Val2: TPair< TInt,TInt > const &
    Val3: TPair< TInt,TInt > const &
    Val4: TPair< TInt,TInt > const &
    Val5: TPair< TInt,TInt > const &
    Val6: TPair< TInt,TInt > const &
    Val7: TPair< TInt,TInt > const &

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6, TIntPr Val7, TIntPr Val8) -> TIntPrV

    Parameters
    ----------
    Val1: TPair< TInt,TInt > const &
    Val2: TPair< TInt,TInt > const &
    Val3: TPair< TInt,TInt > const &
    Val4: TPair< TInt,TInt > const &
    Val5: TPair< TInt,TInt > const &
    Val6: TPair< TInt,TInt > const &
    Val7: TPair< TInt,TInt > const &
    Val8: TPair< TInt,TInt > const &

    TIntPrV_GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6, TIntPr Val7, TIntPr Val8, TIntPr Val9) -> TIntPrV

    Parameters
    ----------
    Val1: TPair< TInt,TInt > const &
    Val2: TPair< TInt,TInt > const &
    Val3: TPair< TInt,TInt > const &
    Val4: TPair< TInt,TInt > const &
    Val5: TPair< TInt,TInt > const &
    Val6: TPair< TInt,TInt > const &
    Val7: TPair< TInt,TInt > const &
    Val8: TPair< TInt,TInt > const &
    Val9: TPair< TInt,TInt > const &

    """
    return _SnapTime.TIntPrV_GetV(*args)

class TIntPr64V(object):
    """Proxy of C++ TVec<(TInt64Pr,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TIntPr64V

    def __init__(self, *args):
        """
        __init__(TVec<(TInt64Pr,int64)> self) -> TIntPr64V
        __init__(TVec<(TInt64Pr,int64)> self, TIntPr64V Vec) -> TIntPr64V

        Parameters
        ----------
        Vec: TVec< TPair< TInt64,TInt64 >,long long > const &

        __init__(TVec<(TInt64Pr,int64)> self, TIntPr64V Vec) -> TIntPr64V

        Parameters
        ----------
        Vec: TVec< TPair< TInt64,TInt64 >,long long > &&

        __init__(TVec<(TInt64Pr,int64)> self, long long const & _Vals) -> TIntPr64V

        Parameters
        ----------
        _Vals: long long const &

        __init__(TVec<(TInt64Pr,int64)> self, long long const & _MxVals, long long const & _Vals) -> TIntPr64V

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        __init__(TVec<(TInt64Pr,int64)> self, long long const & _MxVals, long long const & _Vals, TInt64Pr Dat) -> TIntPr64V

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &
        Dat: TPair< TInt64,TInt64 >

        __init__(TVec<(TInt64Pr,int64)> self, TInt64Pr _ValT, long long const & _Vals) -> TIntPr64V

        Parameters
        ----------
        _ValT: TPair< TInt64,TInt64 > *
        _Vals: long long const &

        __init__(TVec<(TInt64Pr,int64)> self, TSIn SIn) -> TIntPr64V

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntPr64V_swiginit(self, _SnapTime.new_TIntPr64V(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntPr64V self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntPr64V_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntPr64V self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntPr64V_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntPr64V self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntPr64V_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TIntPr64V self, TInt64Pr Val) -> TIntPr64V

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TIntPr64V self, TIntPr64V Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TPair< TInt64,TInt64 >,long long > const &

        """
        return _SnapTime.TIntPr64V___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TIntPr64V self, TIntPr64V Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TPair< TInt64,TInt64 >,long long > const &

        """
        return _SnapTime.TIntPr64V___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntPr64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > const *

        """
        return _SnapTime.TIntPr64V_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TIntPr64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > const *

        """
        return _SnapTime.TIntPr64V_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntPr64V self) -> int

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > const *

        """
        return _SnapTime.TIntPr64V_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntPr64V self) -> int

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > const *

        """
        return _SnapTime.TIntPr64V_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TIntPr64V self, long long const & _Vals)

        Parameters
        ----------
        _Vals: long long const &

        Gen(TIntPr64V self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TIntPr64V_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TIntPr64V self, TInt64Pr _ValT, long long const & _Vals)

        Parameters
        ----------
        _ValT: TPair< TInt64,TInt64 > *
        _Vals: long long const &

        """
        return _SnapTime.TIntPr64V_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TIntPr64V self) -> bool

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > const *

        """
        return _SnapTime.TIntPr64V_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TIntPr64V self, long long const & _MxVals)

        Parameters
        ----------
        _MxVals: long long const &

        Reserve(TIntPr64V self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TIntPr64V_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TIntPr64V self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(TIntPr64V self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntPr64V self)

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > *

        """
        return _SnapTime.TIntPr64V_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TIntPr64V self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Trunc(TIntPr64V self)

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > *

        """
        return _SnapTime.TIntPr64V_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TIntPr64V self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Reduce(TIntPr64V self)

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > *

        """
        return _SnapTime.TIntPr64V_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TIntPr64V self)

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > *

        """
        return _SnapTime.TIntPr64V_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TIntPr64V self, TIntPr64V Vec)

        Parameters
        ----------
        Vec: TVec< TPair< TInt64,TInt64 >,long long > &

        """
        return _SnapTime.TIntPr64V_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TIntPr64V self, TIntPr64V Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TPair< TInt64,TInt64 >,long long > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TIntPr64V_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TIntPr64V self) -> bool

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > const *

        """
        return _SnapTime.TIntPr64V_Empty(self)


    def Len(self):
        """
        Len(TIntPr64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > const *

        """
        return _SnapTime.TIntPr64V_Len(self)


    def Reserved(self):
        """
        Reserved(TIntPr64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > const *

        """
        return _SnapTime.TIntPr64V_Reserved(self)


    def Last(self, *args):
        """
        Last(TIntPr64V self) -> TInt64Pr
        Last(TIntPr64V self) -> TInt64Pr

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > *

        """
        return _SnapTime.TIntPr64V_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TIntPr64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > const *

        """
        return _SnapTime.TIntPr64V_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TIntPr64V self) -> TInt64Pr
        LastLast(TIntPr64V self) -> TInt64Pr

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > *

        """
        return _SnapTime.TIntPr64V_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TIntPr64V self, TRnd Rnd) -> TInt64Pr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntPr64V self) -> TInt64Pr
        GetRndVal(TIntPr64V self, TRnd Rnd) -> TInt64Pr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntPr64V self) -> TInt64Pr

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > *

        """
        return _SnapTime.TIntPr64V_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TIntPr64V self) -> TInt64Pr

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > const *

        """
        return _SnapTime.TIntPr64V_BegI(self)


    def begin(self):
        """
        begin(TIntPr64V self) -> TInt64Pr

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > const *

        """
        return _SnapTime.TIntPr64V_begin(self)


    def EndI(self):
        """
        EndI(TIntPr64V self) -> TInt64Pr

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > const *

        """
        return _SnapTime.TIntPr64V_EndI(self)


    def end(self):
        """
        end(TIntPr64V self) -> TInt64Pr

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > const *

        """
        return _SnapTime.TIntPr64V_end(self)


    def GetI(self, ValN):
        """
        GetI(TIntPr64V self, long long const & ValN) -> TInt64Pr

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TIntPr64V_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TIntPr64V self) -> long long
        Add(TIntPr64V self, TInt64Pr Val) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        Add(TIntPr64V self, TInt64Pr Val) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > &

        Add(TIntPr64V self, TInt64Pr Val, long long const & ResizeLen) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &
        ResizeLen: long long const &

        """
        return _SnapTime.TIntPr64V_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TIntPr64V self, TInt64Pr Val) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TIntPr64V self, TInt64Pr Val, int Inc) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &
        Inc: int

        """
        return _SnapTime.TIntPr64V_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TIntPr64V self, TIntPr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TInt64,TInt64 >,long long > const &

        """
        return _SnapTime.TIntPr64V_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TIntPr64V self, TInt64Pr Val, bool const & Asc=True, long long const & _MxVals=-1) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &
        Asc: bool const &
        _MxVals: long long const &

        AddSorted(TIntPr64V self, TInt64Pr Val, bool const & Asc=True) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &
        Asc: bool const &

        AddSorted(TIntPr64V self, TInt64Pr Val) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TIntPr64V self, TInt64Pr Val, bool const & Asc) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &
        Asc: bool const &

        """
        return _SnapTime.TIntPr64V_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TIntPr64V self, TInt64Pr Val) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TIntPr64V self, TIntPr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TInt64,TInt64 >,long long > const &

        """
        return _SnapTime.TIntPr64V_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TIntPr64V self, TInt64Pr Val) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TIntPr64V self, long long const & ValN) -> TInt64Pr

        Parameters
        ----------
        ValN: long long const &

        GetVal(TIntPr64V self, long long const & ValN) -> TInt64Pr

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TIntPr64V_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TIntPr64V self, long long const & ValN, TInt64Pr Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TIntPr64V self, long long const & BValN, long long const & EValN, TIntPr64V ValV)

        Parameters
        ----------
        BValN: long long const &
        EValN: long long const &
        ValV: TVec< TPair< TInt64,TInt64 >,long long > &

        """
        return _SnapTime.TIntPr64V_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TIntPr64V self, long long const & ValN, TInt64Pr Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TIntPr64V self, long long const & ValN)

        Parameters
        ----------
        ValN: long long const &

        Del(TIntPr64V self, long long const & MnValN, long long const & MxValN)

        Parameters
        ----------
        MnValN: long long const &
        MxValN: long long const &

        """
        return _SnapTime.TIntPr64V_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TIntPr64V self)

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > *

        """
        return _SnapTime.TIntPr64V_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TIntPr64V self, TInt64Pr Val) -> bool

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TIntPr64V self, TInt64Pr Val)

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TIntPr64V self, TInt64Pr Val)

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TIntPr64V self, long long const & FromValN, long long const & ToValN)

        Parameters
        ----------
        FromValN: long long const &
        ToValN: long long const &

        """
        return _SnapTime.TIntPr64V_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TIntPr64V self, TIntPr64V Vec)

        Parameters
        ----------
        Vec: TVec< TPair< TInt64,TInt64 >,long long > &

        Swap(TIntPr64V self, long long const & ValN1, long long const & ValN2)

        Parameters
        ----------
        ValN1: long long const &
        ValN2: long long const &

        """
        return _SnapTime.TIntPr64V_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TInt64Pr LVal, TInt64Pr RVal)

        Parameters
        ----------
        LVal: TVec< TPair< TInt64,TInt64 >,long long >::TIter
        RVal: TVec< TPair< TInt64,TInt64 >,long long >::TIter

        """
        return _SnapTime.TIntPr64V_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TIntPr64V self) -> TVec< TPair< TInt64,TInt64 >,int >

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > *

        """
        return _SnapTime.TIntPr64V_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TIntPr64V self) -> bool

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > *

        """
        return _SnapTime.TIntPr64V_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TIntPr64V self) -> bool

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > *

        """
        return _SnapTime.TIntPr64V_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TIntPr64V self, long long const & LValN, long long const & RValN) -> long long

        Parameters
        ----------
        LValN: long long const &
        RValN: long long const &

        """
        return _SnapTime.TIntPr64V_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TIntPr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntPr64V_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TIntPr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntPr64V_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TIntPr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc) -> long long

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntPr64V_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TIntPr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntPr64V_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TIntPr64V self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TIntPr64V self)

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > *

        """
        return _SnapTime.TIntPr64V_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TIntPr64V self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TIntPr64V self) -> bool

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > const *

        """
        return _SnapTime.TIntPr64V_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TIntPr64V self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TIntPr64V_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TIntPr64V self)
        Reverse(TIntPr64V self, long long LValN, long long RValN)

        Parameters
        ----------
        LValN: long long
        RValN: long long

        """
        return _SnapTime.TIntPr64V_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TIntPr64V self)

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > *

        """
        return _SnapTime.TIntPr64V_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TIntPr64V self, TIntPr64V ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TInt64,TInt64 >,long long > const &

        Intrs(TIntPr64V self, TIntPr64V ValV, TIntPr64V DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TInt64,TInt64 >,long long > const &
        DstValV: TVec< TPair< TInt64,TInt64 >,long long > &

        """
        return _SnapTime.TIntPr64V_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TIntPr64V self, TIntPr64V ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TInt64,TInt64 >,long long > const &

        Union(TIntPr64V self, TIntPr64V ValV, TIntPr64V DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TInt64,TInt64 >,long long > const &
        DstValV: TVec< TPair< TInt64,TInt64 >,long long > &

        """
        return _SnapTime.TIntPr64V_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TIntPr64V self, TIntPr64V ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TInt64,TInt64 >,long long > const &

        Diff(TIntPr64V self, TIntPr64V ValV, TIntPr64V DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TInt64,TInt64 >,long long > const &
        DstValV: TVec< TPair< TInt64,TInt64 >,long long > &

        """
        return _SnapTime.TIntPr64V_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TIntPr64V self, TIntPr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TInt64,TInt64 >,long long > const &

        """
        return _SnapTime.TIntPr64V_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TIntPr64V self, TIntPr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TInt64,TInt64 >,long long > const &

        """
        return _SnapTime.TIntPr64V_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TIntPr64V self, TInt64Pr Val) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TIntPr64V self, TInt64Pr Val) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        SearchBin(TIntPr64V self, TInt64Pr Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &
        InsValN: long long &

        """
        return _SnapTime.TIntPr64V_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TIntPr64V self, TInt64Pr Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &
        InsValN: long long &

        """
        return _SnapTime.TIntPr64V_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TIntPr64V self, TInt64Pr Val, long long const & BValN=0) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &
        BValN: long long const &

        SearchForw(TIntPr64V self, TInt64Pr Val) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TIntPr64V self, TInt64Pr Val) -> long long

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TIntPr64V self, TIntPr64V ValV, long long const & BValN=0) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TInt64,TInt64 >,long long > const &
        BValN: long long const &

        SearchVForw(TIntPr64V self, TIntPr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TInt64,TInt64 >,long long > const &

        """
        return _SnapTime.TIntPr64V_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TIntPr64V self, TInt64Pr Val) -> bool

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        IsIn(TIntPr64V self, TInt64Pr Val, long long & ValN) -> bool

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &
        ValN: long long &

        """
        return _SnapTime.TIntPr64V_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TIntPr64V self, TInt64Pr Val) -> bool

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TIntPr64V self, TInt64Pr Val) -> TInt64Pr

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TIntPr64V self, TInt64Pr Val) -> TInt64Pr

        Parameters
        ----------
        Val: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TIntPr64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64Pr,int64 > const *

        """
        return _SnapTime.TIntPr64V_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TInt64Pr Val1) -> TIntPr64V

        Parameters
        ----------
        Val1: TPair< TInt64,TInt64 > const &

        GetV(TInt64Pr Val1, TInt64Pr Val2) -> TIntPr64V

        Parameters
        ----------
        Val1: TPair< TInt64,TInt64 > const &
        Val2: TPair< TInt64,TInt64 > const &

        GetV(TInt64Pr Val1, TInt64Pr Val2, TInt64Pr Val3) -> TIntPr64V

        Parameters
        ----------
        Val1: TPair< TInt64,TInt64 > const &
        Val2: TPair< TInt64,TInt64 > const &
        Val3: TPair< TInt64,TInt64 > const &

        GetV(TInt64Pr Val1, TInt64Pr Val2, TInt64Pr Val3, TInt64Pr Val4) -> TIntPr64V

        Parameters
        ----------
        Val1: TPair< TInt64,TInt64 > const &
        Val2: TPair< TInt64,TInt64 > const &
        Val3: TPair< TInt64,TInt64 > const &
        Val4: TPair< TInt64,TInt64 > const &

        GetV(TInt64Pr Val1, TInt64Pr Val2, TInt64Pr Val3, TInt64Pr Val4, TInt64Pr Val5) -> TIntPr64V

        Parameters
        ----------
        Val1: TPair< TInt64,TInt64 > const &
        Val2: TPair< TInt64,TInt64 > const &
        Val3: TPair< TInt64,TInt64 > const &
        Val4: TPair< TInt64,TInt64 > const &
        Val5: TPair< TInt64,TInt64 > const &

        GetV(TInt64Pr Val1, TInt64Pr Val2, TInt64Pr Val3, TInt64Pr Val4, TInt64Pr Val5, TInt64Pr Val6) -> TIntPr64V

        Parameters
        ----------
        Val1: TPair< TInt64,TInt64 > const &
        Val2: TPair< TInt64,TInt64 > const &
        Val3: TPair< TInt64,TInt64 > const &
        Val4: TPair< TInt64,TInt64 > const &
        Val5: TPair< TInt64,TInt64 > const &
        Val6: TPair< TInt64,TInt64 > const &

        GetV(TInt64Pr Val1, TInt64Pr Val2, TInt64Pr Val3, TInt64Pr Val4, TInt64Pr Val5, TInt64Pr Val6, TInt64Pr Val7) -> TIntPr64V

        Parameters
        ----------
        Val1: TPair< TInt64,TInt64 > const &
        Val2: TPair< TInt64,TInt64 > const &
        Val3: TPair< TInt64,TInt64 > const &
        Val4: TPair< TInt64,TInt64 > const &
        Val5: TPair< TInt64,TInt64 > const &
        Val6: TPair< TInt64,TInt64 > const &
        Val7: TPair< TInt64,TInt64 > const &

        GetV(TInt64Pr Val1, TInt64Pr Val2, TInt64Pr Val3, TInt64Pr Val4, TInt64Pr Val5, TInt64Pr Val6, TInt64Pr Val7, TInt64Pr Val8) -> TIntPr64V

        Parameters
        ----------
        Val1: TPair< TInt64,TInt64 > const &
        Val2: TPair< TInt64,TInt64 > const &
        Val3: TPair< TInt64,TInt64 > const &
        Val4: TPair< TInt64,TInt64 > const &
        Val5: TPair< TInt64,TInt64 > const &
        Val6: TPair< TInt64,TInt64 > const &
        Val7: TPair< TInt64,TInt64 > const &
        Val8: TPair< TInt64,TInt64 > const &

        GetV(TInt64Pr Val1, TInt64Pr Val2, TInt64Pr Val3, TInt64Pr Val4, TInt64Pr Val5, TInt64Pr Val6, TInt64Pr Val7, TInt64Pr Val8, TInt64Pr Val9) -> TIntPr64V

        Parameters
        ----------
        Val1: TPair< TInt64,TInt64 > const &
        Val2: TPair< TInt64,TInt64 > const &
        Val3: TPair< TInt64,TInt64 > const &
        Val4: TPair< TInt64,TInt64 > const &
        Val5: TPair< TInt64,TInt64 > const &
        Val6: TPair< TInt64,TInt64 > const &
        Val7: TPair< TInt64,TInt64 > const &
        Val8: TPair< TInt64,TInt64 > const &
        Val9: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPr64V_GetV(*args)

    GetV = staticmethod(GetV)
TIntPr64V.LoadShM = new_instancemethod(_SnapTime.TIntPr64V_LoadShM, None, TIntPr64V)
TIntPr64V.Load = new_instancemethod(_SnapTime.TIntPr64V_Load, None, TIntPr64V)
TIntPr64V.Save = new_instancemethod(_SnapTime.TIntPr64V_Save, None, TIntPr64V)
TIntPr64V.__add__ = new_instancemethod(_SnapTime.TIntPr64V___add__, None, TIntPr64V)
TIntPr64V.__eq__ = new_instancemethod(_SnapTime.TIntPr64V___eq__, None, TIntPr64V)
TIntPr64V.__lt__ = new_instancemethod(_SnapTime.TIntPr64V___lt__, None, TIntPr64V)
TIntPr64V.GetMemUsed = new_instancemethod(_SnapTime.TIntPr64V_GetMemUsed, None, TIntPr64V)
TIntPr64V.GetMemSize = new_instancemethod(_SnapTime.TIntPr64V_GetMemSize, None, TIntPr64V)
TIntPr64V.GetPrimHashCd = new_instancemethod(_SnapTime.TIntPr64V_GetPrimHashCd, None, TIntPr64V)
TIntPr64V.GetSecHashCd = new_instancemethod(_SnapTime.TIntPr64V_GetSecHashCd, None, TIntPr64V)
TIntPr64V.Gen = new_instancemethod(_SnapTime.TIntPr64V_Gen, None, TIntPr64V)
TIntPr64V.GenExt = new_instancemethod(_SnapTime.TIntPr64V_GenExt, None, TIntPr64V)
TIntPr64V.IsExt = new_instancemethod(_SnapTime.TIntPr64V_IsExt, None, TIntPr64V)
TIntPr64V.Reserve = new_instancemethod(_SnapTime.TIntPr64V_Reserve, None, TIntPr64V)
TIntPr64V.Clr = new_instancemethod(_SnapTime.TIntPr64V_Clr, None, TIntPr64V)
TIntPr64V.Trunc = new_instancemethod(_SnapTime.TIntPr64V_Trunc, None, TIntPr64V)
TIntPr64V.Reduce = new_instancemethod(_SnapTime.TIntPr64V_Reduce, None, TIntPr64V)
TIntPr64V.Pack = new_instancemethod(_SnapTime.TIntPr64V_Pack, None, TIntPr64V)
TIntPr64V.MoveFrom = new_instancemethod(_SnapTime.TIntPr64V_MoveFrom, None, TIntPr64V)
TIntPr64V.CopyUniqueFrom = new_instancemethod(_SnapTime.TIntPr64V_CopyUniqueFrom, None, TIntPr64V)
TIntPr64V.Empty = new_instancemethod(_SnapTime.TIntPr64V_Empty, None, TIntPr64V)
TIntPr64V.Len = new_instancemethod(_SnapTime.TIntPr64V_Len, None, TIntPr64V)
TIntPr64V.Reserved = new_instancemethod(_SnapTime.TIntPr64V_Reserved, None, TIntPr64V)
TIntPr64V.Last = new_instancemethod(_SnapTime.TIntPr64V_Last, None, TIntPr64V)
TIntPr64V.LastValN = new_instancemethod(_SnapTime.TIntPr64V_LastValN, None, TIntPr64V)
TIntPr64V.LastLast = new_instancemethod(_SnapTime.TIntPr64V_LastLast, None, TIntPr64V)
TIntPr64V.GetRndVal = new_instancemethod(_SnapTime.TIntPr64V_GetRndVal, None, TIntPr64V)
TIntPr64V.BegI = new_instancemethod(_SnapTime.TIntPr64V_BegI, None, TIntPr64V)
TIntPr64V.begin = new_instancemethod(_SnapTime.TIntPr64V_begin, None, TIntPr64V)
TIntPr64V.EndI = new_instancemethod(_SnapTime.TIntPr64V_EndI, None, TIntPr64V)
TIntPr64V.end = new_instancemethod(_SnapTime.TIntPr64V_end, None, TIntPr64V)
TIntPr64V.GetI = new_instancemethod(_SnapTime.TIntPr64V_GetI, None, TIntPr64V)
TIntPr64V.Add = new_instancemethod(_SnapTime.TIntPr64V_Add, None, TIntPr64V)
TIntPr64V.AddMP = new_instancemethod(_SnapTime.TIntPr64V_AddMP, None, TIntPr64V)
TIntPr64V.MoveLastMP = new_instancemethod(_SnapTime.TIntPr64V_MoveLastMP, None, TIntPr64V)
TIntPr64V.AddV = new_instancemethod(_SnapTime.TIntPr64V_AddV, None, TIntPr64V)
TIntPr64V.AddSorted = new_instancemethod(_SnapTime.TIntPr64V_AddSorted, None, TIntPr64V)
TIntPr64V.AddBackSorted = new_instancemethod(_SnapTime.TIntPr64V_AddBackSorted, None, TIntPr64V)
TIntPr64V.AddMerged = new_instancemethod(_SnapTime.TIntPr64V_AddMerged, None, TIntPr64V)
TIntPr64V.AddVMerged = new_instancemethod(_SnapTime.TIntPr64V_AddVMerged, None, TIntPr64V)
TIntPr64V.AddUnique = new_instancemethod(_SnapTime.TIntPr64V_AddUnique, None, TIntPr64V)
TIntPr64V.GetVal = new_instancemethod(_SnapTime.TIntPr64V_GetVal, None, TIntPr64V)
TIntPr64V.SetVal = new_instancemethod(_SnapTime.TIntPr64V_SetVal, None, TIntPr64V)
TIntPr64V.GetSubValV = new_instancemethod(_SnapTime.TIntPr64V_GetSubValV, None, TIntPr64V)
TIntPr64V.Ins = new_instancemethod(_SnapTime.TIntPr64V_Ins, None, TIntPr64V)
TIntPr64V.Del = new_instancemethod(_SnapTime.TIntPr64V_Del, None, TIntPr64V)
TIntPr64V.DelLast = new_instancemethod(_SnapTime.TIntPr64V_DelLast, None, TIntPr64V)
TIntPr64V.DelIfIn = new_instancemethod(_SnapTime.TIntPr64V_DelIfIn, None, TIntPr64V)
TIntPr64V.DelAll = new_instancemethod(_SnapTime.TIntPr64V_DelAll, None, TIntPr64V)
TIntPr64V.PutAll = new_instancemethod(_SnapTime.TIntPr64V_PutAll, None, TIntPr64V)
TIntPr64V.Move = new_instancemethod(_SnapTime.TIntPr64V_Move, None, TIntPr64V)
TIntPr64V.Swap = new_instancemethod(_SnapTime.TIntPr64V_Swap, None, TIntPr64V)
TIntPr64V.Get32BitVector = new_instancemethod(_SnapTime.TIntPr64V_Get32BitVector, None, TIntPr64V)
TIntPr64V.NextPerm = new_instancemethod(_SnapTime.TIntPr64V_NextPerm, None, TIntPr64V)
TIntPr64V.PrevPerm = new_instancemethod(_SnapTime.TIntPr64V_PrevPerm, None, TIntPr64V)
TIntPr64V.GetPivotValN = new_instancemethod(_SnapTime.TIntPr64V_GetPivotValN, None, TIntPr64V)
TIntPr64V.BSort = new_instancemethod(_SnapTime.TIntPr64V_BSort, None, TIntPr64V)
TIntPr64V.ISort = new_instancemethod(_SnapTime.TIntPr64V_ISort, None, TIntPr64V)
TIntPr64V.Partition = new_instancemethod(_SnapTime.TIntPr64V_Partition, None, TIntPr64V)
TIntPr64V.QSort = new_instancemethod(_SnapTime.TIntPr64V_QSort, None, TIntPr64V)
TIntPr64V.Sort = new_instancemethod(_SnapTime.TIntPr64V_Sort, None, TIntPr64V)
TIntPr64V.IsSorted = new_instancemethod(_SnapTime.TIntPr64V_IsSorted, None, TIntPr64V)
TIntPr64V.Shuffle = new_instancemethod(_SnapTime.TIntPr64V_Shuffle, None, TIntPr64V)
TIntPr64V.Reverse = new_instancemethod(_SnapTime.TIntPr64V_Reverse, None, TIntPr64V)
TIntPr64V.Merge = new_instancemethod(_SnapTime.TIntPr64V_Merge, None, TIntPr64V)
TIntPr64V.Intrs = new_instancemethod(_SnapTime.TIntPr64V_Intrs, None, TIntPr64V)
TIntPr64V.Union = new_instancemethod(_SnapTime.TIntPr64V_Union, None, TIntPr64V)
TIntPr64V.Diff = new_instancemethod(_SnapTime.TIntPr64V_Diff, None, TIntPr64V)
TIntPr64V.IntrsLen = new_instancemethod(_SnapTime.TIntPr64V_IntrsLen, None, TIntPr64V)
TIntPr64V.UnionLen = new_instancemethod(_SnapTime.TIntPr64V_UnionLen, None, TIntPr64V)
TIntPr64V.Count = new_instancemethod(_SnapTime.TIntPr64V_Count, None, TIntPr64V)
TIntPr64V.SearchBin = new_instancemethod(_SnapTime.TIntPr64V_SearchBin, None, TIntPr64V)
TIntPr64V.SearchBinLeft = new_instancemethod(_SnapTime.TIntPr64V_SearchBinLeft, None, TIntPr64V)
TIntPr64V.SearchForw = new_instancemethod(_SnapTime.TIntPr64V_SearchForw, None, TIntPr64V)
TIntPr64V.SearchBack = new_instancemethod(_SnapTime.TIntPr64V_SearchBack, None, TIntPr64V)
TIntPr64V.SearchVForw = new_instancemethod(_SnapTime.TIntPr64V_SearchVForw, None, TIntPr64V)
TIntPr64V.IsIn = new_instancemethod(_SnapTime.TIntPr64V_IsIn, None, TIntPr64V)
TIntPr64V.IsInBin = new_instancemethod(_SnapTime.TIntPr64V_IsInBin, None, TIntPr64V)
TIntPr64V.GetDat = new_instancemethod(_SnapTime.TIntPr64V_GetDat, None, TIntPr64V)
TIntPr64V.GetAddDat = new_instancemethod(_SnapTime.TIntPr64V_GetAddDat, None, TIntPr64V)
TIntPr64V.GetMxValN = new_instancemethod(_SnapTime.TIntPr64V_GetMxValN, None, TIntPr64V)
TIntPr64V_swigregister = _SnapTime.TIntPr64V_swigregister
TIntPr64V_swigregister(TIntPr64V)

def TIntPr64V_SwapI(LVal, RVal):
    """
    TIntPr64V_SwapI(TInt64Pr LVal, TInt64Pr RVal)

    Parameters
    ----------
    LVal: TVec< TPair< TInt64,TInt64 >,long long >::TIter
    RVal: TVec< TPair< TInt64,TInt64 >,long long >::TIter

    """
    return _SnapTime.TIntPr64V_SwapI(LVal, RVal)

def TIntPr64V_GetV(*args):
    """
    GetV(TInt64Pr Val1) -> TIntPr64V

    Parameters
    ----------
    Val1: TPair< TInt64,TInt64 > const &

    GetV(TInt64Pr Val1, TInt64Pr Val2) -> TIntPr64V

    Parameters
    ----------
    Val1: TPair< TInt64,TInt64 > const &
    Val2: TPair< TInt64,TInt64 > const &

    GetV(TInt64Pr Val1, TInt64Pr Val2, TInt64Pr Val3) -> TIntPr64V

    Parameters
    ----------
    Val1: TPair< TInt64,TInt64 > const &
    Val2: TPair< TInt64,TInt64 > const &
    Val3: TPair< TInt64,TInt64 > const &

    GetV(TInt64Pr Val1, TInt64Pr Val2, TInt64Pr Val3, TInt64Pr Val4) -> TIntPr64V

    Parameters
    ----------
    Val1: TPair< TInt64,TInt64 > const &
    Val2: TPair< TInt64,TInt64 > const &
    Val3: TPair< TInt64,TInt64 > const &
    Val4: TPair< TInt64,TInt64 > const &

    GetV(TInt64Pr Val1, TInt64Pr Val2, TInt64Pr Val3, TInt64Pr Val4, TInt64Pr Val5) -> TIntPr64V

    Parameters
    ----------
    Val1: TPair< TInt64,TInt64 > const &
    Val2: TPair< TInt64,TInt64 > const &
    Val3: TPair< TInt64,TInt64 > const &
    Val4: TPair< TInt64,TInt64 > const &
    Val5: TPair< TInt64,TInt64 > const &

    GetV(TInt64Pr Val1, TInt64Pr Val2, TInt64Pr Val3, TInt64Pr Val4, TInt64Pr Val5, TInt64Pr Val6) -> TIntPr64V

    Parameters
    ----------
    Val1: TPair< TInt64,TInt64 > const &
    Val2: TPair< TInt64,TInt64 > const &
    Val3: TPair< TInt64,TInt64 > const &
    Val4: TPair< TInt64,TInt64 > const &
    Val5: TPair< TInt64,TInt64 > const &
    Val6: TPair< TInt64,TInt64 > const &

    GetV(TInt64Pr Val1, TInt64Pr Val2, TInt64Pr Val3, TInt64Pr Val4, TInt64Pr Val5, TInt64Pr Val6, TInt64Pr Val7) -> TIntPr64V

    Parameters
    ----------
    Val1: TPair< TInt64,TInt64 > const &
    Val2: TPair< TInt64,TInt64 > const &
    Val3: TPair< TInt64,TInt64 > const &
    Val4: TPair< TInt64,TInt64 > const &
    Val5: TPair< TInt64,TInt64 > const &
    Val6: TPair< TInt64,TInt64 > const &
    Val7: TPair< TInt64,TInt64 > const &

    GetV(TInt64Pr Val1, TInt64Pr Val2, TInt64Pr Val3, TInt64Pr Val4, TInt64Pr Val5, TInt64Pr Val6, TInt64Pr Val7, TInt64Pr Val8) -> TIntPr64V

    Parameters
    ----------
    Val1: TPair< TInt64,TInt64 > const &
    Val2: TPair< TInt64,TInt64 > const &
    Val3: TPair< TInt64,TInt64 > const &
    Val4: TPair< TInt64,TInt64 > const &
    Val5: TPair< TInt64,TInt64 > const &
    Val6: TPair< TInt64,TInt64 > const &
    Val7: TPair< TInt64,TInt64 > const &
    Val8: TPair< TInt64,TInt64 > const &

    TIntPr64V_GetV(TInt64Pr Val1, TInt64Pr Val2, TInt64Pr Val3, TInt64Pr Val4, TInt64Pr Val5, TInt64Pr Val6, TInt64Pr Val7, TInt64Pr Val8, TInt64Pr Val9) -> TIntPr64V

    Parameters
    ----------
    Val1: TPair< TInt64,TInt64 > const &
    Val2: TPair< TInt64,TInt64 > const &
    Val3: TPair< TInt64,TInt64 > const &
    Val4: TPair< TInt64,TInt64 > const &
    Val5: TPair< TInt64,TInt64 > const &
    Val6: TPair< TInt64,TInt64 > const &
    Val7: TPair< TInt64,TInt64 > const &
    Val8: TPair< TInt64,TInt64 > const &
    Val9: TPair< TInt64,TInt64 > const &

    """
    return _SnapTime.TIntPr64V_GetV(*args)

class TFltPrV(object):
    """Proxy of C++ TVec<(TFltPr)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TFltPrV

    def __init__(self, *args):
        """
        __init__(TVec<(TFltPr)> self) -> TFltPrV
        __init__(TVec<(TFltPr)> self, TFltPrV Vec) -> TFltPrV

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,int > const &

        __init__(TVec<(TFltPr)> self, TFltPrV Vec) -> TFltPrV

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,int > &&

        __init__(TVec<(TFltPr)> self, int const & _Vals) -> TFltPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TVec<(TFltPr)> self, int const & _MxVals, int const & _Vals) -> TFltPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TVec<(TFltPr)> self, int const & _MxVals, int const & _Vals, TFltPr Dat) -> TFltPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &
        Dat: TPair< TFlt,TFlt >

        __init__(TVec<(TFltPr)> self, TFltPr _ValT, int const & _Vals) -> TFltPrV

        Parameters
        ----------
        _ValT: TPair< TFlt,TFlt > *
        _Vals: int const &

        __init__(TVec<(TFltPr)> self, TSIn SIn) -> TFltPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TFltPrV_swiginit(self, _SnapTime.new_TFltPrV(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TFltPrV self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TFltPrV_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TFltPrV self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TFltPrV_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TFltPrV self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TFltPrV_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TFltPrV self, TFltPr Val) -> TFltPrV

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TFltPrV self, TFltPrV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,int > const &

        """
        return _SnapTime.TFltPrV___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TFltPrV self, TFltPrV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,int > const &

        """
        return _SnapTime.TFltPrV___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TFltPrV self) -> int

        Parameters
        ----------
        self: TVec< TFltPr > const *

        """
        return _SnapTime.TFltPrV_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TFltPrV self) -> int

        Parameters
        ----------
        self: TVec< TFltPr > const *

        """
        return _SnapTime.TFltPrV_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TFltPrV self) -> int

        Parameters
        ----------
        self: TVec< TFltPr > const *

        """
        return _SnapTime.TFltPrV_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TFltPrV self) -> int

        Parameters
        ----------
        self: TVec< TFltPr > const *

        """
        return _SnapTime.TFltPrV_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TFltPrV self, int const & _Vals)

        Parameters
        ----------
        _Vals: int const &

        Gen(TFltPrV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TFltPrV_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TFltPrV self, TFltPr _ValT, int const & _Vals)

        Parameters
        ----------
        _ValT: TPair< TFlt,TFlt > *
        _Vals: int const &

        """
        return _SnapTime.TFltPrV_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TFltPrV self) -> bool

        Parameters
        ----------
        self: TVec< TFltPr > const *

        """
        return _SnapTime.TFltPrV_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TFltPrV self, int const & _MxVals)

        Parameters
        ----------
        _MxVals: int const &

        Reserve(TFltPrV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TFltPrV_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TFltPrV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TFltPrV self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TFltPrV self)

        Parameters
        ----------
        self: TVec< TFltPr > *

        """
        return _SnapTime.TFltPrV_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TFltPrV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Trunc(TFltPrV self)

        Parameters
        ----------
        self: TVec< TFltPr > *

        """
        return _SnapTime.TFltPrV_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TFltPrV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Reduce(TFltPrV self)

        Parameters
        ----------
        self: TVec< TFltPr > *

        """
        return _SnapTime.TFltPrV_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TFltPrV self)

        Parameters
        ----------
        self: TVec< TFltPr > *

        """
        return _SnapTime.TFltPrV_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TFltPrV self, TFltPrV Vec)

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,int > &

        """
        return _SnapTime.TFltPrV_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TFltPrV self, TFltPrV Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,int > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TFltPrV_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TFltPrV self) -> bool

        Parameters
        ----------
        self: TVec< TFltPr > const *

        """
        return _SnapTime.TFltPrV_Empty(self)


    def Len(self):
        """
        Len(TFltPrV self) -> int

        Parameters
        ----------
        self: TVec< TFltPr > const *

        """
        return _SnapTime.TFltPrV_Len(self)


    def Reserved(self):
        """
        Reserved(TFltPrV self) -> int

        Parameters
        ----------
        self: TVec< TFltPr > const *

        """
        return _SnapTime.TFltPrV_Reserved(self)


    def Last(self, *args):
        """
        Last(TFltPrV self) -> TFltPr
        Last(TFltPrV self) -> TFltPr

        Parameters
        ----------
        self: TVec< TFltPr > *

        """
        return _SnapTime.TFltPrV_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TFltPrV self) -> int

        Parameters
        ----------
        self: TVec< TFltPr > const *

        """
        return _SnapTime.TFltPrV_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TFltPrV self) -> TFltPr
        LastLast(TFltPrV self) -> TFltPr

        Parameters
        ----------
        self: TVec< TFltPr > *

        """
        return _SnapTime.TFltPrV_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TFltPrV self, TRnd Rnd) -> TFltPr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TFltPrV self) -> TFltPr
        GetRndVal(TFltPrV self, TRnd Rnd) -> TFltPr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TFltPrV self) -> TFltPr

        Parameters
        ----------
        self: TVec< TFltPr > *

        """
        return _SnapTime.TFltPrV_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TFltPrV self) -> TFltPr

        Parameters
        ----------
        self: TVec< TFltPr > const *

        """
        return _SnapTime.TFltPrV_BegI(self)


    def begin(self):
        """
        begin(TFltPrV self) -> TFltPr

        Parameters
        ----------
        self: TVec< TFltPr > const *

        """
        return _SnapTime.TFltPrV_begin(self)


    def EndI(self):
        """
        EndI(TFltPrV self) -> TFltPr

        Parameters
        ----------
        self: TVec< TFltPr > const *

        """
        return _SnapTime.TFltPrV_EndI(self)


    def end(self):
        """
        end(TFltPrV self) -> TFltPr

        Parameters
        ----------
        self: TVec< TFltPr > const *

        """
        return _SnapTime.TFltPrV_end(self)


    def GetI(self, ValN):
        """
        GetI(TFltPrV self, int const & ValN) -> TFltPr

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TFltPrV_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TFltPrV self) -> int
        Add(TFltPrV self, TFltPr Val) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        Add(TFltPrV self, TFltPr Val) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > &

        Add(TFltPrV self, TFltPr Val, int const & ResizeLen) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        ResizeLen: int const &

        """
        return _SnapTime.TFltPrV_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TFltPrV self, TFltPr Val) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TFltPrV self, TFltPr Val, int Inc) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        Inc: int

        """
        return _SnapTime.TFltPrV_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TFltPrV self, TFltPrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,int > const &

        """
        return _SnapTime.TFltPrV_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TFltPrV self, TFltPr Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        Asc: bool const &
        _MxVals: int const &

        AddSorted(TFltPrV self, TFltPr Val, bool const & Asc=True) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        Asc: bool const &

        AddSorted(TFltPrV self, TFltPr Val) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TFltPrV self, TFltPr Val, bool const & Asc) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        Asc: bool const &

        """
        return _SnapTime.TFltPrV_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TFltPrV self, TFltPr Val) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TFltPrV self, TFltPrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,int > const &

        """
        return _SnapTime.TFltPrV_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TFltPrV self, TFltPr Val) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TFltPrV self, int const & ValN) -> TFltPr

        Parameters
        ----------
        ValN: int const &

        GetVal(TFltPrV self, int const & ValN) -> TFltPr

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TFltPrV_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TFltPrV self, int const & ValN, TFltPr Val)

        Parameters
        ----------
        ValN: int const &
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TFltPrV self, int const & BValN, int const & EValN, TFltPrV ValV)

        Parameters
        ----------
        BValN: int const &
        EValN: int const &
        ValV: TVec< TPair< TFlt,TFlt >,int > &

        """
        return _SnapTime.TFltPrV_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TFltPrV self, int const & ValN, TFltPr Val)

        Parameters
        ----------
        ValN: int const &
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TFltPrV self, int const & ValN)

        Parameters
        ----------
        ValN: int const &

        Del(TFltPrV self, int const & MnValN, int const & MxValN)

        Parameters
        ----------
        MnValN: int const &
        MxValN: int const &

        """
        return _SnapTime.TFltPrV_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TFltPrV self)

        Parameters
        ----------
        self: TVec< TFltPr > *

        """
        return _SnapTime.TFltPrV_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TFltPrV self, TFltPr Val) -> bool

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TFltPrV self, TFltPr Val)

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TFltPrV self, TFltPr Val)

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TFltPrV self, int const & FromValN, int const & ToValN)

        Parameters
        ----------
        FromValN: int const &
        ToValN: int const &

        """
        return _SnapTime.TFltPrV_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TFltPrV self, TFltPrV Vec)

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,int > &

        Swap(TFltPrV self, int const & ValN1, int const & ValN2)

        Parameters
        ----------
        ValN1: int const &
        ValN2: int const &

        """
        return _SnapTime.TFltPrV_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TFltPr LVal, TFltPr RVal)

        Parameters
        ----------
        LVal: TVec< TPair< TFlt,TFlt > >::TIter
        RVal: TVec< TPair< TFlt,TFlt > >::TIter

        """
        return _SnapTime.TFltPrV_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TFltPrV self) -> TFltPrV

        Parameters
        ----------
        self: TVec< TFltPr > *

        """
        return _SnapTime.TFltPrV_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TFltPrV self) -> bool

        Parameters
        ----------
        self: TVec< TFltPr > *

        """
        return _SnapTime.TFltPrV_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TFltPrV self) -> bool

        Parameters
        ----------
        self: TVec< TFltPr > *

        """
        return _SnapTime.TFltPrV_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TFltPrV self, int const & LValN, int const & RValN) -> int

        Parameters
        ----------
        LValN: int const &
        RValN: int const &

        """
        return _SnapTime.TFltPrV_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TFltPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TFltPrV_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TFltPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TFltPrV_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TFltPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TFltPrV_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TFltPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TFltPrV_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TFltPrV self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TFltPrV self)

        Parameters
        ----------
        self: TVec< TFltPr > *

        """
        return _SnapTime.TFltPrV_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TFltPrV self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TFltPrV self) -> bool

        Parameters
        ----------
        self: TVec< TFltPr > const *

        """
        return _SnapTime.TFltPrV_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TFltPrV self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TFltPrV_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TFltPrV self)
        Reverse(TFltPrV self, int LValN, int RValN)

        Parameters
        ----------
        LValN: int
        RValN: int

        """
        return _SnapTime.TFltPrV_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TFltPrV self)

        Parameters
        ----------
        self: TVec< TFltPr > *

        """
        return _SnapTime.TFltPrV_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TFltPrV self, TFltPrV ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,int > const &

        Intrs(TFltPrV self, TFltPrV ValV, TFltPrV DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,int > const &
        DstValV: TVec< TPair< TFlt,TFlt >,int > &

        """
        return _SnapTime.TFltPrV_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TFltPrV self, TFltPrV ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,int > const &

        Union(TFltPrV self, TFltPrV ValV, TFltPrV DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,int > const &
        DstValV: TVec< TPair< TFlt,TFlt >,int > &

        """
        return _SnapTime.TFltPrV_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TFltPrV self, TFltPrV ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,int > const &

        Diff(TFltPrV self, TFltPrV ValV, TFltPrV DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,int > const &
        DstValV: TVec< TPair< TFlt,TFlt >,int > &

        """
        return _SnapTime.TFltPrV_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TFltPrV self, TFltPrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,int > const &

        """
        return _SnapTime.TFltPrV_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TFltPrV self, TFltPrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,int > const &

        """
        return _SnapTime.TFltPrV_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TFltPrV self, TFltPr Val) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TFltPrV self, TFltPr Val) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        SearchBin(TFltPrV self, TFltPr Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        InsValN: int &

        """
        return _SnapTime.TFltPrV_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TFltPrV self, TFltPr Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        InsValN: int &

        """
        return _SnapTime.TFltPrV_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TFltPrV self, TFltPr Val, int const & BValN=0) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        BValN: int const &

        SearchForw(TFltPrV self, TFltPr Val) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TFltPrV self, TFltPr Val) -> int

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TFltPrV self, TFltPrV ValV, int const & BValN=0) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,int > const &
        BValN: int const &

        SearchVForw(TFltPrV self, TFltPrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,int > const &

        """
        return _SnapTime.TFltPrV_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TFltPrV self, TFltPr Val) -> bool

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        IsIn(TFltPrV self, TFltPr Val, int & ValN) -> bool

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        ValN: int &

        """
        return _SnapTime.TFltPrV_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TFltPrV self, TFltPr Val) -> bool

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TFltPrV self, TFltPr Val) -> TFltPr

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TFltPrV self, TFltPr Val) -> TFltPr

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TFltPrV self) -> int

        Parameters
        ----------
        self: TVec< TFltPr > const *

        """
        return _SnapTime.TFltPrV_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TFltPr Val1) -> TFltPrV

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2) -> TFltPrV

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3) -> TFltPrV

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4) -> TFltPrV

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5) -> TFltPrV

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &
        Val5: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6) -> TFltPrV

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &
        Val5: TPair< TFlt,TFlt > const &
        Val6: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7) -> TFltPrV

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &
        Val5: TPair< TFlt,TFlt > const &
        Val6: TPair< TFlt,TFlt > const &
        Val7: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7, TFltPr Val8) -> TFltPrV

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &
        Val5: TPair< TFlt,TFlt > const &
        Val6: TPair< TFlt,TFlt > const &
        Val7: TPair< TFlt,TFlt > const &
        Val8: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7, TFltPr Val8, TFltPr Val9) -> TFltPrV

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &
        Val5: TPair< TFlt,TFlt > const &
        Val6: TPair< TFlt,TFlt > const &
        Val7: TPair< TFlt,TFlt > const &
        Val8: TPair< TFlt,TFlt > const &
        Val9: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPrV_GetV(*args)

    GetV = staticmethod(GetV)
TFltPrV.LoadShM = new_instancemethod(_SnapTime.TFltPrV_LoadShM, None, TFltPrV)
TFltPrV.Load = new_instancemethod(_SnapTime.TFltPrV_Load, None, TFltPrV)
TFltPrV.Save = new_instancemethod(_SnapTime.TFltPrV_Save, None, TFltPrV)
TFltPrV.__add__ = new_instancemethod(_SnapTime.TFltPrV___add__, None, TFltPrV)
TFltPrV.__eq__ = new_instancemethod(_SnapTime.TFltPrV___eq__, None, TFltPrV)
TFltPrV.__lt__ = new_instancemethod(_SnapTime.TFltPrV___lt__, None, TFltPrV)
TFltPrV.GetMemUsed = new_instancemethod(_SnapTime.TFltPrV_GetMemUsed, None, TFltPrV)
TFltPrV.GetMemSize = new_instancemethod(_SnapTime.TFltPrV_GetMemSize, None, TFltPrV)
TFltPrV.GetPrimHashCd = new_instancemethod(_SnapTime.TFltPrV_GetPrimHashCd, None, TFltPrV)
TFltPrV.GetSecHashCd = new_instancemethod(_SnapTime.TFltPrV_GetSecHashCd, None, TFltPrV)
TFltPrV.Gen = new_instancemethod(_SnapTime.TFltPrV_Gen, None, TFltPrV)
TFltPrV.GenExt = new_instancemethod(_SnapTime.TFltPrV_GenExt, None, TFltPrV)
TFltPrV.IsExt = new_instancemethod(_SnapTime.TFltPrV_IsExt, None, TFltPrV)
TFltPrV.Reserve = new_instancemethod(_SnapTime.TFltPrV_Reserve, None, TFltPrV)
TFltPrV.Clr = new_instancemethod(_SnapTime.TFltPrV_Clr, None, TFltPrV)
TFltPrV.Trunc = new_instancemethod(_SnapTime.TFltPrV_Trunc, None, TFltPrV)
TFltPrV.Reduce = new_instancemethod(_SnapTime.TFltPrV_Reduce, None, TFltPrV)
TFltPrV.Pack = new_instancemethod(_SnapTime.TFltPrV_Pack, None, TFltPrV)
TFltPrV.MoveFrom = new_instancemethod(_SnapTime.TFltPrV_MoveFrom, None, TFltPrV)
TFltPrV.CopyUniqueFrom = new_instancemethod(_SnapTime.TFltPrV_CopyUniqueFrom, None, TFltPrV)
TFltPrV.Empty = new_instancemethod(_SnapTime.TFltPrV_Empty, None, TFltPrV)
TFltPrV.Len = new_instancemethod(_SnapTime.TFltPrV_Len, None, TFltPrV)
TFltPrV.Reserved = new_instancemethod(_SnapTime.TFltPrV_Reserved, None, TFltPrV)
TFltPrV.Last = new_instancemethod(_SnapTime.TFltPrV_Last, None, TFltPrV)
TFltPrV.LastValN = new_instancemethod(_SnapTime.TFltPrV_LastValN, None, TFltPrV)
TFltPrV.LastLast = new_instancemethod(_SnapTime.TFltPrV_LastLast, None, TFltPrV)
TFltPrV.GetRndVal = new_instancemethod(_SnapTime.TFltPrV_GetRndVal, None, TFltPrV)
TFltPrV.BegI = new_instancemethod(_SnapTime.TFltPrV_BegI, None, TFltPrV)
TFltPrV.begin = new_instancemethod(_SnapTime.TFltPrV_begin, None, TFltPrV)
TFltPrV.EndI = new_instancemethod(_SnapTime.TFltPrV_EndI, None, TFltPrV)
TFltPrV.end = new_instancemethod(_SnapTime.TFltPrV_end, None, TFltPrV)
TFltPrV.GetI = new_instancemethod(_SnapTime.TFltPrV_GetI, None, TFltPrV)
TFltPrV.Add = new_instancemethod(_SnapTime.TFltPrV_Add, None, TFltPrV)
TFltPrV.AddMP = new_instancemethod(_SnapTime.TFltPrV_AddMP, None, TFltPrV)
TFltPrV.MoveLastMP = new_instancemethod(_SnapTime.TFltPrV_MoveLastMP, None, TFltPrV)
TFltPrV.AddV = new_instancemethod(_SnapTime.TFltPrV_AddV, None, TFltPrV)
TFltPrV.AddSorted = new_instancemethod(_SnapTime.TFltPrV_AddSorted, None, TFltPrV)
TFltPrV.AddBackSorted = new_instancemethod(_SnapTime.TFltPrV_AddBackSorted, None, TFltPrV)
TFltPrV.AddMerged = new_instancemethod(_SnapTime.TFltPrV_AddMerged, None, TFltPrV)
TFltPrV.AddVMerged = new_instancemethod(_SnapTime.TFltPrV_AddVMerged, None, TFltPrV)
TFltPrV.AddUnique = new_instancemethod(_SnapTime.TFltPrV_AddUnique, None, TFltPrV)
TFltPrV.GetVal = new_instancemethod(_SnapTime.TFltPrV_GetVal, None, TFltPrV)
TFltPrV.SetVal = new_instancemethod(_SnapTime.TFltPrV_SetVal, None, TFltPrV)
TFltPrV.GetSubValV = new_instancemethod(_SnapTime.TFltPrV_GetSubValV, None, TFltPrV)
TFltPrV.Ins = new_instancemethod(_SnapTime.TFltPrV_Ins, None, TFltPrV)
TFltPrV.Del = new_instancemethod(_SnapTime.TFltPrV_Del, None, TFltPrV)
TFltPrV.DelLast = new_instancemethod(_SnapTime.TFltPrV_DelLast, None, TFltPrV)
TFltPrV.DelIfIn = new_instancemethod(_SnapTime.TFltPrV_DelIfIn, None, TFltPrV)
TFltPrV.DelAll = new_instancemethod(_SnapTime.TFltPrV_DelAll, None, TFltPrV)
TFltPrV.PutAll = new_instancemethod(_SnapTime.TFltPrV_PutAll, None, TFltPrV)
TFltPrV.Move = new_instancemethod(_SnapTime.TFltPrV_Move, None, TFltPrV)
TFltPrV.Swap = new_instancemethod(_SnapTime.TFltPrV_Swap, None, TFltPrV)
TFltPrV.Get32BitVector = new_instancemethod(_SnapTime.TFltPrV_Get32BitVector, None, TFltPrV)
TFltPrV.NextPerm = new_instancemethod(_SnapTime.TFltPrV_NextPerm, None, TFltPrV)
TFltPrV.PrevPerm = new_instancemethod(_SnapTime.TFltPrV_PrevPerm, None, TFltPrV)
TFltPrV.GetPivotValN = new_instancemethod(_SnapTime.TFltPrV_GetPivotValN, None, TFltPrV)
TFltPrV.BSort = new_instancemethod(_SnapTime.TFltPrV_BSort, None, TFltPrV)
TFltPrV.ISort = new_instancemethod(_SnapTime.TFltPrV_ISort, None, TFltPrV)
TFltPrV.Partition = new_instancemethod(_SnapTime.TFltPrV_Partition, None, TFltPrV)
TFltPrV.QSort = new_instancemethod(_SnapTime.TFltPrV_QSort, None, TFltPrV)
TFltPrV.Sort = new_instancemethod(_SnapTime.TFltPrV_Sort, None, TFltPrV)
TFltPrV.IsSorted = new_instancemethod(_SnapTime.TFltPrV_IsSorted, None, TFltPrV)
TFltPrV.Shuffle = new_instancemethod(_SnapTime.TFltPrV_Shuffle, None, TFltPrV)
TFltPrV.Reverse = new_instancemethod(_SnapTime.TFltPrV_Reverse, None, TFltPrV)
TFltPrV.Merge = new_instancemethod(_SnapTime.TFltPrV_Merge, None, TFltPrV)
TFltPrV.Intrs = new_instancemethod(_SnapTime.TFltPrV_Intrs, None, TFltPrV)
TFltPrV.Union = new_instancemethod(_SnapTime.TFltPrV_Union, None, TFltPrV)
TFltPrV.Diff = new_instancemethod(_SnapTime.TFltPrV_Diff, None, TFltPrV)
TFltPrV.IntrsLen = new_instancemethod(_SnapTime.TFltPrV_IntrsLen, None, TFltPrV)
TFltPrV.UnionLen = new_instancemethod(_SnapTime.TFltPrV_UnionLen, None, TFltPrV)
TFltPrV.Count = new_instancemethod(_SnapTime.TFltPrV_Count, None, TFltPrV)
TFltPrV.SearchBin = new_instancemethod(_SnapTime.TFltPrV_SearchBin, None, TFltPrV)
TFltPrV.SearchBinLeft = new_instancemethod(_SnapTime.TFltPrV_SearchBinLeft, None, TFltPrV)
TFltPrV.SearchForw = new_instancemethod(_SnapTime.TFltPrV_SearchForw, None, TFltPrV)
TFltPrV.SearchBack = new_instancemethod(_SnapTime.TFltPrV_SearchBack, None, TFltPrV)
TFltPrV.SearchVForw = new_instancemethod(_SnapTime.TFltPrV_SearchVForw, None, TFltPrV)
TFltPrV.IsIn = new_instancemethod(_SnapTime.TFltPrV_IsIn, None, TFltPrV)
TFltPrV.IsInBin = new_instancemethod(_SnapTime.TFltPrV_IsInBin, None, TFltPrV)
TFltPrV.GetDat = new_instancemethod(_SnapTime.TFltPrV_GetDat, None, TFltPrV)
TFltPrV.GetAddDat = new_instancemethod(_SnapTime.TFltPrV_GetAddDat, None, TFltPrV)
TFltPrV.GetMxValN = new_instancemethod(_SnapTime.TFltPrV_GetMxValN, None, TFltPrV)
TFltPrV_swigregister = _SnapTime.TFltPrV_swigregister
TFltPrV_swigregister(TFltPrV)

def TFltPrV_SwapI(LVal, RVal):
    """
    TFltPrV_SwapI(TFltPr LVal, TFltPr RVal)

    Parameters
    ----------
    LVal: TVec< TPair< TFlt,TFlt > >::TIter
    RVal: TVec< TPair< TFlt,TFlt > >::TIter

    """
    return _SnapTime.TFltPrV_SwapI(LVal, RVal)

def TFltPrV_GetV(*args):
    """
    GetV(TFltPr Val1) -> TFltPrV

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2) -> TFltPrV

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3) -> TFltPrV

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &
    Val3: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4) -> TFltPrV

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &
    Val3: TPair< TFlt,TFlt > const &
    Val4: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5) -> TFltPrV

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &
    Val3: TPair< TFlt,TFlt > const &
    Val4: TPair< TFlt,TFlt > const &
    Val5: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6) -> TFltPrV

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &
    Val3: TPair< TFlt,TFlt > const &
    Val4: TPair< TFlt,TFlt > const &
    Val5: TPair< TFlt,TFlt > const &
    Val6: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7) -> TFltPrV

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &
    Val3: TPair< TFlt,TFlt > const &
    Val4: TPair< TFlt,TFlt > const &
    Val5: TPair< TFlt,TFlt > const &
    Val6: TPair< TFlt,TFlt > const &
    Val7: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7, TFltPr Val8) -> TFltPrV

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &
    Val3: TPair< TFlt,TFlt > const &
    Val4: TPair< TFlt,TFlt > const &
    Val5: TPair< TFlt,TFlt > const &
    Val6: TPair< TFlt,TFlt > const &
    Val7: TPair< TFlt,TFlt > const &
    Val8: TPair< TFlt,TFlt > const &

    TFltPrV_GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7, TFltPr Val8, TFltPr Val9) -> TFltPrV

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &
    Val3: TPair< TFlt,TFlt > const &
    Val4: TPair< TFlt,TFlt > const &
    Val5: TPair< TFlt,TFlt > const &
    Val6: TPair< TFlt,TFlt > const &
    Val7: TPair< TFlt,TFlt > const &
    Val8: TPair< TFlt,TFlt > const &
    Val9: TPair< TFlt,TFlt > const &

    """
    return _SnapTime.TFltPrV_GetV(*args)

class TFltPr64V(object):
    """Proxy of C++ TVec<(TFltPr,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TFltPr64V

    def __init__(self, *args):
        """
        __init__(TVec<(TFltPr,int64)> self) -> TFltPr64V
        __init__(TVec<(TFltPr,int64)> self, TFltPr64V Vec) -> TFltPr64V

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,long long > const &

        __init__(TVec<(TFltPr,int64)> self, TFltPr64V Vec) -> TFltPr64V

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,long long > &&

        __init__(TVec<(TFltPr,int64)> self, long long const & _Vals) -> TFltPr64V

        Parameters
        ----------
        _Vals: long long const &

        __init__(TVec<(TFltPr,int64)> self, long long const & _MxVals, long long const & _Vals) -> TFltPr64V

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        __init__(TVec<(TFltPr,int64)> self, long long const & _MxVals, long long const & _Vals, TFltPr Dat) -> TFltPr64V

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &
        Dat: TPair< TFlt,TFlt >

        __init__(TVec<(TFltPr,int64)> self, TFltPr _ValT, long long const & _Vals) -> TFltPr64V

        Parameters
        ----------
        _ValT: TPair< TFlt,TFlt > *
        _Vals: long long const &

        __init__(TVec<(TFltPr,int64)> self, TSIn SIn) -> TFltPr64V

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TFltPr64V_swiginit(self, _SnapTime.new_TFltPr64V(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TFltPr64V self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TFltPr64V_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TFltPr64V self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TFltPr64V_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TFltPr64V self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TFltPr64V_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TFltPr64V self, TFltPr Val) -> TFltPr64V

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TFltPr64V self, TFltPr64V Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,long long > const &

        """
        return _SnapTime.TFltPr64V___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TFltPr64V self, TFltPr64V Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,long long > const &

        """
        return _SnapTime.TFltPr64V___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TFltPr64V self) -> long long

        Parameters
        ----------
        self: TVec< TFltPr,int64 > const *

        """
        return _SnapTime.TFltPr64V_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TFltPr64V self) -> long long

        Parameters
        ----------
        self: TVec< TFltPr,int64 > const *

        """
        return _SnapTime.TFltPr64V_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TFltPr64V self) -> int

        Parameters
        ----------
        self: TVec< TFltPr,int64 > const *

        """
        return _SnapTime.TFltPr64V_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TFltPr64V self) -> int

        Parameters
        ----------
        self: TVec< TFltPr,int64 > const *

        """
        return _SnapTime.TFltPr64V_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TFltPr64V self, long long const & _Vals)

        Parameters
        ----------
        _Vals: long long const &

        Gen(TFltPr64V self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TFltPr64V_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TFltPr64V self, TFltPr _ValT, long long const & _Vals)

        Parameters
        ----------
        _ValT: TPair< TFlt,TFlt > *
        _Vals: long long const &

        """
        return _SnapTime.TFltPr64V_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TFltPr64V self) -> bool

        Parameters
        ----------
        self: TVec< TFltPr,int64 > const *

        """
        return _SnapTime.TFltPr64V_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TFltPr64V self, long long const & _MxVals)

        Parameters
        ----------
        _MxVals: long long const &

        Reserve(TFltPr64V self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TFltPr64V_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TFltPr64V self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(TFltPr64V self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TFltPr64V self)

        Parameters
        ----------
        self: TVec< TFltPr,int64 > *

        """
        return _SnapTime.TFltPr64V_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TFltPr64V self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Trunc(TFltPr64V self)

        Parameters
        ----------
        self: TVec< TFltPr,int64 > *

        """
        return _SnapTime.TFltPr64V_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TFltPr64V self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Reduce(TFltPr64V self)

        Parameters
        ----------
        self: TVec< TFltPr,int64 > *

        """
        return _SnapTime.TFltPr64V_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TFltPr64V self)

        Parameters
        ----------
        self: TVec< TFltPr,int64 > *

        """
        return _SnapTime.TFltPr64V_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TFltPr64V self, TFltPr64V Vec)

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,long long > &

        """
        return _SnapTime.TFltPr64V_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TFltPr64V self, TFltPr64V Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,long long > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TFltPr64V_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TFltPr64V self) -> bool

        Parameters
        ----------
        self: TVec< TFltPr,int64 > const *

        """
        return _SnapTime.TFltPr64V_Empty(self)


    def Len(self):
        """
        Len(TFltPr64V self) -> long long

        Parameters
        ----------
        self: TVec< TFltPr,int64 > const *

        """
        return _SnapTime.TFltPr64V_Len(self)


    def Reserved(self):
        """
        Reserved(TFltPr64V self) -> long long

        Parameters
        ----------
        self: TVec< TFltPr,int64 > const *

        """
        return _SnapTime.TFltPr64V_Reserved(self)


    def Last(self, *args):
        """
        Last(TFltPr64V self) -> TFltPr
        Last(TFltPr64V self) -> TFltPr

        Parameters
        ----------
        self: TVec< TFltPr,int64 > *

        """
        return _SnapTime.TFltPr64V_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TFltPr64V self) -> long long

        Parameters
        ----------
        self: TVec< TFltPr,int64 > const *

        """
        return _SnapTime.TFltPr64V_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TFltPr64V self) -> TFltPr
        LastLast(TFltPr64V self) -> TFltPr

        Parameters
        ----------
        self: TVec< TFltPr,int64 > *

        """
        return _SnapTime.TFltPr64V_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TFltPr64V self, TRnd Rnd) -> TFltPr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TFltPr64V self) -> TFltPr
        GetRndVal(TFltPr64V self, TRnd Rnd) -> TFltPr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TFltPr64V self) -> TFltPr

        Parameters
        ----------
        self: TVec< TFltPr,int64 > *

        """
        return _SnapTime.TFltPr64V_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TFltPr64V self) -> TFltPr

        Parameters
        ----------
        self: TVec< TFltPr,int64 > const *

        """
        return _SnapTime.TFltPr64V_BegI(self)


    def begin(self):
        """
        begin(TFltPr64V self) -> TFltPr

        Parameters
        ----------
        self: TVec< TFltPr,int64 > const *

        """
        return _SnapTime.TFltPr64V_begin(self)


    def EndI(self):
        """
        EndI(TFltPr64V self) -> TFltPr

        Parameters
        ----------
        self: TVec< TFltPr,int64 > const *

        """
        return _SnapTime.TFltPr64V_EndI(self)


    def end(self):
        """
        end(TFltPr64V self) -> TFltPr

        Parameters
        ----------
        self: TVec< TFltPr,int64 > const *

        """
        return _SnapTime.TFltPr64V_end(self)


    def GetI(self, ValN):
        """
        GetI(TFltPr64V self, long long const & ValN) -> TFltPr

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TFltPr64V_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TFltPr64V self) -> long long
        Add(TFltPr64V self, TFltPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        Add(TFltPr64V self, TFltPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > &

        Add(TFltPr64V self, TFltPr Val, long long const & ResizeLen) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        ResizeLen: long long const &

        """
        return _SnapTime.TFltPr64V_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TFltPr64V self, TFltPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TFltPr64V self, TFltPr Val, int Inc) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        Inc: int

        """
        return _SnapTime.TFltPr64V_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TFltPr64V self, TFltPr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,long long > const &

        """
        return _SnapTime.TFltPr64V_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TFltPr64V self, TFltPr Val, bool const & Asc=True, long long const & _MxVals=-1) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        Asc: bool const &
        _MxVals: long long const &

        AddSorted(TFltPr64V self, TFltPr Val, bool const & Asc=True) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        Asc: bool const &

        AddSorted(TFltPr64V self, TFltPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TFltPr64V self, TFltPr Val, bool const & Asc) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        Asc: bool const &

        """
        return _SnapTime.TFltPr64V_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TFltPr64V self, TFltPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TFltPr64V self, TFltPr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,long long > const &

        """
        return _SnapTime.TFltPr64V_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TFltPr64V self, TFltPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TFltPr64V self, long long const & ValN) -> TFltPr

        Parameters
        ----------
        ValN: long long const &

        GetVal(TFltPr64V self, long long const & ValN) -> TFltPr

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TFltPr64V_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TFltPr64V self, long long const & ValN, TFltPr Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TFltPr64V self, long long const & BValN, long long const & EValN, TFltPr64V ValV)

        Parameters
        ----------
        BValN: long long const &
        EValN: long long const &
        ValV: TVec< TPair< TFlt,TFlt >,long long > &

        """
        return _SnapTime.TFltPr64V_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TFltPr64V self, long long const & ValN, TFltPr Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TFltPr64V self, long long const & ValN)

        Parameters
        ----------
        ValN: long long const &

        Del(TFltPr64V self, long long const & MnValN, long long const & MxValN)

        Parameters
        ----------
        MnValN: long long const &
        MxValN: long long const &

        """
        return _SnapTime.TFltPr64V_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TFltPr64V self)

        Parameters
        ----------
        self: TVec< TFltPr,int64 > *

        """
        return _SnapTime.TFltPr64V_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TFltPr64V self, TFltPr Val) -> bool

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TFltPr64V self, TFltPr Val)

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TFltPr64V self, TFltPr Val)

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TFltPr64V self, long long const & FromValN, long long const & ToValN)

        Parameters
        ----------
        FromValN: long long const &
        ToValN: long long const &

        """
        return _SnapTime.TFltPr64V_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TFltPr64V self, TFltPr64V Vec)

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,long long > &

        Swap(TFltPr64V self, long long const & ValN1, long long const & ValN2)

        Parameters
        ----------
        ValN1: long long const &
        ValN2: long long const &

        """
        return _SnapTime.TFltPr64V_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TFltPr LVal, TFltPr RVal)

        Parameters
        ----------
        LVal: TVec< TPair< TFlt,TFlt >,long long >::TIter
        RVal: TVec< TPair< TFlt,TFlt >,long long >::TIter

        """
        return _SnapTime.TFltPr64V_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TFltPr64V self) -> TFltPrV

        Parameters
        ----------
        self: TVec< TFltPr,int64 > *

        """
        return _SnapTime.TFltPr64V_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TFltPr64V self) -> bool

        Parameters
        ----------
        self: TVec< TFltPr,int64 > *

        """
        return _SnapTime.TFltPr64V_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TFltPr64V self) -> bool

        Parameters
        ----------
        self: TVec< TFltPr,int64 > *

        """
        return _SnapTime.TFltPr64V_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TFltPr64V self, long long const & LValN, long long const & RValN) -> long long

        Parameters
        ----------
        LValN: long long const &
        RValN: long long const &

        """
        return _SnapTime.TFltPr64V_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TFltPr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TFltPr64V_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TFltPr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TFltPr64V_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TFltPr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc) -> long long

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TFltPr64V_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TFltPr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TFltPr64V_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TFltPr64V self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TFltPr64V self)

        Parameters
        ----------
        self: TVec< TFltPr,int64 > *

        """
        return _SnapTime.TFltPr64V_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TFltPr64V self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TFltPr64V self) -> bool

        Parameters
        ----------
        self: TVec< TFltPr,int64 > const *

        """
        return _SnapTime.TFltPr64V_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TFltPr64V self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TFltPr64V_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TFltPr64V self)
        Reverse(TFltPr64V self, long long LValN, long long RValN)

        Parameters
        ----------
        LValN: long long
        RValN: long long

        """
        return _SnapTime.TFltPr64V_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TFltPr64V self)

        Parameters
        ----------
        self: TVec< TFltPr,int64 > *

        """
        return _SnapTime.TFltPr64V_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TFltPr64V self, TFltPr64V ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,long long > const &

        Intrs(TFltPr64V self, TFltPr64V ValV, TFltPr64V DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,long long > const &
        DstValV: TVec< TPair< TFlt,TFlt >,long long > &

        """
        return _SnapTime.TFltPr64V_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TFltPr64V self, TFltPr64V ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,long long > const &

        Union(TFltPr64V self, TFltPr64V ValV, TFltPr64V DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,long long > const &
        DstValV: TVec< TPair< TFlt,TFlt >,long long > &

        """
        return _SnapTime.TFltPr64V_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TFltPr64V self, TFltPr64V ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,long long > const &

        Diff(TFltPr64V self, TFltPr64V ValV, TFltPr64V DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,long long > const &
        DstValV: TVec< TPair< TFlt,TFlt >,long long > &

        """
        return _SnapTime.TFltPr64V_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TFltPr64V self, TFltPr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,long long > const &

        """
        return _SnapTime.TFltPr64V_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TFltPr64V self, TFltPr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,long long > const &

        """
        return _SnapTime.TFltPr64V_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TFltPr64V self, TFltPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TFltPr64V self, TFltPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        SearchBin(TFltPr64V self, TFltPr Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        InsValN: long long &

        """
        return _SnapTime.TFltPr64V_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TFltPr64V self, TFltPr Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        InsValN: long long &

        """
        return _SnapTime.TFltPr64V_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TFltPr64V self, TFltPr Val, long long const & BValN=0) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        BValN: long long const &

        SearchForw(TFltPr64V self, TFltPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TFltPr64V self, TFltPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TFltPr64V self, TFltPr64V ValV, long long const & BValN=0) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,long long > const &
        BValN: long long const &

        SearchVForw(TFltPr64V self, TFltPr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TFlt,TFlt >,long long > const &

        """
        return _SnapTime.TFltPr64V_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TFltPr64V self, TFltPr Val) -> bool

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        IsIn(TFltPr64V self, TFltPr Val, long long & ValN) -> bool

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &
        ValN: long long &

        """
        return _SnapTime.TFltPr64V_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TFltPr64V self, TFltPr Val) -> bool

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TFltPr64V self, TFltPr Val) -> TFltPr

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TFltPr64V self, TFltPr Val) -> TFltPr

        Parameters
        ----------
        Val: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TFltPr64V self) -> long long

        Parameters
        ----------
        self: TVec< TFltPr,int64 > const *

        """
        return _SnapTime.TFltPr64V_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TFltPr Val1) -> TFltPr64V

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2) -> TFltPr64V

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3) -> TFltPr64V

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4) -> TFltPr64V

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5) -> TFltPr64V

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &
        Val5: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6) -> TFltPr64V

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &
        Val5: TPair< TFlt,TFlt > const &
        Val6: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7) -> TFltPr64V

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &
        Val5: TPair< TFlt,TFlt > const &
        Val6: TPair< TFlt,TFlt > const &
        Val7: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7, TFltPr Val8) -> TFltPr64V

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &
        Val5: TPair< TFlt,TFlt > const &
        Val6: TPair< TFlt,TFlt > const &
        Val7: TPair< TFlt,TFlt > const &
        Val8: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7, TFltPr Val8, TFltPr Val9) -> TFltPr64V

        Parameters
        ----------
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &
        Val5: TPair< TFlt,TFlt > const &
        Val6: TPair< TFlt,TFlt > const &
        Val7: TPair< TFlt,TFlt > const &
        Val8: TPair< TFlt,TFlt > const &
        Val9: TPair< TFlt,TFlt > const &

        """
        return _SnapTime.TFltPr64V_GetV(*args)

    GetV = staticmethod(GetV)
TFltPr64V.LoadShM = new_instancemethod(_SnapTime.TFltPr64V_LoadShM, None, TFltPr64V)
TFltPr64V.Load = new_instancemethod(_SnapTime.TFltPr64V_Load, None, TFltPr64V)
TFltPr64V.Save = new_instancemethod(_SnapTime.TFltPr64V_Save, None, TFltPr64V)
TFltPr64V.__add__ = new_instancemethod(_SnapTime.TFltPr64V___add__, None, TFltPr64V)
TFltPr64V.__eq__ = new_instancemethod(_SnapTime.TFltPr64V___eq__, None, TFltPr64V)
TFltPr64V.__lt__ = new_instancemethod(_SnapTime.TFltPr64V___lt__, None, TFltPr64V)
TFltPr64V.GetMemUsed = new_instancemethod(_SnapTime.TFltPr64V_GetMemUsed, None, TFltPr64V)
TFltPr64V.GetMemSize = new_instancemethod(_SnapTime.TFltPr64V_GetMemSize, None, TFltPr64V)
TFltPr64V.GetPrimHashCd = new_instancemethod(_SnapTime.TFltPr64V_GetPrimHashCd, None, TFltPr64V)
TFltPr64V.GetSecHashCd = new_instancemethod(_SnapTime.TFltPr64V_GetSecHashCd, None, TFltPr64V)
TFltPr64V.Gen = new_instancemethod(_SnapTime.TFltPr64V_Gen, None, TFltPr64V)
TFltPr64V.GenExt = new_instancemethod(_SnapTime.TFltPr64V_GenExt, None, TFltPr64V)
TFltPr64V.IsExt = new_instancemethod(_SnapTime.TFltPr64V_IsExt, None, TFltPr64V)
TFltPr64V.Reserve = new_instancemethod(_SnapTime.TFltPr64V_Reserve, None, TFltPr64V)
TFltPr64V.Clr = new_instancemethod(_SnapTime.TFltPr64V_Clr, None, TFltPr64V)
TFltPr64V.Trunc = new_instancemethod(_SnapTime.TFltPr64V_Trunc, None, TFltPr64V)
TFltPr64V.Reduce = new_instancemethod(_SnapTime.TFltPr64V_Reduce, None, TFltPr64V)
TFltPr64V.Pack = new_instancemethod(_SnapTime.TFltPr64V_Pack, None, TFltPr64V)
TFltPr64V.MoveFrom = new_instancemethod(_SnapTime.TFltPr64V_MoveFrom, None, TFltPr64V)
TFltPr64V.CopyUniqueFrom = new_instancemethod(_SnapTime.TFltPr64V_CopyUniqueFrom, None, TFltPr64V)
TFltPr64V.Empty = new_instancemethod(_SnapTime.TFltPr64V_Empty, None, TFltPr64V)
TFltPr64V.Len = new_instancemethod(_SnapTime.TFltPr64V_Len, None, TFltPr64V)
TFltPr64V.Reserved = new_instancemethod(_SnapTime.TFltPr64V_Reserved, None, TFltPr64V)
TFltPr64V.Last = new_instancemethod(_SnapTime.TFltPr64V_Last, None, TFltPr64V)
TFltPr64V.LastValN = new_instancemethod(_SnapTime.TFltPr64V_LastValN, None, TFltPr64V)
TFltPr64V.LastLast = new_instancemethod(_SnapTime.TFltPr64V_LastLast, None, TFltPr64V)
TFltPr64V.GetRndVal = new_instancemethod(_SnapTime.TFltPr64V_GetRndVal, None, TFltPr64V)
TFltPr64V.BegI = new_instancemethod(_SnapTime.TFltPr64V_BegI, None, TFltPr64V)
TFltPr64V.begin = new_instancemethod(_SnapTime.TFltPr64V_begin, None, TFltPr64V)
TFltPr64V.EndI = new_instancemethod(_SnapTime.TFltPr64V_EndI, None, TFltPr64V)
TFltPr64V.end = new_instancemethod(_SnapTime.TFltPr64V_end, None, TFltPr64V)
TFltPr64V.GetI = new_instancemethod(_SnapTime.TFltPr64V_GetI, None, TFltPr64V)
TFltPr64V.Add = new_instancemethod(_SnapTime.TFltPr64V_Add, None, TFltPr64V)
TFltPr64V.AddMP = new_instancemethod(_SnapTime.TFltPr64V_AddMP, None, TFltPr64V)
TFltPr64V.MoveLastMP = new_instancemethod(_SnapTime.TFltPr64V_MoveLastMP, None, TFltPr64V)
TFltPr64V.AddV = new_instancemethod(_SnapTime.TFltPr64V_AddV, None, TFltPr64V)
TFltPr64V.AddSorted = new_instancemethod(_SnapTime.TFltPr64V_AddSorted, None, TFltPr64V)
TFltPr64V.AddBackSorted = new_instancemethod(_SnapTime.TFltPr64V_AddBackSorted, None, TFltPr64V)
TFltPr64V.AddMerged = new_instancemethod(_SnapTime.TFltPr64V_AddMerged, None, TFltPr64V)
TFltPr64V.AddVMerged = new_instancemethod(_SnapTime.TFltPr64V_AddVMerged, None, TFltPr64V)
TFltPr64V.AddUnique = new_instancemethod(_SnapTime.TFltPr64V_AddUnique, None, TFltPr64V)
TFltPr64V.GetVal = new_instancemethod(_SnapTime.TFltPr64V_GetVal, None, TFltPr64V)
TFltPr64V.SetVal = new_instancemethod(_SnapTime.TFltPr64V_SetVal, None, TFltPr64V)
TFltPr64V.GetSubValV = new_instancemethod(_SnapTime.TFltPr64V_GetSubValV, None, TFltPr64V)
TFltPr64V.Ins = new_instancemethod(_SnapTime.TFltPr64V_Ins, None, TFltPr64V)
TFltPr64V.Del = new_instancemethod(_SnapTime.TFltPr64V_Del, None, TFltPr64V)
TFltPr64V.DelLast = new_instancemethod(_SnapTime.TFltPr64V_DelLast, None, TFltPr64V)
TFltPr64V.DelIfIn = new_instancemethod(_SnapTime.TFltPr64V_DelIfIn, None, TFltPr64V)
TFltPr64V.DelAll = new_instancemethod(_SnapTime.TFltPr64V_DelAll, None, TFltPr64V)
TFltPr64V.PutAll = new_instancemethod(_SnapTime.TFltPr64V_PutAll, None, TFltPr64V)
TFltPr64V.Move = new_instancemethod(_SnapTime.TFltPr64V_Move, None, TFltPr64V)
TFltPr64V.Swap = new_instancemethod(_SnapTime.TFltPr64V_Swap, None, TFltPr64V)
TFltPr64V.Get32BitVector = new_instancemethod(_SnapTime.TFltPr64V_Get32BitVector, None, TFltPr64V)
TFltPr64V.NextPerm = new_instancemethod(_SnapTime.TFltPr64V_NextPerm, None, TFltPr64V)
TFltPr64V.PrevPerm = new_instancemethod(_SnapTime.TFltPr64V_PrevPerm, None, TFltPr64V)
TFltPr64V.GetPivotValN = new_instancemethod(_SnapTime.TFltPr64V_GetPivotValN, None, TFltPr64V)
TFltPr64V.BSort = new_instancemethod(_SnapTime.TFltPr64V_BSort, None, TFltPr64V)
TFltPr64V.ISort = new_instancemethod(_SnapTime.TFltPr64V_ISort, None, TFltPr64V)
TFltPr64V.Partition = new_instancemethod(_SnapTime.TFltPr64V_Partition, None, TFltPr64V)
TFltPr64V.QSort = new_instancemethod(_SnapTime.TFltPr64V_QSort, None, TFltPr64V)
TFltPr64V.Sort = new_instancemethod(_SnapTime.TFltPr64V_Sort, None, TFltPr64V)
TFltPr64V.IsSorted = new_instancemethod(_SnapTime.TFltPr64V_IsSorted, None, TFltPr64V)
TFltPr64V.Shuffle = new_instancemethod(_SnapTime.TFltPr64V_Shuffle, None, TFltPr64V)
TFltPr64V.Reverse = new_instancemethod(_SnapTime.TFltPr64V_Reverse, None, TFltPr64V)
TFltPr64V.Merge = new_instancemethod(_SnapTime.TFltPr64V_Merge, None, TFltPr64V)
TFltPr64V.Intrs = new_instancemethod(_SnapTime.TFltPr64V_Intrs, None, TFltPr64V)
TFltPr64V.Union = new_instancemethod(_SnapTime.TFltPr64V_Union, None, TFltPr64V)
TFltPr64V.Diff = new_instancemethod(_SnapTime.TFltPr64V_Diff, None, TFltPr64V)
TFltPr64V.IntrsLen = new_instancemethod(_SnapTime.TFltPr64V_IntrsLen, None, TFltPr64V)
TFltPr64V.UnionLen = new_instancemethod(_SnapTime.TFltPr64V_UnionLen, None, TFltPr64V)
TFltPr64V.Count = new_instancemethod(_SnapTime.TFltPr64V_Count, None, TFltPr64V)
TFltPr64V.SearchBin = new_instancemethod(_SnapTime.TFltPr64V_SearchBin, None, TFltPr64V)
TFltPr64V.SearchBinLeft = new_instancemethod(_SnapTime.TFltPr64V_SearchBinLeft, None, TFltPr64V)
TFltPr64V.SearchForw = new_instancemethod(_SnapTime.TFltPr64V_SearchForw, None, TFltPr64V)
TFltPr64V.SearchBack = new_instancemethod(_SnapTime.TFltPr64V_SearchBack, None, TFltPr64V)
TFltPr64V.SearchVForw = new_instancemethod(_SnapTime.TFltPr64V_SearchVForw, None, TFltPr64V)
TFltPr64V.IsIn = new_instancemethod(_SnapTime.TFltPr64V_IsIn, None, TFltPr64V)
TFltPr64V.IsInBin = new_instancemethod(_SnapTime.TFltPr64V_IsInBin, None, TFltPr64V)
TFltPr64V.GetDat = new_instancemethod(_SnapTime.TFltPr64V_GetDat, None, TFltPr64V)
TFltPr64V.GetAddDat = new_instancemethod(_SnapTime.TFltPr64V_GetAddDat, None, TFltPr64V)
TFltPr64V.GetMxValN = new_instancemethod(_SnapTime.TFltPr64V_GetMxValN, None, TFltPr64V)
TFltPr64V_swigregister = _SnapTime.TFltPr64V_swigregister
TFltPr64V_swigregister(TFltPr64V)

def TFltPr64V_SwapI(LVal, RVal):
    """
    TFltPr64V_SwapI(TFltPr LVal, TFltPr RVal)

    Parameters
    ----------
    LVal: TVec< TPair< TFlt,TFlt >,long long >::TIter
    RVal: TVec< TPair< TFlt,TFlt >,long long >::TIter

    """
    return _SnapTime.TFltPr64V_SwapI(LVal, RVal)

def TFltPr64V_GetV(*args):
    """
    GetV(TFltPr Val1) -> TFltPr64V

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2) -> TFltPr64V

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3) -> TFltPr64V

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &
    Val3: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4) -> TFltPr64V

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &
    Val3: TPair< TFlt,TFlt > const &
    Val4: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5) -> TFltPr64V

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &
    Val3: TPair< TFlt,TFlt > const &
    Val4: TPair< TFlt,TFlt > const &
    Val5: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6) -> TFltPr64V

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &
    Val3: TPair< TFlt,TFlt > const &
    Val4: TPair< TFlt,TFlt > const &
    Val5: TPair< TFlt,TFlt > const &
    Val6: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7) -> TFltPr64V

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &
    Val3: TPair< TFlt,TFlt > const &
    Val4: TPair< TFlt,TFlt > const &
    Val5: TPair< TFlt,TFlt > const &
    Val6: TPair< TFlt,TFlt > const &
    Val7: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7, TFltPr Val8) -> TFltPr64V

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &
    Val3: TPair< TFlt,TFlt > const &
    Val4: TPair< TFlt,TFlt > const &
    Val5: TPair< TFlt,TFlt > const &
    Val6: TPair< TFlt,TFlt > const &
    Val7: TPair< TFlt,TFlt > const &
    Val8: TPair< TFlt,TFlt > const &

    TFltPr64V_GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7, TFltPr Val8, TFltPr Val9) -> TFltPr64V

    Parameters
    ----------
    Val1: TPair< TFlt,TFlt > const &
    Val2: TPair< TFlt,TFlt > const &
    Val3: TPair< TFlt,TFlt > const &
    Val4: TPair< TFlt,TFlt > const &
    Val5: TPair< TFlt,TFlt > const &
    Val6: TPair< TFlt,TFlt > const &
    Val7: TPair< TFlt,TFlt > const &
    Val8: TPair< TFlt,TFlt > const &
    Val9: TPair< TFlt,TFlt > const &

    """
    return _SnapTime.TFltPr64V_GetV(*args)

class TStrIntPrV(object):
    """Proxy of C++ TVec<(TStrIntPr)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TStrIntPrV

    def __init__(self, *args):
        """
        __init__(TVec<(TStrIntPr)> self) -> TStrIntPrV
        __init__(TVec<(TStrIntPr)> self, TStrIntPrV Vec) -> TStrIntPrV

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TInt >,int > const &

        __init__(TVec<(TStrIntPr)> self, TStrIntPrV Vec) -> TStrIntPrV

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TInt >,int > &&

        __init__(TVec<(TStrIntPr)> self, int const & _Vals) -> TStrIntPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TVec<(TStrIntPr)> self, int const & _MxVals, int const & _Vals) -> TStrIntPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TVec<(TStrIntPr)> self, int const & _MxVals, int const & _Vals, TStrIntPr Dat) -> TStrIntPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &
        Dat: TPair< TStr,TInt >

        __init__(TVec<(TStrIntPr)> self, TStrIntPr _ValT, int const & _Vals) -> TStrIntPrV

        Parameters
        ----------
        _ValT: TPair< TStr,TInt > *
        _Vals: int const &

        __init__(TVec<(TStrIntPr)> self, TSIn SIn) -> TStrIntPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TStrIntPrV_swiginit(self, _SnapTime.new_TStrIntPrV(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TStrIntPrV self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TStrIntPrV_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TStrIntPrV self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TStrIntPrV_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TStrIntPrV self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TStrIntPrV_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TStrIntPrV self, TStrIntPr Val) -> TStrIntPrV

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TStrIntPrV self, TStrIntPrV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TInt >,int > const &

        """
        return _SnapTime.TStrIntPrV___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TStrIntPrV self, TStrIntPrV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TInt >,int > const &

        """
        return _SnapTime.TStrIntPrV___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TStrIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TStrIntPr > const *

        """
        return _SnapTime.TStrIntPrV_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TStrIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TStrIntPr > const *

        """
        return _SnapTime.TStrIntPrV_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TStrIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TStrIntPr > const *

        """
        return _SnapTime.TStrIntPrV_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TStrIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TStrIntPr > const *

        """
        return _SnapTime.TStrIntPrV_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TStrIntPrV self, int const & _Vals)

        Parameters
        ----------
        _Vals: int const &

        Gen(TStrIntPrV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TStrIntPrV_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TStrIntPrV self, TStrIntPr _ValT, int const & _Vals)

        Parameters
        ----------
        _ValT: TPair< TStr,TInt > *
        _Vals: int const &

        """
        return _SnapTime.TStrIntPrV_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TStrIntPrV self) -> bool

        Parameters
        ----------
        self: TVec< TStrIntPr > const *

        """
        return _SnapTime.TStrIntPrV_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TStrIntPrV self, int const & _MxVals)

        Parameters
        ----------
        _MxVals: int const &

        Reserve(TStrIntPrV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TStrIntPrV_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TStrIntPrV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TStrIntPrV self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TStrIntPrV self)

        Parameters
        ----------
        self: TVec< TStrIntPr > *

        """
        return _SnapTime.TStrIntPrV_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TStrIntPrV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Trunc(TStrIntPrV self)

        Parameters
        ----------
        self: TVec< TStrIntPr > *

        """
        return _SnapTime.TStrIntPrV_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TStrIntPrV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Reduce(TStrIntPrV self)

        Parameters
        ----------
        self: TVec< TStrIntPr > *

        """
        return _SnapTime.TStrIntPrV_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TStrIntPrV self)

        Parameters
        ----------
        self: TVec< TStrIntPr > *

        """
        return _SnapTime.TStrIntPrV_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TStrIntPrV self, TStrIntPrV Vec)

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TInt >,int > &

        """
        return _SnapTime.TStrIntPrV_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TStrIntPrV self, TStrIntPrV Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TInt >,int > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TStrIntPrV_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TStrIntPrV self) -> bool

        Parameters
        ----------
        self: TVec< TStrIntPr > const *

        """
        return _SnapTime.TStrIntPrV_Empty(self)


    def Len(self):
        """
        Len(TStrIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TStrIntPr > const *

        """
        return _SnapTime.TStrIntPrV_Len(self)


    def Reserved(self):
        """
        Reserved(TStrIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TStrIntPr > const *

        """
        return _SnapTime.TStrIntPrV_Reserved(self)


    def Last(self, *args):
        """
        Last(TStrIntPrV self) -> TStrIntPr
        Last(TStrIntPrV self) -> TStrIntPr

        Parameters
        ----------
        self: TVec< TStrIntPr > *

        """
        return _SnapTime.TStrIntPrV_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TStrIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TStrIntPr > const *

        """
        return _SnapTime.TStrIntPrV_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TStrIntPrV self) -> TStrIntPr
        LastLast(TStrIntPrV self) -> TStrIntPr

        Parameters
        ----------
        self: TVec< TStrIntPr > *

        """
        return _SnapTime.TStrIntPrV_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TStrIntPrV self, TRnd Rnd) -> TStrIntPr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TStrIntPrV self) -> TStrIntPr
        GetRndVal(TStrIntPrV self, TRnd Rnd) -> TStrIntPr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TStrIntPrV self) -> TStrIntPr

        Parameters
        ----------
        self: TVec< TStrIntPr > *

        """
        return _SnapTime.TStrIntPrV_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TStrIntPrV self) -> TStrIntPr

        Parameters
        ----------
        self: TVec< TStrIntPr > const *

        """
        return _SnapTime.TStrIntPrV_BegI(self)


    def begin(self):
        """
        begin(TStrIntPrV self) -> TStrIntPr

        Parameters
        ----------
        self: TVec< TStrIntPr > const *

        """
        return _SnapTime.TStrIntPrV_begin(self)


    def EndI(self):
        """
        EndI(TStrIntPrV self) -> TStrIntPr

        Parameters
        ----------
        self: TVec< TStrIntPr > const *

        """
        return _SnapTime.TStrIntPrV_EndI(self)


    def end(self):
        """
        end(TStrIntPrV self) -> TStrIntPr

        Parameters
        ----------
        self: TVec< TStrIntPr > const *

        """
        return _SnapTime.TStrIntPrV_end(self)


    def GetI(self, ValN):
        """
        GetI(TStrIntPrV self, int const & ValN) -> TStrIntPr

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TStrIntPrV_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TStrIntPrV self) -> int
        Add(TStrIntPrV self, TStrIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        Add(TStrIntPrV self, TStrIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > &

        Add(TStrIntPrV self, TStrIntPr Val, int const & ResizeLen) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &
        ResizeLen: int const &

        """
        return _SnapTime.TStrIntPrV_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TStrIntPrV self, TStrIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TStrIntPrV self, TStrIntPr Val, int Inc) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &
        Inc: int

        """
        return _SnapTime.TStrIntPrV_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TStrIntPrV self, TStrIntPrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TInt >,int > const &

        """
        return _SnapTime.TStrIntPrV_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TStrIntPrV self, TStrIntPr Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &
        Asc: bool const &
        _MxVals: int const &

        AddSorted(TStrIntPrV self, TStrIntPr Val, bool const & Asc=True) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &
        Asc: bool const &

        AddSorted(TStrIntPrV self, TStrIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TStrIntPrV self, TStrIntPr Val, bool const & Asc) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &
        Asc: bool const &

        """
        return _SnapTime.TStrIntPrV_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TStrIntPrV self, TStrIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TStrIntPrV self, TStrIntPrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TInt >,int > const &

        """
        return _SnapTime.TStrIntPrV_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TStrIntPrV self, TStrIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TStrIntPrV self, int const & ValN) -> TStrIntPr

        Parameters
        ----------
        ValN: int const &

        GetVal(TStrIntPrV self, int const & ValN) -> TStrIntPr

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TStrIntPrV_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TStrIntPrV self, int const & ValN, TStrIntPr Val)

        Parameters
        ----------
        ValN: int const &
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TStrIntPrV self, int const & BValN, int const & EValN, TStrIntPrV ValV)

        Parameters
        ----------
        BValN: int const &
        EValN: int const &
        ValV: TVec< TPair< TStr,TInt >,int > &

        """
        return _SnapTime.TStrIntPrV_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TStrIntPrV self, int const & ValN, TStrIntPr Val)

        Parameters
        ----------
        ValN: int const &
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TStrIntPrV self, int const & ValN)

        Parameters
        ----------
        ValN: int const &

        Del(TStrIntPrV self, int const & MnValN, int const & MxValN)

        Parameters
        ----------
        MnValN: int const &
        MxValN: int const &

        """
        return _SnapTime.TStrIntPrV_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TStrIntPrV self)

        Parameters
        ----------
        self: TVec< TStrIntPr > *

        """
        return _SnapTime.TStrIntPrV_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TStrIntPrV self, TStrIntPr Val) -> bool

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TStrIntPrV self, TStrIntPr Val)

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TStrIntPrV self, TStrIntPr Val)

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TStrIntPrV self, int const & FromValN, int const & ToValN)

        Parameters
        ----------
        FromValN: int const &
        ToValN: int const &

        """
        return _SnapTime.TStrIntPrV_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TStrIntPrV self, TStrIntPrV Vec)

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TInt >,int > &

        Swap(TStrIntPrV self, int const & ValN1, int const & ValN2)

        Parameters
        ----------
        ValN1: int const &
        ValN2: int const &

        """
        return _SnapTime.TStrIntPrV_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TStrIntPr LVal, TStrIntPr RVal)

        Parameters
        ----------
        LVal: TVec< TPair< TStr,TInt > >::TIter
        RVal: TVec< TPair< TStr,TInt > >::TIter

        """
        return _SnapTime.TStrIntPrV_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TStrIntPrV self) -> TStrIntPrV

        Parameters
        ----------
        self: TVec< TStrIntPr > *

        """
        return _SnapTime.TStrIntPrV_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TStrIntPrV self) -> bool

        Parameters
        ----------
        self: TVec< TStrIntPr > *

        """
        return _SnapTime.TStrIntPrV_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TStrIntPrV self) -> bool

        Parameters
        ----------
        self: TVec< TStrIntPr > *

        """
        return _SnapTime.TStrIntPrV_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TStrIntPrV self, int const & LValN, int const & RValN) -> int

        Parameters
        ----------
        LValN: int const &
        RValN: int const &

        """
        return _SnapTime.TStrIntPrV_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TStrIntPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TStrIntPrV_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TStrIntPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TStrIntPrV_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TStrIntPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TStrIntPrV_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TStrIntPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TStrIntPrV_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TStrIntPrV self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TStrIntPrV self)

        Parameters
        ----------
        self: TVec< TStrIntPr > *

        """
        return _SnapTime.TStrIntPrV_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TStrIntPrV self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TStrIntPrV self) -> bool

        Parameters
        ----------
        self: TVec< TStrIntPr > const *

        """
        return _SnapTime.TStrIntPrV_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TStrIntPrV self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TStrIntPrV_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TStrIntPrV self)
        Reverse(TStrIntPrV self, int LValN, int RValN)

        Parameters
        ----------
        LValN: int
        RValN: int

        """
        return _SnapTime.TStrIntPrV_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TStrIntPrV self)

        Parameters
        ----------
        self: TVec< TStrIntPr > *

        """
        return _SnapTime.TStrIntPrV_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TStrIntPrV self, TStrIntPrV ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TInt >,int > const &

        Intrs(TStrIntPrV self, TStrIntPrV ValV, TStrIntPrV DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TInt >,int > const &
        DstValV: TVec< TPair< TStr,TInt >,int > &

        """
        return _SnapTime.TStrIntPrV_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TStrIntPrV self, TStrIntPrV ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TInt >,int > const &

        Union(TStrIntPrV self, TStrIntPrV ValV, TStrIntPrV DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TInt >,int > const &
        DstValV: TVec< TPair< TStr,TInt >,int > &

        """
        return _SnapTime.TStrIntPrV_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TStrIntPrV self, TStrIntPrV ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TInt >,int > const &

        Diff(TStrIntPrV self, TStrIntPrV ValV, TStrIntPrV DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TInt >,int > const &
        DstValV: TVec< TPair< TStr,TInt >,int > &

        """
        return _SnapTime.TStrIntPrV_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TStrIntPrV self, TStrIntPrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TInt >,int > const &

        """
        return _SnapTime.TStrIntPrV_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TStrIntPrV self, TStrIntPrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TInt >,int > const &

        """
        return _SnapTime.TStrIntPrV_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TStrIntPrV self, TStrIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TStrIntPrV self, TStrIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        SearchBin(TStrIntPrV self, TStrIntPr Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &
        InsValN: int &

        """
        return _SnapTime.TStrIntPrV_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TStrIntPrV self, TStrIntPr Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &
        InsValN: int &

        """
        return _SnapTime.TStrIntPrV_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TStrIntPrV self, TStrIntPr Val, int const & BValN=0) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &
        BValN: int const &

        SearchForw(TStrIntPrV self, TStrIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TStrIntPrV self, TStrIntPr Val) -> int

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TStrIntPrV self, TStrIntPrV ValV, int const & BValN=0) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TInt >,int > const &
        BValN: int const &

        SearchVForw(TStrIntPrV self, TStrIntPrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TInt >,int > const &

        """
        return _SnapTime.TStrIntPrV_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TStrIntPrV self, TStrIntPr Val) -> bool

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        IsIn(TStrIntPrV self, TStrIntPr Val, int & ValN) -> bool

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &
        ValN: int &

        """
        return _SnapTime.TStrIntPrV_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TStrIntPrV self, TStrIntPr Val) -> bool

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TStrIntPrV self, TStrIntPr Val) -> TStrIntPr

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TStrIntPrV self, TStrIntPr Val) -> TStrIntPr

        Parameters
        ----------
        Val: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TStrIntPrV self) -> int

        Parameters
        ----------
        self: TVec< TStrIntPr > const *

        """
        return _SnapTime.TStrIntPrV_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TStrIntPr Val1) -> TStrIntPrV

        Parameters
        ----------
        Val1: TPair< TStr,TInt > const &

        GetV(TStrIntPr Val1, TStrIntPr Val2) -> TStrIntPrV

        Parameters
        ----------
        Val1: TPair< TStr,TInt > const &
        Val2: TPair< TStr,TInt > const &

        GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3) -> TStrIntPrV

        Parameters
        ----------
        Val1: TPair< TStr,TInt > const &
        Val2: TPair< TStr,TInt > const &
        Val3: TPair< TStr,TInt > const &

        GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4) -> TStrIntPrV

        Parameters
        ----------
        Val1: TPair< TStr,TInt > const &
        Val2: TPair< TStr,TInt > const &
        Val3: TPair< TStr,TInt > const &
        Val4: TPair< TStr,TInt > const &

        GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, TStrIntPr Val5) -> TStrIntPrV

        Parameters
        ----------
        Val1: TPair< TStr,TInt > const &
        Val2: TPair< TStr,TInt > const &
        Val3: TPair< TStr,TInt > const &
        Val4: TPair< TStr,TInt > const &
        Val5: TPair< TStr,TInt > const &

        GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, TStrIntPr Val5, TStrIntPr Val6) -> TStrIntPrV

        Parameters
        ----------
        Val1: TPair< TStr,TInt > const &
        Val2: TPair< TStr,TInt > const &
        Val3: TPair< TStr,TInt > const &
        Val4: TPair< TStr,TInt > const &
        Val5: TPair< TStr,TInt > const &
        Val6: TPair< TStr,TInt > const &

        GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, TStrIntPr Val5, TStrIntPr Val6, TStrIntPr Val7) -> TStrIntPrV

        Parameters
        ----------
        Val1: TPair< TStr,TInt > const &
        Val2: TPair< TStr,TInt > const &
        Val3: TPair< TStr,TInt > const &
        Val4: TPair< TStr,TInt > const &
        Val5: TPair< TStr,TInt > const &
        Val6: TPair< TStr,TInt > const &
        Val7: TPair< TStr,TInt > const &

        GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, TStrIntPr Val5, TStrIntPr Val6, TStrIntPr Val7, TStrIntPr Val8) -> TStrIntPrV

        Parameters
        ----------
        Val1: TPair< TStr,TInt > const &
        Val2: TPair< TStr,TInt > const &
        Val3: TPair< TStr,TInt > const &
        Val4: TPair< TStr,TInt > const &
        Val5: TPair< TStr,TInt > const &
        Val6: TPair< TStr,TInt > const &
        Val7: TPair< TStr,TInt > const &
        Val8: TPair< TStr,TInt > const &

        GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, TStrIntPr Val5, TStrIntPr Val6, TStrIntPr Val7, TStrIntPr Val8, TStrIntPr Val9) -> TStrIntPrV

        Parameters
        ----------
        Val1: TPair< TStr,TInt > const &
        Val2: TPair< TStr,TInt > const &
        Val3: TPair< TStr,TInt > const &
        Val4: TPair< TStr,TInt > const &
        Val5: TPair< TStr,TInt > const &
        Val6: TPair< TStr,TInt > const &
        Val7: TPair< TStr,TInt > const &
        Val8: TPair< TStr,TInt > const &
        Val9: TPair< TStr,TInt > const &

        """
        return _SnapTime.TStrIntPrV_GetV(*args)

    GetV = staticmethod(GetV)
TStrIntPrV.LoadShM = new_instancemethod(_SnapTime.TStrIntPrV_LoadShM, None, TStrIntPrV)
TStrIntPrV.Load = new_instancemethod(_SnapTime.TStrIntPrV_Load, None, TStrIntPrV)
TStrIntPrV.Save = new_instancemethod(_SnapTime.TStrIntPrV_Save, None, TStrIntPrV)
TStrIntPrV.__add__ = new_instancemethod(_SnapTime.TStrIntPrV___add__, None, TStrIntPrV)
TStrIntPrV.__eq__ = new_instancemethod(_SnapTime.TStrIntPrV___eq__, None, TStrIntPrV)
TStrIntPrV.__lt__ = new_instancemethod(_SnapTime.TStrIntPrV___lt__, None, TStrIntPrV)
TStrIntPrV.GetMemUsed = new_instancemethod(_SnapTime.TStrIntPrV_GetMemUsed, None, TStrIntPrV)
TStrIntPrV.GetMemSize = new_instancemethod(_SnapTime.TStrIntPrV_GetMemSize, None, TStrIntPrV)
TStrIntPrV.GetPrimHashCd = new_instancemethod(_SnapTime.TStrIntPrV_GetPrimHashCd, None, TStrIntPrV)
TStrIntPrV.GetSecHashCd = new_instancemethod(_SnapTime.TStrIntPrV_GetSecHashCd, None, TStrIntPrV)
TStrIntPrV.Gen = new_instancemethod(_SnapTime.TStrIntPrV_Gen, None, TStrIntPrV)
TStrIntPrV.GenExt = new_instancemethod(_SnapTime.TStrIntPrV_GenExt, None, TStrIntPrV)
TStrIntPrV.IsExt = new_instancemethod(_SnapTime.TStrIntPrV_IsExt, None, TStrIntPrV)
TStrIntPrV.Reserve = new_instancemethod(_SnapTime.TStrIntPrV_Reserve, None, TStrIntPrV)
TStrIntPrV.Clr = new_instancemethod(_SnapTime.TStrIntPrV_Clr, None, TStrIntPrV)
TStrIntPrV.Trunc = new_instancemethod(_SnapTime.TStrIntPrV_Trunc, None, TStrIntPrV)
TStrIntPrV.Reduce = new_instancemethod(_SnapTime.TStrIntPrV_Reduce, None, TStrIntPrV)
TStrIntPrV.Pack = new_instancemethod(_SnapTime.TStrIntPrV_Pack, None, TStrIntPrV)
TStrIntPrV.MoveFrom = new_instancemethod(_SnapTime.TStrIntPrV_MoveFrom, None, TStrIntPrV)
TStrIntPrV.CopyUniqueFrom = new_instancemethod(_SnapTime.TStrIntPrV_CopyUniqueFrom, None, TStrIntPrV)
TStrIntPrV.Empty = new_instancemethod(_SnapTime.TStrIntPrV_Empty, None, TStrIntPrV)
TStrIntPrV.Len = new_instancemethod(_SnapTime.TStrIntPrV_Len, None, TStrIntPrV)
TStrIntPrV.Reserved = new_instancemethod(_SnapTime.TStrIntPrV_Reserved, None, TStrIntPrV)
TStrIntPrV.Last = new_instancemethod(_SnapTime.TStrIntPrV_Last, None, TStrIntPrV)
TStrIntPrV.LastValN = new_instancemethod(_SnapTime.TStrIntPrV_LastValN, None, TStrIntPrV)
TStrIntPrV.LastLast = new_instancemethod(_SnapTime.TStrIntPrV_LastLast, None, TStrIntPrV)
TStrIntPrV.GetRndVal = new_instancemethod(_SnapTime.TStrIntPrV_GetRndVal, None, TStrIntPrV)
TStrIntPrV.BegI = new_instancemethod(_SnapTime.TStrIntPrV_BegI, None, TStrIntPrV)
TStrIntPrV.begin = new_instancemethod(_SnapTime.TStrIntPrV_begin, None, TStrIntPrV)
TStrIntPrV.EndI = new_instancemethod(_SnapTime.TStrIntPrV_EndI, None, TStrIntPrV)
TStrIntPrV.end = new_instancemethod(_SnapTime.TStrIntPrV_end, None, TStrIntPrV)
TStrIntPrV.GetI = new_instancemethod(_SnapTime.TStrIntPrV_GetI, None, TStrIntPrV)
TStrIntPrV.Add = new_instancemethod(_SnapTime.TStrIntPrV_Add, None, TStrIntPrV)
TStrIntPrV.AddMP = new_instancemethod(_SnapTime.TStrIntPrV_AddMP, None, TStrIntPrV)
TStrIntPrV.MoveLastMP = new_instancemethod(_SnapTime.TStrIntPrV_MoveLastMP, None, TStrIntPrV)
TStrIntPrV.AddV = new_instancemethod(_SnapTime.TStrIntPrV_AddV, None, TStrIntPrV)
TStrIntPrV.AddSorted = new_instancemethod(_SnapTime.TStrIntPrV_AddSorted, None, TStrIntPrV)
TStrIntPrV.AddBackSorted = new_instancemethod(_SnapTime.TStrIntPrV_AddBackSorted, None, TStrIntPrV)
TStrIntPrV.AddMerged = new_instancemethod(_SnapTime.TStrIntPrV_AddMerged, None, TStrIntPrV)
TStrIntPrV.AddVMerged = new_instancemethod(_SnapTime.TStrIntPrV_AddVMerged, None, TStrIntPrV)
TStrIntPrV.AddUnique = new_instancemethod(_SnapTime.TStrIntPrV_AddUnique, None, TStrIntPrV)
TStrIntPrV.GetVal = new_instancemethod(_SnapTime.TStrIntPrV_GetVal, None, TStrIntPrV)
TStrIntPrV.SetVal = new_instancemethod(_SnapTime.TStrIntPrV_SetVal, None, TStrIntPrV)
TStrIntPrV.GetSubValV = new_instancemethod(_SnapTime.TStrIntPrV_GetSubValV, None, TStrIntPrV)
TStrIntPrV.Ins = new_instancemethod(_SnapTime.TStrIntPrV_Ins, None, TStrIntPrV)
TStrIntPrV.Del = new_instancemethod(_SnapTime.TStrIntPrV_Del, None, TStrIntPrV)
TStrIntPrV.DelLast = new_instancemethod(_SnapTime.TStrIntPrV_DelLast, None, TStrIntPrV)
TStrIntPrV.DelIfIn = new_instancemethod(_SnapTime.TStrIntPrV_DelIfIn, None, TStrIntPrV)
TStrIntPrV.DelAll = new_instancemethod(_SnapTime.TStrIntPrV_DelAll, None, TStrIntPrV)
TStrIntPrV.PutAll = new_instancemethod(_SnapTime.TStrIntPrV_PutAll, None, TStrIntPrV)
TStrIntPrV.Move = new_instancemethod(_SnapTime.TStrIntPrV_Move, None, TStrIntPrV)
TStrIntPrV.Swap = new_instancemethod(_SnapTime.TStrIntPrV_Swap, None, TStrIntPrV)
TStrIntPrV.Get32BitVector = new_instancemethod(_SnapTime.TStrIntPrV_Get32BitVector, None, TStrIntPrV)
TStrIntPrV.NextPerm = new_instancemethod(_SnapTime.TStrIntPrV_NextPerm, None, TStrIntPrV)
TStrIntPrV.PrevPerm = new_instancemethod(_SnapTime.TStrIntPrV_PrevPerm, None, TStrIntPrV)
TStrIntPrV.GetPivotValN = new_instancemethod(_SnapTime.TStrIntPrV_GetPivotValN, None, TStrIntPrV)
TStrIntPrV.BSort = new_instancemethod(_SnapTime.TStrIntPrV_BSort, None, TStrIntPrV)
TStrIntPrV.ISort = new_instancemethod(_SnapTime.TStrIntPrV_ISort, None, TStrIntPrV)
TStrIntPrV.Partition = new_instancemethod(_SnapTime.TStrIntPrV_Partition, None, TStrIntPrV)
TStrIntPrV.QSort = new_instancemethod(_SnapTime.TStrIntPrV_QSort, None, TStrIntPrV)
TStrIntPrV.Sort = new_instancemethod(_SnapTime.TStrIntPrV_Sort, None, TStrIntPrV)
TStrIntPrV.IsSorted = new_instancemethod(_SnapTime.TStrIntPrV_IsSorted, None, TStrIntPrV)
TStrIntPrV.Shuffle = new_instancemethod(_SnapTime.TStrIntPrV_Shuffle, None, TStrIntPrV)
TStrIntPrV.Reverse = new_instancemethod(_SnapTime.TStrIntPrV_Reverse, None, TStrIntPrV)
TStrIntPrV.Merge = new_instancemethod(_SnapTime.TStrIntPrV_Merge, None, TStrIntPrV)
TStrIntPrV.Intrs = new_instancemethod(_SnapTime.TStrIntPrV_Intrs, None, TStrIntPrV)
TStrIntPrV.Union = new_instancemethod(_SnapTime.TStrIntPrV_Union, None, TStrIntPrV)
TStrIntPrV.Diff = new_instancemethod(_SnapTime.TStrIntPrV_Diff, None, TStrIntPrV)
TStrIntPrV.IntrsLen = new_instancemethod(_SnapTime.TStrIntPrV_IntrsLen, None, TStrIntPrV)
TStrIntPrV.UnionLen = new_instancemethod(_SnapTime.TStrIntPrV_UnionLen, None, TStrIntPrV)
TStrIntPrV.Count = new_instancemethod(_SnapTime.TStrIntPrV_Count, None, TStrIntPrV)
TStrIntPrV.SearchBin = new_instancemethod(_SnapTime.TStrIntPrV_SearchBin, None, TStrIntPrV)
TStrIntPrV.SearchBinLeft = new_instancemethod(_SnapTime.TStrIntPrV_SearchBinLeft, None, TStrIntPrV)
TStrIntPrV.SearchForw = new_instancemethod(_SnapTime.TStrIntPrV_SearchForw, None, TStrIntPrV)
TStrIntPrV.SearchBack = new_instancemethod(_SnapTime.TStrIntPrV_SearchBack, None, TStrIntPrV)
TStrIntPrV.SearchVForw = new_instancemethod(_SnapTime.TStrIntPrV_SearchVForw, None, TStrIntPrV)
TStrIntPrV.IsIn = new_instancemethod(_SnapTime.TStrIntPrV_IsIn, None, TStrIntPrV)
TStrIntPrV.IsInBin = new_instancemethod(_SnapTime.TStrIntPrV_IsInBin, None, TStrIntPrV)
TStrIntPrV.GetDat = new_instancemethod(_SnapTime.TStrIntPrV_GetDat, None, TStrIntPrV)
TStrIntPrV.GetAddDat = new_instancemethod(_SnapTime.TStrIntPrV_GetAddDat, None, TStrIntPrV)
TStrIntPrV.GetMxValN = new_instancemethod(_SnapTime.TStrIntPrV_GetMxValN, None, TStrIntPrV)
TStrIntPrV_swigregister = _SnapTime.TStrIntPrV_swigregister
TStrIntPrV_swigregister(TStrIntPrV)

def TStrIntPrV_SwapI(LVal, RVal):
    """
    TStrIntPrV_SwapI(TStrIntPr LVal, TStrIntPr RVal)

    Parameters
    ----------
    LVal: TVec< TPair< TStr,TInt > >::TIter
    RVal: TVec< TPair< TStr,TInt > >::TIter

    """
    return _SnapTime.TStrIntPrV_SwapI(LVal, RVal)

def TStrIntPrV_GetV(*args):
    """
    GetV(TStrIntPr Val1) -> TStrIntPrV

    Parameters
    ----------
    Val1: TPair< TStr,TInt > const &

    GetV(TStrIntPr Val1, TStrIntPr Val2) -> TStrIntPrV

    Parameters
    ----------
    Val1: TPair< TStr,TInt > const &
    Val2: TPair< TStr,TInt > const &

    GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3) -> TStrIntPrV

    Parameters
    ----------
    Val1: TPair< TStr,TInt > const &
    Val2: TPair< TStr,TInt > const &
    Val3: TPair< TStr,TInt > const &

    GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4) -> TStrIntPrV

    Parameters
    ----------
    Val1: TPair< TStr,TInt > const &
    Val2: TPair< TStr,TInt > const &
    Val3: TPair< TStr,TInt > const &
    Val4: TPair< TStr,TInt > const &

    GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, TStrIntPr Val5) -> TStrIntPrV

    Parameters
    ----------
    Val1: TPair< TStr,TInt > const &
    Val2: TPair< TStr,TInt > const &
    Val3: TPair< TStr,TInt > const &
    Val4: TPair< TStr,TInt > const &
    Val5: TPair< TStr,TInt > const &

    GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, TStrIntPr Val5, TStrIntPr Val6) -> TStrIntPrV

    Parameters
    ----------
    Val1: TPair< TStr,TInt > const &
    Val2: TPair< TStr,TInt > const &
    Val3: TPair< TStr,TInt > const &
    Val4: TPair< TStr,TInt > const &
    Val5: TPair< TStr,TInt > const &
    Val6: TPair< TStr,TInt > const &

    GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, TStrIntPr Val5, TStrIntPr Val6, TStrIntPr Val7) -> TStrIntPrV

    Parameters
    ----------
    Val1: TPair< TStr,TInt > const &
    Val2: TPair< TStr,TInt > const &
    Val3: TPair< TStr,TInt > const &
    Val4: TPair< TStr,TInt > const &
    Val5: TPair< TStr,TInt > const &
    Val6: TPair< TStr,TInt > const &
    Val7: TPair< TStr,TInt > const &

    GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, TStrIntPr Val5, TStrIntPr Val6, TStrIntPr Val7, TStrIntPr Val8) -> TStrIntPrV

    Parameters
    ----------
    Val1: TPair< TStr,TInt > const &
    Val2: TPair< TStr,TInt > const &
    Val3: TPair< TStr,TInt > const &
    Val4: TPair< TStr,TInt > const &
    Val5: TPair< TStr,TInt > const &
    Val6: TPair< TStr,TInt > const &
    Val7: TPair< TStr,TInt > const &
    Val8: TPair< TStr,TInt > const &

    TStrIntPrV_GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, TStrIntPr Val5, TStrIntPr Val6, TStrIntPr Val7, TStrIntPr Val8, TStrIntPr Val9) -> TStrIntPrV

    Parameters
    ----------
    Val1: TPair< TStr,TInt > const &
    Val2: TPair< TStr,TInt > const &
    Val3: TPair< TStr,TInt > const &
    Val4: TPair< TStr,TInt > const &
    Val5: TPair< TStr,TInt > const &
    Val6: TPair< TStr,TInt > const &
    Val7: TPair< TStr,TInt > const &
    Val8: TPair< TStr,TInt > const &
    Val9: TPair< TStr,TInt > const &

    """
    return _SnapTime.TStrIntPrV_GetV(*args)

class TIntTrV(object):
    """Proxy of C++ TVec<(TIntTr)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TIntTrV

    def __init__(self, *args):
        """
        __init__(TVec<(TIntTr)> self) -> TIntTrV
        __init__(TVec<(TIntTr)> self, TIntTrV Vec) -> TIntTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TInt,TInt >,int > const &

        __init__(TVec<(TIntTr)> self, TIntTrV Vec) -> TIntTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TInt,TInt >,int > &&

        __init__(TVec<(TIntTr)> self, int const & _Vals) -> TIntTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TVec<(TIntTr)> self, int const & _MxVals, int const & _Vals) -> TIntTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TVec<(TIntTr)> self, int const & _MxVals, int const & _Vals, TIntTr Dat) -> TIntTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &
        Dat: TTriple< TInt,TInt,TInt >

        __init__(TVec<(TIntTr)> self, TIntTr _ValT, int const & _Vals) -> TIntTrV

        Parameters
        ----------
        _ValT: TTriple< TInt,TInt,TInt > *
        _Vals: int const &

        __init__(TVec<(TIntTr)> self, TSIn SIn) -> TIntTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntTrV_swiginit(self, _SnapTime.new_TIntTrV(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntTrV self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntTrV_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntTrV self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntTrV_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntTrV self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntTrV_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TIntTrV self, TIntTr Val) -> TIntTrV

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TIntTrV self, TIntTrV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TInt,TInt >,int > const &

        """
        return _SnapTime.TIntTrV___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TIntTrV self, TIntTrV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TInt,TInt >,int > const &

        """
        return _SnapTime.TIntTrV___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntTrV self) -> int

        Parameters
        ----------
        self: TVec< TIntTr > const *

        """
        return _SnapTime.TIntTrV_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TIntTrV self) -> int

        Parameters
        ----------
        self: TVec< TIntTr > const *

        """
        return _SnapTime.TIntTrV_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntTrV self) -> int

        Parameters
        ----------
        self: TVec< TIntTr > const *

        """
        return _SnapTime.TIntTrV_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntTrV self) -> int

        Parameters
        ----------
        self: TVec< TIntTr > const *

        """
        return _SnapTime.TIntTrV_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TIntTrV self, int const & _Vals)

        Parameters
        ----------
        _Vals: int const &

        Gen(TIntTrV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TIntTrV_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TIntTrV self, TIntTr _ValT, int const & _Vals)

        Parameters
        ----------
        _ValT: TTriple< TInt,TInt,TInt > *
        _Vals: int const &

        """
        return _SnapTime.TIntTrV_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TIntTrV self) -> bool

        Parameters
        ----------
        self: TVec< TIntTr > const *

        """
        return _SnapTime.TIntTrV_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TIntTrV self, int const & _MxVals)

        Parameters
        ----------
        _MxVals: int const &

        Reserve(TIntTrV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TIntTrV_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TIntTrV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TIntTrV self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntTrV self)

        Parameters
        ----------
        self: TVec< TIntTr > *

        """
        return _SnapTime.TIntTrV_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TIntTrV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Trunc(TIntTrV self)

        Parameters
        ----------
        self: TVec< TIntTr > *

        """
        return _SnapTime.TIntTrV_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TIntTrV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Reduce(TIntTrV self)

        Parameters
        ----------
        self: TVec< TIntTr > *

        """
        return _SnapTime.TIntTrV_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TIntTrV self)

        Parameters
        ----------
        self: TVec< TIntTr > *

        """
        return _SnapTime.TIntTrV_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TIntTrV self, TIntTrV Vec)

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TInt,TInt >,int > &

        """
        return _SnapTime.TIntTrV_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TIntTrV self, TIntTrV Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TInt,TInt >,int > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TIntTrV_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TIntTrV self) -> bool

        Parameters
        ----------
        self: TVec< TIntTr > const *

        """
        return _SnapTime.TIntTrV_Empty(self)


    def Len(self):
        """
        Len(TIntTrV self) -> int

        Parameters
        ----------
        self: TVec< TIntTr > const *

        """
        return _SnapTime.TIntTrV_Len(self)


    def Reserved(self):
        """
        Reserved(TIntTrV self) -> int

        Parameters
        ----------
        self: TVec< TIntTr > const *

        """
        return _SnapTime.TIntTrV_Reserved(self)


    def Last(self, *args):
        """
        Last(TIntTrV self) -> TIntTr
        Last(TIntTrV self) -> TIntTr

        Parameters
        ----------
        self: TVec< TIntTr > *

        """
        return _SnapTime.TIntTrV_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TIntTrV self) -> int

        Parameters
        ----------
        self: TVec< TIntTr > const *

        """
        return _SnapTime.TIntTrV_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TIntTrV self) -> TIntTr
        LastLast(TIntTrV self) -> TIntTr

        Parameters
        ----------
        self: TVec< TIntTr > *

        """
        return _SnapTime.TIntTrV_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TIntTrV self, TRnd Rnd) -> TIntTr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntTrV self) -> TIntTr
        GetRndVal(TIntTrV self, TRnd Rnd) -> TIntTr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntTrV self) -> TIntTr

        Parameters
        ----------
        self: TVec< TIntTr > *

        """
        return _SnapTime.TIntTrV_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TIntTrV self) -> TIntTr

        Parameters
        ----------
        self: TVec< TIntTr > const *

        """
        return _SnapTime.TIntTrV_BegI(self)


    def begin(self):
        """
        begin(TIntTrV self) -> TIntTr

        Parameters
        ----------
        self: TVec< TIntTr > const *

        """
        return _SnapTime.TIntTrV_begin(self)


    def EndI(self):
        """
        EndI(TIntTrV self) -> TIntTr

        Parameters
        ----------
        self: TVec< TIntTr > const *

        """
        return _SnapTime.TIntTrV_EndI(self)


    def end(self):
        """
        end(TIntTrV self) -> TIntTr

        Parameters
        ----------
        self: TVec< TIntTr > const *

        """
        return _SnapTime.TIntTrV_end(self)


    def GetI(self, ValN):
        """
        GetI(TIntTrV self, int const & ValN) -> TIntTr

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TIntTrV_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TIntTrV self) -> int
        Add(TIntTrV self, TIntTr Val) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        Add(TIntTrV self, TIntTr Val) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > &

        Add(TIntTrV self, TIntTr Val, int const & ResizeLen) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &
        ResizeLen: int const &

        """
        return _SnapTime.TIntTrV_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TIntTrV self, TIntTr Val) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TIntTrV self, TIntTr Val, int Inc) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &
        Inc: int

        """
        return _SnapTime.TIntTrV_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TIntTrV self, TIntTrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        """
        return _SnapTime.TIntTrV_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TIntTrV self, TIntTr Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &
        Asc: bool const &
        _MxVals: int const &

        AddSorted(TIntTrV self, TIntTr Val, bool const & Asc=True) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &
        Asc: bool const &

        AddSorted(TIntTrV self, TIntTr Val) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TIntTrV self, TIntTr Val, bool const & Asc) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &
        Asc: bool const &

        """
        return _SnapTime.TIntTrV_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TIntTrV self, TIntTr Val) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TIntTrV self, TIntTrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        """
        return _SnapTime.TIntTrV_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TIntTrV self, TIntTr Val) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TIntTrV self, int const & ValN) -> TIntTr

        Parameters
        ----------
        ValN: int const &

        GetVal(TIntTrV self, int const & ValN) -> TIntTr

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TIntTrV_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TIntTrV self, int const & ValN, TIntTr Val)

        Parameters
        ----------
        ValN: int const &
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TIntTrV self, int const & BValN, int const & EValN, TIntTrV ValV)

        Parameters
        ----------
        BValN: int const &
        EValN: int const &
        ValV: TVec< TTriple< TInt,TInt,TInt >,int > &

        """
        return _SnapTime.TIntTrV_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TIntTrV self, int const & ValN, TIntTr Val)

        Parameters
        ----------
        ValN: int const &
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TIntTrV self, int const & ValN)

        Parameters
        ----------
        ValN: int const &

        Del(TIntTrV self, int const & MnValN, int const & MxValN)

        Parameters
        ----------
        MnValN: int const &
        MxValN: int const &

        """
        return _SnapTime.TIntTrV_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TIntTrV self)

        Parameters
        ----------
        self: TVec< TIntTr > *

        """
        return _SnapTime.TIntTrV_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TIntTrV self, TIntTr Val) -> bool

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TIntTrV self, TIntTr Val)

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TIntTrV self, TIntTr Val)

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TIntTrV self, int const & FromValN, int const & ToValN)

        Parameters
        ----------
        FromValN: int const &
        ToValN: int const &

        """
        return _SnapTime.TIntTrV_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TIntTrV self, TIntTrV Vec)

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TInt,TInt >,int > &

        Swap(TIntTrV self, int const & ValN1, int const & ValN2)

        Parameters
        ----------
        ValN1: int const &
        ValN2: int const &

        """
        return _SnapTime.TIntTrV_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TIntTr LVal, TIntTr RVal)

        Parameters
        ----------
        LVal: TVec< TTriple< TInt,TInt,TInt > >::TIter
        RVal: TVec< TTriple< TInt,TInt,TInt > >::TIter

        """
        return _SnapTime.TIntTrV_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TIntTrV self) -> TIntTrV

        Parameters
        ----------
        self: TVec< TIntTr > *

        """
        return _SnapTime.TIntTrV_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TIntTrV self) -> bool

        Parameters
        ----------
        self: TVec< TIntTr > *

        """
        return _SnapTime.TIntTrV_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TIntTrV self) -> bool

        Parameters
        ----------
        self: TVec< TIntTr > *

        """
        return _SnapTime.TIntTrV_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TIntTrV self, int const & LValN, int const & RValN) -> int

        Parameters
        ----------
        LValN: int const &
        RValN: int const &

        """
        return _SnapTime.TIntTrV_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TIntTrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntTrV_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TIntTrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntTrV_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TIntTrV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntTrV_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TIntTrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntTrV_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TIntTrV self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TIntTrV self)

        Parameters
        ----------
        self: TVec< TIntTr > *

        """
        return _SnapTime.TIntTrV_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TIntTrV self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TIntTrV self) -> bool

        Parameters
        ----------
        self: TVec< TIntTr > const *

        """
        return _SnapTime.TIntTrV_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TIntTrV self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TIntTrV_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TIntTrV self)
        Reverse(TIntTrV self, int LValN, int RValN)

        Parameters
        ----------
        LValN: int
        RValN: int

        """
        return _SnapTime.TIntTrV_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TIntTrV self)

        Parameters
        ----------
        self: TVec< TIntTr > *

        """
        return _SnapTime.TIntTrV_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TIntTrV self, TIntTrV ValV)

        Parameters
        ----------
        ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        Intrs(TIntTrV self, TIntTrV ValV, TIntTrV DstValV)

        Parameters
        ----------
        ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &
        DstValV: TVec< TTriple< TInt,TInt,TInt >,int > &

        """
        return _SnapTime.TIntTrV_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TIntTrV self, TIntTrV ValV)

        Parameters
        ----------
        ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        Union(TIntTrV self, TIntTrV ValV, TIntTrV DstValV)

        Parameters
        ----------
        ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &
        DstValV: TVec< TTriple< TInt,TInt,TInt >,int > &

        """
        return _SnapTime.TIntTrV_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TIntTrV self, TIntTrV ValV)

        Parameters
        ----------
        ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        Diff(TIntTrV self, TIntTrV ValV, TIntTrV DstValV)

        Parameters
        ----------
        ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &
        DstValV: TVec< TTriple< TInt,TInt,TInt >,int > &

        """
        return _SnapTime.TIntTrV_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TIntTrV self, TIntTrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        """
        return _SnapTime.TIntTrV_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TIntTrV self, TIntTrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        """
        return _SnapTime.TIntTrV_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TIntTrV self, TIntTr Val) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TIntTrV self, TIntTr Val) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        SearchBin(TIntTrV self, TIntTr Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &
        InsValN: int &

        """
        return _SnapTime.TIntTrV_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TIntTrV self, TIntTr Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &
        InsValN: int &

        """
        return _SnapTime.TIntTrV_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TIntTrV self, TIntTr Val, int const & BValN=0) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &
        BValN: int const &

        SearchForw(TIntTrV self, TIntTr Val) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TIntTrV self, TIntTr Val) -> int

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TIntTrV self, TIntTrV ValV, int const & BValN=0) -> int

        Parameters
        ----------
        ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &
        BValN: int const &

        SearchVForw(TIntTrV self, TIntTrV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        """
        return _SnapTime.TIntTrV_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TIntTrV self, TIntTr Val) -> bool

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        IsIn(TIntTrV self, TIntTr Val, int & ValN) -> bool

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &
        ValN: int &

        """
        return _SnapTime.TIntTrV_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TIntTrV self, TIntTr Val) -> bool

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TIntTrV self, TIntTr Val) -> TIntTr

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TIntTrV self, TIntTr Val) -> TIntTr

        Parameters
        ----------
        Val: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TIntTrV self) -> int

        Parameters
        ----------
        self: TVec< TIntTr > const *

        """
        return _SnapTime.TIntTrV_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TIntTr Val1) -> TIntTrV

        Parameters
        ----------
        Val1: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2) -> TIntTrV

        Parameters
        ----------
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3) -> TIntTrV

        Parameters
        ----------
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &
        Val3: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4) -> TIntTrV

        Parameters
        ----------
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &
        Val3: TTriple< TInt,TInt,TInt > const &
        Val4: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5) -> TIntTrV

        Parameters
        ----------
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &
        Val3: TTriple< TInt,TInt,TInt > const &
        Val4: TTriple< TInt,TInt,TInt > const &
        Val5: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6) -> TIntTrV

        Parameters
        ----------
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &
        Val3: TTriple< TInt,TInt,TInt > const &
        Val4: TTriple< TInt,TInt,TInt > const &
        Val5: TTriple< TInt,TInt,TInt > const &
        Val6: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6, TIntTr Val7) -> TIntTrV

        Parameters
        ----------
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &
        Val3: TTriple< TInt,TInt,TInt > const &
        Val4: TTriple< TInt,TInt,TInt > const &
        Val5: TTriple< TInt,TInt,TInt > const &
        Val6: TTriple< TInt,TInt,TInt > const &
        Val7: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6, TIntTr Val7, TIntTr Val8) -> TIntTrV

        Parameters
        ----------
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &
        Val3: TTriple< TInt,TInt,TInt > const &
        Val4: TTriple< TInt,TInt,TInt > const &
        Val5: TTriple< TInt,TInt,TInt > const &
        Val6: TTriple< TInt,TInt,TInt > const &
        Val7: TTriple< TInt,TInt,TInt > const &
        Val8: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6, TIntTr Val7, TIntTr Val8, TIntTr Val9) -> TIntTrV

        Parameters
        ----------
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &
        Val3: TTriple< TInt,TInt,TInt > const &
        Val4: TTriple< TInt,TInt,TInt > const &
        Val5: TTriple< TInt,TInt,TInt > const &
        Val6: TTriple< TInt,TInt,TInt > const &
        Val7: TTriple< TInt,TInt,TInt > const &
        Val8: TTriple< TInt,TInt,TInt > const &
        Val9: TTriple< TInt,TInt,TInt > const &

        """
        return _SnapTime.TIntTrV_GetV(*args)

    GetV = staticmethod(GetV)
TIntTrV.LoadShM = new_instancemethod(_SnapTime.TIntTrV_LoadShM, None, TIntTrV)
TIntTrV.Load = new_instancemethod(_SnapTime.TIntTrV_Load, None, TIntTrV)
TIntTrV.Save = new_instancemethod(_SnapTime.TIntTrV_Save, None, TIntTrV)
TIntTrV.__add__ = new_instancemethod(_SnapTime.TIntTrV___add__, None, TIntTrV)
TIntTrV.__eq__ = new_instancemethod(_SnapTime.TIntTrV___eq__, None, TIntTrV)
TIntTrV.__lt__ = new_instancemethod(_SnapTime.TIntTrV___lt__, None, TIntTrV)
TIntTrV.GetMemUsed = new_instancemethod(_SnapTime.TIntTrV_GetMemUsed, None, TIntTrV)
TIntTrV.GetMemSize = new_instancemethod(_SnapTime.TIntTrV_GetMemSize, None, TIntTrV)
TIntTrV.GetPrimHashCd = new_instancemethod(_SnapTime.TIntTrV_GetPrimHashCd, None, TIntTrV)
TIntTrV.GetSecHashCd = new_instancemethod(_SnapTime.TIntTrV_GetSecHashCd, None, TIntTrV)
TIntTrV.Gen = new_instancemethod(_SnapTime.TIntTrV_Gen, None, TIntTrV)
TIntTrV.GenExt = new_instancemethod(_SnapTime.TIntTrV_GenExt, None, TIntTrV)
TIntTrV.IsExt = new_instancemethod(_SnapTime.TIntTrV_IsExt, None, TIntTrV)
TIntTrV.Reserve = new_instancemethod(_SnapTime.TIntTrV_Reserve, None, TIntTrV)
TIntTrV.Clr = new_instancemethod(_SnapTime.TIntTrV_Clr, None, TIntTrV)
TIntTrV.Trunc = new_instancemethod(_SnapTime.TIntTrV_Trunc, None, TIntTrV)
TIntTrV.Reduce = new_instancemethod(_SnapTime.TIntTrV_Reduce, None, TIntTrV)
TIntTrV.Pack = new_instancemethod(_SnapTime.TIntTrV_Pack, None, TIntTrV)
TIntTrV.MoveFrom = new_instancemethod(_SnapTime.TIntTrV_MoveFrom, None, TIntTrV)
TIntTrV.CopyUniqueFrom = new_instancemethod(_SnapTime.TIntTrV_CopyUniqueFrom, None, TIntTrV)
TIntTrV.Empty = new_instancemethod(_SnapTime.TIntTrV_Empty, None, TIntTrV)
TIntTrV.Len = new_instancemethod(_SnapTime.TIntTrV_Len, None, TIntTrV)
TIntTrV.Reserved = new_instancemethod(_SnapTime.TIntTrV_Reserved, None, TIntTrV)
TIntTrV.Last = new_instancemethod(_SnapTime.TIntTrV_Last, None, TIntTrV)
TIntTrV.LastValN = new_instancemethod(_SnapTime.TIntTrV_LastValN, None, TIntTrV)
TIntTrV.LastLast = new_instancemethod(_SnapTime.TIntTrV_LastLast, None, TIntTrV)
TIntTrV.GetRndVal = new_instancemethod(_SnapTime.TIntTrV_GetRndVal, None, TIntTrV)
TIntTrV.BegI = new_instancemethod(_SnapTime.TIntTrV_BegI, None, TIntTrV)
TIntTrV.begin = new_instancemethod(_SnapTime.TIntTrV_begin, None, TIntTrV)
TIntTrV.EndI = new_instancemethod(_SnapTime.TIntTrV_EndI, None, TIntTrV)
TIntTrV.end = new_instancemethod(_SnapTime.TIntTrV_end, None, TIntTrV)
TIntTrV.GetI = new_instancemethod(_SnapTime.TIntTrV_GetI, None, TIntTrV)
TIntTrV.Add = new_instancemethod(_SnapTime.TIntTrV_Add, None, TIntTrV)
TIntTrV.AddMP = new_instancemethod(_SnapTime.TIntTrV_AddMP, None, TIntTrV)
TIntTrV.MoveLastMP = new_instancemethod(_SnapTime.TIntTrV_MoveLastMP, None, TIntTrV)
TIntTrV.AddV = new_instancemethod(_SnapTime.TIntTrV_AddV, None, TIntTrV)
TIntTrV.AddSorted = new_instancemethod(_SnapTime.TIntTrV_AddSorted, None, TIntTrV)
TIntTrV.AddBackSorted = new_instancemethod(_SnapTime.TIntTrV_AddBackSorted, None, TIntTrV)
TIntTrV.AddMerged = new_instancemethod(_SnapTime.TIntTrV_AddMerged, None, TIntTrV)
TIntTrV.AddVMerged = new_instancemethod(_SnapTime.TIntTrV_AddVMerged, None, TIntTrV)
TIntTrV.AddUnique = new_instancemethod(_SnapTime.TIntTrV_AddUnique, None, TIntTrV)
TIntTrV.GetVal = new_instancemethod(_SnapTime.TIntTrV_GetVal, None, TIntTrV)
TIntTrV.SetVal = new_instancemethod(_SnapTime.TIntTrV_SetVal, None, TIntTrV)
TIntTrV.GetSubValV = new_instancemethod(_SnapTime.TIntTrV_GetSubValV, None, TIntTrV)
TIntTrV.Ins = new_instancemethod(_SnapTime.TIntTrV_Ins, None, TIntTrV)
TIntTrV.Del = new_instancemethod(_SnapTime.TIntTrV_Del, None, TIntTrV)
TIntTrV.DelLast = new_instancemethod(_SnapTime.TIntTrV_DelLast, None, TIntTrV)
TIntTrV.DelIfIn = new_instancemethod(_SnapTime.TIntTrV_DelIfIn, None, TIntTrV)
TIntTrV.DelAll = new_instancemethod(_SnapTime.TIntTrV_DelAll, None, TIntTrV)
TIntTrV.PutAll = new_instancemethod(_SnapTime.TIntTrV_PutAll, None, TIntTrV)
TIntTrV.Move = new_instancemethod(_SnapTime.TIntTrV_Move, None, TIntTrV)
TIntTrV.Swap = new_instancemethod(_SnapTime.TIntTrV_Swap, None, TIntTrV)
TIntTrV.Get32BitVector = new_instancemethod(_SnapTime.TIntTrV_Get32BitVector, None, TIntTrV)
TIntTrV.NextPerm = new_instancemethod(_SnapTime.TIntTrV_NextPerm, None, TIntTrV)
TIntTrV.PrevPerm = new_instancemethod(_SnapTime.TIntTrV_PrevPerm, None, TIntTrV)
TIntTrV.GetPivotValN = new_instancemethod(_SnapTime.TIntTrV_GetPivotValN, None, TIntTrV)
TIntTrV.BSort = new_instancemethod(_SnapTime.TIntTrV_BSort, None, TIntTrV)
TIntTrV.ISort = new_instancemethod(_SnapTime.TIntTrV_ISort, None, TIntTrV)
TIntTrV.Partition = new_instancemethod(_SnapTime.TIntTrV_Partition, None, TIntTrV)
TIntTrV.QSort = new_instancemethod(_SnapTime.TIntTrV_QSort, None, TIntTrV)
TIntTrV.Sort = new_instancemethod(_SnapTime.TIntTrV_Sort, None, TIntTrV)
TIntTrV.IsSorted = new_instancemethod(_SnapTime.TIntTrV_IsSorted, None, TIntTrV)
TIntTrV.Shuffle = new_instancemethod(_SnapTime.TIntTrV_Shuffle, None, TIntTrV)
TIntTrV.Reverse = new_instancemethod(_SnapTime.TIntTrV_Reverse, None, TIntTrV)
TIntTrV.Merge = new_instancemethod(_SnapTime.TIntTrV_Merge, None, TIntTrV)
TIntTrV.Intrs = new_instancemethod(_SnapTime.TIntTrV_Intrs, None, TIntTrV)
TIntTrV.Union = new_instancemethod(_SnapTime.TIntTrV_Union, None, TIntTrV)
TIntTrV.Diff = new_instancemethod(_SnapTime.TIntTrV_Diff, None, TIntTrV)
TIntTrV.IntrsLen = new_instancemethod(_SnapTime.TIntTrV_IntrsLen, None, TIntTrV)
TIntTrV.UnionLen = new_instancemethod(_SnapTime.TIntTrV_UnionLen, None, TIntTrV)
TIntTrV.Count = new_instancemethod(_SnapTime.TIntTrV_Count, None, TIntTrV)
TIntTrV.SearchBin = new_instancemethod(_SnapTime.TIntTrV_SearchBin, None, TIntTrV)
TIntTrV.SearchBinLeft = new_instancemethod(_SnapTime.TIntTrV_SearchBinLeft, None, TIntTrV)
TIntTrV.SearchForw = new_instancemethod(_SnapTime.TIntTrV_SearchForw, None, TIntTrV)
TIntTrV.SearchBack = new_instancemethod(_SnapTime.TIntTrV_SearchBack, None, TIntTrV)
TIntTrV.SearchVForw = new_instancemethod(_SnapTime.TIntTrV_SearchVForw, None, TIntTrV)
TIntTrV.IsIn = new_instancemethod(_SnapTime.TIntTrV_IsIn, None, TIntTrV)
TIntTrV.IsInBin = new_instancemethod(_SnapTime.TIntTrV_IsInBin, None, TIntTrV)
TIntTrV.GetDat = new_instancemethod(_SnapTime.TIntTrV_GetDat, None, TIntTrV)
TIntTrV.GetAddDat = new_instancemethod(_SnapTime.TIntTrV_GetAddDat, None, TIntTrV)
TIntTrV.GetMxValN = new_instancemethod(_SnapTime.TIntTrV_GetMxValN, None, TIntTrV)
TIntTrV_swigregister = _SnapTime.TIntTrV_swigregister
TIntTrV_swigregister(TIntTrV)

def TIntTrV_SwapI(LVal, RVal):
    """
    TIntTrV_SwapI(TIntTr LVal, TIntTr RVal)

    Parameters
    ----------
    LVal: TVec< TTriple< TInt,TInt,TInt > >::TIter
    RVal: TVec< TTriple< TInt,TInt,TInt > >::TIter

    """
    return _SnapTime.TIntTrV_SwapI(LVal, RVal)

def TIntTrV_GetV(*args):
    """
    GetV(TIntTr Val1) -> TIntTrV

    Parameters
    ----------
    Val1: TTriple< TInt,TInt,TInt > const &

    GetV(TIntTr Val1, TIntTr Val2) -> TIntTrV

    Parameters
    ----------
    Val1: TTriple< TInt,TInt,TInt > const &
    Val2: TTriple< TInt,TInt,TInt > const &

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3) -> TIntTrV

    Parameters
    ----------
    Val1: TTriple< TInt,TInt,TInt > const &
    Val2: TTriple< TInt,TInt,TInt > const &
    Val3: TTriple< TInt,TInt,TInt > const &

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4) -> TIntTrV

    Parameters
    ----------
    Val1: TTriple< TInt,TInt,TInt > const &
    Val2: TTriple< TInt,TInt,TInt > const &
    Val3: TTriple< TInt,TInt,TInt > const &
    Val4: TTriple< TInt,TInt,TInt > const &

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5) -> TIntTrV

    Parameters
    ----------
    Val1: TTriple< TInt,TInt,TInt > const &
    Val2: TTriple< TInt,TInt,TInt > const &
    Val3: TTriple< TInt,TInt,TInt > const &
    Val4: TTriple< TInt,TInt,TInt > const &
    Val5: TTriple< TInt,TInt,TInt > const &

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6) -> TIntTrV

    Parameters
    ----------
    Val1: TTriple< TInt,TInt,TInt > const &
    Val2: TTriple< TInt,TInt,TInt > const &
    Val3: TTriple< TInt,TInt,TInt > const &
    Val4: TTriple< TInt,TInt,TInt > const &
    Val5: TTriple< TInt,TInt,TInt > const &
    Val6: TTriple< TInt,TInt,TInt > const &

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6, TIntTr Val7) -> TIntTrV

    Parameters
    ----------
    Val1: TTriple< TInt,TInt,TInt > const &
    Val2: TTriple< TInt,TInt,TInt > const &
    Val3: TTriple< TInt,TInt,TInt > const &
    Val4: TTriple< TInt,TInt,TInt > const &
    Val5: TTriple< TInt,TInt,TInt > const &
    Val6: TTriple< TInt,TInt,TInt > const &
    Val7: TTriple< TInt,TInt,TInt > const &

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6, TIntTr Val7, TIntTr Val8) -> TIntTrV

    Parameters
    ----------
    Val1: TTriple< TInt,TInt,TInt > const &
    Val2: TTriple< TInt,TInt,TInt > const &
    Val3: TTriple< TInt,TInt,TInt > const &
    Val4: TTriple< TInt,TInt,TInt > const &
    Val5: TTriple< TInt,TInt,TInt > const &
    Val6: TTriple< TInt,TInt,TInt > const &
    Val7: TTriple< TInt,TInt,TInt > const &
    Val8: TTriple< TInt,TInt,TInt > const &

    TIntTrV_GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6, TIntTr Val7, TIntTr Val8, TIntTr Val9) -> TIntTrV

    Parameters
    ----------
    Val1: TTriple< TInt,TInt,TInt > const &
    Val2: TTriple< TInt,TInt,TInt > const &
    Val3: TTriple< TInt,TInt,TInt > const &
    Val4: TTriple< TInt,TInt,TInt > const &
    Val5: TTriple< TInt,TInt,TInt > const &
    Val6: TTriple< TInt,TInt,TInt > const &
    Val7: TTriple< TInt,TInt,TInt > const &
    Val8: TTriple< TInt,TInt,TInt > const &
    Val9: TTriple< TInt,TInt,TInt > const &

    """
    return _SnapTime.TIntTrV_GetV(*args)

class TIntTr64V(object):
    """Proxy of C++ TVec<(TInt64Tr,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TIntTr64V

    def __init__(self, *args):
        """
        __init__(TVec<(TInt64Tr,int64)> self) -> TIntTr64V
        __init__(TVec<(TInt64Tr,int64)> self, TIntTr64V Vec) -> TIntTr64V

        Parameters
        ----------
        Vec: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > const &

        __init__(TVec<(TInt64Tr,int64)> self, TIntTr64V Vec) -> TIntTr64V

        Parameters
        ----------
        Vec: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > &&

        __init__(TVec<(TInt64Tr,int64)> self, long long const & _Vals) -> TIntTr64V

        Parameters
        ----------
        _Vals: long long const &

        __init__(TVec<(TInt64Tr,int64)> self, long long const & _MxVals, long long const & _Vals) -> TIntTr64V

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        __init__(TVec<(TInt64Tr,int64)> self, long long const & _MxVals, long long const & _Vals, TInt64Tr Dat) -> TIntTr64V

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &
        Dat: TTriple< TInt64,TInt64,TInt64 >

        __init__(TVec<(TInt64Tr,int64)> self, TInt64Tr _ValT, long long const & _Vals) -> TIntTr64V

        Parameters
        ----------
        _ValT: TTriple< TInt64,TInt64,TInt64 > *
        _Vals: long long const &

        __init__(TVec<(TInt64Tr,int64)> self, TSIn SIn) -> TIntTr64V

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntTr64V_swiginit(self, _SnapTime.new_TIntTr64V(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntTr64V self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntTr64V_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntTr64V self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntTr64V_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntTr64V self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntTr64V_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TIntTr64V self, TInt64Tr Val) -> TIntTr64V

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TIntTr64V self, TIntTr64V Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > const &

        """
        return _SnapTime.TIntTr64V___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TIntTr64V self, TIntTr64V Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > const &

        """
        return _SnapTime.TIntTr64V___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntTr64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > const *

        """
        return _SnapTime.TIntTr64V_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TIntTr64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > const *

        """
        return _SnapTime.TIntTr64V_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntTr64V self) -> int

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > const *

        """
        return _SnapTime.TIntTr64V_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntTr64V self) -> int

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > const *

        """
        return _SnapTime.TIntTr64V_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TIntTr64V self, long long const & _Vals)

        Parameters
        ----------
        _Vals: long long const &

        Gen(TIntTr64V self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TIntTr64V_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TIntTr64V self, TInt64Tr _ValT, long long const & _Vals)

        Parameters
        ----------
        _ValT: TTriple< TInt64,TInt64,TInt64 > *
        _Vals: long long const &

        """
        return _SnapTime.TIntTr64V_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TIntTr64V self) -> bool

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > const *

        """
        return _SnapTime.TIntTr64V_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TIntTr64V self, long long const & _MxVals)

        Parameters
        ----------
        _MxVals: long long const &

        Reserve(TIntTr64V self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TIntTr64V_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TIntTr64V self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(TIntTr64V self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntTr64V self)

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > *

        """
        return _SnapTime.TIntTr64V_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TIntTr64V self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Trunc(TIntTr64V self)

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > *

        """
        return _SnapTime.TIntTr64V_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TIntTr64V self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Reduce(TIntTr64V self)

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > *

        """
        return _SnapTime.TIntTr64V_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TIntTr64V self)

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > *

        """
        return _SnapTime.TIntTr64V_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TIntTr64V self, TIntTr64V Vec)

        Parameters
        ----------
        Vec: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > &

        """
        return _SnapTime.TIntTr64V_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TIntTr64V self, TIntTr64V Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TIntTr64V_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TIntTr64V self) -> bool

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > const *

        """
        return _SnapTime.TIntTr64V_Empty(self)


    def Len(self):
        """
        Len(TIntTr64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > const *

        """
        return _SnapTime.TIntTr64V_Len(self)


    def Reserved(self):
        """
        Reserved(TIntTr64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > const *

        """
        return _SnapTime.TIntTr64V_Reserved(self)


    def Last(self, *args):
        """
        Last(TIntTr64V self) -> TInt64Tr
        Last(TIntTr64V self) -> TInt64Tr

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > *

        """
        return _SnapTime.TIntTr64V_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TIntTr64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > const *

        """
        return _SnapTime.TIntTr64V_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TIntTr64V self) -> TInt64Tr
        LastLast(TIntTr64V self) -> TInt64Tr

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > *

        """
        return _SnapTime.TIntTr64V_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TIntTr64V self, TRnd Rnd) -> TInt64Tr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntTr64V self) -> TInt64Tr
        GetRndVal(TIntTr64V self, TRnd Rnd) -> TInt64Tr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntTr64V self) -> TInt64Tr

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > *

        """
        return _SnapTime.TIntTr64V_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TIntTr64V self) -> TInt64Tr

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > const *

        """
        return _SnapTime.TIntTr64V_BegI(self)


    def begin(self):
        """
        begin(TIntTr64V self) -> TInt64Tr

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > const *

        """
        return _SnapTime.TIntTr64V_begin(self)


    def EndI(self):
        """
        EndI(TIntTr64V self) -> TInt64Tr

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > const *

        """
        return _SnapTime.TIntTr64V_EndI(self)


    def end(self):
        """
        end(TIntTr64V self) -> TInt64Tr

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > const *

        """
        return _SnapTime.TIntTr64V_end(self)


    def GetI(self, ValN):
        """
        GetI(TIntTr64V self, long long const & ValN) -> TInt64Tr

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TIntTr64V_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TIntTr64V self) -> long long
        Add(TIntTr64V self, TInt64Tr Val) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        Add(TIntTr64V self, TInt64Tr Val) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > &

        Add(TIntTr64V self, TInt64Tr Val, long long const & ResizeLen) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &
        ResizeLen: long long const &

        """
        return _SnapTime.TIntTr64V_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TIntTr64V self, TInt64Tr Val) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TIntTr64V self, TInt64Tr Val, int Inc) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &
        Inc: int

        """
        return _SnapTime.TIntTr64V_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TIntTr64V self, TIntTr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > const &

        """
        return _SnapTime.TIntTr64V_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TIntTr64V self, TInt64Tr Val, bool const & Asc=True, long long const & _MxVals=-1) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &
        Asc: bool const &
        _MxVals: long long const &

        AddSorted(TIntTr64V self, TInt64Tr Val, bool const & Asc=True) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &
        Asc: bool const &

        AddSorted(TIntTr64V self, TInt64Tr Val) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TIntTr64V self, TInt64Tr Val, bool const & Asc) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &
        Asc: bool const &

        """
        return _SnapTime.TIntTr64V_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TIntTr64V self, TInt64Tr Val) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TIntTr64V self, TIntTr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > const &

        """
        return _SnapTime.TIntTr64V_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TIntTr64V self, TInt64Tr Val) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TIntTr64V self, long long const & ValN) -> TInt64Tr

        Parameters
        ----------
        ValN: long long const &

        GetVal(TIntTr64V self, long long const & ValN) -> TInt64Tr

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TIntTr64V_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TIntTr64V self, long long const & ValN, TInt64Tr Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TIntTr64V self, long long const & BValN, long long const & EValN, TIntTr64V ValV)

        Parameters
        ----------
        BValN: long long const &
        EValN: long long const &
        ValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > &

        """
        return _SnapTime.TIntTr64V_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TIntTr64V self, long long const & ValN, TInt64Tr Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TIntTr64V self, long long const & ValN)

        Parameters
        ----------
        ValN: long long const &

        Del(TIntTr64V self, long long const & MnValN, long long const & MxValN)

        Parameters
        ----------
        MnValN: long long const &
        MxValN: long long const &

        """
        return _SnapTime.TIntTr64V_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TIntTr64V self)

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > *

        """
        return _SnapTime.TIntTr64V_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TIntTr64V self, TInt64Tr Val) -> bool

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TIntTr64V self, TInt64Tr Val)

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TIntTr64V self, TInt64Tr Val)

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TIntTr64V self, long long const & FromValN, long long const & ToValN)

        Parameters
        ----------
        FromValN: long long const &
        ToValN: long long const &

        """
        return _SnapTime.TIntTr64V_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TIntTr64V self, TIntTr64V Vec)

        Parameters
        ----------
        Vec: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > &

        Swap(TIntTr64V self, long long const & ValN1, long long const & ValN2)

        Parameters
        ----------
        ValN1: long long const &
        ValN2: long long const &

        """
        return _SnapTime.TIntTr64V_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TInt64Tr LVal, TInt64Tr RVal)

        Parameters
        ----------
        LVal: TVec< TTriple< TInt64,TInt64,TInt64 >,long long >::TIter
        RVal: TVec< TTriple< TInt64,TInt64,TInt64 >,long long >::TIter

        """
        return _SnapTime.TIntTr64V_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TIntTr64V self) -> TVec< TTriple< TInt64,TInt64,TInt64 >,int >

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > *

        """
        return _SnapTime.TIntTr64V_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TIntTr64V self) -> bool

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > *

        """
        return _SnapTime.TIntTr64V_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TIntTr64V self) -> bool

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > *

        """
        return _SnapTime.TIntTr64V_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TIntTr64V self, long long const & LValN, long long const & RValN) -> long long

        Parameters
        ----------
        LValN: long long const &
        RValN: long long const &

        """
        return _SnapTime.TIntTr64V_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TIntTr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntTr64V_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TIntTr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntTr64V_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TIntTr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc) -> long long

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntTr64V_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TIntTr64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntTr64V_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TIntTr64V self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TIntTr64V self)

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > *

        """
        return _SnapTime.TIntTr64V_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TIntTr64V self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TIntTr64V self) -> bool

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > const *

        """
        return _SnapTime.TIntTr64V_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TIntTr64V self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TIntTr64V_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TIntTr64V self)
        Reverse(TIntTr64V self, long long LValN, long long RValN)

        Parameters
        ----------
        LValN: long long
        RValN: long long

        """
        return _SnapTime.TIntTr64V_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TIntTr64V self)

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > *

        """
        return _SnapTime.TIntTr64V_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TIntTr64V self, TIntTr64V ValV)

        Parameters
        ----------
        ValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > const &

        Intrs(TIntTr64V self, TIntTr64V ValV, TIntTr64V DstValV)

        Parameters
        ----------
        ValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > const &
        DstValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > &

        """
        return _SnapTime.TIntTr64V_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TIntTr64V self, TIntTr64V ValV)

        Parameters
        ----------
        ValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > const &

        Union(TIntTr64V self, TIntTr64V ValV, TIntTr64V DstValV)

        Parameters
        ----------
        ValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > const &
        DstValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > &

        """
        return _SnapTime.TIntTr64V_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TIntTr64V self, TIntTr64V ValV)

        Parameters
        ----------
        ValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > const &

        Diff(TIntTr64V self, TIntTr64V ValV, TIntTr64V DstValV)

        Parameters
        ----------
        ValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > const &
        DstValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > &

        """
        return _SnapTime.TIntTr64V_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TIntTr64V self, TIntTr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > const &

        """
        return _SnapTime.TIntTr64V_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TIntTr64V self, TIntTr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > const &

        """
        return _SnapTime.TIntTr64V_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TIntTr64V self, TInt64Tr Val) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TIntTr64V self, TInt64Tr Val) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        SearchBin(TIntTr64V self, TInt64Tr Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &
        InsValN: long long &

        """
        return _SnapTime.TIntTr64V_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TIntTr64V self, TInt64Tr Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &
        InsValN: long long &

        """
        return _SnapTime.TIntTr64V_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TIntTr64V self, TInt64Tr Val, long long const & BValN=0) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &
        BValN: long long const &

        SearchForw(TIntTr64V self, TInt64Tr Val) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TIntTr64V self, TInt64Tr Val) -> long long

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TIntTr64V self, TIntTr64V ValV, long long const & BValN=0) -> long long

        Parameters
        ----------
        ValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > const &
        BValN: long long const &

        SearchVForw(TIntTr64V self, TIntTr64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TTriple< TInt64,TInt64,TInt64 >,long long > const &

        """
        return _SnapTime.TIntTr64V_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TIntTr64V self, TInt64Tr Val) -> bool

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        IsIn(TIntTr64V self, TInt64Tr Val, long long & ValN) -> bool

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &
        ValN: long long &

        """
        return _SnapTime.TIntTr64V_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TIntTr64V self, TInt64Tr Val) -> bool

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TIntTr64V self, TInt64Tr Val) -> TInt64Tr

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TIntTr64V self, TInt64Tr Val) -> TInt64Tr

        Parameters
        ----------
        Val: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TIntTr64V self) -> long long

        Parameters
        ----------
        self: TVec< TInt64Tr,int64 > const *

        """
        return _SnapTime.TIntTr64V_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TInt64Tr Val1) -> TIntTr64V

        Parameters
        ----------
        Val1: TTriple< TInt64,TInt64,TInt64 > const &

        GetV(TInt64Tr Val1, TInt64Tr Val2) -> TIntTr64V

        Parameters
        ----------
        Val1: TTriple< TInt64,TInt64,TInt64 > const &
        Val2: TTriple< TInt64,TInt64,TInt64 > const &

        GetV(TInt64Tr Val1, TInt64Tr Val2, TInt64Tr Val3) -> TIntTr64V

        Parameters
        ----------
        Val1: TTriple< TInt64,TInt64,TInt64 > const &
        Val2: TTriple< TInt64,TInt64,TInt64 > const &
        Val3: TTriple< TInt64,TInt64,TInt64 > const &

        GetV(TInt64Tr Val1, TInt64Tr Val2, TInt64Tr Val3, TInt64Tr Val4) -> TIntTr64V

        Parameters
        ----------
        Val1: TTriple< TInt64,TInt64,TInt64 > const &
        Val2: TTriple< TInt64,TInt64,TInt64 > const &
        Val3: TTriple< TInt64,TInt64,TInt64 > const &
        Val4: TTriple< TInt64,TInt64,TInt64 > const &

        GetV(TInt64Tr Val1, TInt64Tr Val2, TInt64Tr Val3, TInt64Tr Val4, TInt64Tr Val5) -> TIntTr64V

        Parameters
        ----------
        Val1: TTriple< TInt64,TInt64,TInt64 > const &
        Val2: TTriple< TInt64,TInt64,TInt64 > const &
        Val3: TTriple< TInt64,TInt64,TInt64 > const &
        Val4: TTriple< TInt64,TInt64,TInt64 > const &
        Val5: TTriple< TInt64,TInt64,TInt64 > const &

        GetV(TInt64Tr Val1, TInt64Tr Val2, TInt64Tr Val3, TInt64Tr Val4, TInt64Tr Val5, TInt64Tr Val6) -> TIntTr64V

        Parameters
        ----------
        Val1: TTriple< TInt64,TInt64,TInt64 > const &
        Val2: TTriple< TInt64,TInt64,TInt64 > const &
        Val3: TTriple< TInt64,TInt64,TInt64 > const &
        Val4: TTriple< TInt64,TInt64,TInt64 > const &
        Val5: TTriple< TInt64,TInt64,TInt64 > const &
        Val6: TTriple< TInt64,TInt64,TInt64 > const &

        GetV(TInt64Tr Val1, TInt64Tr Val2, TInt64Tr Val3, TInt64Tr Val4, TInt64Tr Val5, TInt64Tr Val6, TInt64Tr Val7) -> TIntTr64V

        Parameters
        ----------
        Val1: TTriple< TInt64,TInt64,TInt64 > const &
        Val2: TTriple< TInt64,TInt64,TInt64 > const &
        Val3: TTriple< TInt64,TInt64,TInt64 > const &
        Val4: TTriple< TInt64,TInt64,TInt64 > const &
        Val5: TTriple< TInt64,TInt64,TInt64 > const &
        Val6: TTriple< TInt64,TInt64,TInt64 > const &
        Val7: TTriple< TInt64,TInt64,TInt64 > const &

        GetV(TInt64Tr Val1, TInt64Tr Val2, TInt64Tr Val3, TInt64Tr Val4, TInt64Tr Val5, TInt64Tr Val6, TInt64Tr Val7, TInt64Tr Val8) -> TIntTr64V

        Parameters
        ----------
        Val1: TTriple< TInt64,TInt64,TInt64 > const &
        Val2: TTriple< TInt64,TInt64,TInt64 > const &
        Val3: TTriple< TInt64,TInt64,TInt64 > const &
        Val4: TTriple< TInt64,TInt64,TInt64 > const &
        Val5: TTriple< TInt64,TInt64,TInt64 > const &
        Val6: TTriple< TInt64,TInt64,TInt64 > const &
        Val7: TTriple< TInt64,TInt64,TInt64 > const &
        Val8: TTriple< TInt64,TInt64,TInt64 > const &

        GetV(TInt64Tr Val1, TInt64Tr Val2, TInt64Tr Val3, TInt64Tr Val4, TInt64Tr Val5, TInt64Tr Val6, TInt64Tr Val7, TInt64Tr Val8, TInt64Tr Val9) -> TIntTr64V

        Parameters
        ----------
        Val1: TTriple< TInt64,TInt64,TInt64 > const &
        Val2: TTriple< TInt64,TInt64,TInt64 > const &
        Val3: TTriple< TInt64,TInt64,TInt64 > const &
        Val4: TTriple< TInt64,TInt64,TInt64 > const &
        Val5: TTriple< TInt64,TInt64,TInt64 > const &
        Val6: TTriple< TInt64,TInt64,TInt64 > const &
        Val7: TTriple< TInt64,TInt64,TInt64 > const &
        Val8: TTriple< TInt64,TInt64,TInt64 > const &
        Val9: TTriple< TInt64,TInt64,TInt64 > const &

        """
        return _SnapTime.TIntTr64V_GetV(*args)

    GetV = staticmethod(GetV)
TIntTr64V.LoadShM = new_instancemethod(_SnapTime.TIntTr64V_LoadShM, None, TIntTr64V)
TIntTr64V.Load = new_instancemethod(_SnapTime.TIntTr64V_Load, None, TIntTr64V)
TIntTr64V.Save = new_instancemethod(_SnapTime.TIntTr64V_Save, None, TIntTr64V)
TIntTr64V.__add__ = new_instancemethod(_SnapTime.TIntTr64V___add__, None, TIntTr64V)
TIntTr64V.__eq__ = new_instancemethod(_SnapTime.TIntTr64V___eq__, None, TIntTr64V)
TIntTr64V.__lt__ = new_instancemethod(_SnapTime.TIntTr64V___lt__, None, TIntTr64V)
TIntTr64V.GetMemUsed = new_instancemethod(_SnapTime.TIntTr64V_GetMemUsed, None, TIntTr64V)
TIntTr64V.GetMemSize = new_instancemethod(_SnapTime.TIntTr64V_GetMemSize, None, TIntTr64V)
TIntTr64V.GetPrimHashCd = new_instancemethod(_SnapTime.TIntTr64V_GetPrimHashCd, None, TIntTr64V)
TIntTr64V.GetSecHashCd = new_instancemethod(_SnapTime.TIntTr64V_GetSecHashCd, None, TIntTr64V)
TIntTr64V.Gen = new_instancemethod(_SnapTime.TIntTr64V_Gen, None, TIntTr64V)
TIntTr64V.GenExt = new_instancemethod(_SnapTime.TIntTr64V_GenExt, None, TIntTr64V)
TIntTr64V.IsExt = new_instancemethod(_SnapTime.TIntTr64V_IsExt, None, TIntTr64V)
TIntTr64V.Reserve = new_instancemethod(_SnapTime.TIntTr64V_Reserve, None, TIntTr64V)
TIntTr64V.Clr = new_instancemethod(_SnapTime.TIntTr64V_Clr, None, TIntTr64V)
TIntTr64V.Trunc = new_instancemethod(_SnapTime.TIntTr64V_Trunc, None, TIntTr64V)
TIntTr64V.Reduce = new_instancemethod(_SnapTime.TIntTr64V_Reduce, None, TIntTr64V)
TIntTr64V.Pack = new_instancemethod(_SnapTime.TIntTr64V_Pack, None, TIntTr64V)
TIntTr64V.MoveFrom = new_instancemethod(_SnapTime.TIntTr64V_MoveFrom, None, TIntTr64V)
TIntTr64V.CopyUniqueFrom = new_instancemethod(_SnapTime.TIntTr64V_CopyUniqueFrom, None, TIntTr64V)
TIntTr64V.Empty = new_instancemethod(_SnapTime.TIntTr64V_Empty, None, TIntTr64V)
TIntTr64V.Len = new_instancemethod(_SnapTime.TIntTr64V_Len, None, TIntTr64V)
TIntTr64V.Reserved = new_instancemethod(_SnapTime.TIntTr64V_Reserved, None, TIntTr64V)
TIntTr64V.Last = new_instancemethod(_SnapTime.TIntTr64V_Last, None, TIntTr64V)
TIntTr64V.LastValN = new_instancemethod(_SnapTime.TIntTr64V_LastValN, None, TIntTr64V)
TIntTr64V.LastLast = new_instancemethod(_SnapTime.TIntTr64V_LastLast, None, TIntTr64V)
TIntTr64V.GetRndVal = new_instancemethod(_SnapTime.TIntTr64V_GetRndVal, None, TIntTr64V)
TIntTr64V.BegI = new_instancemethod(_SnapTime.TIntTr64V_BegI, None, TIntTr64V)
TIntTr64V.begin = new_instancemethod(_SnapTime.TIntTr64V_begin, None, TIntTr64V)
TIntTr64V.EndI = new_instancemethod(_SnapTime.TIntTr64V_EndI, None, TIntTr64V)
TIntTr64V.end = new_instancemethod(_SnapTime.TIntTr64V_end, None, TIntTr64V)
TIntTr64V.GetI = new_instancemethod(_SnapTime.TIntTr64V_GetI, None, TIntTr64V)
TIntTr64V.Add = new_instancemethod(_SnapTime.TIntTr64V_Add, None, TIntTr64V)
TIntTr64V.AddMP = new_instancemethod(_SnapTime.TIntTr64V_AddMP, None, TIntTr64V)
TIntTr64V.MoveLastMP = new_instancemethod(_SnapTime.TIntTr64V_MoveLastMP, None, TIntTr64V)
TIntTr64V.AddV = new_instancemethod(_SnapTime.TIntTr64V_AddV, None, TIntTr64V)
TIntTr64V.AddSorted = new_instancemethod(_SnapTime.TIntTr64V_AddSorted, None, TIntTr64V)
TIntTr64V.AddBackSorted = new_instancemethod(_SnapTime.TIntTr64V_AddBackSorted, None, TIntTr64V)
TIntTr64V.AddMerged = new_instancemethod(_SnapTime.TIntTr64V_AddMerged, None, TIntTr64V)
TIntTr64V.AddVMerged = new_instancemethod(_SnapTime.TIntTr64V_AddVMerged, None, TIntTr64V)
TIntTr64V.AddUnique = new_instancemethod(_SnapTime.TIntTr64V_AddUnique, None, TIntTr64V)
TIntTr64V.GetVal = new_instancemethod(_SnapTime.TIntTr64V_GetVal, None, TIntTr64V)
TIntTr64V.SetVal = new_instancemethod(_SnapTime.TIntTr64V_SetVal, None, TIntTr64V)
TIntTr64V.GetSubValV = new_instancemethod(_SnapTime.TIntTr64V_GetSubValV, None, TIntTr64V)
TIntTr64V.Ins = new_instancemethod(_SnapTime.TIntTr64V_Ins, None, TIntTr64V)
TIntTr64V.Del = new_instancemethod(_SnapTime.TIntTr64V_Del, None, TIntTr64V)
TIntTr64V.DelLast = new_instancemethod(_SnapTime.TIntTr64V_DelLast, None, TIntTr64V)
TIntTr64V.DelIfIn = new_instancemethod(_SnapTime.TIntTr64V_DelIfIn, None, TIntTr64V)
TIntTr64V.DelAll = new_instancemethod(_SnapTime.TIntTr64V_DelAll, None, TIntTr64V)
TIntTr64V.PutAll = new_instancemethod(_SnapTime.TIntTr64V_PutAll, None, TIntTr64V)
TIntTr64V.Move = new_instancemethod(_SnapTime.TIntTr64V_Move, None, TIntTr64V)
TIntTr64V.Swap = new_instancemethod(_SnapTime.TIntTr64V_Swap, None, TIntTr64V)
TIntTr64V.Get32BitVector = new_instancemethod(_SnapTime.TIntTr64V_Get32BitVector, None, TIntTr64V)
TIntTr64V.NextPerm = new_instancemethod(_SnapTime.TIntTr64V_NextPerm, None, TIntTr64V)
TIntTr64V.PrevPerm = new_instancemethod(_SnapTime.TIntTr64V_PrevPerm, None, TIntTr64V)
TIntTr64V.GetPivotValN = new_instancemethod(_SnapTime.TIntTr64V_GetPivotValN, None, TIntTr64V)
TIntTr64V.BSort = new_instancemethod(_SnapTime.TIntTr64V_BSort, None, TIntTr64V)
TIntTr64V.ISort = new_instancemethod(_SnapTime.TIntTr64V_ISort, None, TIntTr64V)
TIntTr64V.Partition = new_instancemethod(_SnapTime.TIntTr64V_Partition, None, TIntTr64V)
TIntTr64V.QSort = new_instancemethod(_SnapTime.TIntTr64V_QSort, None, TIntTr64V)
TIntTr64V.Sort = new_instancemethod(_SnapTime.TIntTr64V_Sort, None, TIntTr64V)
TIntTr64V.IsSorted = new_instancemethod(_SnapTime.TIntTr64V_IsSorted, None, TIntTr64V)
TIntTr64V.Shuffle = new_instancemethod(_SnapTime.TIntTr64V_Shuffle, None, TIntTr64V)
TIntTr64V.Reverse = new_instancemethod(_SnapTime.TIntTr64V_Reverse, None, TIntTr64V)
TIntTr64V.Merge = new_instancemethod(_SnapTime.TIntTr64V_Merge, None, TIntTr64V)
TIntTr64V.Intrs = new_instancemethod(_SnapTime.TIntTr64V_Intrs, None, TIntTr64V)
TIntTr64V.Union = new_instancemethod(_SnapTime.TIntTr64V_Union, None, TIntTr64V)
TIntTr64V.Diff = new_instancemethod(_SnapTime.TIntTr64V_Diff, None, TIntTr64V)
TIntTr64V.IntrsLen = new_instancemethod(_SnapTime.TIntTr64V_IntrsLen, None, TIntTr64V)
TIntTr64V.UnionLen = new_instancemethod(_SnapTime.TIntTr64V_UnionLen, None, TIntTr64V)
TIntTr64V.Count = new_instancemethod(_SnapTime.TIntTr64V_Count, None, TIntTr64V)
TIntTr64V.SearchBin = new_instancemethod(_SnapTime.TIntTr64V_SearchBin, None, TIntTr64V)
TIntTr64V.SearchBinLeft = new_instancemethod(_SnapTime.TIntTr64V_SearchBinLeft, None, TIntTr64V)
TIntTr64V.SearchForw = new_instancemethod(_SnapTime.TIntTr64V_SearchForw, None, TIntTr64V)
TIntTr64V.SearchBack = new_instancemethod(_SnapTime.TIntTr64V_SearchBack, None, TIntTr64V)
TIntTr64V.SearchVForw = new_instancemethod(_SnapTime.TIntTr64V_SearchVForw, None, TIntTr64V)
TIntTr64V.IsIn = new_instancemethod(_SnapTime.TIntTr64V_IsIn, None, TIntTr64V)
TIntTr64V.IsInBin = new_instancemethod(_SnapTime.TIntTr64V_IsInBin, None, TIntTr64V)
TIntTr64V.GetDat = new_instancemethod(_SnapTime.TIntTr64V_GetDat, None, TIntTr64V)
TIntTr64V.GetAddDat = new_instancemethod(_SnapTime.TIntTr64V_GetAddDat, None, TIntTr64V)
TIntTr64V.GetMxValN = new_instancemethod(_SnapTime.TIntTr64V_GetMxValN, None, TIntTr64V)
TIntTr64V_swigregister = _SnapTime.TIntTr64V_swigregister
TIntTr64V_swigregister(TIntTr64V)

def TIntTr64V_SwapI(LVal, RVal):
    """
    TIntTr64V_SwapI(TInt64Tr LVal, TInt64Tr RVal)

    Parameters
    ----------
    LVal: TVec< TTriple< TInt64,TInt64,TInt64 >,long long >::TIter
    RVal: TVec< TTriple< TInt64,TInt64,TInt64 >,long long >::TIter

    """
    return _SnapTime.TIntTr64V_SwapI(LVal, RVal)

def TIntTr64V_GetV(*args):
    """
    GetV(TInt64Tr Val1) -> TIntTr64V

    Parameters
    ----------
    Val1: TTriple< TInt64,TInt64,TInt64 > const &

    GetV(TInt64Tr Val1, TInt64Tr Val2) -> TIntTr64V

    Parameters
    ----------
    Val1: TTriple< TInt64,TInt64,TInt64 > const &
    Val2: TTriple< TInt64,TInt64,TInt64 > const &

    GetV(TInt64Tr Val1, TInt64Tr Val2, TInt64Tr Val3) -> TIntTr64V

    Parameters
    ----------
    Val1: TTriple< TInt64,TInt64,TInt64 > const &
    Val2: TTriple< TInt64,TInt64,TInt64 > const &
    Val3: TTriple< TInt64,TInt64,TInt64 > const &

    GetV(TInt64Tr Val1, TInt64Tr Val2, TInt64Tr Val3, TInt64Tr Val4) -> TIntTr64V

    Parameters
    ----------
    Val1: TTriple< TInt64,TInt64,TInt64 > const &
    Val2: TTriple< TInt64,TInt64,TInt64 > const &
    Val3: TTriple< TInt64,TInt64,TInt64 > const &
    Val4: TTriple< TInt64,TInt64,TInt64 > const &

    GetV(TInt64Tr Val1, TInt64Tr Val2, TInt64Tr Val3, TInt64Tr Val4, TInt64Tr Val5) -> TIntTr64V

    Parameters
    ----------
    Val1: TTriple< TInt64,TInt64,TInt64 > const &
    Val2: TTriple< TInt64,TInt64,TInt64 > const &
    Val3: TTriple< TInt64,TInt64,TInt64 > const &
    Val4: TTriple< TInt64,TInt64,TInt64 > const &
    Val5: TTriple< TInt64,TInt64,TInt64 > const &

    GetV(TInt64Tr Val1, TInt64Tr Val2, TInt64Tr Val3, TInt64Tr Val4, TInt64Tr Val5, TInt64Tr Val6) -> TIntTr64V

    Parameters
    ----------
    Val1: TTriple< TInt64,TInt64,TInt64 > const &
    Val2: TTriple< TInt64,TInt64,TInt64 > const &
    Val3: TTriple< TInt64,TInt64,TInt64 > const &
    Val4: TTriple< TInt64,TInt64,TInt64 > const &
    Val5: TTriple< TInt64,TInt64,TInt64 > const &
    Val6: TTriple< TInt64,TInt64,TInt64 > const &

    GetV(TInt64Tr Val1, TInt64Tr Val2, TInt64Tr Val3, TInt64Tr Val4, TInt64Tr Val5, TInt64Tr Val6, TInt64Tr Val7) -> TIntTr64V

    Parameters
    ----------
    Val1: TTriple< TInt64,TInt64,TInt64 > const &
    Val2: TTriple< TInt64,TInt64,TInt64 > const &
    Val3: TTriple< TInt64,TInt64,TInt64 > const &
    Val4: TTriple< TInt64,TInt64,TInt64 > const &
    Val5: TTriple< TInt64,TInt64,TInt64 > const &
    Val6: TTriple< TInt64,TInt64,TInt64 > const &
    Val7: TTriple< TInt64,TInt64,TInt64 > const &

    GetV(TInt64Tr Val1, TInt64Tr Val2, TInt64Tr Val3, TInt64Tr Val4, TInt64Tr Val5, TInt64Tr Val6, TInt64Tr Val7, TInt64Tr Val8) -> TIntTr64V

    Parameters
    ----------
    Val1: TTriple< TInt64,TInt64,TInt64 > const &
    Val2: TTriple< TInt64,TInt64,TInt64 > const &
    Val3: TTriple< TInt64,TInt64,TInt64 > const &
    Val4: TTriple< TInt64,TInt64,TInt64 > const &
    Val5: TTriple< TInt64,TInt64,TInt64 > const &
    Val6: TTriple< TInt64,TInt64,TInt64 > const &
    Val7: TTriple< TInt64,TInt64,TInt64 > const &
    Val8: TTriple< TInt64,TInt64,TInt64 > const &

    TIntTr64V_GetV(TInt64Tr Val1, TInt64Tr Val2, TInt64Tr Val3, TInt64Tr Val4, TInt64Tr Val5, TInt64Tr Val6, TInt64Tr Val7, TInt64Tr Val8, TInt64Tr Val9) -> TIntTr64V

    Parameters
    ----------
    Val1: TTriple< TInt64,TInt64,TInt64 > const &
    Val2: TTriple< TInt64,TInt64,TInt64 > const &
    Val3: TTriple< TInt64,TInt64,TInt64 > const &
    Val4: TTriple< TInt64,TInt64,TInt64 > const &
    Val5: TTriple< TInt64,TInt64,TInt64 > const &
    Val6: TTriple< TInt64,TInt64,TInt64 > const &
    Val7: TTriple< TInt64,TInt64,TInt64 > const &
    Val8: TTriple< TInt64,TInt64,TInt64 > const &
    Val9: TTriple< TInt64,TInt64,TInt64 > const &

    """
    return _SnapTime.TIntTr64V_GetV(*args)

class TIntFltKdV(object):
    """Proxy of C++ TVec<(TIntFltKd)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TIntFltKdV

    def __init__(self, *args):
        """
        __init__(TVec<(TIntFltKd)> self) -> TIntFltKdV
        __init__(TVec<(TIntFltKd)> self, TIntFltKdV Vec) -> TIntFltKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt,TFlt >,int > const &

        __init__(TVec<(TIntFltKd)> self, TIntFltKdV Vec) -> TIntFltKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt,TFlt >,int > &&

        __init__(TVec<(TIntFltKd)> self, int const & _Vals) -> TIntFltKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TVec<(TIntFltKd)> self, int const & _MxVals, int const & _Vals) -> TIntFltKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TVec<(TIntFltKd)> self, int const & _MxVals, int const & _Vals, TIntFltKd Dat) -> TIntFltKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &
        Dat: TKeyDat< TInt,TFlt >

        __init__(TVec<(TIntFltKd)> self, TIntFltKd _ValT, int const & _Vals) -> TIntFltKdV

        Parameters
        ----------
        _ValT: TKeyDat< TInt,TFlt > *
        _Vals: int const &

        __init__(TVec<(TIntFltKd)> self, TSIn SIn) -> TIntFltKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntFltKdV_swiginit(self, _SnapTime.new_TIntFltKdV(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntFltKdV self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntFltKdV_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntFltKdV self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntFltKdV_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntFltKdV self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntFltKdV_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TIntFltKdV self, TIntFltKd Val) -> TIntFltKdV

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TIntFltKdV self, TIntFltKdV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt,TFlt >,int > const &

        """
        return _SnapTime.TIntFltKdV___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TIntFltKdV self, TIntFltKdV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt,TFlt >,int > const &

        """
        return _SnapTime.TIntFltKdV___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntFltKdV self) -> int

        Parameters
        ----------
        self: TVec< TIntFltKd > const *

        """
        return _SnapTime.TIntFltKdV_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TIntFltKdV self) -> int

        Parameters
        ----------
        self: TVec< TIntFltKd > const *

        """
        return _SnapTime.TIntFltKdV_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntFltKdV self) -> int

        Parameters
        ----------
        self: TVec< TIntFltKd > const *

        """
        return _SnapTime.TIntFltKdV_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntFltKdV self) -> int

        Parameters
        ----------
        self: TVec< TIntFltKd > const *

        """
        return _SnapTime.TIntFltKdV_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TIntFltKdV self, int const & _Vals)

        Parameters
        ----------
        _Vals: int const &

        Gen(TIntFltKdV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TIntFltKdV_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TIntFltKdV self, TIntFltKd _ValT, int const & _Vals)

        Parameters
        ----------
        _ValT: TKeyDat< TInt,TFlt > *
        _Vals: int const &

        """
        return _SnapTime.TIntFltKdV_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TIntFltKdV self) -> bool

        Parameters
        ----------
        self: TVec< TIntFltKd > const *

        """
        return _SnapTime.TIntFltKdV_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TIntFltKdV self, int const & _MxVals)

        Parameters
        ----------
        _MxVals: int const &

        Reserve(TIntFltKdV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TIntFltKdV_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TIntFltKdV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TIntFltKdV self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntFltKdV self)

        Parameters
        ----------
        self: TVec< TIntFltKd > *

        """
        return _SnapTime.TIntFltKdV_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TIntFltKdV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Trunc(TIntFltKdV self)

        Parameters
        ----------
        self: TVec< TIntFltKd > *

        """
        return _SnapTime.TIntFltKdV_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TIntFltKdV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Reduce(TIntFltKdV self)

        Parameters
        ----------
        self: TVec< TIntFltKd > *

        """
        return _SnapTime.TIntFltKdV_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TIntFltKdV self)

        Parameters
        ----------
        self: TVec< TIntFltKd > *

        """
        return _SnapTime.TIntFltKdV_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TIntFltKdV self, TIntFltKdV Vec)

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt,TFlt >,int > &

        """
        return _SnapTime.TIntFltKdV_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TIntFltKdV self, TIntFltKdV Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt,TFlt >,int > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TIntFltKdV_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TIntFltKdV self) -> bool

        Parameters
        ----------
        self: TVec< TIntFltKd > const *

        """
        return _SnapTime.TIntFltKdV_Empty(self)


    def Len(self):
        """
        Len(TIntFltKdV self) -> int

        Parameters
        ----------
        self: TVec< TIntFltKd > const *

        """
        return _SnapTime.TIntFltKdV_Len(self)


    def Reserved(self):
        """
        Reserved(TIntFltKdV self) -> int

        Parameters
        ----------
        self: TVec< TIntFltKd > const *

        """
        return _SnapTime.TIntFltKdV_Reserved(self)


    def Last(self, *args):
        """
        Last(TIntFltKdV self) -> TIntFltKd
        Last(TIntFltKdV self) -> TIntFltKd

        Parameters
        ----------
        self: TVec< TIntFltKd > *

        """
        return _SnapTime.TIntFltKdV_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TIntFltKdV self) -> int

        Parameters
        ----------
        self: TVec< TIntFltKd > const *

        """
        return _SnapTime.TIntFltKdV_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TIntFltKdV self) -> TIntFltKd
        LastLast(TIntFltKdV self) -> TIntFltKd

        Parameters
        ----------
        self: TVec< TIntFltKd > *

        """
        return _SnapTime.TIntFltKdV_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TIntFltKdV self, TRnd Rnd) -> TIntFltKd

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntFltKdV self) -> TIntFltKd
        GetRndVal(TIntFltKdV self, TRnd Rnd) -> TIntFltKd

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntFltKdV self) -> TIntFltKd

        Parameters
        ----------
        self: TVec< TIntFltKd > *

        """
        return _SnapTime.TIntFltKdV_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TIntFltKdV self) -> TIntFltKd

        Parameters
        ----------
        self: TVec< TIntFltKd > const *

        """
        return _SnapTime.TIntFltKdV_BegI(self)


    def begin(self):
        """
        begin(TIntFltKdV self) -> TIntFltKd

        Parameters
        ----------
        self: TVec< TIntFltKd > const *

        """
        return _SnapTime.TIntFltKdV_begin(self)


    def EndI(self):
        """
        EndI(TIntFltKdV self) -> TIntFltKd

        Parameters
        ----------
        self: TVec< TIntFltKd > const *

        """
        return _SnapTime.TIntFltKdV_EndI(self)


    def end(self):
        """
        end(TIntFltKdV self) -> TIntFltKd

        Parameters
        ----------
        self: TVec< TIntFltKd > const *

        """
        return _SnapTime.TIntFltKdV_end(self)


    def GetI(self, ValN):
        """
        GetI(TIntFltKdV self, int const & ValN) -> TIntFltKd

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TIntFltKdV_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TIntFltKdV self) -> int
        Add(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        Add(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > &

        Add(TIntFltKdV self, TIntFltKd Val, int const & ResizeLen) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &
        ResizeLen: int const &

        """
        return _SnapTime.TIntFltKdV_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TIntFltKdV self, TIntFltKd Val, int Inc) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &
        Inc: int

        """
        return _SnapTime.TIntFltKdV_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TIntFltKdV self, TIntFltKdV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        """
        return _SnapTime.TIntFltKdV_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TIntFltKdV self, TIntFltKd Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &
        Asc: bool const &
        _MxVals: int const &

        AddSorted(TIntFltKdV self, TIntFltKd Val, bool const & Asc=True) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &
        Asc: bool const &

        AddSorted(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TIntFltKdV self, TIntFltKd Val, bool const & Asc) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &
        Asc: bool const &

        """
        return _SnapTime.TIntFltKdV_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TIntFltKdV self, TIntFltKdV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        """
        return _SnapTime.TIntFltKdV_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TIntFltKdV self, int const & ValN) -> TIntFltKd

        Parameters
        ----------
        ValN: int const &

        GetVal(TIntFltKdV self, int const & ValN) -> TIntFltKd

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TIntFltKdV_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TIntFltKdV self, int const & ValN, TIntFltKd Val)

        Parameters
        ----------
        ValN: int const &
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TIntFltKdV self, int const & BValN, int const & EValN, TIntFltKdV ValV)

        Parameters
        ----------
        BValN: int const &
        EValN: int const &
        ValV: TVec< TKeyDat< TInt,TFlt >,int > &

        """
        return _SnapTime.TIntFltKdV_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TIntFltKdV self, int const & ValN, TIntFltKd Val)

        Parameters
        ----------
        ValN: int const &
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TIntFltKdV self, int const & ValN)

        Parameters
        ----------
        ValN: int const &

        Del(TIntFltKdV self, int const & MnValN, int const & MxValN)

        Parameters
        ----------
        MnValN: int const &
        MxValN: int const &

        """
        return _SnapTime.TIntFltKdV_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TIntFltKdV self)

        Parameters
        ----------
        self: TVec< TIntFltKd > *

        """
        return _SnapTime.TIntFltKdV_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TIntFltKdV self, TIntFltKd Val) -> bool

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TIntFltKdV self, TIntFltKd Val)

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TIntFltKdV self, TIntFltKd Val)

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TIntFltKdV self, int const & FromValN, int const & ToValN)

        Parameters
        ----------
        FromValN: int const &
        ToValN: int const &

        """
        return _SnapTime.TIntFltKdV_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TIntFltKdV self, TIntFltKdV Vec)

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt,TFlt >,int > &

        Swap(TIntFltKdV self, int const & ValN1, int const & ValN2)

        Parameters
        ----------
        ValN1: int const &
        ValN2: int const &

        """
        return _SnapTime.TIntFltKdV_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TIntFltKd LVal, TIntFltKd RVal)

        Parameters
        ----------
        LVal: TVec< TKeyDat< TInt,TFlt > >::TIter
        RVal: TVec< TKeyDat< TInt,TFlt > >::TIter

        """
        return _SnapTime.TIntFltKdV_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TIntFltKdV self) -> TIntFltKdV

        Parameters
        ----------
        self: TVec< TIntFltKd > *

        """
        return _SnapTime.TIntFltKdV_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TIntFltKdV self) -> bool

        Parameters
        ----------
        self: TVec< TIntFltKd > *

        """
        return _SnapTime.TIntFltKdV_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TIntFltKdV self) -> bool

        Parameters
        ----------
        self: TVec< TIntFltKd > *

        """
        return _SnapTime.TIntFltKdV_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TIntFltKdV self, int const & LValN, int const & RValN) -> int

        Parameters
        ----------
        LValN: int const &
        RValN: int const &

        """
        return _SnapTime.TIntFltKdV_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TIntFltKdV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntFltKdV_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TIntFltKdV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntFltKdV_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TIntFltKdV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntFltKdV_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TIntFltKdV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntFltKdV_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TIntFltKdV self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TIntFltKdV self)

        Parameters
        ----------
        self: TVec< TIntFltKd > *

        """
        return _SnapTime.TIntFltKdV_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TIntFltKdV self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TIntFltKdV self) -> bool

        Parameters
        ----------
        self: TVec< TIntFltKd > const *

        """
        return _SnapTime.TIntFltKdV_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TIntFltKdV self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TIntFltKdV_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TIntFltKdV self)
        Reverse(TIntFltKdV self, int LValN, int RValN)

        Parameters
        ----------
        LValN: int
        RValN: int

        """
        return _SnapTime.TIntFltKdV_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TIntFltKdV self)

        Parameters
        ----------
        self: TVec< TIntFltKd > *

        """
        return _SnapTime.TIntFltKdV_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TIntFltKdV self, TIntFltKdV ValV)

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        Intrs(TIntFltKdV self, TIntFltKdV ValV, TIntFltKdV DstValV)

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt,TFlt >,int > const &
        DstValV: TVec< TKeyDat< TInt,TFlt >,int > &

        """
        return _SnapTime.TIntFltKdV_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TIntFltKdV self, TIntFltKdV ValV)

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        Union(TIntFltKdV self, TIntFltKdV ValV, TIntFltKdV DstValV)

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt,TFlt >,int > const &
        DstValV: TVec< TKeyDat< TInt,TFlt >,int > &

        """
        return _SnapTime.TIntFltKdV_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TIntFltKdV self, TIntFltKdV ValV)

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        Diff(TIntFltKdV self, TIntFltKdV ValV, TIntFltKdV DstValV)

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt,TFlt >,int > const &
        DstValV: TVec< TKeyDat< TInt,TFlt >,int > &

        """
        return _SnapTime.TIntFltKdV_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TIntFltKdV self, TIntFltKdV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        """
        return _SnapTime.TIntFltKdV_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TIntFltKdV self, TIntFltKdV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        """
        return _SnapTime.TIntFltKdV_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        SearchBin(TIntFltKdV self, TIntFltKd Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &
        InsValN: int &

        """
        return _SnapTime.TIntFltKdV_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TIntFltKdV self, TIntFltKd Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &
        InsValN: int &

        """
        return _SnapTime.TIntFltKdV_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TIntFltKdV self, TIntFltKd Val, int const & BValN=0) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &
        BValN: int const &

        SearchForw(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TIntFltKdV self, TIntFltKdV ValV, int const & BValN=0) -> int

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt,TFlt >,int > const &
        BValN: int const &

        SearchVForw(TIntFltKdV self, TIntFltKdV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        """
        return _SnapTime.TIntFltKdV_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TIntFltKdV self, TIntFltKd Val) -> bool

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        IsIn(TIntFltKdV self, TIntFltKd Val, int & ValN) -> bool

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &
        ValN: int &

        """
        return _SnapTime.TIntFltKdV_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TIntFltKdV self, TIntFltKd Val) -> bool

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TIntFltKdV self, TIntFltKd Val) -> TIntFltKd

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TIntFltKdV self, TIntFltKd Val) -> TIntFltKd

        Parameters
        ----------
        Val: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TIntFltKdV self) -> int

        Parameters
        ----------
        self: TVec< TIntFltKd > const *

        """
        return _SnapTime.TIntFltKdV_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TIntFltKd Val1) -> TIntFltKdV

        Parameters
        ----------
        Val1: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2) -> TIntFltKdV

        Parameters
        ----------
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3) -> TIntFltKdV

        Parameters
        ----------
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &
        Val3: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4) -> TIntFltKdV

        Parameters
        ----------
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &
        Val3: TKeyDat< TInt,TFlt > const &
        Val4: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5) -> TIntFltKdV

        Parameters
        ----------
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &
        Val3: TKeyDat< TInt,TFlt > const &
        Val4: TKeyDat< TInt,TFlt > const &
        Val5: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6) -> TIntFltKdV

        Parameters
        ----------
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &
        Val3: TKeyDat< TInt,TFlt > const &
        Val4: TKeyDat< TInt,TFlt > const &
        Val5: TKeyDat< TInt,TFlt > const &
        Val6: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6, TIntFltKd Val7) -> TIntFltKdV

        Parameters
        ----------
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &
        Val3: TKeyDat< TInt,TFlt > const &
        Val4: TKeyDat< TInt,TFlt > const &
        Val5: TKeyDat< TInt,TFlt > const &
        Val6: TKeyDat< TInt,TFlt > const &
        Val7: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6, TIntFltKd Val7, TIntFltKd Val8) -> TIntFltKdV

        Parameters
        ----------
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &
        Val3: TKeyDat< TInt,TFlt > const &
        Val4: TKeyDat< TInt,TFlt > const &
        Val5: TKeyDat< TInt,TFlt > const &
        Val6: TKeyDat< TInt,TFlt > const &
        Val7: TKeyDat< TInt,TFlt > const &
        Val8: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6, TIntFltKd Val7, TIntFltKd Val8, TIntFltKd Val9) -> TIntFltKdV

        Parameters
        ----------
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &
        Val3: TKeyDat< TInt,TFlt > const &
        Val4: TKeyDat< TInt,TFlt > const &
        Val5: TKeyDat< TInt,TFlt > const &
        Val6: TKeyDat< TInt,TFlt > const &
        Val7: TKeyDat< TInt,TFlt > const &
        Val8: TKeyDat< TInt,TFlt > const &
        Val9: TKeyDat< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltKdV_GetV(*args)

    GetV = staticmethod(GetV)
TIntFltKdV.LoadShM = new_instancemethod(_SnapTime.TIntFltKdV_LoadShM, None, TIntFltKdV)
TIntFltKdV.Load = new_instancemethod(_SnapTime.TIntFltKdV_Load, None, TIntFltKdV)
TIntFltKdV.Save = new_instancemethod(_SnapTime.TIntFltKdV_Save, None, TIntFltKdV)
TIntFltKdV.__add__ = new_instancemethod(_SnapTime.TIntFltKdV___add__, None, TIntFltKdV)
TIntFltKdV.__eq__ = new_instancemethod(_SnapTime.TIntFltKdV___eq__, None, TIntFltKdV)
TIntFltKdV.__lt__ = new_instancemethod(_SnapTime.TIntFltKdV___lt__, None, TIntFltKdV)
TIntFltKdV.GetMemUsed = new_instancemethod(_SnapTime.TIntFltKdV_GetMemUsed, None, TIntFltKdV)
TIntFltKdV.GetMemSize = new_instancemethod(_SnapTime.TIntFltKdV_GetMemSize, None, TIntFltKdV)
TIntFltKdV.GetPrimHashCd = new_instancemethod(_SnapTime.TIntFltKdV_GetPrimHashCd, None, TIntFltKdV)
TIntFltKdV.GetSecHashCd = new_instancemethod(_SnapTime.TIntFltKdV_GetSecHashCd, None, TIntFltKdV)
TIntFltKdV.Gen = new_instancemethod(_SnapTime.TIntFltKdV_Gen, None, TIntFltKdV)
TIntFltKdV.GenExt = new_instancemethod(_SnapTime.TIntFltKdV_GenExt, None, TIntFltKdV)
TIntFltKdV.IsExt = new_instancemethod(_SnapTime.TIntFltKdV_IsExt, None, TIntFltKdV)
TIntFltKdV.Reserve = new_instancemethod(_SnapTime.TIntFltKdV_Reserve, None, TIntFltKdV)
TIntFltKdV.Clr = new_instancemethod(_SnapTime.TIntFltKdV_Clr, None, TIntFltKdV)
TIntFltKdV.Trunc = new_instancemethod(_SnapTime.TIntFltKdV_Trunc, None, TIntFltKdV)
TIntFltKdV.Reduce = new_instancemethod(_SnapTime.TIntFltKdV_Reduce, None, TIntFltKdV)
TIntFltKdV.Pack = new_instancemethod(_SnapTime.TIntFltKdV_Pack, None, TIntFltKdV)
TIntFltKdV.MoveFrom = new_instancemethod(_SnapTime.TIntFltKdV_MoveFrom, None, TIntFltKdV)
TIntFltKdV.CopyUniqueFrom = new_instancemethod(_SnapTime.TIntFltKdV_CopyUniqueFrom, None, TIntFltKdV)
TIntFltKdV.Empty = new_instancemethod(_SnapTime.TIntFltKdV_Empty, None, TIntFltKdV)
TIntFltKdV.Len = new_instancemethod(_SnapTime.TIntFltKdV_Len, None, TIntFltKdV)
TIntFltKdV.Reserved = new_instancemethod(_SnapTime.TIntFltKdV_Reserved, None, TIntFltKdV)
TIntFltKdV.Last = new_instancemethod(_SnapTime.TIntFltKdV_Last, None, TIntFltKdV)
TIntFltKdV.LastValN = new_instancemethod(_SnapTime.TIntFltKdV_LastValN, None, TIntFltKdV)
TIntFltKdV.LastLast = new_instancemethod(_SnapTime.TIntFltKdV_LastLast, None, TIntFltKdV)
TIntFltKdV.GetRndVal = new_instancemethod(_SnapTime.TIntFltKdV_GetRndVal, None, TIntFltKdV)
TIntFltKdV.BegI = new_instancemethod(_SnapTime.TIntFltKdV_BegI, None, TIntFltKdV)
TIntFltKdV.begin = new_instancemethod(_SnapTime.TIntFltKdV_begin, None, TIntFltKdV)
TIntFltKdV.EndI = new_instancemethod(_SnapTime.TIntFltKdV_EndI, None, TIntFltKdV)
TIntFltKdV.end = new_instancemethod(_SnapTime.TIntFltKdV_end, None, TIntFltKdV)
TIntFltKdV.GetI = new_instancemethod(_SnapTime.TIntFltKdV_GetI, None, TIntFltKdV)
TIntFltKdV.Add = new_instancemethod(_SnapTime.TIntFltKdV_Add, None, TIntFltKdV)
TIntFltKdV.AddMP = new_instancemethod(_SnapTime.TIntFltKdV_AddMP, None, TIntFltKdV)
TIntFltKdV.MoveLastMP = new_instancemethod(_SnapTime.TIntFltKdV_MoveLastMP, None, TIntFltKdV)
TIntFltKdV.AddV = new_instancemethod(_SnapTime.TIntFltKdV_AddV, None, TIntFltKdV)
TIntFltKdV.AddSorted = new_instancemethod(_SnapTime.TIntFltKdV_AddSorted, None, TIntFltKdV)
TIntFltKdV.AddBackSorted = new_instancemethod(_SnapTime.TIntFltKdV_AddBackSorted, None, TIntFltKdV)
TIntFltKdV.AddMerged = new_instancemethod(_SnapTime.TIntFltKdV_AddMerged, None, TIntFltKdV)
TIntFltKdV.AddVMerged = new_instancemethod(_SnapTime.TIntFltKdV_AddVMerged, None, TIntFltKdV)
TIntFltKdV.AddUnique = new_instancemethod(_SnapTime.TIntFltKdV_AddUnique, None, TIntFltKdV)
TIntFltKdV.GetVal = new_instancemethod(_SnapTime.TIntFltKdV_GetVal, None, TIntFltKdV)
TIntFltKdV.SetVal = new_instancemethod(_SnapTime.TIntFltKdV_SetVal, None, TIntFltKdV)
TIntFltKdV.GetSubValV = new_instancemethod(_SnapTime.TIntFltKdV_GetSubValV, None, TIntFltKdV)
TIntFltKdV.Ins = new_instancemethod(_SnapTime.TIntFltKdV_Ins, None, TIntFltKdV)
TIntFltKdV.Del = new_instancemethod(_SnapTime.TIntFltKdV_Del, None, TIntFltKdV)
TIntFltKdV.DelLast = new_instancemethod(_SnapTime.TIntFltKdV_DelLast, None, TIntFltKdV)
TIntFltKdV.DelIfIn = new_instancemethod(_SnapTime.TIntFltKdV_DelIfIn, None, TIntFltKdV)
TIntFltKdV.DelAll = new_instancemethod(_SnapTime.TIntFltKdV_DelAll, None, TIntFltKdV)
TIntFltKdV.PutAll = new_instancemethod(_SnapTime.TIntFltKdV_PutAll, None, TIntFltKdV)
TIntFltKdV.Move = new_instancemethod(_SnapTime.TIntFltKdV_Move, None, TIntFltKdV)
TIntFltKdV.Swap = new_instancemethod(_SnapTime.TIntFltKdV_Swap, None, TIntFltKdV)
TIntFltKdV.Get32BitVector = new_instancemethod(_SnapTime.TIntFltKdV_Get32BitVector, None, TIntFltKdV)
TIntFltKdV.NextPerm = new_instancemethod(_SnapTime.TIntFltKdV_NextPerm, None, TIntFltKdV)
TIntFltKdV.PrevPerm = new_instancemethod(_SnapTime.TIntFltKdV_PrevPerm, None, TIntFltKdV)
TIntFltKdV.GetPivotValN = new_instancemethod(_SnapTime.TIntFltKdV_GetPivotValN, None, TIntFltKdV)
TIntFltKdV.BSort = new_instancemethod(_SnapTime.TIntFltKdV_BSort, None, TIntFltKdV)
TIntFltKdV.ISort = new_instancemethod(_SnapTime.TIntFltKdV_ISort, None, TIntFltKdV)
TIntFltKdV.Partition = new_instancemethod(_SnapTime.TIntFltKdV_Partition, None, TIntFltKdV)
TIntFltKdV.QSort = new_instancemethod(_SnapTime.TIntFltKdV_QSort, None, TIntFltKdV)
TIntFltKdV.Sort = new_instancemethod(_SnapTime.TIntFltKdV_Sort, None, TIntFltKdV)
TIntFltKdV.IsSorted = new_instancemethod(_SnapTime.TIntFltKdV_IsSorted, None, TIntFltKdV)
TIntFltKdV.Shuffle = new_instancemethod(_SnapTime.TIntFltKdV_Shuffle, None, TIntFltKdV)
TIntFltKdV.Reverse = new_instancemethod(_SnapTime.TIntFltKdV_Reverse, None, TIntFltKdV)
TIntFltKdV.Merge = new_instancemethod(_SnapTime.TIntFltKdV_Merge, None, TIntFltKdV)
TIntFltKdV.Intrs = new_instancemethod(_SnapTime.TIntFltKdV_Intrs, None, TIntFltKdV)
TIntFltKdV.Union = new_instancemethod(_SnapTime.TIntFltKdV_Union, None, TIntFltKdV)
TIntFltKdV.Diff = new_instancemethod(_SnapTime.TIntFltKdV_Diff, None, TIntFltKdV)
TIntFltKdV.IntrsLen = new_instancemethod(_SnapTime.TIntFltKdV_IntrsLen, None, TIntFltKdV)
TIntFltKdV.UnionLen = new_instancemethod(_SnapTime.TIntFltKdV_UnionLen, None, TIntFltKdV)
TIntFltKdV.Count = new_instancemethod(_SnapTime.TIntFltKdV_Count, None, TIntFltKdV)
TIntFltKdV.SearchBin = new_instancemethod(_SnapTime.TIntFltKdV_SearchBin, None, TIntFltKdV)
TIntFltKdV.SearchBinLeft = new_instancemethod(_SnapTime.TIntFltKdV_SearchBinLeft, None, TIntFltKdV)
TIntFltKdV.SearchForw = new_instancemethod(_SnapTime.TIntFltKdV_SearchForw, None, TIntFltKdV)
TIntFltKdV.SearchBack = new_instancemethod(_SnapTime.TIntFltKdV_SearchBack, None, TIntFltKdV)
TIntFltKdV.SearchVForw = new_instancemethod(_SnapTime.TIntFltKdV_SearchVForw, None, TIntFltKdV)
TIntFltKdV.IsIn = new_instancemethod(_SnapTime.TIntFltKdV_IsIn, None, TIntFltKdV)
TIntFltKdV.IsInBin = new_instancemethod(_SnapTime.TIntFltKdV_IsInBin, None, TIntFltKdV)
TIntFltKdV.GetDat = new_instancemethod(_SnapTime.TIntFltKdV_GetDat, None, TIntFltKdV)
TIntFltKdV.GetAddDat = new_instancemethod(_SnapTime.TIntFltKdV_GetAddDat, None, TIntFltKdV)
TIntFltKdV.GetMxValN = new_instancemethod(_SnapTime.TIntFltKdV_GetMxValN, None, TIntFltKdV)
TIntFltKdV_swigregister = _SnapTime.TIntFltKdV_swigregister
TIntFltKdV_swigregister(TIntFltKdV)

def TIntFltKdV_SwapI(LVal, RVal):
    """
    TIntFltKdV_SwapI(TIntFltKd LVal, TIntFltKd RVal)

    Parameters
    ----------
    LVal: TVec< TKeyDat< TInt,TFlt > >::TIter
    RVal: TVec< TKeyDat< TInt,TFlt > >::TIter

    """
    return _SnapTime.TIntFltKdV_SwapI(LVal, RVal)

def TIntFltKdV_GetV(*args):
    """
    GetV(TIntFltKd Val1) -> TIntFltKdV

    Parameters
    ----------
    Val1: TKeyDat< TInt,TFlt > const &

    GetV(TIntFltKd Val1, TIntFltKd Val2) -> TIntFltKdV

    Parameters
    ----------
    Val1: TKeyDat< TInt,TFlt > const &
    Val2: TKeyDat< TInt,TFlt > const &

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3) -> TIntFltKdV

    Parameters
    ----------
    Val1: TKeyDat< TInt,TFlt > const &
    Val2: TKeyDat< TInt,TFlt > const &
    Val3: TKeyDat< TInt,TFlt > const &

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4) -> TIntFltKdV

    Parameters
    ----------
    Val1: TKeyDat< TInt,TFlt > const &
    Val2: TKeyDat< TInt,TFlt > const &
    Val3: TKeyDat< TInt,TFlt > const &
    Val4: TKeyDat< TInt,TFlt > const &

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5) -> TIntFltKdV

    Parameters
    ----------
    Val1: TKeyDat< TInt,TFlt > const &
    Val2: TKeyDat< TInt,TFlt > const &
    Val3: TKeyDat< TInt,TFlt > const &
    Val4: TKeyDat< TInt,TFlt > const &
    Val5: TKeyDat< TInt,TFlt > const &

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6) -> TIntFltKdV

    Parameters
    ----------
    Val1: TKeyDat< TInt,TFlt > const &
    Val2: TKeyDat< TInt,TFlt > const &
    Val3: TKeyDat< TInt,TFlt > const &
    Val4: TKeyDat< TInt,TFlt > const &
    Val5: TKeyDat< TInt,TFlt > const &
    Val6: TKeyDat< TInt,TFlt > const &

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6, TIntFltKd Val7) -> TIntFltKdV

    Parameters
    ----------
    Val1: TKeyDat< TInt,TFlt > const &
    Val2: TKeyDat< TInt,TFlt > const &
    Val3: TKeyDat< TInt,TFlt > const &
    Val4: TKeyDat< TInt,TFlt > const &
    Val5: TKeyDat< TInt,TFlt > const &
    Val6: TKeyDat< TInt,TFlt > const &
    Val7: TKeyDat< TInt,TFlt > const &

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6, TIntFltKd Val7, TIntFltKd Val8) -> TIntFltKdV

    Parameters
    ----------
    Val1: TKeyDat< TInt,TFlt > const &
    Val2: TKeyDat< TInt,TFlt > const &
    Val3: TKeyDat< TInt,TFlt > const &
    Val4: TKeyDat< TInt,TFlt > const &
    Val5: TKeyDat< TInt,TFlt > const &
    Val6: TKeyDat< TInt,TFlt > const &
    Val7: TKeyDat< TInt,TFlt > const &
    Val8: TKeyDat< TInt,TFlt > const &

    TIntFltKdV_GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6, TIntFltKd Val7, TIntFltKd Val8, TIntFltKd Val9) -> TIntFltKdV

    Parameters
    ----------
    Val1: TKeyDat< TInt,TFlt > const &
    Val2: TKeyDat< TInt,TFlt > const &
    Val3: TKeyDat< TInt,TFlt > const &
    Val4: TKeyDat< TInt,TFlt > const &
    Val5: TKeyDat< TInt,TFlt > const &
    Val6: TKeyDat< TInt,TFlt > const &
    Val7: TKeyDat< TInt,TFlt > const &
    Val8: TKeyDat< TInt,TFlt > const &
    Val9: TKeyDat< TInt,TFlt > const &

    """
    return _SnapTime.TIntFltKdV_GetV(*args)

class TIntFltKd64V(object):
    """Proxy of C++ TVec<(TIntFlt64Kd,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TIntFltKd64V

    def __init__(self, *args):
        """
        __init__(TVec<(TIntFlt64Kd,int64)> self) -> TIntFltKd64V
        __init__(TVec<(TIntFlt64Kd,int64)> self, TIntFltKd64V Vec) -> TIntFltKd64V

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt64,TFlt >,long long > const &

        __init__(TVec<(TIntFlt64Kd,int64)> self, TIntFltKd64V Vec) -> TIntFltKd64V

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt64,TFlt >,long long > &&

        __init__(TVec<(TIntFlt64Kd,int64)> self, long long const & _Vals) -> TIntFltKd64V

        Parameters
        ----------
        _Vals: long long const &

        __init__(TVec<(TIntFlt64Kd,int64)> self, long long const & _MxVals, long long const & _Vals) -> TIntFltKd64V

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        __init__(TVec<(TIntFlt64Kd,int64)> self, long long const & _MxVals, long long const & _Vals, TIntFlt64Kd Dat) -> TIntFltKd64V

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &
        Dat: TKeyDat< TInt64,TFlt >

        __init__(TVec<(TIntFlt64Kd,int64)> self, TIntFlt64Kd _ValT, long long const & _Vals) -> TIntFltKd64V

        Parameters
        ----------
        _ValT: TKeyDat< TInt64,TFlt > *
        _Vals: long long const &

        __init__(TVec<(TIntFlt64Kd,int64)> self, TSIn SIn) -> TIntFltKd64V

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntFltKd64V_swiginit(self, _SnapTime.new_TIntFltKd64V(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntFltKd64V self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntFltKd64V_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntFltKd64V self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntFltKd64V_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntFltKd64V self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntFltKd64V_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TIntFltKd64V self, TIntFlt64Kd Val) -> TIntFltKd64V

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TIntFltKd64V self, TIntFltKd64V Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt64,TFlt >,long long > const &

        """
        return _SnapTime.TIntFltKd64V___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TIntFltKd64V self, TIntFltKd64V Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt64,TFlt >,long long > const &

        """
        return _SnapTime.TIntFltKd64V___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntFltKd64V self) -> long long

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > const *

        """
        return _SnapTime.TIntFltKd64V_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TIntFltKd64V self) -> long long

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > const *

        """
        return _SnapTime.TIntFltKd64V_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntFltKd64V self) -> int

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > const *

        """
        return _SnapTime.TIntFltKd64V_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntFltKd64V self) -> int

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > const *

        """
        return _SnapTime.TIntFltKd64V_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TIntFltKd64V self, long long const & _Vals)

        Parameters
        ----------
        _Vals: long long const &

        Gen(TIntFltKd64V self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TIntFltKd64V_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TIntFltKd64V self, TIntFlt64Kd _ValT, long long const & _Vals)

        Parameters
        ----------
        _ValT: TKeyDat< TInt64,TFlt > *
        _Vals: long long const &

        """
        return _SnapTime.TIntFltKd64V_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TIntFltKd64V self) -> bool

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > const *

        """
        return _SnapTime.TIntFltKd64V_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TIntFltKd64V self, long long const & _MxVals)

        Parameters
        ----------
        _MxVals: long long const &

        Reserve(TIntFltKd64V self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TIntFltKd64V_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TIntFltKd64V self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(TIntFltKd64V self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntFltKd64V self)

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > *

        """
        return _SnapTime.TIntFltKd64V_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TIntFltKd64V self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Trunc(TIntFltKd64V self)

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > *

        """
        return _SnapTime.TIntFltKd64V_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TIntFltKd64V self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Reduce(TIntFltKd64V self)

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > *

        """
        return _SnapTime.TIntFltKd64V_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TIntFltKd64V self)

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > *

        """
        return _SnapTime.TIntFltKd64V_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TIntFltKd64V self, TIntFltKd64V Vec)

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt64,TFlt >,long long > &

        """
        return _SnapTime.TIntFltKd64V_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TIntFltKd64V self, TIntFltKd64V Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt64,TFlt >,long long > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TIntFltKd64V_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TIntFltKd64V self) -> bool

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > const *

        """
        return _SnapTime.TIntFltKd64V_Empty(self)


    def Len(self):
        """
        Len(TIntFltKd64V self) -> long long

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > const *

        """
        return _SnapTime.TIntFltKd64V_Len(self)


    def Reserved(self):
        """
        Reserved(TIntFltKd64V self) -> long long

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > const *

        """
        return _SnapTime.TIntFltKd64V_Reserved(self)


    def Last(self, *args):
        """
        Last(TIntFltKd64V self) -> TIntFlt64Kd
        Last(TIntFltKd64V self) -> TIntFlt64Kd

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > *

        """
        return _SnapTime.TIntFltKd64V_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TIntFltKd64V self) -> long long

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > const *

        """
        return _SnapTime.TIntFltKd64V_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TIntFltKd64V self) -> TIntFlt64Kd
        LastLast(TIntFltKd64V self) -> TIntFlt64Kd

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > *

        """
        return _SnapTime.TIntFltKd64V_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TIntFltKd64V self, TRnd Rnd) -> TIntFlt64Kd

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntFltKd64V self) -> TIntFlt64Kd
        GetRndVal(TIntFltKd64V self, TRnd Rnd) -> TIntFlt64Kd

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntFltKd64V self) -> TIntFlt64Kd

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > *

        """
        return _SnapTime.TIntFltKd64V_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TIntFltKd64V self) -> TIntFlt64Kd

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > const *

        """
        return _SnapTime.TIntFltKd64V_BegI(self)


    def begin(self):
        """
        begin(TIntFltKd64V self) -> TIntFlt64Kd

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > const *

        """
        return _SnapTime.TIntFltKd64V_begin(self)


    def EndI(self):
        """
        EndI(TIntFltKd64V self) -> TIntFlt64Kd

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > const *

        """
        return _SnapTime.TIntFltKd64V_EndI(self)


    def end(self):
        """
        end(TIntFltKd64V self) -> TIntFlt64Kd

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > const *

        """
        return _SnapTime.TIntFltKd64V_end(self)


    def GetI(self, ValN):
        """
        GetI(TIntFltKd64V self, long long const & ValN) -> TIntFlt64Kd

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TIntFltKd64V_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TIntFltKd64V self) -> long long
        Add(TIntFltKd64V self, TIntFlt64Kd Val) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        Add(TIntFltKd64V self, TIntFlt64Kd Val) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > &

        Add(TIntFltKd64V self, TIntFlt64Kd Val, long long const & ResizeLen) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &
        ResizeLen: long long const &

        """
        return _SnapTime.TIntFltKd64V_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TIntFltKd64V self, TIntFlt64Kd Val) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TIntFltKd64V self, TIntFlt64Kd Val, int Inc) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &
        Inc: int

        """
        return _SnapTime.TIntFltKd64V_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TIntFltKd64V self, TIntFltKd64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt64,TFlt >,long long > const &

        """
        return _SnapTime.TIntFltKd64V_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TIntFltKd64V self, TIntFlt64Kd Val, bool const & Asc=True, long long const & _MxVals=-1) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &
        Asc: bool const &
        _MxVals: long long const &

        AddSorted(TIntFltKd64V self, TIntFlt64Kd Val, bool const & Asc=True) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &
        Asc: bool const &

        AddSorted(TIntFltKd64V self, TIntFlt64Kd Val) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TIntFltKd64V self, TIntFlt64Kd Val, bool const & Asc) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &
        Asc: bool const &

        """
        return _SnapTime.TIntFltKd64V_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TIntFltKd64V self, TIntFlt64Kd Val) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TIntFltKd64V self, TIntFltKd64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt64,TFlt >,long long > const &

        """
        return _SnapTime.TIntFltKd64V_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TIntFltKd64V self, TIntFlt64Kd Val) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TIntFltKd64V self, long long const & ValN) -> TIntFlt64Kd

        Parameters
        ----------
        ValN: long long const &

        GetVal(TIntFltKd64V self, long long const & ValN) -> TIntFlt64Kd

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TIntFltKd64V_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TIntFltKd64V self, long long const & ValN, TIntFlt64Kd Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TIntFltKd64V self, long long const & BValN, long long const & EValN, TIntFltKd64V ValV)

        Parameters
        ----------
        BValN: long long const &
        EValN: long long const &
        ValV: TVec< TKeyDat< TInt64,TFlt >,long long > &

        """
        return _SnapTime.TIntFltKd64V_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TIntFltKd64V self, long long const & ValN, TIntFlt64Kd Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TIntFltKd64V self, long long const & ValN)

        Parameters
        ----------
        ValN: long long const &

        Del(TIntFltKd64V self, long long const & MnValN, long long const & MxValN)

        Parameters
        ----------
        MnValN: long long const &
        MxValN: long long const &

        """
        return _SnapTime.TIntFltKd64V_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TIntFltKd64V self)

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > *

        """
        return _SnapTime.TIntFltKd64V_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TIntFltKd64V self, TIntFlt64Kd Val) -> bool

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TIntFltKd64V self, TIntFlt64Kd Val)

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TIntFltKd64V self, TIntFlt64Kd Val)

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TIntFltKd64V self, long long const & FromValN, long long const & ToValN)

        Parameters
        ----------
        FromValN: long long const &
        ToValN: long long const &

        """
        return _SnapTime.TIntFltKd64V_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TIntFltKd64V self, TIntFltKd64V Vec)

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt64,TFlt >,long long > &

        Swap(TIntFltKd64V self, long long const & ValN1, long long const & ValN2)

        Parameters
        ----------
        ValN1: long long const &
        ValN2: long long const &

        """
        return _SnapTime.TIntFltKd64V_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TIntFlt64Kd LVal, TIntFlt64Kd RVal)

        Parameters
        ----------
        LVal: TVec< TKeyDat< TInt64,TFlt >,long long >::TIter
        RVal: TVec< TKeyDat< TInt64,TFlt >,long long >::TIter

        """
        return _SnapTime.TIntFltKd64V_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TIntFltKd64V self) -> TVec< TKeyDat< TInt64,TFlt >,int >

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > *

        """
        return _SnapTime.TIntFltKd64V_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TIntFltKd64V self) -> bool

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > *

        """
        return _SnapTime.TIntFltKd64V_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TIntFltKd64V self) -> bool

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > *

        """
        return _SnapTime.TIntFltKd64V_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TIntFltKd64V self, long long const & LValN, long long const & RValN) -> long long

        Parameters
        ----------
        LValN: long long const &
        RValN: long long const &

        """
        return _SnapTime.TIntFltKd64V_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TIntFltKd64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntFltKd64V_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TIntFltKd64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntFltKd64V_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TIntFltKd64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc) -> long long

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntFltKd64V_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TIntFltKd64V self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntFltKd64V_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TIntFltKd64V self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TIntFltKd64V self)

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > *

        """
        return _SnapTime.TIntFltKd64V_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TIntFltKd64V self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TIntFltKd64V self) -> bool

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > const *

        """
        return _SnapTime.TIntFltKd64V_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TIntFltKd64V self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TIntFltKd64V_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TIntFltKd64V self)
        Reverse(TIntFltKd64V self, long long LValN, long long RValN)

        Parameters
        ----------
        LValN: long long
        RValN: long long

        """
        return _SnapTime.TIntFltKd64V_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TIntFltKd64V self)

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > *

        """
        return _SnapTime.TIntFltKd64V_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TIntFltKd64V self, TIntFltKd64V ValV)

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt64,TFlt >,long long > const &

        Intrs(TIntFltKd64V self, TIntFltKd64V ValV, TIntFltKd64V DstValV)

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt64,TFlt >,long long > const &
        DstValV: TVec< TKeyDat< TInt64,TFlt >,long long > &

        """
        return _SnapTime.TIntFltKd64V_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TIntFltKd64V self, TIntFltKd64V ValV)

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt64,TFlt >,long long > const &

        Union(TIntFltKd64V self, TIntFltKd64V ValV, TIntFltKd64V DstValV)

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt64,TFlt >,long long > const &
        DstValV: TVec< TKeyDat< TInt64,TFlt >,long long > &

        """
        return _SnapTime.TIntFltKd64V_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TIntFltKd64V self, TIntFltKd64V ValV)

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt64,TFlt >,long long > const &

        Diff(TIntFltKd64V self, TIntFltKd64V ValV, TIntFltKd64V DstValV)

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt64,TFlt >,long long > const &
        DstValV: TVec< TKeyDat< TInt64,TFlt >,long long > &

        """
        return _SnapTime.TIntFltKd64V_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TIntFltKd64V self, TIntFltKd64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt64,TFlt >,long long > const &

        """
        return _SnapTime.TIntFltKd64V_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TIntFltKd64V self, TIntFltKd64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt64,TFlt >,long long > const &

        """
        return _SnapTime.TIntFltKd64V_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TIntFltKd64V self, TIntFlt64Kd Val) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TIntFltKd64V self, TIntFlt64Kd Val) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        SearchBin(TIntFltKd64V self, TIntFlt64Kd Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &
        InsValN: long long &

        """
        return _SnapTime.TIntFltKd64V_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TIntFltKd64V self, TIntFlt64Kd Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &
        InsValN: long long &

        """
        return _SnapTime.TIntFltKd64V_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TIntFltKd64V self, TIntFlt64Kd Val, long long const & BValN=0) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &
        BValN: long long const &

        SearchForw(TIntFltKd64V self, TIntFlt64Kd Val) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TIntFltKd64V self, TIntFlt64Kd Val) -> long long

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TIntFltKd64V self, TIntFltKd64V ValV, long long const & BValN=0) -> long long

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt64,TFlt >,long long > const &
        BValN: long long const &

        SearchVForw(TIntFltKd64V self, TIntFltKd64V ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TKeyDat< TInt64,TFlt >,long long > const &

        """
        return _SnapTime.TIntFltKd64V_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TIntFltKd64V self, TIntFlt64Kd Val) -> bool

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        IsIn(TIntFltKd64V self, TIntFlt64Kd Val, long long & ValN) -> bool

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &
        ValN: long long &

        """
        return _SnapTime.TIntFltKd64V_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TIntFltKd64V self, TIntFlt64Kd Val) -> bool

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TIntFltKd64V self, TIntFlt64Kd Val) -> TIntFlt64Kd

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TIntFltKd64V self, TIntFlt64Kd Val) -> TIntFlt64Kd

        Parameters
        ----------
        Val: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TIntFltKd64V self) -> long long

        Parameters
        ----------
        self: TVec< TIntFlt64Kd,int64 > const *

        """
        return _SnapTime.TIntFltKd64V_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TIntFlt64Kd Val1) -> TIntFltKd64V

        Parameters
        ----------
        Val1: TKeyDat< TInt64,TFlt > const &

        GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2) -> TIntFltKd64V

        Parameters
        ----------
        Val1: TKeyDat< TInt64,TFlt > const &
        Val2: TKeyDat< TInt64,TFlt > const &

        GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2, TIntFlt64Kd Val3) -> TIntFltKd64V

        Parameters
        ----------
        Val1: TKeyDat< TInt64,TFlt > const &
        Val2: TKeyDat< TInt64,TFlt > const &
        Val3: TKeyDat< TInt64,TFlt > const &

        GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2, TIntFlt64Kd Val3, TIntFlt64Kd Val4) -> TIntFltKd64V

        Parameters
        ----------
        Val1: TKeyDat< TInt64,TFlt > const &
        Val2: TKeyDat< TInt64,TFlt > const &
        Val3: TKeyDat< TInt64,TFlt > const &
        Val4: TKeyDat< TInt64,TFlt > const &

        GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2, TIntFlt64Kd Val3, TIntFlt64Kd Val4, TIntFlt64Kd Val5) -> TIntFltKd64V

        Parameters
        ----------
        Val1: TKeyDat< TInt64,TFlt > const &
        Val2: TKeyDat< TInt64,TFlt > const &
        Val3: TKeyDat< TInt64,TFlt > const &
        Val4: TKeyDat< TInt64,TFlt > const &
        Val5: TKeyDat< TInt64,TFlt > const &

        GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2, TIntFlt64Kd Val3, TIntFlt64Kd Val4, TIntFlt64Kd Val5, TIntFlt64Kd Val6) -> TIntFltKd64V

        Parameters
        ----------
        Val1: TKeyDat< TInt64,TFlt > const &
        Val2: TKeyDat< TInt64,TFlt > const &
        Val3: TKeyDat< TInt64,TFlt > const &
        Val4: TKeyDat< TInt64,TFlt > const &
        Val5: TKeyDat< TInt64,TFlt > const &
        Val6: TKeyDat< TInt64,TFlt > const &

        GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2, TIntFlt64Kd Val3, TIntFlt64Kd Val4, TIntFlt64Kd Val5, TIntFlt64Kd Val6, TIntFlt64Kd Val7) -> TIntFltKd64V

        Parameters
        ----------
        Val1: TKeyDat< TInt64,TFlt > const &
        Val2: TKeyDat< TInt64,TFlt > const &
        Val3: TKeyDat< TInt64,TFlt > const &
        Val4: TKeyDat< TInt64,TFlt > const &
        Val5: TKeyDat< TInt64,TFlt > const &
        Val6: TKeyDat< TInt64,TFlt > const &
        Val7: TKeyDat< TInt64,TFlt > const &

        GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2, TIntFlt64Kd Val3, TIntFlt64Kd Val4, TIntFlt64Kd Val5, TIntFlt64Kd Val6, TIntFlt64Kd Val7, TIntFlt64Kd Val8) -> TIntFltKd64V

        Parameters
        ----------
        Val1: TKeyDat< TInt64,TFlt > const &
        Val2: TKeyDat< TInt64,TFlt > const &
        Val3: TKeyDat< TInt64,TFlt > const &
        Val4: TKeyDat< TInt64,TFlt > const &
        Val5: TKeyDat< TInt64,TFlt > const &
        Val6: TKeyDat< TInt64,TFlt > const &
        Val7: TKeyDat< TInt64,TFlt > const &
        Val8: TKeyDat< TInt64,TFlt > const &

        GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2, TIntFlt64Kd Val3, TIntFlt64Kd Val4, TIntFlt64Kd Val5, TIntFlt64Kd Val6, TIntFlt64Kd Val7, TIntFlt64Kd Val8, TIntFlt64Kd Val9) -> TIntFltKd64V

        Parameters
        ----------
        Val1: TKeyDat< TInt64,TFlt > const &
        Val2: TKeyDat< TInt64,TFlt > const &
        Val3: TKeyDat< TInt64,TFlt > const &
        Val4: TKeyDat< TInt64,TFlt > const &
        Val5: TKeyDat< TInt64,TFlt > const &
        Val6: TKeyDat< TInt64,TFlt > const &
        Val7: TKeyDat< TInt64,TFlt > const &
        Val8: TKeyDat< TInt64,TFlt > const &
        Val9: TKeyDat< TInt64,TFlt > const &

        """
        return _SnapTime.TIntFltKd64V_GetV(*args)

    GetV = staticmethod(GetV)
TIntFltKd64V.LoadShM = new_instancemethod(_SnapTime.TIntFltKd64V_LoadShM, None, TIntFltKd64V)
TIntFltKd64V.Load = new_instancemethod(_SnapTime.TIntFltKd64V_Load, None, TIntFltKd64V)
TIntFltKd64V.Save = new_instancemethod(_SnapTime.TIntFltKd64V_Save, None, TIntFltKd64V)
TIntFltKd64V.__add__ = new_instancemethod(_SnapTime.TIntFltKd64V___add__, None, TIntFltKd64V)
TIntFltKd64V.__eq__ = new_instancemethod(_SnapTime.TIntFltKd64V___eq__, None, TIntFltKd64V)
TIntFltKd64V.__lt__ = new_instancemethod(_SnapTime.TIntFltKd64V___lt__, None, TIntFltKd64V)
TIntFltKd64V.GetMemUsed = new_instancemethod(_SnapTime.TIntFltKd64V_GetMemUsed, None, TIntFltKd64V)
TIntFltKd64V.GetMemSize = new_instancemethod(_SnapTime.TIntFltKd64V_GetMemSize, None, TIntFltKd64V)
TIntFltKd64V.GetPrimHashCd = new_instancemethod(_SnapTime.TIntFltKd64V_GetPrimHashCd, None, TIntFltKd64V)
TIntFltKd64V.GetSecHashCd = new_instancemethod(_SnapTime.TIntFltKd64V_GetSecHashCd, None, TIntFltKd64V)
TIntFltKd64V.Gen = new_instancemethod(_SnapTime.TIntFltKd64V_Gen, None, TIntFltKd64V)
TIntFltKd64V.GenExt = new_instancemethod(_SnapTime.TIntFltKd64V_GenExt, None, TIntFltKd64V)
TIntFltKd64V.IsExt = new_instancemethod(_SnapTime.TIntFltKd64V_IsExt, None, TIntFltKd64V)
TIntFltKd64V.Reserve = new_instancemethod(_SnapTime.TIntFltKd64V_Reserve, None, TIntFltKd64V)
TIntFltKd64V.Clr = new_instancemethod(_SnapTime.TIntFltKd64V_Clr, None, TIntFltKd64V)
TIntFltKd64V.Trunc = new_instancemethod(_SnapTime.TIntFltKd64V_Trunc, None, TIntFltKd64V)
TIntFltKd64V.Reduce = new_instancemethod(_SnapTime.TIntFltKd64V_Reduce, None, TIntFltKd64V)
TIntFltKd64V.Pack = new_instancemethod(_SnapTime.TIntFltKd64V_Pack, None, TIntFltKd64V)
TIntFltKd64V.MoveFrom = new_instancemethod(_SnapTime.TIntFltKd64V_MoveFrom, None, TIntFltKd64V)
TIntFltKd64V.CopyUniqueFrom = new_instancemethod(_SnapTime.TIntFltKd64V_CopyUniqueFrom, None, TIntFltKd64V)
TIntFltKd64V.Empty = new_instancemethod(_SnapTime.TIntFltKd64V_Empty, None, TIntFltKd64V)
TIntFltKd64V.Len = new_instancemethod(_SnapTime.TIntFltKd64V_Len, None, TIntFltKd64V)
TIntFltKd64V.Reserved = new_instancemethod(_SnapTime.TIntFltKd64V_Reserved, None, TIntFltKd64V)
TIntFltKd64V.Last = new_instancemethod(_SnapTime.TIntFltKd64V_Last, None, TIntFltKd64V)
TIntFltKd64V.LastValN = new_instancemethod(_SnapTime.TIntFltKd64V_LastValN, None, TIntFltKd64V)
TIntFltKd64V.LastLast = new_instancemethod(_SnapTime.TIntFltKd64V_LastLast, None, TIntFltKd64V)
TIntFltKd64V.GetRndVal = new_instancemethod(_SnapTime.TIntFltKd64V_GetRndVal, None, TIntFltKd64V)
TIntFltKd64V.BegI = new_instancemethod(_SnapTime.TIntFltKd64V_BegI, None, TIntFltKd64V)
TIntFltKd64V.begin = new_instancemethod(_SnapTime.TIntFltKd64V_begin, None, TIntFltKd64V)
TIntFltKd64V.EndI = new_instancemethod(_SnapTime.TIntFltKd64V_EndI, None, TIntFltKd64V)
TIntFltKd64V.end = new_instancemethod(_SnapTime.TIntFltKd64V_end, None, TIntFltKd64V)
TIntFltKd64V.GetI = new_instancemethod(_SnapTime.TIntFltKd64V_GetI, None, TIntFltKd64V)
TIntFltKd64V.Add = new_instancemethod(_SnapTime.TIntFltKd64V_Add, None, TIntFltKd64V)
TIntFltKd64V.AddMP = new_instancemethod(_SnapTime.TIntFltKd64V_AddMP, None, TIntFltKd64V)
TIntFltKd64V.MoveLastMP = new_instancemethod(_SnapTime.TIntFltKd64V_MoveLastMP, None, TIntFltKd64V)
TIntFltKd64V.AddV = new_instancemethod(_SnapTime.TIntFltKd64V_AddV, None, TIntFltKd64V)
TIntFltKd64V.AddSorted = new_instancemethod(_SnapTime.TIntFltKd64V_AddSorted, None, TIntFltKd64V)
TIntFltKd64V.AddBackSorted = new_instancemethod(_SnapTime.TIntFltKd64V_AddBackSorted, None, TIntFltKd64V)
TIntFltKd64V.AddMerged = new_instancemethod(_SnapTime.TIntFltKd64V_AddMerged, None, TIntFltKd64V)
TIntFltKd64V.AddVMerged = new_instancemethod(_SnapTime.TIntFltKd64V_AddVMerged, None, TIntFltKd64V)
TIntFltKd64V.AddUnique = new_instancemethod(_SnapTime.TIntFltKd64V_AddUnique, None, TIntFltKd64V)
TIntFltKd64V.GetVal = new_instancemethod(_SnapTime.TIntFltKd64V_GetVal, None, TIntFltKd64V)
TIntFltKd64V.SetVal = new_instancemethod(_SnapTime.TIntFltKd64V_SetVal, None, TIntFltKd64V)
TIntFltKd64V.GetSubValV = new_instancemethod(_SnapTime.TIntFltKd64V_GetSubValV, None, TIntFltKd64V)
TIntFltKd64V.Ins = new_instancemethod(_SnapTime.TIntFltKd64V_Ins, None, TIntFltKd64V)
TIntFltKd64V.Del = new_instancemethod(_SnapTime.TIntFltKd64V_Del, None, TIntFltKd64V)
TIntFltKd64V.DelLast = new_instancemethod(_SnapTime.TIntFltKd64V_DelLast, None, TIntFltKd64V)
TIntFltKd64V.DelIfIn = new_instancemethod(_SnapTime.TIntFltKd64V_DelIfIn, None, TIntFltKd64V)
TIntFltKd64V.DelAll = new_instancemethod(_SnapTime.TIntFltKd64V_DelAll, None, TIntFltKd64V)
TIntFltKd64V.PutAll = new_instancemethod(_SnapTime.TIntFltKd64V_PutAll, None, TIntFltKd64V)
TIntFltKd64V.Move = new_instancemethod(_SnapTime.TIntFltKd64V_Move, None, TIntFltKd64V)
TIntFltKd64V.Swap = new_instancemethod(_SnapTime.TIntFltKd64V_Swap, None, TIntFltKd64V)
TIntFltKd64V.Get32BitVector = new_instancemethod(_SnapTime.TIntFltKd64V_Get32BitVector, None, TIntFltKd64V)
TIntFltKd64V.NextPerm = new_instancemethod(_SnapTime.TIntFltKd64V_NextPerm, None, TIntFltKd64V)
TIntFltKd64V.PrevPerm = new_instancemethod(_SnapTime.TIntFltKd64V_PrevPerm, None, TIntFltKd64V)
TIntFltKd64V.GetPivotValN = new_instancemethod(_SnapTime.TIntFltKd64V_GetPivotValN, None, TIntFltKd64V)
TIntFltKd64V.BSort = new_instancemethod(_SnapTime.TIntFltKd64V_BSort, None, TIntFltKd64V)
TIntFltKd64V.ISort = new_instancemethod(_SnapTime.TIntFltKd64V_ISort, None, TIntFltKd64V)
TIntFltKd64V.Partition = new_instancemethod(_SnapTime.TIntFltKd64V_Partition, None, TIntFltKd64V)
TIntFltKd64V.QSort = new_instancemethod(_SnapTime.TIntFltKd64V_QSort, None, TIntFltKd64V)
TIntFltKd64V.Sort = new_instancemethod(_SnapTime.TIntFltKd64V_Sort, None, TIntFltKd64V)
TIntFltKd64V.IsSorted = new_instancemethod(_SnapTime.TIntFltKd64V_IsSorted, None, TIntFltKd64V)
TIntFltKd64V.Shuffle = new_instancemethod(_SnapTime.TIntFltKd64V_Shuffle, None, TIntFltKd64V)
TIntFltKd64V.Reverse = new_instancemethod(_SnapTime.TIntFltKd64V_Reverse, None, TIntFltKd64V)
TIntFltKd64V.Merge = new_instancemethod(_SnapTime.TIntFltKd64V_Merge, None, TIntFltKd64V)
TIntFltKd64V.Intrs = new_instancemethod(_SnapTime.TIntFltKd64V_Intrs, None, TIntFltKd64V)
TIntFltKd64V.Union = new_instancemethod(_SnapTime.TIntFltKd64V_Union, None, TIntFltKd64V)
TIntFltKd64V.Diff = new_instancemethod(_SnapTime.TIntFltKd64V_Diff, None, TIntFltKd64V)
TIntFltKd64V.IntrsLen = new_instancemethod(_SnapTime.TIntFltKd64V_IntrsLen, None, TIntFltKd64V)
TIntFltKd64V.UnionLen = new_instancemethod(_SnapTime.TIntFltKd64V_UnionLen, None, TIntFltKd64V)
TIntFltKd64V.Count = new_instancemethod(_SnapTime.TIntFltKd64V_Count, None, TIntFltKd64V)
TIntFltKd64V.SearchBin = new_instancemethod(_SnapTime.TIntFltKd64V_SearchBin, None, TIntFltKd64V)
TIntFltKd64V.SearchBinLeft = new_instancemethod(_SnapTime.TIntFltKd64V_SearchBinLeft, None, TIntFltKd64V)
TIntFltKd64V.SearchForw = new_instancemethod(_SnapTime.TIntFltKd64V_SearchForw, None, TIntFltKd64V)
TIntFltKd64V.SearchBack = new_instancemethod(_SnapTime.TIntFltKd64V_SearchBack, None, TIntFltKd64V)
TIntFltKd64V.SearchVForw = new_instancemethod(_SnapTime.TIntFltKd64V_SearchVForw, None, TIntFltKd64V)
TIntFltKd64V.IsIn = new_instancemethod(_SnapTime.TIntFltKd64V_IsIn, None, TIntFltKd64V)
TIntFltKd64V.IsInBin = new_instancemethod(_SnapTime.TIntFltKd64V_IsInBin, None, TIntFltKd64V)
TIntFltKd64V.GetDat = new_instancemethod(_SnapTime.TIntFltKd64V_GetDat, None, TIntFltKd64V)
TIntFltKd64V.GetAddDat = new_instancemethod(_SnapTime.TIntFltKd64V_GetAddDat, None, TIntFltKd64V)
TIntFltKd64V.GetMxValN = new_instancemethod(_SnapTime.TIntFltKd64V_GetMxValN, None, TIntFltKd64V)
TIntFltKd64V_swigregister = _SnapTime.TIntFltKd64V_swigregister
TIntFltKd64V_swigregister(TIntFltKd64V)

def TIntFltKd64V_SwapI(LVal, RVal):
    """
    TIntFltKd64V_SwapI(TIntFlt64Kd LVal, TIntFlt64Kd RVal)

    Parameters
    ----------
    LVal: TVec< TKeyDat< TInt64,TFlt >,long long >::TIter
    RVal: TVec< TKeyDat< TInt64,TFlt >,long long >::TIter

    """
    return _SnapTime.TIntFltKd64V_SwapI(LVal, RVal)

def TIntFltKd64V_GetV(*args):
    """
    GetV(TIntFlt64Kd Val1) -> TIntFltKd64V

    Parameters
    ----------
    Val1: TKeyDat< TInt64,TFlt > const &

    GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2) -> TIntFltKd64V

    Parameters
    ----------
    Val1: TKeyDat< TInt64,TFlt > const &
    Val2: TKeyDat< TInt64,TFlt > const &

    GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2, TIntFlt64Kd Val3) -> TIntFltKd64V

    Parameters
    ----------
    Val1: TKeyDat< TInt64,TFlt > const &
    Val2: TKeyDat< TInt64,TFlt > const &
    Val3: TKeyDat< TInt64,TFlt > const &

    GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2, TIntFlt64Kd Val3, TIntFlt64Kd Val4) -> TIntFltKd64V

    Parameters
    ----------
    Val1: TKeyDat< TInt64,TFlt > const &
    Val2: TKeyDat< TInt64,TFlt > const &
    Val3: TKeyDat< TInt64,TFlt > const &
    Val4: TKeyDat< TInt64,TFlt > const &

    GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2, TIntFlt64Kd Val3, TIntFlt64Kd Val4, TIntFlt64Kd Val5) -> TIntFltKd64V

    Parameters
    ----------
    Val1: TKeyDat< TInt64,TFlt > const &
    Val2: TKeyDat< TInt64,TFlt > const &
    Val3: TKeyDat< TInt64,TFlt > const &
    Val4: TKeyDat< TInt64,TFlt > const &
    Val5: TKeyDat< TInt64,TFlt > const &

    GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2, TIntFlt64Kd Val3, TIntFlt64Kd Val4, TIntFlt64Kd Val5, TIntFlt64Kd Val6) -> TIntFltKd64V

    Parameters
    ----------
    Val1: TKeyDat< TInt64,TFlt > const &
    Val2: TKeyDat< TInt64,TFlt > const &
    Val3: TKeyDat< TInt64,TFlt > const &
    Val4: TKeyDat< TInt64,TFlt > const &
    Val5: TKeyDat< TInt64,TFlt > const &
    Val6: TKeyDat< TInt64,TFlt > const &

    GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2, TIntFlt64Kd Val3, TIntFlt64Kd Val4, TIntFlt64Kd Val5, TIntFlt64Kd Val6, TIntFlt64Kd Val7) -> TIntFltKd64V

    Parameters
    ----------
    Val1: TKeyDat< TInt64,TFlt > const &
    Val2: TKeyDat< TInt64,TFlt > const &
    Val3: TKeyDat< TInt64,TFlt > const &
    Val4: TKeyDat< TInt64,TFlt > const &
    Val5: TKeyDat< TInt64,TFlt > const &
    Val6: TKeyDat< TInt64,TFlt > const &
    Val7: TKeyDat< TInt64,TFlt > const &

    GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2, TIntFlt64Kd Val3, TIntFlt64Kd Val4, TIntFlt64Kd Val5, TIntFlt64Kd Val6, TIntFlt64Kd Val7, TIntFlt64Kd Val8) -> TIntFltKd64V

    Parameters
    ----------
    Val1: TKeyDat< TInt64,TFlt > const &
    Val2: TKeyDat< TInt64,TFlt > const &
    Val3: TKeyDat< TInt64,TFlt > const &
    Val4: TKeyDat< TInt64,TFlt > const &
    Val5: TKeyDat< TInt64,TFlt > const &
    Val6: TKeyDat< TInt64,TFlt > const &
    Val7: TKeyDat< TInt64,TFlt > const &
    Val8: TKeyDat< TInt64,TFlt > const &

    TIntFltKd64V_GetV(TIntFlt64Kd Val1, TIntFlt64Kd Val2, TIntFlt64Kd Val3, TIntFlt64Kd Val4, TIntFlt64Kd Val5, TIntFlt64Kd Val6, TIntFlt64Kd Val7, TIntFlt64Kd Val8, TIntFlt64Kd Val9) -> TIntFltKd64V

    Parameters
    ----------
    Val1: TKeyDat< TInt64,TFlt > const &
    Val2: TKeyDat< TInt64,TFlt > const &
    Val3: TKeyDat< TInt64,TFlt > const &
    Val4: TKeyDat< TInt64,TFlt > const &
    Val5: TKeyDat< TInt64,TFlt > const &
    Val6: TKeyDat< TInt64,TFlt > const &
    Val7: TKeyDat< TInt64,TFlt > const &
    Val8: TKeyDat< TInt64,TFlt > const &
    Val9: TKeyDat< TInt64,TFlt > const &

    """
    return _SnapTime.TIntFltKd64V_GetV(*args)

class TIntStrPr(object):
    """Proxy of C++ TPair<(TInt,TStr)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_SnapTime.TIntStrPr_Val1_get, _SnapTime.TIntStrPr_Val1_set)
    Val2 = _swig_property(_SnapTime.TIntStrPr_Val2_get, _SnapTime.TIntStrPr_Val2_set)

    def __init__(self, *args):
        """
        __init__(TPair<(TInt,TStr)> self) -> TIntStrPr
        __init__(TPair<(TInt,TStr)> self, TIntStrPr Pair) -> TIntStrPr

        Parameters
        ----------
        Pair: TPair< TInt,TStr > const &

        __init__(TPair<(TInt,TStr)> self, TIntStrPr Pair) -> TIntStrPr

        Parameters
        ----------
        Pair: TPair< TInt,TStr > const &&

        __init__(TPair<(TInt,TStr)> self, TInt _Val1, TStr _Val2) -> TIntStrPr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TStr const &

        __init__(TPair<(TInt,TStr)> self, TSIn SIn) -> TIntStrPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntStrPr_swiginit(self, _SnapTime.new_TIntStrPr(*args))

    def Save(self, SOut):
        """
        Save(TIntStrPr self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntStrPr_Save(self, SOut)


    def Load(self, SIn):
        """
        Load(TIntStrPr self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntStrPr_Load(self, SIn)


    def __eq__(self, Pair):
        """
        __eq__(TIntStrPr self, TIntStrPr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TInt,TStr > const &

        """
        return _SnapTime.TIntStrPr___eq__(self, Pair)


    def __lt__(self, Pair):
        """
        __lt__(TIntStrPr self, TIntStrPr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TInt,TStr > const &

        """
        return _SnapTime.TIntStrPr___lt__(self, Pair)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntStrPr self) -> int

        Parameters
        ----------
        self: TPair< TInt,TStr > const *

        """
        return _SnapTime.TIntStrPr_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntStrPr self) -> int

        Parameters
        ----------
        self: TPair< TInt,TStr > const *

        """
        return _SnapTime.TIntStrPr_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntStrPr self) -> int

        Parameters
        ----------
        self: TPair< TInt,TStr > const *

        """
        return _SnapTime.TIntStrPr_GetSecHashCd(self)


    def GetVal(self, _Val1, _Val2):
        """
        GetVal(TIntStrPr self, TInt _Val1, TStr _Val2)

        Parameters
        ----------
        _Val1: TInt &
        _Val2: TStr &

        """
        return _SnapTime.TIntStrPr_GetVal(self, _Val1, _Val2)


    def GetVal1(self):
        """
        GetVal1(TIntStrPr self) -> TInt

        Parameters
        ----------
        self: TPair< TInt,TStr > const *

        """
        return _SnapTime.TIntStrPr_GetVal1(self)


    def GetVal2(self):
        """
        GetVal2(TIntStrPr self) -> TStr

        Parameters
        ----------
        self: TPair< TInt,TStr > const *

        """
        return _SnapTime.TIntStrPr_GetVal2(self)

    __swig_destroy__ = _SnapTime.delete_TIntStrPr
TIntStrPr.Save = new_instancemethod(_SnapTime.TIntStrPr_Save, None, TIntStrPr)
TIntStrPr.Load = new_instancemethod(_SnapTime.TIntStrPr_Load, None, TIntStrPr)
TIntStrPr.__eq__ = new_instancemethod(_SnapTime.TIntStrPr___eq__, None, TIntStrPr)
TIntStrPr.__lt__ = new_instancemethod(_SnapTime.TIntStrPr___lt__, None, TIntStrPr)
TIntStrPr.GetMemUsed = new_instancemethod(_SnapTime.TIntStrPr_GetMemUsed, None, TIntStrPr)
TIntStrPr.GetPrimHashCd = new_instancemethod(_SnapTime.TIntStrPr_GetPrimHashCd, None, TIntStrPr)
TIntStrPr.GetSecHashCd = new_instancemethod(_SnapTime.TIntStrPr_GetSecHashCd, None, TIntStrPr)
TIntStrPr.GetVal = new_instancemethod(_SnapTime.TIntStrPr_GetVal, None, TIntStrPr)
TIntStrPr.GetVal1 = new_instancemethod(_SnapTime.TIntStrPr_GetVal1, None, TIntStrPr)
TIntStrPr.GetVal2 = new_instancemethod(_SnapTime.TIntStrPr_GetVal2, None, TIntStrPr)
TIntStrPr_swigregister = _SnapTime.TIntStrPr_swigregister
TIntStrPr_swigregister(TIntStrPr)

class TInt64StrPr(object):
    """Proxy of C++ TPair<(TInt64,TStr)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_SnapTime.TInt64StrPr_Val1_get, _SnapTime.TInt64StrPr_Val1_set)
    Val2 = _swig_property(_SnapTime.TInt64StrPr_Val2_get, _SnapTime.TInt64StrPr_Val2_set)

    def __init__(self, *args):
        """
        __init__(TPair<(TInt64,TStr)> self) -> TInt64StrPr
        __init__(TPair<(TInt64,TStr)> self, TInt64StrPr Pair) -> TInt64StrPr

        Parameters
        ----------
        Pair: TPair< TInt64,TStr > const &

        __init__(TPair<(TInt64,TStr)> self, TInt64StrPr Pair) -> TInt64StrPr

        Parameters
        ----------
        Pair: TPair< TInt64,TStr > const &&

        __init__(TPair<(TInt64,TStr)> self, TInt64 _Val1, TStr _Val2) -> TInt64StrPr

        Parameters
        ----------
        _Val1: TInt64 const &
        _Val2: TStr const &

        __init__(TPair<(TInt64,TStr)> self, TSIn SIn) -> TInt64StrPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TInt64StrPr_swiginit(self, _SnapTime.new_TInt64StrPr(*args))

    def Save(self, SOut):
        """
        Save(TInt64StrPr self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TInt64StrPr_Save(self, SOut)


    def Load(self, SIn):
        """
        Load(TInt64StrPr self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TInt64StrPr_Load(self, SIn)


    def __eq__(self, Pair):
        """
        __eq__(TInt64StrPr self, TInt64StrPr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TInt64,TStr > const &

        """
        return _SnapTime.TInt64StrPr___eq__(self, Pair)


    def __lt__(self, Pair):
        """
        __lt__(TInt64StrPr self, TInt64StrPr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TInt64,TStr > const &

        """
        return _SnapTime.TInt64StrPr___lt__(self, Pair)


    def GetMemUsed(self):
        """
        GetMemUsed(TInt64StrPr self) -> int

        Parameters
        ----------
        self: TPair< TInt64,TStr > const *

        """
        return _SnapTime.TInt64StrPr_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TInt64StrPr self) -> int

        Parameters
        ----------
        self: TPair< TInt64,TStr > const *

        """
        return _SnapTime.TInt64StrPr_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TInt64StrPr self) -> int

        Parameters
        ----------
        self: TPair< TInt64,TStr > const *

        """
        return _SnapTime.TInt64StrPr_GetSecHashCd(self)


    def GetVal(self, _Val1, _Val2):
        """
        GetVal(TInt64StrPr self, TInt64 _Val1, TStr _Val2)

        Parameters
        ----------
        _Val1: TInt64 &
        _Val2: TStr &

        """
        return _SnapTime.TInt64StrPr_GetVal(self, _Val1, _Val2)


    def GetVal1(self):
        """
        GetVal1(TInt64StrPr self) -> TInt64

        Parameters
        ----------
        self: TPair< TInt64,TStr > const *

        """
        return _SnapTime.TInt64StrPr_GetVal1(self)


    def GetVal2(self):
        """
        GetVal2(TInt64StrPr self) -> TStr

        Parameters
        ----------
        self: TPair< TInt64,TStr > const *

        """
        return _SnapTime.TInt64StrPr_GetVal2(self)

    __swig_destroy__ = _SnapTime.delete_TInt64StrPr
TInt64StrPr.Save = new_instancemethod(_SnapTime.TInt64StrPr_Save, None, TInt64StrPr)
TInt64StrPr.Load = new_instancemethod(_SnapTime.TInt64StrPr_Load, None, TInt64StrPr)
TInt64StrPr.__eq__ = new_instancemethod(_SnapTime.TInt64StrPr___eq__, None, TInt64StrPr)
TInt64StrPr.__lt__ = new_instancemethod(_SnapTime.TInt64StrPr___lt__, None, TInt64StrPr)
TInt64StrPr.GetMemUsed = new_instancemethod(_SnapTime.TInt64StrPr_GetMemUsed, None, TInt64StrPr)
TInt64StrPr.GetPrimHashCd = new_instancemethod(_SnapTime.TInt64StrPr_GetPrimHashCd, None, TInt64StrPr)
TInt64StrPr.GetSecHashCd = new_instancemethod(_SnapTime.TInt64StrPr_GetSecHashCd, None, TInt64StrPr)
TInt64StrPr.GetVal = new_instancemethod(_SnapTime.TInt64StrPr_GetVal, None, TInt64StrPr)
TInt64StrPr.GetVal1 = new_instancemethod(_SnapTime.TInt64StrPr_GetVal1, None, TInt64StrPr)
TInt64StrPr.GetVal2 = new_instancemethod(_SnapTime.TInt64StrPr_GetVal2, None, TInt64StrPr)
TInt64StrPr_swigregister = _SnapTime.TInt64StrPr_swigregister
TInt64StrPr_swigregister(TInt64StrPr)

class TIntIntVV(object):
    """Proxy of C++ TVec<(TVec<(TInt)>,int)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TIntIntVV

    def __init__(self, *args):
        """
        __init__(TVec<(TVec<(TInt)>,int)> self) -> TIntIntVV
        __init__(TVec<(TVec<(TInt)>,int)> self, TIntIntVV Vec) -> TIntIntVV

        Parameters
        ----------
        Vec: TVec< TVec< TInt,int >,int > const &

        __init__(TVec<(TVec<(TInt)>,int)> self, TIntIntVV Vec) -> TIntIntVV

        Parameters
        ----------
        Vec: TVec< TVec< TInt,int >,int > &&

        __init__(TVec<(TVec<(TInt)>,int)> self, int const & _Vals) -> TIntIntVV

        Parameters
        ----------
        _Vals: int const &

        __init__(TVec<(TVec<(TInt)>,int)> self, int const & _MxVals, int const & _Vals) -> TIntIntVV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TVec<(TVec<(TInt)>,int)> self, int const & _MxVals, int const & _Vals, TIntV Dat) -> TIntIntVV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &
        Dat: TVec< TInt,int >

        __init__(TVec<(TVec<(TInt)>,int)> self, TIntV _ValT, int const & _Vals) -> TIntIntVV

        Parameters
        ----------
        _ValT: TVec< TInt,int > *
        _Vals: int const &

        __init__(TVec<(TVec<(TInt)>,int)> self, TSIn SIn) -> TIntIntVV

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntIntVV_swiginit(self, _SnapTime.new_TIntIntVV(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntIntVV self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntIntVV_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntIntVV self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntIntVV_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntIntVV self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntIntVV_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TIntIntVV self, TIntV Val) -> TIntIntVV

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TIntIntVV self, TIntIntVV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TVec< TInt,int >,int > const &

        """
        return _SnapTime.TIntIntVV___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TIntIntVV self, TIntIntVV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TVec< TInt,int >,int > const &

        """
        return _SnapTime.TIntIntVV___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntIntVV self) -> int

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > const *

        """
        return _SnapTime.TIntIntVV_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TIntIntVV self) -> int

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > const *

        """
        return _SnapTime.TIntIntVV_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntIntVV self) -> int

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > const *

        """
        return _SnapTime.TIntIntVV_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntIntVV self) -> int

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > const *

        """
        return _SnapTime.TIntIntVV_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TIntIntVV self, int const & _Vals)

        Parameters
        ----------
        _Vals: int const &

        Gen(TIntIntVV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TIntIntVV_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TIntIntVV self, TIntV _ValT, int const & _Vals)

        Parameters
        ----------
        _ValT: TVec< TInt,int > *
        _Vals: int const &

        """
        return _SnapTime.TIntIntVV_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TIntIntVV self) -> bool

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > const *

        """
        return _SnapTime.TIntIntVV_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TIntIntVV self, int const & _MxVals)

        Parameters
        ----------
        _MxVals: int const &

        Reserve(TIntIntVV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.TIntIntVV_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TIntIntVV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TIntIntVV self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntIntVV self)

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > *

        """
        return _SnapTime.TIntIntVV_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TIntIntVV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Trunc(TIntIntVV self)

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > *

        """
        return _SnapTime.TIntIntVV_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TIntIntVV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Reduce(TIntIntVV self)

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > *

        """
        return _SnapTime.TIntIntVV_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TIntIntVV self)

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > *

        """
        return _SnapTime.TIntIntVV_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TIntIntVV self, TIntIntVV Vec)

        Parameters
        ----------
        Vec: TVec< TVec< TInt,int >,int > &

        """
        return _SnapTime.TIntIntVV_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TIntIntVV self, TIntIntVV Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TVec< TInt,int >,int > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TIntIntVV_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TIntIntVV self) -> bool

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > const *

        """
        return _SnapTime.TIntIntVV_Empty(self)


    def Len(self):
        """
        Len(TIntIntVV self) -> int

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > const *

        """
        return _SnapTime.TIntIntVV_Len(self)


    def Reserved(self):
        """
        Reserved(TIntIntVV self) -> int

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > const *

        """
        return _SnapTime.TIntIntVV_Reserved(self)


    def Last(self, *args):
        """
        Last(TIntIntVV self) -> TIntV
        Last(TIntIntVV self) -> TIntV

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > *

        """
        return _SnapTime.TIntIntVV_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TIntIntVV self) -> int

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > const *

        """
        return _SnapTime.TIntIntVV_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TIntIntVV self) -> TIntV
        LastLast(TIntIntVV self) -> TIntV

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > *

        """
        return _SnapTime.TIntIntVV_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TIntIntVV self, TRnd Rnd) -> TIntV

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntIntVV self) -> TIntV
        GetRndVal(TIntIntVV self, TRnd Rnd) -> TIntV

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntIntVV self) -> TIntV

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > *

        """
        return _SnapTime.TIntIntVV_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TIntIntVV self) -> TIntV

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > const *

        """
        return _SnapTime.TIntIntVV_BegI(self)


    def begin(self):
        """
        begin(TIntIntVV self) -> TIntV

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > const *

        """
        return _SnapTime.TIntIntVV_begin(self)


    def EndI(self):
        """
        EndI(TIntIntVV self) -> TIntV

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > const *

        """
        return _SnapTime.TIntIntVV_EndI(self)


    def end(self):
        """
        end(TIntIntVV self) -> TIntV

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > const *

        """
        return _SnapTime.TIntIntVV_end(self)


    def GetI(self, ValN):
        """
        GetI(TIntIntVV self, int const & ValN) -> TIntV

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TIntIntVV_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TIntIntVV self) -> int
        Add(TIntIntVV self, TIntV Val) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        Add(TIntIntVV self, TIntV Val) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > &

        Add(TIntIntVV self, TIntV Val, int const & ResizeLen) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &
        ResizeLen: int const &

        """
        return _SnapTime.TIntIntVV_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TIntIntVV self, TIntV Val) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TIntIntVV self, TIntV Val, int Inc) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &
        Inc: int

        """
        return _SnapTime.TIntIntVV_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TIntIntVV self, TIntIntVV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TVec< TInt,int >,int > const &

        """
        return _SnapTime.TIntIntVV_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TIntIntVV self, TIntV Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &
        Asc: bool const &
        _MxVals: int const &

        AddSorted(TIntIntVV self, TIntV Val, bool const & Asc=True) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &
        Asc: bool const &

        AddSorted(TIntIntVV self, TIntV Val) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TIntIntVV self, TIntV Val, bool const & Asc) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &
        Asc: bool const &

        """
        return _SnapTime.TIntIntVV_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TIntIntVV self, TIntV Val) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TIntIntVV self, TIntIntVV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TVec< TInt,int >,int > const &

        """
        return _SnapTime.TIntIntVV_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TIntIntVV self, TIntV Val) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TIntIntVV self, int const & ValN) -> TIntV

        Parameters
        ----------
        ValN: int const &

        GetVal(TIntIntVV self, int const & ValN) -> TIntV

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.TIntIntVV_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TIntIntVV self, int const & ValN, TIntV Val)

        Parameters
        ----------
        ValN: int const &
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TIntIntVV self, int const & BValN, int const & EValN, TIntIntVV ValV)

        Parameters
        ----------
        BValN: int const &
        EValN: int const &
        ValV: TVec< TVec< TInt,int >,int > &

        """
        return _SnapTime.TIntIntVV_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TIntIntVV self, int const & ValN, TIntV Val)

        Parameters
        ----------
        ValN: int const &
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TIntIntVV self, int const & ValN)

        Parameters
        ----------
        ValN: int const &

        Del(TIntIntVV self, int const & MnValN, int const & MxValN)

        Parameters
        ----------
        MnValN: int const &
        MxValN: int const &

        """
        return _SnapTime.TIntIntVV_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TIntIntVV self)

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > *

        """
        return _SnapTime.TIntIntVV_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TIntIntVV self, TIntV Val) -> bool

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TIntIntVV self, TIntV Val)

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TIntIntVV self, TIntV Val)

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TIntIntVV self, int const & FromValN, int const & ToValN)

        Parameters
        ----------
        FromValN: int const &
        ToValN: int const &

        """
        return _SnapTime.TIntIntVV_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TIntIntVV self, TIntIntVV Vec)

        Parameters
        ----------
        Vec: TVec< TVec< TInt,int >,int > &

        Swap(TIntIntVV self, int const & ValN1, int const & ValN2)

        Parameters
        ----------
        ValN1: int const &
        ValN2: int const &

        """
        return _SnapTime.TIntIntVV_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TIntV LVal, TIntV RVal)

        Parameters
        ----------
        LVal: TVec< TVec< TInt >,int >::TIter
        RVal: TVec< TVec< TInt >,int >::TIter

        """
        return _SnapTime.TIntIntVV_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TIntIntVV self) -> TIntIntVV

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > *

        """
        return _SnapTime.TIntIntVV_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TIntIntVV self) -> bool

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > *

        """
        return _SnapTime.TIntIntVV_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TIntIntVV self) -> bool

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > *

        """
        return _SnapTime.TIntIntVV_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TIntIntVV self, int const & LValN, int const & RValN) -> int

        Parameters
        ----------
        LValN: int const &
        RValN: int const &

        """
        return _SnapTime.TIntIntVV_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TIntIntVV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntIntVV_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TIntIntVV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntIntVV_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TIntIntVV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntIntVV_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TIntIntVV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: int const &
        MxRValN: int const &
        Asc: bool const &

        """
        return _SnapTime.TIntIntVV_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TIntIntVV self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TIntIntVV self)

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > *

        """
        return _SnapTime.TIntIntVV_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TIntIntVV self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TIntIntVV self) -> bool

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > const *

        """
        return _SnapTime.TIntIntVV_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TIntIntVV self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TIntIntVV_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TIntIntVV self)
        Reverse(TIntIntVV self, int LValN, int RValN)

        Parameters
        ----------
        LValN: int
        RValN: int

        """
        return _SnapTime.TIntIntVV_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TIntIntVV self)

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > *

        """
        return _SnapTime.TIntIntVV_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TIntIntVV self, TIntIntVV ValV)

        Parameters
        ----------
        ValV: TVec< TVec< TInt,int >,int > const &

        Intrs(TIntIntVV self, TIntIntVV ValV, TIntIntVV DstValV)

        Parameters
        ----------
        ValV: TVec< TVec< TInt,int >,int > const &
        DstValV: TVec< TVec< TInt,int >,int > &

        """
        return _SnapTime.TIntIntVV_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TIntIntVV self, TIntIntVV ValV)

        Parameters
        ----------
        ValV: TVec< TVec< TInt,int >,int > const &

        Union(TIntIntVV self, TIntIntVV ValV, TIntIntVV DstValV)

        Parameters
        ----------
        ValV: TVec< TVec< TInt,int >,int > const &
        DstValV: TVec< TVec< TInt,int >,int > &

        """
        return _SnapTime.TIntIntVV_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TIntIntVV self, TIntIntVV ValV)

        Parameters
        ----------
        ValV: TVec< TVec< TInt,int >,int > const &

        Diff(TIntIntVV self, TIntIntVV ValV, TIntIntVV DstValV)

        Parameters
        ----------
        ValV: TVec< TVec< TInt,int >,int > const &
        DstValV: TVec< TVec< TInt,int >,int > &

        """
        return _SnapTime.TIntIntVV_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TIntIntVV self, TIntIntVV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TVec< TInt,int >,int > const &

        """
        return _SnapTime.TIntIntVV_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TIntIntVV self, TIntIntVV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TVec< TInt,int >,int > const &

        """
        return _SnapTime.TIntIntVV_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TIntIntVV self, TIntV Val) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TIntIntVV self, TIntV Val) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        SearchBin(TIntIntVV self, TIntV Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &
        InsValN: int &

        """
        return _SnapTime.TIntIntVV_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TIntIntVV self, TIntV Val, int & InsValN) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &
        InsValN: int &

        """
        return _SnapTime.TIntIntVV_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TIntIntVV self, TIntV Val, int const & BValN=0) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &
        BValN: int const &

        SearchForw(TIntIntVV self, TIntV Val) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TIntIntVV self, TIntV Val) -> int

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TIntIntVV self, TIntIntVV ValV, int const & BValN=0) -> int

        Parameters
        ----------
        ValV: TVec< TVec< TInt,int >,int > const &
        BValN: int const &

        SearchVForw(TIntIntVV self, TIntIntVV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TVec< TInt,int >,int > const &

        """
        return _SnapTime.TIntIntVV_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TIntIntVV self, TIntV Val) -> bool

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        IsIn(TIntIntVV self, TIntV Val, int & ValN) -> bool

        Parameters
        ----------
        Val: TVec< TInt,int > const &
        ValN: int &

        """
        return _SnapTime.TIntIntVV_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TIntIntVV self, TIntV Val) -> bool

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TIntIntVV self, TIntV Val) -> TIntV

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TIntIntVV self, TIntV Val) -> TIntV

        Parameters
        ----------
        Val: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TIntIntVV self) -> int

        Parameters
        ----------
        self: TVec< TVec< TInt >,int > const *

        """
        return _SnapTime.TIntIntVV_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TIntV Val1) -> TIntIntVV

        Parameters
        ----------
        Val1: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2) -> TIntIntVV

        Parameters
        ----------
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2, TIntV Val3) -> TIntIntVV

        Parameters
        ----------
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &
        Val3: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4) -> TIntIntVV

        Parameters
        ----------
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &
        Val3: TVec< TInt,int > const &
        Val4: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5) -> TIntIntVV

        Parameters
        ----------
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &
        Val3: TVec< TInt,int > const &
        Val4: TVec< TInt,int > const &
        Val5: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6) -> TIntIntVV

        Parameters
        ----------
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &
        Val3: TVec< TInt,int > const &
        Val4: TVec< TInt,int > const &
        Val5: TVec< TInt,int > const &
        Val6: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6, TIntV Val7) -> TIntIntVV

        Parameters
        ----------
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &
        Val3: TVec< TInt,int > const &
        Val4: TVec< TInt,int > const &
        Val5: TVec< TInt,int > const &
        Val6: TVec< TInt,int > const &
        Val7: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6, TIntV Val7, TIntV Val8) -> TIntIntVV

        Parameters
        ----------
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &
        Val3: TVec< TInt,int > const &
        Val4: TVec< TInt,int > const &
        Val5: TVec< TInt,int > const &
        Val6: TVec< TInt,int > const &
        Val7: TVec< TInt,int > const &
        Val8: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6, TIntV Val7, TIntV Val8, TIntV Val9) -> TIntIntVV

        Parameters
        ----------
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &
        Val3: TVec< TInt,int > const &
        Val4: TVec< TInt,int > const &
        Val5: TVec< TInt,int > const &
        Val6: TVec< TInt,int > const &
        Val7: TVec< TInt,int > const &
        Val8: TVec< TInt,int > const &
        Val9: TVec< TInt,int > const &

        """
        return _SnapTime.TIntIntVV_GetV(*args)

    GetV = staticmethod(GetV)
TIntIntVV.LoadShM = new_instancemethod(_SnapTime.TIntIntVV_LoadShM, None, TIntIntVV)
TIntIntVV.Load = new_instancemethod(_SnapTime.TIntIntVV_Load, None, TIntIntVV)
TIntIntVV.Save = new_instancemethod(_SnapTime.TIntIntVV_Save, None, TIntIntVV)
TIntIntVV.__add__ = new_instancemethod(_SnapTime.TIntIntVV___add__, None, TIntIntVV)
TIntIntVV.__eq__ = new_instancemethod(_SnapTime.TIntIntVV___eq__, None, TIntIntVV)
TIntIntVV.__lt__ = new_instancemethod(_SnapTime.TIntIntVV___lt__, None, TIntIntVV)
TIntIntVV.GetMemUsed = new_instancemethod(_SnapTime.TIntIntVV_GetMemUsed, None, TIntIntVV)
TIntIntVV.GetMemSize = new_instancemethod(_SnapTime.TIntIntVV_GetMemSize, None, TIntIntVV)
TIntIntVV.GetPrimHashCd = new_instancemethod(_SnapTime.TIntIntVV_GetPrimHashCd, None, TIntIntVV)
TIntIntVV.GetSecHashCd = new_instancemethod(_SnapTime.TIntIntVV_GetSecHashCd, None, TIntIntVV)
TIntIntVV.Gen = new_instancemethod(_SnapTime.TIntIntVV_Gen, None, TIntIntVV)
TIntIntVV.GenExt = new_instancemethod(_SnapTime.TIntIntVV_GenExt, None, TIntIntVV)
TIntIntVV.IsExt = new_instancemethod(_SnapTime.TIntIntVV_IsExt, None, TIntIntVV)
TIntIntVV.Reserve = new_instancemethod(_SnapTime.TIntIntVV_Reserve, None, TIntIntVV)
TIntIntVV.Clr = new_instancemethod(_SnapTime.TIntIntVV_Clr, None, TIntIntVV)
TIntIntVV.Trunc = new_instancemethod(_SnapTime.TIntIntVV_Trunc, None, TIntIntVV)
TIntIntVV.Reduce = new_instancemethod(_SnapTime.TIntIntVV_Reduce, None, TIntIntVV)
TIntIntVV.Pack = new_instancemethod(_SnapTime.TIntIntVV_Pack, None, TIntIntVV)
TIntIntVV.MoveFrom = new_instancemethod(_SnapTime.TIntIntVV_MoveFrom, None, TIntIntVV)
TIntIntVV.CopyUniqueFrom = new_instancemethod(_SnapTime.TIntIntVV_CopyUniqueFrom, None, TIntIntVV)
TIntIntVV.Empty = new_instancemethod(_SnapTime.TIntIntVV_Empty, None, TIntIntVV)
TIntIntVV.Len = new_instancemethod(_SnapTime.TIntIntVV_Len, None, TIntIntVV)
TIntIntVV.Reserved = new_instancemethod(_SnapTime.TIntIntVV_Reserved, None, TIntIntVV)
TIntIntVV.Last = new_instancemethod(_SnapTime.TIntIntVV_Last, None, TIntIntVV)
TIntIntVV.LastValN = new_instancemethod(_SnapTime.TIntIntVV_LastValN, None, TIntIntVV)
TIntIntVV.LastLast = new_instancemethod(_SnapTime.TIntIntVV_LastLast, None, TIntIntVV)
TIntIntVV.GetRndVal = new_instancemethod(_SnapTime.TIntIntVV_GetRndVal, None, TIntIntVV)
TIntIntVV.BegI = new_instancemethod(_SnapTime.TIntIntVV_BegI, None, TIntIntVV)
TIntIntVV.begin = new_instancemethod(_SnapTime.TIntIntVV_begin, None, TIntIntVV)
TIntIntVV.EndI = new_instancemethod(_SnapTime.TIntIntVV_EndI, None, TIntIntVV)
TIntIntVV.end = new_instancemethod(_SnapTime.TIntIntVV_end, None, TIntIntVV)
TIntIntVV.GetI = new_instancemethod(_SnapTime.TIntIntVV_GetI, None, TIntIntVV)
TIntIntVV.Add = new_instancemethod(_SnapTime.TIntIntVV_Add, None, TIntIntVV)
TIntIntVV.AddMP = new_instancemethod(_SnapTime.TIntIntVV_AddMP, None, TIntIntVV)
TIntIntVV.MoveLastMP = new_instancemethod(_SnapTime.TIntIntVV_MoveLastMP, None, TIntIntVV)
TIntIntVV.AddV = new_instancemethod(_SnapTime.TIntIntVV_AddV, None, TIntIntVV)
TIntIntVV.AddSorted = new_instancemethod(_SnapTime.TIntIntVV_AddSorted, None, TIntIntVV)
TIntIntVV.AddBackSorted = new_instancemethod(_SnapTime.TIntIntVV_AddBackSorted, None, TIntIntVV)
TIntIntVV.AddMerged = new_instancemethod(_SnapTime.TIntIntVV_AddMerged, None, TIntIntVV)
TIntIntVV.AddVMerged = new_instancemethod(_SnapTime.TIntIntVV_AddVMerged, None, TIntIntVV)
TIntIntVV.AddUnique = new_instancemethod(_SnapTime.TIntIntVV_AddUnique, None, TIntIntVV)
TIntIntVV.GetVal = new_instancemethod(_SnapTime.TIntIntVV_GetVal, None, TIntIntVV)
TIntIntVV.SetVal = new_instancemethod(_SnapTime.TIntIntVV_SetVal, None, TIntIntVV)
TIntIntVV.GetSubValV = new_instancemethod(_SnapTime.TIntIntVV_GetSubValV, None, TIntIntVV)
TIntIntVV.Ins = new_instancemethod(_SnapTime.TIntIntVV_Ins, None, TIntIntVV)
TIntIntVV.Del = new_instancemethod(_SnapTime.TIntIntVV_Del, None, TIntIntVV)
TIntIntVV.DelLast = new_instancemethod(_SnapTime.TIntIntVV_DelLast, None, TIntIntVV)
TIntIntVV.DelIfIn = new_instancemethod(_SnapTime.TIntIntVV_DelIfIn, None, TIntIntVV)
TIntIntVV.DelAll = new_instancemethod(_SnapTime.TIntIntVV_DelAll, None, TIntIntVV)
TIntIntVV.PutAll = new_instancemethod(_SnapTime.TIntIntVV_PutAll, None, TIntIntVV)
TIntIntVV.Move = new_instancemethod(_SnapTime.TIntIntVV_Move, None, TIntIntVV)
TIntIntVV.Swap = new_instancemethod(_SnapTime.TIntIntVV_Swap, None, TIntIntVV)
TIntIntVV.Get32BitVector = new_instancemethod(_SnapTime.TIntIntVV_Get32BitVector, None, TIntIntVV)
TIntIntVV.NextPerm = new_instancemethod(_SnapTime.TIntIntVV_NextPerm, None, TIntIntVV)
TIntIntVV.PrevPerm = new_instancemethod(_SnapTime.TIntIntVV_PrevPerm, None, TIntIntVV)
TIntIntVV.GetPivotValN = new_instancemethod(_SnapTime.TIntIntVV_GetPivotValN, None, TIntIntVV)
TIntIntVV.BSort = new_instancemethod(_SnapTime.TIntIntVV_BSort, None, TIntIntVV)
TIntIntVV.ISort = new_instancemethod(_SnapTime.TIntIntVV_ISort, None, TIntIntVV)
TIntIntVV.Partition = new_instancemethod(_SnapTime.TIntIntVV_Partition, None, TIntIntVV)
TIntIntVV.QSort = new_instancemethod(_SnapTime.TIntIntVV_QSort, None, TIntIntVV)
TIntIntVV.Sort = new_instancemethod(_SnapTime.TIntIntVV_Sort, None, TIntIntVV)
TIntIntVV.IsSorted = new_instancemethod(_SnapTime.TIntIntVV_IsSorted, None, TIntIntVV)
TIntIntVV.Shuffle = new_instancemethod(_SnapTime.TIntIntVV_Shuffle, None, TIntIntVV)
TIntIntVV.Reverse = new_instancemethod(_SnapTime.TIntIntVV_Reverse, None, TIntIntVV)
TIntIntVV.Merge = new_instancemethod(_SnapTime.TIntIntVV_Merge, None, TIntIntVV)
TIntIntVV.Intrs = new_instancemethod(_SnapTime.TIntIntVV_Intrs, None, TIntIntVV)
TIntIntVV.Union = new_instancemethod(_SnapTime.TIntIntVV_Union, None, TIntIntVV)
TIntIntVV.Diff = new_instancemethod(_SnapTime.TIntIntVV_Diff, None, TIntIntVV)
TIntIntVV.IntrsLen = new_instancemethod(_SnapTime.TIntIntVV_IntrsLen, None, TIntIntVV)
TIntIntVV.UnionLen = new_instancemethod(_SnapTime.TIntIntVV_UnionLen, None, TIntIntVV)
TIntIntVV.Count = new_instancemethod(_SnapTime.TIntIntVV_Count, None, TIntIntVV)
TIntIntVV.SearchBin = new_instancemethod(_SnapTime.TIntIntVV_SearchBin, None, TIntIntVV)
TIntIntVV.SearchBinLeft = new_instancemethod(_SnapTime.TIntIntVV_SearchBinLeft, None, TIntIntVV)
TIntIntVV.SearchForw = new_instancemethod(_SnapTime.TIntIntVV_SearchForw, None, TIntIntVV)
TIntIntVV.SearchBack = new_instancemethod(_SnapTime.TIntIntVV_SearchBack, None, TIntIntVV)
TIntIntVV.SearchVForw = new_instancemethod(_SnapTime.TIntIntVV_SearchVForw, None, TIntIntVV)
TIntIntVV.IsIn = new_instancemethod(_SnapTime.TIntIntVV_IsIn, None, TIntIntVV)
TIntIntVV.IsInBin = new_instancemethod(_SnapTime.TIntIntVV_IsInBin, None, TIntIntVV)
TIntIntVV.GetDat = new_instancemethod(_SnapTime.TIntIntVV_GetDat, None, TIntIntVV)
TIntIntVV.GetAddDat = new_instancemethod(_SnapTime.TIntIntVV_GetAddDat, None, TIntIntVV)
TIntIntVV.GetMxValN = new_instancemethod(_SnapTime.TIntIntVV_GetMxValN, None, TIntIntVV)
TIntIntVV_swigregister = _SnapTime.TIntIntVV_swigregister
TIntIntVV_swigregister(TIntIntVV)

def TIntIntVV_SwapI(LVal, RVal):
    """
    TIntIntVV_SwapI(TIntV LVal, TIntV RVal)

    Parameters
    ----------
    LVal: TVec< TVec< TInt >,int >::TIter
    RVal: TVec< TVec< TInt >,int >::TIter

    """
    return _SnapTime.TIntIntVV_SwapI(LVal, RVal)

def TIntIntVV_GetV(*args):
    """
    GetV(TIntV Val1) -> TIntIntVV

    Parameters
    ----------
    Val1: TVec< TInt,int > const &

    GetV(TIntV Val1, TIntV Val2) -> TIntIntVV

    Parameters
    ----------
    Val1: TVec< TInt,int > const &
    Val2: TVec< TInt,int > const &

    GetV(TIntV Val1, TIntV Val2, TIntV Val3) -> TIntIntVV

    Parameters
    ----------
    Val1: TVec< TInt,int > const &
    Val2: TVec< TInt,int > const &
    Val3: TVec< TInt,int > const &

    GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4) -> TIntIntVV

    Parameters
    ----------
    Val1: TVec< TInt,int > const &
    Val2: TVec< TInt,int > const &
    Val3: TVec< TInt,int > const &
    Val4: TVec< TInt,int > const &

    GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5) -> TIntIntVV

    Parameters
    ----------
    Val1: TVec< TInt,int > const &
    Val2: TVec< TInt,int > const &
    Val3: TVec< TInt,int > const &
    Val4: TVec< TInt,int > const &
    Val5: TVec< TInt,int > const &

    GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6) -> TIntIntVV

    Parameters
    ----------
    Val1: TVec< TInt,int > const &
    Val2: TVec< TInt,int > const &
    Val3: TVec< TInt,int > const &
    Val4: TVec< TInt,int > const &
    Val5: TVec< TInt,int > const &
    Val6: TVec< TInt,int > const &

    GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6, TIntV Val7) -> TIntIntVV

    Parameters
    ----------
    Val1: TVec< TInt,int > const &
    Val2: TVec< TInt,int > const &
    Val3: TVec< TInt,int > const &
    Val4: TVec< TInt,int > const &
    Val5: TVec< TInt,int > const &
    Val6: TVec< TInt,int > const &
    Val7: TVec< TInt,int > const &

    GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6, TIntV Val7, TIntV Val8) -> TIntIntVV

    Parameters
    ----------
    Val1: TVec< TInt,int > const &
    Val2: TVec< TInt,int > const &
    Val3: TVec< TInt,int > const &
    Val4: TVec< TInt,int > const &
    Val5: TVec< TInt,int > const &
    Val6: TVec< TInt,int > const &
    Val7: TVec< TInt,int > const &
    Val8: TVec< TInt,int > const &

    TIntIntVV_GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6, TIntV Val7, TIntV Val8, TIntV Val9) -> TIntIntVV

    Parameters
    ----------
    Val1: TVec< TInt,int > const &
    Val2: TVec< TInt,int > const &
    Val3: TVec< TInt,int > const &
    Val4: TVec< TInt,int > const &
    Val5: TVec< TInt,int > const &
    Val6: TVec< TInt,int > const &
    Val7: TVec< TInt,int > const &
    Val8: TVec< TInt,int > const &
    Val9: TVec< TInt,int > const &

    """
    return _SnapTime.TIntIntVV_GetV(*args)

class TIntInt64VV(object):
    """Proxy of C++ TVec<(TVec<(TInt64,int64)>,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TIntInt64VV

    def __init__(self, *args):
        """
        __init__(TVec<(TVec<(TInt64,int64)>,int64)> self) -> TIntInt64VV
        __init__(TVec<(TVec<(TInt64,int64)>,int64)> self, TIntInt64VV Vec) -> TIntInt64VV

        Parameters
        ----------
        Vec: TVec< TVec< TInt64,int64 >,long long > const &

        __init__(TVec<(TVec<(TInt64,int64)>,int64)> self, TIntInt64VV Vec) -> TIntInt64VV

        Parameters
        ----------
        Vec: TVec< TVec< TInt64,int64 >,long long > &&

        __init__(TVec<(TVec<(TInt64,int64)>,int64)> self, long long const & _Vals) -> TIntInt64VV

        Parameters
        ----------
        _Vals: long long const &

        __init__(TVec<(TVec<(TInt64,int64)>,int64)> self, long long const & _MxVals, long long const & _Vals) -> TIntInt64VV

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        __init__(TVec<(TVec<(TInt64,int64)>,int64)> self, long long const & _MxVals, long long const & _Vals, TInt64V Dat) -> TIntInt64VV

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &
        Dat: TVec< TInt64,int64 >

        __init__(TVec<(TVec<(TInt64,int64)>,int64)> self, TInt64V _ValT, long long const & _Vals) -> TIntInt64VV

        Parameters
        ----------
        _ValT: TVec< TInt64,int64 > *
        _Vals: long long const &

        __init__(TVec<(TVec<(TInt64,int64)>,int64)> self, TSIn SIn) -> TIntInt64VV

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntInt64VV_swiginit(self, _SnapTime.new_TIntInt64VV(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntInt64VV self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntInt64VV_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntInt64VV self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntInt64VV_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntInt64VV self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntInt64VV_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TIntInt64VV self, TInt64V Val) -> TIntInt64VV

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TIntInt64VV self, TIntInt64VV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TVec< TInt64,int64 >,long long > const &

        """
        return _SnapTime.TIntInt64VV___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TIntInt64VV self, TIntInt64VV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TVec< TInt64,int64 >,long long > const &

        """
        return _SnapTime.TIntInt64VV___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntInt64VV self) -> long long

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > const *

        """
        return _SnapTime.TIntInt64VV_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TIntInt64VV self) -> long long

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > const *

        """
        return _SnapTime.TIntInt64VV_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntInt64VV self) -> int

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > const *

        """
        return _SnapTime.TIntInt64VV_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntInt64VV self) -> int

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > const *

        """
        return _SnapTime.TIntInt64VV_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TIntInt64VV self, long long const & _Vals)

        Parameters
        ----------
        _Vals: long long const &

        Gen(TIntInt64VV self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TIntInt64VV_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TIntInt64VV self, TInt64V _ValT, long long const & _Vals)

        Parameters
        ----------
        _ValT: TVec< TInt64,int64 > *
        _Vals: long long const &

        """
        return _SnapTime.TIntInt64VV_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TIntInt64VV self) -> bool

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > const *

        """
        return _SnapTime.TIntInt64VV_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TIntInt64VV self, long long const & _MxVals)

        Parameters
        ----------
        _MxVals: long long const &

        Reserve(TIntInt64VV self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TIntInt64VV_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TIntInt64VV self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(TIntInt64VV self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntInt64VV self)

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > *

        """
        return _SnapTime.TIntInt64VV_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TIntInt64VV self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Trunc(TIntInt64VV self)

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > *

        """
        return _SnapTime.TIntInt64VV_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TIntInt64VV self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Reduce(TIntInt64VV self)

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > *

        """
        return _SnapTime.TIntInt64VV_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TIntInt64VV self)

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > *

        """
        return _SnapTime.TIntInt64VV_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TIntInt64VV self, TIntInt64VV Vec)

        Parameters
        ----------
        Vec: TVec< TVec< TInt64,int64 >,long long > &

        """
        return _SnapTime.TIntInt64VV_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TIntInt64VV self, TIntInt64VV Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TVec< TInt64,int64 >,long long > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TIntInt64VV_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TIntInt64VV self) -> bool

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > const *

        """
        return _SnapTime.TIntInt64VV_Empty(self)


    def Len(self):
        """
        Len(TIntInt64VV self) -> long long

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > const *

        """
        return _SnapTime.TIntInt64VV_Len(self)


    def Reserved(self):
        """
        Reserved(TIntInt64VV self) -> long long

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > const *

        """
        return _SnapTime.TIntInt64VV_Reserved(self)


    def Last(self, *args):
        """
        Last(TIntInt64VV self) -> TInt64V
        Last(TIntInt64VV self) -> TInt64V

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > *

        """
        return _SnapTime.TIntInt64VV_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TIntInt64VV self) -> long long

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > const *

        """
        return _SnapTime.TIntInt64VV_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TIntInt64VV self) -> TInt64V
        LastLast(TIntInt64VV self) -> TInt64V

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > *

        """
        return _SnapTime.TIntInt64VV_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TIntInt64VV self, TRnd Rnd) -> TInt64V

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntInt64VV self) -> TInt64V
        GetRndVal(TIntInt64VV self, TRnd Rnd) -> TInt64V

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TIntInt64VV self) -> TInt64V

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > *

        """
        return _SnapTime.TIntInt64VV_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TIntInt64VV self) -> TInt64V

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > const *

        """
        return _SnapTime.TIntInt64VV_BegI(self)


    def begin(self):
        """
        begin(TIntInt64VV self) -> TInt64V

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > const *

        """
        return _SnapTime.TIntInt64VV_begin(self)


    def EndI(self):
        """
        EndI(TIntInt64VV self) -> TInt64V

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > const *

        """
        return _SnapTime.TIntInt64VV_EndI(self)


    def end(self):
        """
        end(TIntInt64VV self) -> TInt64V

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > const *

        """
        return _SnapTime.TIntInt64VV_end(self)


    def GetI(self, ValN):
        """
        GetI(TIntInt64VV self, long long const & ValN) -> TInt64V

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TIntInt64VV_GetI(self, ValN)


    def AddMP(self, Val):
        """
        AddMP(TIntInt64VV self, TInt64V Val) -> long long

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TIntInt64VV self, TInt64V Val, int Inc) -> long long

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &
        Inc: int

        """
        return _SnapTime.TIntInt64VV_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TIntInt64VV self, TIntInt64VV ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TVec< TInt64,int64 >,long long > const &

        """
        return _SnapTime.TIntInt64VV_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TIntInt64VV self, TInt64V Val, bool const & Asc=True, long long const & _MxVals=-1) -> long long

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &
        Asc: bool const &
        _MxVals: long long const &

        AddSorted(TIntInt64VV self, TInt64V Val, bool const & Asc=True) -> long long

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &
        Asc: bool const &

        AddSorted(TIntInt64VV self, TInt64V Val) -> long long

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TIntInt64VV self, TInt64V Val, bool const & Asc) -> long long

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &
        Asc: bool const &

        """
        return _SnapTime.TIntInt64VV_AddBackSorted(self, Val, Asc)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TIntInt64VV self, TIntInt64VV ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TVec< TInt64,int64 >,long long > const &

        """
        return _SnapTime.TIntInt64VV_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TIntInt64VV self, TInt64V Val) -> long long

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TIntInt64VV self, long long const & ValN) -> TInt64V

        Parameters
        ----------
        ValN: long long const &

        GetVal(TIntInt64VV self, long long const & ValN) -> TInt64V

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TIntInt64VV_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TIntInt64VV self, long long const & ValN, TInt64V Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TIntInt64VV self, long long const & BValN, long long const & EValN, TIntInt64VV ValV)

        Parameters
        ----------
        BValN: long long const &
        EValN: long long const &
        ValV: TVec< TVec< TInt64,int64 >,long long > &

        """
        return _SnapTime.TIntInt64VV_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TIntInt64VV self, long long const & ValN, TInt64V Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TIntInt64VV self, long long const & ValN)

        Parameters
        ----------
        ValN: long long const &

        Del(TIntInt64VV self, long long const & MnValN, long long const & MxValN)

        Parameters
        ----------
        MnValN: long long const &
        MxValN: long long const &

        """
        return _SnapTime.TIntInt64VV_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TIntInt64VV self)

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > *

        """
        return _SnapTime.TIntInt64VV_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TIntInt64VV self, TInt64V Val) -> bool

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TIntInt64VV self, TInt64V Val)

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TIntInt64VV self, TInt64V Val)

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TIntInt64VV self, long long const & FromValN, long long const & ToValN)

        Parameters
        ----------
        FromValN: long long const &
        ToValN: long long const &

        """
        return _SnapTime.TIntInt64VV_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TIntInt64VV self, TIntInt64VV Vec)

        Parameters
        ----------
        Vec: TVec< TVec< TInt64,int64 >,long long > &

        Swap(TIntInt64VV self, long long const & ValN1, long long const & ValN2)

        Parameters
        ----------
        ValN1: long long const &
        ValN2: long long const &

        """
        return _SnapTime.TIntInt64VV_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TInt64V LVal, TInt64V RVal)

        Parameters
        ----------
        LVal: TVec< TVec< TInt64,long long >,long long >::TIter
        RVal: TVec< TVec< TInt64,long long >,long long >::TIter

        """
        return _SnapTime.TIntInt64VV_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TIntInt64VV self) -> TVec< TVec< TInt64,int64 >,int >

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > *

        """
        return _SnapTime.TIntInt64VV_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TIntInt64VV self) -> bool

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > *

        """
        return _SnapTime.TIntInt64VV_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TIntInt64VV self) -> bool

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > *

        """
        return _SnapTime.TIntInt64VV_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TIntInt64VV self, long long const & LValN, long long const & RValN) -> long long

        Parameters
        ----------
        LValN: long long const &
        RValN: long long const &

        """
        return _SnapTime.TIntInt64VV_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TIntInt64VV self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntInt64VV_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TIntInt64VV self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntInt64VV_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TIntInt64VV self, long long const & MnLValN, long long const & MxRValN, bool const & Asc) -> long long

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntInt64VV_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TIntInt64VV self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TIntInt64VV_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TIntInt64VV self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TIntInt64VV self)

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > *

        """
        return _SnapTime.TIntInt64VV_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TIntInt64VV self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TIntInt64VV self) -> bool

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > const *

        """
        return _SnapTime.TIntInt64VV_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TIntInt64VV self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TIntInt64VV_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TIntInt64VV self)
        Reverse(TIntInt64VV self, long long LValN, long long RValN)

        Parameters
        ----------
        LValN: long long
        RValN: long long

        """
        return _SnapTime.TIntInt64VV_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TIntInt64VV self)

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > *

        """
        return _SnapTime.TIntInt64VV_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TIntInt64VV self, TIntInt64VV ValV)

        Parameters
        ----------
        ValV: TVec< TVec< TInt64,int64 >,long long > const &

        Intrs(TIntInt64VV self, TIntInt64VV ValV, TIntInt64VV DstValV)

        Parameters
        ----------
        ValV: TVec< TVec< TInt64,int64 >,long long > const &
        DstValV: TVec< TVec< TInt64,int64 >,long long > &

        """
        return _SnapTime.TIntInt64VV_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TIntInt64VV self, TIntInt64VV ValV)

        Parameters
        ----------
        ValV: TVec< TVec< TInt64,int64 >,long long > const &

        Union(TIntInt64VV self, TIntInt64VV ValV, TIntInt64VV DstValV)

        Parameters
        ----------
        ValV: TVec< TVec< TInt64,int64 >,long long > const &
        DstValV: TVec< TVec< TInt64,int64 >,long long > &

        """
        return _SnapTime.TIntInt64VV_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TIntInt64VV self, TIntInt64VV ValV)

        Parameters
        ----------
        ValV: TVec< TVec< TInt64,int64 >,long long > const &

        Diff(TIntInt64VV self, TIntInt64VV ValV, TIntInt64VV DstValV)

        Parameters
        ----------
        ValV: TVec< TVec< TInt64,int64 >,long long > const &
        DstValV: TVec< TVec< TInt64,int64 >,long long > &

        """
        return _SnapTime.TIntInt64VV_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TIntInt64VV self, TIntInt64VV ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TVec< TInt64,int64 >,long long > const &

        """
        return _SnapTime.TIntInt64VV_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TIntInt64VV self, TIntInt64VV ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TVec< TInt64,int64 >,long long > const &

        """
        return _SnapTime.TIntInt64VV_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TIntInt64VV self, TInt64V Val) -> long long

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TIntInt64VV self, TInt64V Val) -> long long

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &

        SearchBin(TIntInt64VV self, TInt64V Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &
        InsValN: long long &

        """
        return _SnapTime.TIntInt64VV_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TIntInt64VV self, TInt64V Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &
        InsValN: long long &

        """
        return _SnapTime.TIntInt64VV_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TIntInt64VV self, TInt64V Val, long long const & BValN=0) -> long long

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &
        BValN: long long const &

        SearchForw(TIntInt64VV self, TInt64V Val) -> long long

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TIntInt64VV self, TInt64V Val) -> long long

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TIntInt64VV self, TIntInt64VV ValV, long long const & BValN=0) -> long long

        Parameters
        ----------
        ValV: TVec< TVec< TInt64,int64 >,long long > const &
        BValN: long long const &

        SearchVForw(TIntInt64VV self, TIntInt64VV ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TVec< TInt64,int64 >,long long > const &

        """
        return _SnapTime.TIntInt64VV_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TIntInt64VV self, TInt64V Val) -> bool

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &

        IsIn(TIntInt64VV self, TInt64V Val, long long & ValN) -> bool

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &
        ValN: long long &

        """
        return _SnapTime.TIntInt64VV_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TIntInt64VV self, TInt64V Val) -> bool

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TIntInt64VV self, TInt64V Val) -> TInt64V

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TIntInt64VV self, TInt64V Val) -> TInt64V

        Parameters
        ----------
        Val: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TIntInt64VV self) -> long long

        Parameters
        ----------
        self: TVec< TVec< TInt64,int64 >,int64 > const *

        """
        return _SnapTime.TIntInt64VV_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TInt64V Val1) -> TIntInt64VV

        Parameters
        ----------
        Val1: TVec< TInt64,int64 > const &

        GetV(TInt64V Val1, TInt64V Val2) -> TIntInt64VV

        Parameters
        ----------
        Val1: TVec< TInt64,int64 > const &
        Val2: TVec< TInt64,int64 > const &

        GetV(TInt64V Val1, TInt64V Val2, TInt64V Val3) -> TIntInt64VV

        Parameters
        ----------
        Val1: TVec< TInt64,int64 > const &
        Val2: TVec< TInt64,int64 > const &
        Val3: TVec< TInt64,int64 > const &

        GetV(TInt64V Val1, TInt64V Val2, TInt64V Val3, TInt64V Val4) -> TIntInt64VV

        Parameters
        ----------
        Val1: TVec< TInt64,int64 > const &
        Val2: TVec< TInt64,int64 > const &
        Val3: TVec< TInt64,int64 > const &
        Val4: TVec< TInt64,int64 > const &

        GetV(TInt64V Val1, TInt64V Val2, TInt64V Val3, TInt64V Val4, TInt64V Val5) -> TIntInt64VV

        Parameters
        ----------
        Val1: TVec< TInt64,int64 > const &
        Val2: TVec< TInt64,int64 > const &
        Val3: TVec< TInt64,int64 > const &
        Val4: TVec< TInt64,int64 > const &
        Val5: TVec< TInt64,int64 > const &

        GetV(TInt64V Val1, TInt64V Val2, TInt64V Val3, TInt64V Val4, TInt64V Val5, TInt64V Val6) -> TIntInt64VV

        Parameters
        ----------
        Val1: TVec< TInt64,int64 > const &
        Val2: TVec< TInt64,int64 > const &
        Val3: TVec< TInt64,int64 > const &
        Val4: TVec< TInt64,int64 > const &
        Val5: TVec< TInt64,int64 > const &
        Val6: TVec< TInt64,int64 > const &

        GetV(TInt64V Val1, TInt64V Val2, TInt64V Val3, TInt64V Val4, TInt64V Val5, TInt64V Val6, TInt64V Val7) -> TIntInt64VV

        Parameters
        ----------
        Val1: TVec< TInt64,int64 > const &
        Val2: TVec< TInt64,int64 > const &
        Val3: TVec< TInt64,int64 > const &
        Val4: TVec< TInt64,int64 > const &
        Val5: TVec< TInt64,int64 > const &
        Val6: TVec< TInt64,int64 > const &
        Val7: TVec< TInt64,int64 > const &

        GetV(TInt64V Val1, TInt64V Val2, TInt64V Val3, TInt64V Val4, TInt64V Val5, TInt64V Val6, TInt64V Val7, TInt64V Val8) -> TIntInt64VV

        Parameters
        ----------
        Val1: TVec< TInt64,int64 > const &
        Val2: TVec< TInt64,int64 > const &
        Val3: TVec< TInt64,int64 > const &
        Val4: TVec< TInt64,int64 > const &
        Val5: TVec< TInt64,int64 > const &
        Val6: TVec< TInt64,int64 > const &
        Val7: TVec< TInt64,int64 > const &
        Val8: TVec< TInt64,int64 > const &

        GetV(TInt64V Val1, TInt64V Val2, TInt64V Val3, TInt64V Val4, TInt64V Val5, TInt64V Val6, TInt64V Val7, TInt64V Val8, TInt64V Val9) -> TIntInt64VV

        Parameters
        ----------
        Val1: TVec< TInt64,int64 > const &
        Val2: TVec< TInt64,int64 > const &
        Val3: TVec< TInt64,int64 > const &
        Val4: TVec< TInt64,int64 > const &
        Val5: TVec< TInt64,int64 > const &
        Val6: TVec< TInt64,int64 > const &
        Val7: TVec< TInt64,int64 > const &
        Val8: TVec< TInt64,int64 > const &
        Val9: TVec< TInt64,int64 > const &

        """
        return _SnapTime.TIntInt64VV_GetV(*args)

    GetV = staticmethod(GetV)
TIntInt64VV.LoadShM = new_instancemethod(_SnapTime.TIntInt64VV_LoadShM, None, TIntInt64VV)
TIntInt64VV.Load = new_instancemethod(_SnapTime.TIntInt64VV_Load, None, TIntInt64VV)
TIntInt64VV.Save = new_instancemethod(_SnapTime.TIntInt64VV_Save, None, TIntInt64VV)
TIntInt64VV.__add__ = new_instancemethod(_SnapTime.TIntInt64VV___add__, None, TIntInt64VV)
TIntInt64VV.__eq__ = new_instancemethod(_SnapTime.TIntInt64VV___eq__, None, TIntInt64VV)
TIntInt64VV.__lt__ = new_instancemethod(_SnapTime.TIntInt64VV___lt__, None, TIntInt64VV)
TIntInt64VV.GetMemUsed = new_instancemethod(_SnapTime.TIntInt64VV_GetMemUsed, None, TIntInt64VV)
TIntInt64VV.GetMemSize = new_instancemethod(_SnapTime.TIntInt64VV_GetMemSize, None, TIntInt64VV)
TIntInt64VV.GetPrimHashCd = new_instancemethod(_SnapTime.TIntInt64VV_GetPrimHashCd, None, TIntInt64VV)
TIntInt64VV.GetSecHashCd = new_instancemethod(_SnapTime.TIntInt64VV_GetSecHashCd, None, TIntInt64VV)
TIntInt64VV.Gen = new_instancemethod(_SnapTime.TIntInt64VV_Gen, None, TIntInt64VV)
TIntInt64VV.GenExt = new_instancemethod(_SnapTime.TIntInt64VV_GenExt, None, TIntInt64VV)
TIntInt64VV.IsExt = new_instancemethod(_SnapTime.TIntInt64VV_IsExt, None, TIntInt64VV)
TIntInt64VV.Reserve = new_instancemethod(_SnapTime.TIntInt64VV_Reserve, None, TIntInt64VV)
TIntInt64VV.Clr = new_instancemethod(_SnapTime.TIntInt64VV_Clr, None, TIntInt64VV)
TIntInt64VV.Trunc = new_instancemethod(_SnapTime.TIntInt64VV_Trunc, None, TIntInt64VV)
TIntInt64VV.Reduce = new_instancemethod(_SnapTime.TIntInt64VV_Reduce, None, TIntInt64VV)
TIntInt64VV.Pack = new_instancemethod(_SnapTime.TIntInt64VV_Pack, None, TIntInt64VV)
TIntInt64VV.MoveFrom = new_instancemethod(_SnapTime.TIntInt64VV_MoveFrom, None, TIntInt64VV)
TIntInt64VV.CopyUniqueFrom = new_instancemethod(_SnapTime.TIntInt64VV_CopyUniqueFrom, None, TIntInt64VV)
TIntInt64VV.Empty = new_instancemethod(_SnapTime.TIntInt64VV_Empty, None, TIntInt64VV)
TIntInt64VV.Len = new_instancemethod(_SnapTime.TIntInt64VV_Len, None, TIntInt64VV)
TIntInt64VV.Reserved = new_instancemethod(_SnapTime.TIntInt64VV_Reserved, None, TIntInt64VV)
TIntInt64VV.Last = new_instancemethod(_SnapTime.TIntInt64VV_Last, None, TIntInt64VV)
TIntInt64VV.LastValN = new_instancemethod(_SnapTime.TIntInt64VV_LastValN, None, TIntInt64VV)
TIntInt64VV.LastLast = new_instancemethod(_SnapTime.TIntInt64VV_LastLast, None, TIntInt64VV)
TIntInt64VV.GetRndVal = new_instancemethod(_SnapTime.TIntInt64VV_GetRndVal, None, TIntInt64VV)
TIntInt64VV.BegI = new_instancemethod(_SnapTime.TIntInt64VV_BegI, None, TIntInt64VV)
TIntInt64VV.begin = new_instancemethod(_SnapTime.TIntInt64VV_begin, None, TIntInt64VV)
TIntInt64VV.EndI = new_instancemethod(_SnapTime.TIntInt64VV_EndI, None, TIntInt64VV)
TIntInt64VV.end = new_instancemethod(_SnapTime.TIntInt64VV_end, None, TIntInt64VV)
TIntInt64VV.GetI = new_instancemethod(_SnapTime.TIntInt64VV_GetI, None, TIntInt64VV)
TIntInt64VV.AddMP = new_instancemethod(_SnapTime.TIntInt64VV_AddMP, None, TIntInt64VV)
TIntInt64VV.MoveLastMP = new_instancemethod(_SnapTime.TIntInt64VV_MoveLastMP, None, TIntInt64VV)
TIntInt64VV.AddV = new_instancemethod(_SnapTime.TIntInt64VV_AddV, None, TIntInt64VV)
TIntInt64VV.AddSorted = new_instancemethod(_SnapTime.TIntInt64VV_AddSorted, None, TIntInt64VV)
TIntInt64VV.AddBackSorted = new_instancemethod(_SnapTime.TIntInt64VV_AddBackSorted, None, TIntInt64VV)
TIntInt64VV.AddVMerged = new_instancemethod(_SnapTime.TIntInt64VV_AddVMerged, None, TIntInt64VV)
TIntInt64VV.AddUnique = new_instancemethod(_SnapTime.TIntInt64VV_AddUnique, None, TIntInt64VV)
TIntInt64VV.GetVal = new_instancemethod(_SnapTime.TIntInt64VV_GetVal, None, TIntInt64VV)
TIntInt64VV.SetVal = new_instancemethod(_SnapTime.TIntInt64VV_SetVal, None, TIntInt64VV)
TIntInt64VV.GetSubValV = new_instancemethod(_SnapTime.TIntInt64VV_GetSubValV, None, TIntInt64VV)
TIntInt64VV.Ins = new_instancemethod(_SnapTime.TIntInt64VV_Ins, None, TIntInt64VV)
TIntInt64VV.Del = new_instancemethod(_SnapTime.TIntInt64VV_Del, None, TIntInt64VV)
TIntInt64VV.DelLast = new_instancemethod(_SnapTime.TIntInt64VV_DelLast, None, TIntInt64VV)
TIntInt64VV.DelIfIn = new_instancemethod(_SnapTime.TIntInt64VV_DelIfIn, None, TIntInt64VV)
TIntInt64VV.DelAll = new_instancemethod(_SnapTime.TIntInt64VV_DelAll, None, TIntInt64VV)
TIntInt64VV.PutAll = new_instancemethod(_SnapTime.TIntInt64VV_PutAll, None, TIntInt64VV)
TIntInt64VV.Move = new_instancemethod(_SnapTime.TIntInt64VV_Move, None, TIntInt64VV)
TIntInt64VV.Swap = new_instancemethod(_SnapTime.TIntInt64VV_Swap, None, TIntInt64VV)
TIntInt64VV.Get32BitVector = new_instancemethod(_SnapTime.TIntInt64VV_Get32BitVector, None, TIntInt64VV)
TIntInt64VV.NextPerm = new_instancemethod(_SnapTime.TIntInt64VV_NextPerm, None, TIntInt64VV)
TIntInt64VV.PrevPerm = new_instancemethod(_SnapTime.TIntInt64VV_PrevPerm, None, TIntInt64VV)
TIntInt64VV.GetPivotValN = new_instancemethod(_SnapTime.TIntInt64VV_GetPivotValN, None, TIntInt64VV)
TIntInt64VV.BSort = new_instancemethod(_SnapTime.TIntInt64VV_BSort, None, TIntInt64VV)
TIntInt64VV.ISort = new_instancemethod(_SnapTime.TIntInt64VV_ISort, None, TIntInt64VV)
TIntInt64VV.Partition = new_instancemethod(_SnapTime.TIntInt64VV_Partition, None, TIntInt64VV)
TIntInt64VV.QSort = new_instancemethod(_SnapTime.TIntInt64VV_QSort, None, TIntInt64VV)
TIntInt64VV.Sort = new_instancemethod(_SnapTime.TIntInt64VV_Sort, None, TIntInt64VV)
TIntInt64VV.IsSorted = new_instancemethod(_SnapTime.TIntInt64VV_IsSorted, None, TIntInt64VV)
TIntInt64VV.Shuffle = new_instancemethod(_SnapTime.TIntInt64VV_Shuffle, None, TIntInt64VV)
TIntInt64VV.Reverse = new_instancemethod(_SnapTime.TIntInt64VV_Reverse, None, TIntInt64VV)
TIntInt64VV.Merge = new_instancemethod(_SnapTime.TIntInt64VV_Merge, None, TIntInt64VV)
TIntInt64VV.Intrs = new_instancemethod(_SnapTime.TIntInt64VV_Intrs, None, TIntInt64VV)
TIntInt64VV.Union = new_instancemethod(_SnapTime.TIntInt64VV_Union, None, TIntInt64VV)
TIntInt64VV.Diff = new_instancemethod(_SnapTime.TIntInt64VV_Diff, None, TIntInt64VV)
TIntInt64VV.IntrsLen = new_instancemethod(_SnapTime.TIntInt64VV_IntrsLen, None, TIntInt64VV)
TIntInt64VV.UnionLen = new_instancemethod(_SnapTime.TIntInt64VV_UnionLen, None, TIntInt64VV)
TIntInt64VV.Count = new_instancemethod(_SnapTime.TIntInt64VV_Count, None, TIntInt64VV)
TIntInt64VV.SearchBin = new_instancemethod(_SnapTime.TIntInt64VV_SearchBin, None, TIntInt64VV)
TIntInt64VV.SearchBinLeft = new_instancemethod(_SnapTime.TIntInt64VV_SearchBinLeft, None, TIntInt64VV)
TIntInt64VV.SearchForw = new_instancemethod(_SnapTime.TIntInt64VV_SearchForw, None, TIntInt64VV)
TIntInt64VV.SearchBack = new_instancemethod(_SnapTime.TIntInt64VV_SearchBack, None, TIntInt64VV)
TIntInt64VV.SearchVForw = new_instancemethod(_SnapTime.TIntInt64VV_SearchVForw, None, TIntInt64VV)
TIntInt64VV.IsIn = new_instancemethod(_SnapTime.TIntInt64VV_IsIn, None, TIntInt64VV)
TIntInt64VV.IsInBin = new_instancemethod(_SnapTime.TIntInt64VV_IsInBin, None, TIntInt64VV)
TIntInt64VV.GetDat = new_instancemethod(_SnapTime.TIntInt64VV_GetDat, None, TIntInt64VV)
TIntInt64VV.GetAddDat = new_instancemethod(_SnapTime.TIntInt64VV_GetAddDat, None, TIntInt64VV)
TIntInt64VV.GetMxValN = new_instancemethod(_SnapTime.TIntInt64VV_GetMxValN, None, TIntInt64VV)
TIntInt64VV_swigregister = _SnapTime.TIntInt64VV_swigregister
TIntInt64VV_swigregister(TIntInt64VV)

def TIntInt64VV_SwapI(LVal, RVal):
    """
    TIntInt64VV_SwapI(TInt64V LVal, TInt64V RVal)

    Parameters
    ----------
    LVal: TVec< TVec< TInt64,long long >,long long >::TIter
    RVal: TVec< TVec< TInt64,long long >,long long >::TIter

    """
    return _SnapTime.TIntInt64VV_SwapI(LVal, RVal)

def TIntInt64VV_GetV(*args):
    """
    GetV(TInt64V Val1) -> TIntInt64VV

    Parameters
    ----------
    Val1: TVec< TInt64,int64 > const &

    GetV(TInt64V Val1, TInt64V Val2) -> TIntInt64VV

    Parameters
    ----------
    Val1: TVec< TInt64,int64 > const &
    Val2: TVec< TInt64,int64 > const &

    GetV(TInt64V Val1, TInt64V Val2, TInt64V Val3) -> TIntInt64VV

    Parameters
    ----------
    Val1: TVec< TInt64,int64 > const &
    Val2: TVec< TInt64,int64 > const &
    Val3: TVec< TInt64,int64 > const &

    GetV(TInt64V Val1, TInt64V Val2, TInt64V Val3, TInt64V Val4) -> TIntInt64VV

    Parameters
    ----------
    Val1: TVec< TInt64,int64 > const &
    Val2: TVec< TInt64,int64 > const &
    Val3: TVec< TInt64,int64 > const &
    Val4: TVec< TInt64,int64 > const &

    GetV(TInt64V Val1, TInt64V Val2, TInt64V Val3, TInt64V Val4, TInt64V Val5) -> TIntInt64VV

    Parameters
    ----------
    Val1: TVec< TInt64,int64 > const &
    Val2: TVec< TInt64,int64 > const &
    Val3: TVec< TInt64,int64 > const &
    Val4: TVec< TInt64,int64 > const &
    Val5: TVec< TInt64,int64 > const &

    GetV(TInt64V Val1, TInt64V Val2, TInt64V Val3, TInt64V Val4, TInt64V Val5, TInt64V Val6) -> TIntInt64VV

    Parameters
    ----------
    Val1: TVec< TInt64,int64 > const &
    Val2: TVec< TInt64,int64 > const &
    Val3: TVec< TInt64,int64 > const &
    Val4: TVec< TInt64,int64 > const &
    Val5: TVec< TInt64,int64 > const &
    Val6: TVec< TInt64,int64 > const &

    GetV(TInt64V Val1, TInt64V Val2, TInt64V Val3, TInt64V Val4, TInt64V Val5, TInt64V Val6, TInt64V Val7) -> TIntInt64VV

    Parameters
    ----------
    Val1: TVec< TInt64,int64 > const &
    Val2: TVec< TInt64,int64 > const &
    Val3: TVec< TInt64,int64 > const &
    Val4: TVec< TInt64,int64 > const &
    Val5: TVec< TInt64,int64 > const &
    Val6: TVec< TInt64,int64 > const &
    Val7: TVec< TInt64,int64 > const &

    GetV(TInt64V Val1, TInt64V Val2, TInt64V Val3, TInt64V Val4, TInt64V Val5, TInt64V Val6, TInt64V Val7, TInt64V Val8) -> TIntInt64VV

    Parameters
    ----------
    Val1: TVec< TInt64,int64 > const &
    Val2: TVec< TInt64,int64 > const &
    Val3: TVec< TInt64,int64 > const &
    Val4: TVec< TInt64,int64 > const &
    Val5: TVec< TInt64,int64 > const &
    Val6: TVec< TInt64,int64 > const &
    Val7: TVec< TInt64,int64 > const &
    Val8: TVec< TInt64,int64 > const &

    TIntInt64VV_GetV(TInt64V Val1, TInt64V Val2, TInt64V Val3, TInt64V Val4, TInt64V Val5, TInt64V Val6, TInt64V Val7, TInt64V Val8, TInt64V Val9) -> TIntInt64VV

    Parameters
    ----------
    Val1: TVec< TInt64,int64 > const &
    Val2: TVec< TInt64,int64 > const &
    Val3: TVec< TInt64,int64 > const &
    Val4: TVec< TInt64,int64 > const &
    Val5: TVec< TInt64,int64 > const &
    Val6: TVec< TInt64,int64 > const &
    Val7: TVec< TInt64,int64 > const &
    Val8: TVec< TInt64,int64 > const &
    Val9: TVec< TInt64,int64 > const &

    """
    return _SnapTime.TIntInt64VV_GetV(*args)

class PNEANetV(object):
    """Proxy of C++ TVec<(PNEANet)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_PNEANetV

    def __init__(self, *args):
        """
        __init__(TVec<(PNEANet)> self) -> PNEANetV
        __init__(TVec<(PNEANet)> self, PNEANetV Vec) -> PNEANetV

        Parameters
        ----------
        Vec: TVec< TPt< TNEANet >,int > const &

        __init__(TVec<(PNEANet)> self, PNEANetV Vec) -> PNEANetV

        Parameters
        ----------
        Vec: TVec< TPt< TNEANet >,int > &&

        __init__(TVec<(PNEANet)> self, int const & _Vals) -> PNEANetV

        Parameters
        ----------
        _Vals: int const &

        __init__(TVec<(PNEANet)> self, int const & _MxVals, int const & _Vals) -> PNEANetV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TVec<(PNEANet)> self, int const & _MxVals, int const & _Vals, PNEANet Dat) -> PNEANetV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &
        Dat: TPt< TNEANet >

        __init__(TVec<(PNEANet)> self, PNEANet _ValT, int const & _Vals) -> PNEANetV

        Parameters
        ----------
        _ValT: TPt< TNEANet > *
        _Vals: int const &

        __init__(TVec<(PNEANet)> self, TSIn SIn) -> PNEANetV

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.PNEANetV_swiginit(self, _SnapTime.new_PNEANetV(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(PNEANetV self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.PNEANetV_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(PNEANetV self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.PNEANetV_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(PNEANetV self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.PNEANetV_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(PNEANetV self, PNEANet Val) -> PNEANetV

        Parameters
        ----------
        Val: TPt< TNEANet > const &

        """
        return _SnapTime.PNEANetV___add__(self, Val)


    def GetMemUsed(self):
        """
        GetMemUsed(PNEANetV self) -> int

        Parameters
        ----------
        self: TVec< PNEANet > const *

        """
        return _SnapTime.PNEANetV_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(PNEANetV self) -> int

        Parameters
        ----------
        self: TVec< PNEANet > const *

        """
        return _SnapTime.PNEANetV_GetMemSize(self)


    def Gen(self, *args):
        """
        Gen(PNEANetV self, int const & _Vals)

        Parameters
        ----------
        _Vals: int const &

        Gen(PNEANetV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.PNEANetV_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(PNEANetV self, PNEANet _ValT, int const & _Vals)

        Parameters
        ----------
        _ValT: TPt< TNEANet > *
        _Vals: int const &

        """
        return _SnapTime.PNEANetV_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(PNEANetV self) -> bool

        Parameters
        ----------
        self: TVec< PNEANet > const *

        """
        return _SnapTime.PNEANetV_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(PNEANetV self, int const & _MxVals)

        Parameters
        ----------
        _MxVals: int const &

        Reserve(PNEANetV self, int const & _MxVals, int const & _Vals)

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        """
        return _SnapTime.PNEANetV_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(PNEANetV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(PNEANetV self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(PNEANetV self)

        Parameters
        ----------
        self: TVec< PNEANet > *

        """
        return _SnapTime.PNEANetV_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(PNEANetV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Trunc(PNEANetV self)

        Parameters
        ----------
        self: TVec< PNEANet > *

        """
        return _SnapTime.PNEANetV_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(PNEANetV self, int const & _Vals=-1)

        Parameters
        ----------
        _Vals: int const &

        Reduce(PNEANetV self)

        Parameters
        ----------
        self: TVec< PNEANet > *

        """
        return _SnapTime.PNEANetV_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(PNEANetV self)

        Parameters
        ----------
        self: TVec< PNEANet > *

        """
        return _SnapTime.PNEANetV_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(PNEANetV self, PNEANetV Vec)

        Parameters
        ----------
        Vec: TVec< TPt< TNEANet >,int > &

        """
        return _SnapTime.PNEANetV_MoveFrom(self, Vec)


    def Empty(self):
        """
        Empty(PNEANetV self) -> bool

        Parameters
        ----------
        self: TVec< PNEANet > const *

        """
        return _SnapTime.PNEANetV_Empty(self)


    def Len(self):
        """
        Len(PNEANetV self) -> int

        Parameters
        ----------
        self: TVec< PNEANet > const *

        """
        return _SnapTime.PNEANetV_Len(self)


    def Reserved(self):
        """
        Reserved(PNEANetV self) -> int

        Parameters
        ----------
        self: TVec< PNEANet > const *

        """
        return _SnapTime.PNEANetV_Reserved(self)


    def Last(self, *args):
        """
        Last(PNEANetV self) -> PNEANet
        Last(PNEANetV self) -> PNEANet

        Parameters
        ----------
        self: TVec< PNEANet > *

        """
        return _SnapTime.PNEANetV_Last(self, *args)


    def LastValN(self):
        """
        LastValN(PNEANetV self) -> int

        Parameters
        ----------
        self: TVec< PNEANet > const *

        """
        return _SnapTime.PNEANetV_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(PNEANetV self) -> PNEANet
        LastLast(PNEANetV self) -> PNEANet

        Parameters
        ----------
        self: TVec< PNEANet > *

        """
        return _SnapTime.PNEANetV_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(PNEANetV self, TRnd Rnd) -> PNEANet

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(PNEANetV self) -> PNEANet
        GetRndVal(PNEANetV self, TRnd Rnd) -> PNEANet

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(PNEANetV self) -> PNEANet

        Parameters
        ----------
        self: TVec< PNEANet > *

        """
        return _SnapTime.PNEANetV_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(PNEANetV self) -> PNEANet

        Parameters
        ----------
        self: TVec< PNEANet > const *

        """
        return _SnapTime.PNEANetV_BegI(self)


    def begin(self):
        """
        begin(PNEANetV self) -> PNEANet

        Parameters
        ----------
        self: TVec< PNEANet > const *

        """
        return _SnapTime.PNEANetV_begin(self)


    def EndI(self):
        """
        EndI(PNEANetV self) -> PNEANet

        Parameters
        ----------
        self: TVec< PNEANet > const *

        """
        return _SnapTime.PNEANetV_EndI(self)


    def end(self):
        """
        end(PNEANetV self) -> PNEANet

        Parameters
        ----------
        self: TVec< PNEANet > const *

        """
        return _SnapTime.PNEANetV_end(self)


    def GetI(self, ValN):
        """
        GetI(PNEANetV self, int const & ValN) -> PNEANet

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.PNEANetV_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(PNEANetV self) -> int
        Add(PNEANetV self, PNEANet Val) -> int

        Parameters
        ----------
        Val: TPt< TNEANet > const &

        Add(PNEANetV self, PNEANet Val) -> int

        Parameters
        ----------
        Val: TPt< TNEANet > &

        Add(PNEANetV self, PNEANet Val, int const & ResizeLen) -> int

        Parameters
        ----------
        Val: TPt< TNEANet > const &
        ResizeLen: int const &

        """
        return _SnapTime.PNEANetV_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(PNEANetV self, PNEANet Val) -> int

        Parameters
        ----------
        Val: TPt< TNEANet > const &

        """
        return _SnapTime.PNEANetV_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(PNEANetV self, PNEANet Val, int Inc) -> int

        Parameters
        ----------
        Val: TPt< TNEANet > const &
        Inc: int

        """
        return _SnapTime.PNEANetV_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(PNEANetV self, PNEANetV ValV) -> int

        Parameters
        ----------
        ValV: TVec< TPt< TNEANet >,int > const &

        """
        return _SnapTime.PNEANetV_AddV(self, ValV)


    def GetVal(self, *args):
        """
        GetVal(PNEANetV self, int const & ValN) -> PNEANet

        Parameters
        ----------
        ValN: int const &

        GetVal(PNEANetV self, int const & ValN) -> PNEANet

        Parameters
        ----------
        ValN: int const &

        """
        return _SnapTime.PNEANetV_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(PNEANetV self, int const & ValN, PNEANet Val)

        Parameters
        ----------
        ValN: int const &
        Val: TPt< TNEANet > const &

        """
        return _SnapTime.PNEANetV_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(PNEANetV self, int const & BValN, int const & EValN, PNEANetV ValV)

        Parameters
        ----------
        BValN: int const &
        EValN: int const &
        ValV: TVec< TPt< TNEANet >,int > &

        """
        return _SnapTime.PNEANetV_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(PNEANetV self, int const & ValN, PNEANet Val)

        Parameters
        ----------
        ValN: int const &
        Val: TPt< TNEANet > const &

        """
        return _SnapTime.PNEANetV_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(PNEANetV self, int const & ValN)

        Parameters
        ----------
        ValN: int const &

        Del(PNEANetV self, int const & MnValN, int const & MxValN)

        Parameters
        ----------
        MnValN: int const &
        MxValN: int const &

        """
        return _SnapTime.PNEANetV_Del(self, *args)


    def DelLast(self):
        """
        DelLast(PNEANetV self)

        Parameters
        ----------
        self: TVec< PNEANet > *

        """
        return _SnapTime.PNEANetV_DelLast(self)


    def PutAll(self, Val):
        """
        PutAll(PNEANetV self, PNEANet Val)

        Parameters
        ----------
        Val: TPt< TNEANet > const &

        """
        return _SnapTime.PNEANetV_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(PNEANetV self, int const & FromValN, int const & ToValN)

        Parameters
        ----------
        FromValN: int const &
        ToValN: int const &

        """
        return _SnapTime.PNEANetV_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(PNEANetV self, PNEANetV Vec)

        Parameters
        ----------
        Vec: TVec< TPt< TNEANet >,int > &

        Swap(PNEANetV self, int const & ValN1, int const & ValN2)

        Parameters
        ----------
        ValN1: int const &
        ValN2: int const &

        """
        return _SnapTime.PNEANetV_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(PNEANet LVal, PNEANet RVal)

        Parameters
        ----------
        LVal: TVec< TPt< TNEANet > >::TIter
        RVal: TVec< TPt< TNEANet > >::TIter

        """
        return _SnapTime.PNEANetV_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(PNEANetV self) -> PNEANetV

        Parameters
        ----------
        self: TVec< PNEANet > *

        """
        return _SnapTime.PNEANetV_Get32BitVector(self)


    def Shuffle(self, Rnd):
        """
        Shuffle(PNEANetV self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.PNEANetV_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(PNEANetV self)
        Reverse(PNEANetV self, int LValN, int RValN)

        Parameters
        ----------
        LValN: int
        RValN: int

        """
        return _SnapTime.PNEANetV_Reverse(self, *args)


    def GetV(*args):
        """
        GetV(PNEANet Val1) -> PNEANetV

        Parameters
        ----------
        Val1: TPt< TNEANet > const &

        GetV(PNEANet Val1, PNEANet Val2) -> PNEANetV

        Parameters
        ----------
        Val1: TPt< TNEANet > const &
        Val2: TPt< TNEANet > const &

        GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3) -> PNEANetV

        Parameters
        ----------
        Val1: TPt< TNEANet > const &
        Val2: TPt< TNEANet > const &
        Val3: TPt< TNEANet > const &

        GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4) -> PNEANetV

        Parameters
        ----------
        Val1: TPt< TNEANet > const &
        Val2: TPt< TNEANet > const &
        Val3: TPt< TNEANet > const &
        Val4: TPt< TNEANet > const &

        GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, PNEANet Val5) -> PNEANetV

        Parameters
        ----------
        Val1: TPt< TNEANet > const &
        Val2: TPt< TNEANet > const &
        Val3: TPt< TNEANet > const &
        Val4: TPt< TNEANet > const &
        Val5: TPt< TNEANet > const &

        GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, PNEANet Val5, PNEANet Val6) -> PNEANetV

        Parameters
        ----------
        Val1: TPt< TNEANet > const &
        Val2: TPt< TNEANet > const &
        Val3: TPt< TNEANet > const &
        Val4: TPt< TNEANet > const &
        Val5: TPt< TNEANet > const &
        Val6: TPt< TNEANet > const &

        GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, PNEANet Val5, PNEANet Val6, PNEANet Val7) -> PNEANetV

        Parameters
        ----------
        Val1: TPt< TNEANet > const &
        Val2: TPt< TNEANet > const &
        Val3: TPt< TNEANet > const &
        Val4: TPt< TNEANet > const &
        Val5: TPt< TNEANet > const &
        Val6: TPt< TNEANet > const &
        Val7: TPt< TNEANet > const &

        GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, PNEANet Val5, PNEANet Val6, PNEANet Val7, PNEANet Val8) -> PNEANetV

        Parameters
        ----------
        Val1: TPt< TNEANet > const &
        Val2: TPt< TNEANet > const &
        Val3: TPt< TNEANet > const &
        Val4: TPt< TNEANet > const &
        Val5: TPt< TNEANet > const &
        Val6: TPt< TNEANet > const &
        Val7: TPt< TNEANet > const &
        Val8: TPt< TNEANet > const &

        GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, PNEANet Val5, PNEANet Val6, PNEANet Val7, PNEANet Val8, PNEANet Val9) -> PNEANetV

        Parameters
        ----------
        Val1: TPt< TNEANet > const &
        Val2: TPt< TNEANet > const &
        Val3: TPt< TNEANet > const &
        Val4: TPt< TNEANet > const &
        Val5: TPt< TNEANet > const &
        Val6: TPt< TNEANet > const &
        Val7: TPt< TNEANet > const &
        Val8: TPt< TNEANet > const &
        Val9: TPt< TNEANet > const &

        """
        return _SnapTime.PNEANetV_GetV(*args)

    GetV = staticmethod(GetV)
PNEANetV.LoadShM = new_instancemethod(_SnapTime.PNEANetV_LoadShM, None, PNEANetV)
PNEANetV.Load = new_instancemethod(_SnapTime.PNEANetV_Load, None, PNEANetV)
PNEANetV.Save = new_instancemethod(_SnapTime.PNEANetV_Save, None, PNEANetV)
PNEANetV.__add__ = new_instancemethod(_SnapTime.PNEANetV___add__, None, PNEANetV)
PNEANetV.GetMemUsed = new_instancemethod(_SnapTime.PNEANetV_GetMemUsed, None, PNEANetV)
PNEANetV.GetMemSize = new_instancemethod(_SnapTime.PNEANetV_GetMemSize, None, PNEANetV)
PNEANetV.Gen = new_instancemethod(_SnapTime.PNEANetV_Gen, None, PNEANetV)
PNEANetV.GenExt = new_instancemethod(_SnapTime.PNEANetV_GenExt, None, PNEANetV)
PNEANetV.IsExt = new_instancemethod(_SnapTime.PNEANetV_IsExt, None, PNEANetV)
PNEANetV.Reserve = new_instancemethod(_SnapTime.PNEANetV_Reserve, None, PNEANetV)
PNEANetV.Clr = new_instancemethod(_SnapTime.PNEANetV_Clr, None, PNEANetV)
PNEANetV.Trunc = new_instancemethod(_SnapTime.PNEANetV_Trunc, None, PNEANetV)
PNEANetV.Reduce = new_instancemethod(_SnapTime.PNEANetV_Reduce, None, PNEANetV)
PNEANetV.Pack = new_instancemethod(_SnapTime.PNEANetV_Pack, None, PNEANetV)
PNEANetV.MoveFrom = new_instancemethod(_SnapTime.PNEANetV_MoveFrom, None, PNEANetV)
PNEANetV.Empty = new_instancemethod(_SnapTime.PNEANetV_Empty, None, PNEANetV)
PNEANetV.Len = new_instancemethod(_SnapTime.PNEANetV_Len, None, PNEANetV)
PNEANetV.Reserved = new_instancemethod(_SnapTime.PNEANetV_Reserved, None, PNEANetV)
PNEANetV.Last = new_instancemethod(_SnapTime.PNEANetV_Last, None, PNEANetV)
PNEANetV.LastValN = new_instancemethod(_SnapTime.PNEANetV_LastValN, None, PNEANetV)
PNEANetV.LastLast = new_instancemethod(_SnapTime.PNEANetV_LastLast, None, PNEANetV)
PNEANetV.GetRndVal = new_instancemethod(_SnapTime.PNEANetV_GetRndVal, None, PNEANetV)
PNEANetV.BegI = new_instancemethod(_SnapTime.PNEANetV_BegI, None, PNEANetV)
PNEANetV.begin = new_instancemethod(_SnapTime.PNEANetV_begin, None, PNEANetV)
PNEANetV.EndI = new_instancemethod(_SnapTime.PNEANetV_EndI, None, PNEANetV)
PNEANetV.end = new_instancemethod(_SnapTime.PNEANetV_end, None, PNEANetV)
PNEANetV.GetI = new_instancemethod(_SnapTime.PNEANetV_GetI, None, PNEANetV)
PNEANetV.Add = new_instancemethod(_SnapTime.PNEANetV_Add, None, PNEANetV)
PNEANetV.AddMP = new_instancemethod(_SnapTime.PNEANetV_AddMP, None, PNEANetV)
PNEANetV.MoveLastMP = new_instancemethod(_SnapTime.PNEANetV_MoveLastMP, None, PNEANetV)
PNEANetV.AddV = new_instancemethod(_SnapTime.PNEANetV_AddV, None, PNEANetV)
PNEANetV.GetVal = new_instancemethod(_SnapTime.PNEANetV_GetVal, None, PNEANetV)
PNEANetV.SetVal = new_instancemethod(_SnapTime.PNEANetV_SetVal, None, PNEANetV)
PNEANetV.GetSubValV = new_instancemethod(_SnapTime.PNEANetV_GetSubValV, None, PNEANetV)
PNEANetV.Ins = new_instancemethod(_SnapTime.PNEANetV_Ins, None, PNEANetV)
PNEANetV.Del = new_instancemethod(_SnapTime.PNEANetV_Del, None, PNEANetV)
PNEANetV.DelLast = new_instancemethod(_SnapTime.PNEANetV_DelLast, None, PNEANetV)
PNEANetV.PutAll = new_instancemethod(_SnapTime.PNEANetV_PutAll, None, PNEANetV)
PNEANetV.Move = new_instancemethod(_SnapTime.PNEANetV_Move, None, PNEANetV)
PNEANetV.Swap = new_instancemethod(_SnapTime.PNEANetV_Swap, None, PNEANetV)
PNEANetV.Get32BitVector = new_instancemethod(_SnapTime.PNEANetV_Get32BitVector, None, PNEANetV)
PNEANetV.Shuffle = new_instancemethod(_SnapTime.PNEANetV_Shuffle, None, PNEANetV)
PNEANetV.Reverse = new_instancemethod(_SnapTime.PNEANetV_Reverse, None, PNEANetV)
PNEANetV_swigregister = _SnapTime.PNEANetV_swigregister
PNEANetV_swigregister(PNEANetV)

def PNEANetV_SwapI(LVal, RVal):
    """
    PNEANetV_SwapI(PNEANet LVal, PNEANet RVal)

    Parameters
    ----------
    LVal: TVec< TPt< TNEANet > >::TIter
    RVal: TVec< TPt< TNEANet > >::TIter

    """
    return _SnapTime.PNEANetV_SwapI(LVal, RVal)

def PNEANetV_GetV(*args):
    """
    GetV(PNEANet Val1) -> PNEANetV

    Parameters
    ----------
    Val1: TPt< TNEANet > const &

    GetV(PNEANet Val1, PNEANet Val2) -> PNEANetV

    Parameters
    ----------
    Val1: TPt< TNEANet > const &
    Val2: TPt< TNEANet > const &

    GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3) -> PNEANetV

    Parameters
    ----------
    Val1: TPt< TNEANet > const &
    Val2: TPt< TNEANet > const &
    Val3: TPt< TNEANet > const &

    GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4) -> PNEANetV

    Parameters
    ----------
    Val1: TPt< TNEANet > const &
    Val2: TPt< TNEANet > const &
    Val3: TPt< TNEANet > const &
    Val4: TPt< TNEANet > const &

    GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, PNEANet Val5) -> PNEANetV

    Parameters
    ----------
    Val1: TPt< TNEANet > const &
    Val2: TPt< TNEANet > const &
    Val3: TPt< TNEANet > const &
    Val4: TPt< TNEANet > const &
    Val5: TPt< TNEANet > const &

    GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, PNEANet Val5, PNEANet Val6) -> PNEANetV

    Parameters
    ----------
    Val1: TPt< TNEANet > const &
    Val2: TPt< TNEANet > const &
    Val3: TPt< TNEANet > const &
    Val4: TPt< TNEANet > const &
    Val5: TPt< TNEANet > const &
    Val6: TPt< TNEANet > const &

    GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, PNEANet Val5, PNEANet Val6, PNEANet Val7) -> PNEANetV

    Parameters
    ----------
    Val1: TPt< TNEANet > const &
    Val2: TPt< TNEANet > const &
    Val3: TPt< TNEANet > const &
    Val4: TPt< TNEANet > const &
    Val5: TPt< TNEANet > const &
    Val6: TPt< TNEANet > const &
    Val7: TPt< TNEANet > const &

    GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, PNEANet Val5, PNEANet Val6, PNEANet Val7, PNEANet Val8) -> PNEANetV

    Parameters
    ----------
    Val1: TPt< TNEANet > const &
    Val2: TPt< TNEANet > const &
    Val3: TPt< TNEANet > const &
    Val4: TPt< TNEANet > const &
    Val5: TPt< TNEANet > const &
    Val6: TPt< TNEANet > const &
    Val7: TPt< TNEANet > const &
    Val8: TPt< TNEANet > const &

    PNEANetV_GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, PNEANet Val5, PNEANet Val6, PNEANet Val7, PNEANet Val8, PNEANet Val9) -> PNEANetV

    Parameters
    ----------
    Val1: TPt< TNEANet > const &
    Val2: TPt< TNEANet > const &
    Val3: TPt< TNEANet > const &
    Val4: TPt< TNEANet > const &
    Val5: TPt< TNEANet > const &
    Val6: TPt< TNEANet > const &
    Val7: TPt< TNEANet > const &
    Val8: TPt< TNEANet > const &
    Val9: TPt< TNEANet > const &

    """
    return _SnapTime.PNEANetV_GetV(*args)

class TIntH(object):
    """Proxy of C++ THash<(TInt,TInt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _SnapTime.TIntH_HashPrimes

    def __init__(self, *args):
        """
        __init__(THash<(TInt,TInt)> self) -> TIntH
        __init__(THash<(TInt,TInt)> self, TIntH Hash) -> TIntH

        Parameters
        ----------
        Hash: THash< TInt,TInt > const &

        __init__(THash<(TInt,TInt)> self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(THash<(TInt,TInt)> self, int const & ExpectVals) -> TIntH

        Parameters
        ----------
        ExpectVals: int const &

        __init__(THash<(TInt,TInt)> self, TSIn SIn) -> TIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntH_swiginit(self, _SnapTime.new_TIntH(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntH self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntH_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntH self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntH_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntH self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntH_Save(self, SOut)


    def __eq__(self, Hash):
        """
        __eq__(TIntH self, TIntH Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt,TInt > const &

        """
        return _SnapTime.TIntH___eq__(self, Hash)


    def __lt__(self, Hash):
        """
        __lt__(TIntH self, TIntH Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt,TInt > const &

        """
        return _SnapTime.TIntH___lt__(self, Hash)


    def __call__(self, Key):
        """
        __call__(TIntH self, TInt Key) -> TInt

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntH___call__(self, Key)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntH self) -> ::TSize

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntH_GetMemUsed(self)


    def BegI(self):
        """
        BegI(TIntH self) -> TIntHI

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntH_BegI(self)


    def EndI(self):
        """
        EndI(TIntH self) -> TIntHI

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntH_EndI(self)


    def begin(self):
        """
        begin(TIntH self) -> TIntHI

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntH_begin(self)


    def end(self):
        """
        end(TIntH self) -> TIntHI

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntH_end(self)


    def GetI(self, Key):
        """
        GetI(TIntH self, TInt Key) -> TIntHI

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntH_GetI(self, Key)


    def Gen(self, ExpectVals):
        """
        Gen(TIntH self, int const & ExpectVals)

        Parameters
        ----------
        ExpectVals: int const &

        """
        return _SnapTime.TIntH_Gen(self, ExpectVals)


    def Clr(self, DoDel=True, NoDelLim=-1, ResetDat=True):
        """
        Clr(TIntH self, bool const & DoDel=True, int const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &
        ResetDat: bool const &

        Clr(TIntH self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TIntH self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntH self)

        Parameters
        ----------
        self: THash< TInt,TInt > *

        """
        return _SnapTime.TIntH_Clr(self, DoDel, NoDelLim, ResetDat)


    def Empty(self):
        """
        Empty(TIntH self) -> bool

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntH_Empty(self)


    def Len(self):
        """
        Len(TIntH self) -> int

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntH_Len(self)


    def GetPorts(self):
        """
        GetPorts(TIntH self) -> int

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntH_GetPorts(self)


    def IsAutoSize(self):
        """
        IsAutoSize(TIntH self) -> bool

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntH_IsAutoSize(self)


    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TIntH self) -> int

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntH_GetMxKeyIds(self)


    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TIntH self) -> int

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntH_GetReservedKeyIds(self)


    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TIntH self) -> bool

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntH_IsKeyIdEqKeyN(self)


    def AddKey(self, Key):
        """
        AddKey(TIntH self, TInt Key) -> int

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntH_AddKey(self, Key)


    def AddDat(self, *args):
        """
        AddDat(TIntH self, TInt Key) -> TInt

        Parameters
        ----------
        Key: TInt const &

        AddDat(TIntH self, TInt Key, TInt Dat) -> TInt

        Parameters
        ----------
        Key: TInt const &
        Dat: TInt const &

        """
        return _SnapTime.TIntH_AddDat(self, *args)


    def DelKey(self, Key):
        """
        DelKey(TIntH self, TInt Key)

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntH_DelKey(self, Key)


    def DelIfKey(self, Key):
        """
        DelIfKey(TIntH self, TInt Key) -> bool

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntH_DelIfKey(self, Key)


    def DelKeyId(self, KeyId):
        """
        DelKeyId(TIntH self, int const & KeyId)

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntH_DelKeyId(self, KeyId)


    def DelKeyIdV(self, KeyIdV):
        """
        DelKeyIdV(TIntH self, TInt64V KeyIdV)

        Parameters
        ----------
        KeyIdV: TInt64V const &

        """
        return _SnapTime.TIntH_DelKeyIdV(self, KeyIdV)


    def GetKey(self, KeyId):
        """
        GetKey(TIntH self, int const & KeyId) -> TInt

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntH_GetKey(self, KeyId)


    def GetKeyId(self, Key):
        """
        GetKeyId(TIntH self, TInt Key) -> int

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntH_GetKeyId(self, Key)


    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TIntH self, TRnd Rnd) -> int

        Parameters
        ----------
        Rnd: TRnd &

        GetRndKeyId(TIntH self, TRnd Rnd, double const & EmptyFrac) -> int

        Parameters
        ----------
        Rnd: TRnd &
        EmptyFrac: double const &

        """
        return _SnapTime.TIntH_GetRndKeyId(self, *args)


    def IsKey(self, *args):
        """
        IsKey(TIntH self, TInt Key) -> bool

        Parameters
        ----------
        Key: TInt const &

        IsKey(TIntH self, TInt Key, int & KeyId) -> bool

        Parameters
        ----------
        Key: TInt const &
        KeyId: int &

        """
        return _SnapTime.TIntH_IsKey(self, *args)


    def IsKeyId(self, KeyId):
        """
        IsKeyId(TIntH self, int const & KeyId) -> bool

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntH_IsKeyId(self, KeyId)


    def GetDat(self, *args):
        """
        GetDat(TIntH self, TInt Key) -> TInt

        Parameters
        ----------
        Key: TInt const &

        GetDat(TIntH self, TInt Key) -> TInt

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntH_GetDat(self, *args)


    def GetDatWithDefault(self, Key, DefaultValue):
        """
        GetDatWithDefault(TIntH self, TInt Key, TInt DefaultValue) -> TInt

        Parameters
        ----------
        Key: TInt const &
        DefaultValue: TInt

        """
        return _SnapTime.TIntH_GetDatWithDefault(self, Key, DefaultValue)


    def GetKeyDat(self, KeyId, Key, Dat):
        """
        GetKeyDat(TIntH self, int const & KeyId, TInt Key, TInt Dat)

        Parameters
        ----------
        KeyId: int const &
        Key: TInt &
        Dat: TInt &

        """
        return _SnapTime.TIntH_GetKeyDat(self, KeyId, Key, Dat)


    def IsKeyGetDat(self, Key, Dat):
        """
        IsKeyGetDat(TIntH self, TInt Key, TInt Dat) -> bool

        Parameters
        ----------
        Key: TInt const &
        Dat: TInt &

        """
        return _SnapTime.TIntH_IsKeyGetDat(self, Key, Dat)


    def FFirstKeyId(self):
        """
        FFirstKeyId(TIntH self) -> int

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntH_FFirstKeyId(self)


    def FNextKeyId(self, KeyId):
        """
        FNextKeyId(TIntH self, int & KeyId) -> bool

        Parameters
        ----------
        KeyId: int &

        """
        return _SnapTime.TIntH_FNextKeyId(self, KeyId)


    def GetKeyV(self, KeyV):
        """
        GetKeyV(TIntH self, TIntV KeyV)

        Parameters
        ----------
        KeyV: TVec< TInt,int > &

        """
        return _SnapTime.TIntH_GetKeyV(self, KeyV)


    def GetDatV(self, DatV):
        """
        GetDatV(TIntH self, TIntV DatV)

        Parameters
        ----------
        DatV: TVec< TInt,int > &

        """
        return _SnapTime.TIntH_GetDatV(self, DatV)


    def GetKeyDatPrV(self, KeyDatPrV):
        """
        GetKeyDatPrV(TIntH self, TIntPrV KeyDatPrV)

        Parameters
        ----------
        KeyDatPrV: TVec< TPair< TInt,TInt >,int > &

        """
        return _SnapTime.TIntH_GetKeyDatPrV(self, KeyDatPrV)


    def GetDatKeyPrV(self, DatKeyPrV):
        """
        GetDatKeyPrV(TIntH self, TIntPrV DatKeyPrV)

        Parameters
        ----------
        DatKeyPrV: TVec< TPair< TInt,TInt >,int > &

        """
        return _SnapTime.TIntH_GetDatKeyPrV(self, DatKeyPrV)


    def GetKeyDatKdV(self, KeyDatKdV):
        """
        GetKeyDatKdV(TIntH self, TVec< TKeyDat< TInt,TInt >,int > & KeyDatKdV)

        Parameters
        ----------
        KeyDatKdV: TVec< TKeyDat< TInt,TInt >,int > &

        """
        return _SnapTime.TIntH_GetKeyDatKdV(self, KeyDatKdV)


    def GetDatKeyKdV(self, DatKeyKdV):
        """
        GetDatKeyKdV(TIntH self, TVec< TKeyDat< TInt,TInt >,int > & DatKeyKdV)

        Parameters
        ----------
        DatKeyKdV: TVec< TKeyDat< TInt,TInt >,int > &

        """
        return _SnapTime.TIntH_GetDatKeyKdV(self, DatKeyKdV)


    def Swap(self, Hash):
        """
        Swap(TIntH self, TIntH Hash)

        Parameters
        ----------
        Hash: THash< TInt,TInt > &

        """
        return _SnapTime.TIntH_Swap(self, Hash)


    def Defrag(self):
        """
        Defrag(TIntH self)

        Parameters
        ----------
        self: THash< TInt,TInt > *

        """
        return _SnapTime.TIntH_Defrag(self)


    def Pack(self):
        """
        Pack(TIntH self)

        Parameters
        ----------
        self: THash< TInt,TInt > *

        """
        return _SnapTime.TIntH_Pack(self)


    def Sort(self, CmpKey, Asc):
        """
        Sort(TIntH self, bool const & CmpKey, bool const & Asc)

        Parameters
        ----------
        CmpKey: bool const &
        Asc: bool const &

        """
        return _SnapTime.TIntH_Sort(self, CmpKey, Asc)


    def SortByKey(self, Asc=True):
        """
        SortByKey(TIntH self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByKey(TIntH self)

        Parameters
        ----------
        self: THash< TInt,TInt > *

        """
        return _SnapTime.TIntH_SortByKey(self, Asc)


    def SortByDat(self, Asc=True):
        """
        SortByDat(TIntH self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByDat(TIntH self)

        Parameters
        ----------
        self: THash< TInt,TInt > *

        """
        return _SnapTime.TIntH_SortByDat(self, Asc)

    __swig_destroy__ = _SnapTime.delete_TIntH
TIntH.LoadShM = new_instancemethod(_SnapTime.TIntH_LoadShM, None, TIntH)
TIntH.Load = new_instancemethod(_SnapTime.TIntH_Load, None, TIntH)
TIntH.Save = new_instancemethod(_SnapTime.TIntH_Save, None, TIntH)
TIntH.__eq__ = new_instancemethod(_SnapTime.TIntH___eq__, None, TIntH)
TIntH.__lt__ = new_instancemethod(_SnapTime.TIntH___lt__, None, TIntH)
TIntH.__call__ = new_instancemethod(_SnapTime.TIntH___call__, None, TIntH)
TIntH.GetMemUsed = new_instancemethod(_SnapTime.TIntH_GetMemUsed, None, TIntH)
TIntH.BegI = new_instancemethod(_SnapTime.TIntH_BegI, None, TIntH)
TIntH.EndI = new_instancemethod(_SnapTime.TIntH_EndI, None, TIntH)
TIntH.begin = new_instancemethod(_SnapTime.TIntH_begin, None, TIntH)
TIntH.end = new_instancemethod(_SnapTime.TIntH_end, None, TIntH)
TIntH.GetI = new_instancemethod(_SnapTime.TIntH_GetI, None, TIntH)
TIntH.Gen = new_instancemethod(_SnapTime.TIntH_Gen, None, TIntH)
TIntH.Clr = new_instancemethod(_SnapTime.TIntH_Clr, None, TIntH)
TIntH.Empty = new_instancemethod(_SnapTime.TIntH_Empty, None, TIntH)
TIntH.Len = new_instancemethod(_SnapTime.TIntH_Len, None, TIntH)
TIntH.GetPorts = new_instancemethod(_SnapTime.TIntH_GetPorts, None, TIntH)
TIntH.IsAutoSize = new_instancemethod(_SnapTime.TIntH_IsAutoSize, None, TIntH)
TIntH.GetMxKeyIds = new_instancemethod(_SnapTime.TIntH_GetMxKeyIds, None, TIntH)
TIntH.GetReservedKeyIds = new_instancemethod(_SnapTime.TIntH_GetReservedKeyIds, None, TIntH)
TIntH.IsKeyIdEqKeyN = new_instancemethod(_SnapTime.TIntH_IsKeyIdEqKeyN, None, TIntH)
TIntH.AddKey = new_instancemethod(_SnapTime.TIntH_AddKey, None, TIntH)
TIntH.AddDat = new_instancemethod(_SnapTime.TIntH_AddDat, None, TIntH)
TIntH.DelKey = new_instancemethod(_SnapTime.TIntH_DelKey, None, TIntH)
TIntH.DelIfKey = new_instancemethod(_SnapTime.TIntH_DelIfKey, None, TIntH)
TIntH.DelKeyId = new_instancemethod(_SnapTime.TIntH_DelKeyId, None, TIntH)
TIntH.DelKeyIdV = new_instancemethod(_SnapTime.TIntH_DelKeyIdV, None, TIntH)
TIntH.GetKey = new_instancemethod(_SnapTime.TIntH_GetKey, None, TIntH)
TIntH.GetKeyId = new_instancemethod(_SnapTime.TIntH_GetKeyId, None, TIntH)
TIntH.GetRndKeyId = new_instancemethod(_SnapTime.TIntH_GetRndKeyId, None, TIntH)
TIntH.IsKey = new_instancemethod(_SnapTime.TIntH_IsKey, None, TIntH)
TIntH.IsKeyId = new_instancemethod(_SnapTime.TIntH_IsKeyId, None, TIntH)
TIntH.GetDat = new_instancemethod(_SnapTime.TIntH_GetDat, None, TIntH)
TIntH.GetDatWithDefault = new_instancemethod(_SnapTime.TIntH_GetDatWithDefault, None, TIntH)
TIntH.GetKeyDat = new_instancemethod(_SnapTime.TIntH_GetKeyDat, None, TIntH)
TIntH.IsKeyGetDat = new_instancemethod(_SnapTime.TIntH_IsKeyGetDat, None, TIntH)
TIntH.FFirstKeyId = new_instancemethod(_SnapTime.TIntH_FFirstKeyId, None, TIntH)
TIntH.FNextKeyId = new_instancemethod(_SnapTime.TIntH_FNextKeyId, None, TIntH)
TIntH.GetKeyV = new_instancemethod(_SnapTime.TIntH_GetKeyV, None, TIntH)
TIntH.GetDatV = new_instancemethod(_SnapTime.TIntH_GetDatV, None, TIntH)
TIntH.GetKeyDatPrV = new_instancemethod(_SnapTime.TIntH_GetKeyDatPrV, None, TIntH)
TIntH.GetDatKeyPrV = new_instancemethod(_SnapTime.TIntH_GetDatKeyPrV, None, TIntH)
TIntH.GetKeyDatKdV = new_instancemethod(_SnapTime.TIntH_GetKeyDatKdV, None, TIntH)
TIntH.GetDatKeyKdV = new_instancemethod(_SnapTime.TIntH_GetDatKeyKdV, None, TIntH)
TIntH.Swap = new_instancemethod(_SnapTime.TIntH_Swap, None, TIntH)
TIntH.Defrag = new_instancemethod(_SnapTime.TIntH_Defrag, None, TIntH)
TIntH.Pack = new_instancemethod(_SnapTime.TIntH_Pack, None, TIntH)
TIntH.Sort = new_instancemethod(_SnapTime.TIntH_Sort, None, TIntH)
TIntH.SortByKey = new_instancemethod(_SnapTime.TIntH_SortByKey, None, TIntH)
TIntH.SortByDat = new_instancemethod(_SnapTime.TIntH_SortByDat, None, TIntH)
TIntH_swigregister = _SnapTime.TIntH_swigregister
TIntH_swigregister(TIntH)

class TInt64H(object):
    """Proxy of C++ THash<(TInt64,TInt64,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _SnapTime.TInt64H_HashPrimes

    def __init__(self, *args):
        """
        __init__(THash<(TInt64,TInt64,int64)> self) -> TInt64H
        __init__(THash<(TInt64,TInt64,int64)> self, TInt64H Hash) -> TInt64H

        Parameters
        ----------
        Hash: THash< TInt64,TInt64,int64 > const &

        __init__(THash<(TInt64,TInt64,int64)> self, long long const & ExpectVals, bool const & _AutoSizeP=False) -> TInt64H

        Parameters
        ----------
        ExpectVals: long long const &
        _AutoSizeP: bool const &

        __init__(THash<(TInt64,TInt64,int64)> self, long long const & ExpectVals) -> TInt64H

        Parameters
        ----------
        ExpectVals: long long const &

        __init__(THash<(TInt64,TInt64,int64)> self, TSIn SIn) -> TInt64H

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TInt64H_swiginit(self, _SnapTime.new_TInt64H(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TInt64H self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TInt64H_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TInt64H self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TInt64H_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TInt64H self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TInt64H_Save(self, SOut)


    def __eq__(self, Hash):
        """
        __eq__(TInt64H self, TInt64H Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt64,TInt64,int64 > const &

        """
        return _SnapTime.TInt64H___eq__(self, Hash)


    def __lt__(self, Hash):
        """
        __lt__(TInt64H self, TInt64H Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt64,TInt64,int64 > const &

        """
        return _SnapTime.TInt64H___lt__(self, Hash)


    def __call__(self, Key):
        """
        __call__(TInt64H self, TInt64 Key) -> TInt64

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TInt64H___call__(self, Key)


    def GetMemUsed(self):
        """
        GetMemUsed(TInt64H self) -> ::TSize

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64H_GetMemUsed(self)


    def BegI(self):
        """
        BegI(TInt64H self) -> TInt64HI

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64H_BegI(self)


    def EndI(self):
        """
        EndI(TInt64H self) -> TInt64HI

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64H_EndI(self)


    def begin(self):
        """
        begin(TInt64H self) -> TInt64HI

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64H_begin(self)


    def end(self):
        """
        end(TInt64H self) -> TInt64HI

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64H_end(self)


    def GetI(self, Key):
        """
        GetI(TInt64H self, TInt64 Key) -> TInt64HI

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TInt64H_GetI(self, Key)


    def Gen(self, ExpectVals):
        """
        Gen(TInt64H self, long long const & ExpectVals)

        Parameters
        ----------
        ExpectVals: long long const &

        """
        return _SnapTime.TInt64H_Gen(self, ExpectVals)


    def Clr(self, DoDel=True, NoDelLim=-1, ResetDat=True):
        """
        Clr(TInt64H self, bool const & DoDel=True, long long const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &
        ResetDat: bool const &

        Clr(TInt64H self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(TInt64H self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TInt64H self)

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > *

        """
        return _SnapTime.TInt64H_Clr(self, DoDel, NoDelLim, ResetDat)


    def Empty(self):
        """
        Empty(TInt64H self) -> bool

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64H_Empty(self)


    def Len(self):
        """
        Len(TInt64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64H_Len(self)


    def GetPorts(self):
        """
        GetPorts(TInt64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64H_GetPorts(self)


    def IsAutoSize(self):
        """
        IsAutoSize(TInt64H self) -> bool

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64H_IsAutoSize(self)


    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TInt64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64H_GetMxKeyIds(self)


    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TInt64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64H_GetReservedKeyIds(self)


    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TInt64H self) -> bool

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64H_IsKeyIdEqKeyN(self)


    def AddKey(self, Key):
        """
        AddKey(TInt64H self, TInt64 Key) -> long long

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TInt64H_AddKey(self, Key)


    def AddDat(self, *args):
        """
        AddDat(TInt64H self, TInt64 Key) -> TInt64

        Parameters
        ----------
        Key: TInt64 const &

        AddDat(TInt64H self, TInt64 Key, TInt64 Dat) -> TInt64

        Parameters
        ----------
        Key: TInt64 const &
        Dat: TInt64 const &

        """
        return _SnapTime.TInt64H_AddDat(self, *args)


    def DelKey(self, Key):
        """
        DelKey(TInt64H self, TInt64 Key)

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TInt64H_DelKey(self, Key)


    def DelIfKey(self, Key):
        """
        DelIfKey(TInt64H self, TInt64 Key) -> bool

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TInt64H_DelIfKey(self, Key)


    def DelKeyId(self, KeyId):
        """
        DelKeyId(TInt64H self, long long const & KeyId)

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TInt64H_DelKeyId(self, KeyId)


    def DelKeyIdV(self, KeyIdV):
        """
        DelKeyIdV(TInt64H self, TInt64V KeyIdV)

        Parameters
        ----------
        KeyIdV: TInt64V const &

        """
        return _SnapTime.TInt64H_DelKeyIdV(self, KeyIdV)


    def GetKey(self, KeyId):
        """
        GetKey(TInt64H self, long long const & KeyId) -> TInt64

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TInt64H_GetKey(self, KeyId)


    def GetKeyId(self, Key):
        """
        GetKeyId(TInt64H self, TInt64 Key) -> long long

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TInt64H_GetKeyId(self, Key)


    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TInt64H self, TRnd Rnd) -> long long

        Parameters
        ----------
        Rnd: TRnd &

        GetRndKeyId(TInt64H self, TRnd Rnd, double const & EmptyFrac) -> long long

        Parameters
        ----------
        Rnd: TRnd &
        EmptyFrac: double const &

        """
        return _SnapTime.TInt64H_GetRndKeyId(self, *args)


    def IsKey(self, *args):
        """
        IsKey(TInt64H self, TInt64 Key) -> bool

        Parameters
        ----------
        Key: TInt64 const &

        IsKey(TInt64H self, TInt64 Key, long long & KeyId) -> bool

        Parameters
        ----------
        Key: TInt64 const &
        KeyId: long long &

        """
        return _SnapTime.TInt64H_IsKey(self, *args)


    def IsKeyId(self, KeyId):
        """
        IsKeyId(TInt64H self, long long const & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TInt64H_IsKeyId(self, KeyId)


    def GetDat(self, *args):
        """
        GetDat(TInt64H self, TInt64 Key) -> TInt64

        Parameters
        ----------
        Key: TInt64 const &

        GetDat(TInt64H self, TInt64 Key) -> TInt64

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TInt64H_GetDat(self, *args)


    def GetDatWithDefault(self, Key, DefaultValue):
        """
        GetDatWithDefault(TInt64H self, TInt64 Key, TInt64 DefaultValue) -> TInt64

        Parameters
        ----------
        Key: TInt64 const &
        DefaultValue: TInt64

        """
        return _SnapTime.TInt64H_GetDatWithDefault(self, Key, DefaultValue)


    def GetKeyDat(self, KeyId, Key, Dat):
        """
        GetKeyDat(TInt64H self, long long const & KeyId, TInt64 Key, TInt64 Dat)

        Parameters
        ----------
        KeyId: long long const &
        Key: TInt64 &
        Dat: TInt64 &

        """
        return _SnapTime.TInt64H_GetKeyDat(self, KeyId, Key, Dat)


    def IsKeyGetDat(self, Key, Dat):
        """
        IsKeyGetDat(TInt64H self, TInt64 Key, TInt64 Dat) -> bool

        Parameters
        ----------
        Key: TInt64 const &
        Dat: TInt64 &

        """
        return _SnapTime.TInt64H_IsKeyGetDat(self, Key, Dat)


    def FFirstKeyId(self):
        """
        FFirstKeyId(TInt64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64H_FFirstKeyId(self)


    def FNextKeyId(self, KeyId):
        """
        FNextKeyId(TInt64H self, long long & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long &

        """
        return _SnapTime.TInt64H_FNextKeyId(self, KeyId)


    def GetKeyV(self, KeyV):
        """
        GetKeyV(TInt64H self, TInt64V KeyV)

        Parameters
        ----------
        KeyV: TVec< TInt64,long long > &

        """
        return _SnapTime.TInt64H_GetKeyV(self, KeyV)


    def GetDatV(self, DatV):
        """
        GetDatV(TInt64H self, TInt64V DatV)

        Parameters
        ----------
        DatV: TVec< TInt64,long long > &

        """
        return _SnapTime.TInt64H_GetDatV(self, DatV)


    def GetKeyDatPrV(self, KeyDatPrV):
        """
        GetKeyDatPrV(TInt64H self, TIntPr64V KeyDatPrV)

        Parameters
        ----------
        KeyDatPrV: TVec< TPair< TInt64,TInt64 >,long long > &

        """
        return _SnapTime.TInt64H_GetKeyDatPrV(self, KeyDatPrV)


    def GetDatKeyPrV(self, DatKeyPrV):
        """
        GetDatKeyPrV(TInt64H self, TIntPr64V DatKeyPrV)

        Parameters
        ----------
        DatKeyPrV: TVec< TPair< TInt64,TInt64 >,long long > &

        """
        return _SnapTime.TInt64H_GetDatKeyPrV(self, DatKeyPrV)


    def GetKeyDatKdV(self, KeyDatKdV):
        """
        GetKeyDatKdV(TInt64H self, TVec< TKeyDat< TInt64,TInt64 >,long long > & KeyDatKdV)

        Parameters
        ----------
        KeyDatKdV: TVec< TKeyDat< TInt64,TInt64 >,long long > &

        """
        return _SnapTime.TInt64H_GetKeyDatKdV(self, KeyDatKdV)


    def GetDatKeyKdV(self, DatKeyKdV):
        """
        GetDatKeyKdV(TInt64H self, TVec< TKeyDat< TInt64,TInt64 >,long long > & DatKeyKdV)

        Parameters
        ----------
        DatKeyKdV: TVec< TKeyDat< TInt64,TInt64 >,long long > &

        """
        return _SnapTime.TInt64H_GetDatKeyKdV(self, DatKeyKdV)


    def Swap(self, Hash):
        """
        Swap(TInt64H self, TInt64H Hash)

        Parameters
        ----------
        Hash: THash< TInt64,TInt64,int64 > &

        """
        return _SnapTime.TInt64H_Swap(self, Hash)


    def Defrag(self):
        """
        Defrag(TInt64H self)

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > *

        """
        return _SnapTime.TInt64H_Defrag(self)


    def Pack(self):
        """
        Pack(TInt64H self)

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > *

        """
        return _SnapTime.TInt64H_Pack(self)


    def Sort(self, CmpKey, Asc):
        """
        Sort(TInt64H self, bool const & CmpKey, bool const & Asc)

        Parameters
        ----------
        CmpKey: bool const &
        Asc: bool const &

        """
        return _SnapTime.TInt64H_Sort(self, CmpKey, Asc)


    def SortByKey(self, Asc=True):
        """
        SortByKey(TInt64H self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByKey(TInt64H self)

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > *

        """
        return _SnapTime.TInt64H_SortByKey(self, Asc)


    def SortByDat(self, Asc=True):
        """
        SortByDat(TInt64H self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByDat(TInt64H self)

        Parameters
        ----------
        self: THash< TInt64,TInt64,int64 > *

        """
        return _SnapTime.TInt64H_SortByDat(self, Asc)

    __swig_destroy__ = _SnapTime.delete_TInt64H
TInt64H.LoadShM = new_instancemethod(_SnapTime.TInt64H_LoadShM, None, TInt64H)
TInt64H.Load = new_instancemethod(_SnapTime.TInt64H_Load, None, TInt64H)
TInt64H.Save = new_instancemethod(_SnapTime.TInt64H_Save, None, TInt64H)
TInt64H.__eq__ = new_instancemethod(_SnapTime.TInt64H___eq__, None, TInt64H)
TInt64H.__lt__ = new_instancemethod(_SnapTime.TInt64H___lt__, None, TInt64H)
TInt64H.__call__ = new_instancemethod(_SnapTime.TInt64H___call__, None, TInt64H)
TInt64H.GetMemUsed = new_instancemethod(_SnapTime.TInt64H_GetMemUsed, None, TInt64H)
TInt64H.BegI = new_instancemethod(_SnapTime.TInt64H_BegI, None, TInt64H)
TInt64H.EndI = new_instancemethod(_SnapTime.TInt64H_EndI, None, TInt64H)
TInt64H.begin = new_instancemethod(_SnapTime.TInt64H_begin, None, TInt64H)
TInt64H.end = new_instancemethod(_SnapTime.TInt64H_end, None, TInt64H)
TInt64H.GetI = new_instancemethod(_SnapTime.TInt64H_GetI, None, TInt64H)
TInt64H.Gen = new_instancemethod(_SnapTime.TInt64H_Gen, None, TInt64H)
TInt64H.Clr = new_instancemethod(_SnapTime.TInt64H_Clr, None, TInt64H)
TInt64H.Empty = new_instancemethod(_SnapTime.TInt64H_Empty, None, TInt64H)
TInt64H.Len = new_instancemethod(_SnapTime.TInt64H_Len, None, TInt64H)
TInt64H.GetPorts = new_instancemethod(_SnapTime.TInt64H_GetPorts, None, TInt64H)
TInt64H.IsAutoSize = new_instancemethod(_SnapTime.TInt64H_IsAutoSize, None, TInt64H)
TInt64H.GetMxKeyIds = new_instancemethod(_SnapTime.TInt64H_GetMxKeyIds, None, TInt64H)
TInt64H.GetReservedKeyIds = new_instancemethod(_SnapTime.TInt64H_GetReservedKeyIds, None, TInt64H)
TInt64H.IsKeyIdEqKeyN = new_instancemethod(_SnapTime.TInt64H_IsKeyIdEqKeyN, None, TInt64H)
TInt64H.AddKey = new_instancemethod(_SnapTime.TInt64H_AddKey, None, TInt64H)
TInt64H.AddDat = new_instancemethod(_SnapTime.TInt64H_AddDat, None, TInt64H)
TInt64H.DelKey = new_instancemethod(_SnapTime.TInt64H_DelKey, None, TInt64H)
TInt64H.DelIfKey = new_instancemethod(_SnapTime.TInt64H_DelIfKey, None, TInt64H)
TInt64H.DelKeyId = new_instancemethod(_SnapTime.TInt64H_DelKeyId, None, TInt64H)
TInt64H.DelKeyIdV = new_instancemethod(_SnapTime.TInt64H_DelKeyIdV, None, TInt64H)
TInt64H.GetKey = new_instancemethod(_SnapTime.TInt64H_GetKey, None, TInt64H)
TInt64H.GetKeyId = new_instancemethod(_SnapTime.TInt64H_GetKeyId, None, TInt64H)
TInt64H.GetRndKeyId = new_instancemethod(_SnapTime.TInt64H_GetRndKeyId, None, TInt64H)
TInt64H.IsKey = new_instancemethod(_SnapTime.TInt64H_IsKey, None, TInt64H)
TInt64H.IsKeyId = new_instancemethod(_SnapTime.TInt64H_IsKeyId, None, TInt64H)
TInt64H.GetDat = new_instancemethod(_SnapTime.TInt64H_GetDat, None, TInt64H)
TInt64H.GetDatWithDefault = new_instancemethod(_SnapTime.TInt64H_GetDatWithDefault, None, TInt64H)
TInt64H.GetKeyDat = new_instancemethod(_SnapTime.TInt64H_GetKeyDat, None, TInt64H)
TInt64H.IsKeyGetDat = new_instancemethod(_SnapTime.TInt64H_IsKeyGetDat, None, TInt64H)
TInt64H.FFirstKeyId = new_instancemethod(_SnapTime.TInt64H_FFirstKeyId, None, TInt64H)
TInt64H.FNextKeyId = new_instancemethod(_SnapTime.TInt64H_FNextKeyId, None, TInt64H)
TInt64H.GetKeyV = new_instancemethod(_SnapTime.TInt64H_GetKeyV, None, TInt64H)
TInt64H.GetDatV = new_instancemethod(_SnapTime.TInt64H_GetDatV, None, TInt64H)
TInt64H.GetKeyDatPrV = new_instancemethod(_SnapTime.TInt64H_GetKeyDatPrV, None, TInt64H)
TInt64H.GetDatKeyPrV = new_instancemethod(_SnapTime.TInt64H_GetDatKeyPrV, None, TInt64H)
TInt64H.GetKeyDatKdV = new_instancemethod(_SnapTime.TInt64H_GetKeyDatKdV, None, TInt64H)
TInt64H.GetDatKeyKdV = new_instancemethod(_SnapTime.TInt64H_GetDatKeyKdV, None, TInt64H)
TInt64H.Swap = new_instancemethod(_SnapTime.TInt64H_Swap, None, TInt64H)
TInt64H.Defrag = new_instancemethod(_SnapTime.TInt64H_Defrag, None, TInt64H)
TInt64H.Pack = new_instancemethod(_SnapTime.TInt64H_Pack, None, TInt64H)
TInt64H.Sort = new_instancemethod(_SnapTime.TInt64H_Sort, None, TInt64H)
TInt64H.SortByKey = new_instancemethod(_SnapTime.TInt64H_SortByKey, None, TInt64H)
TInt64H.SortByDat = new_instancemethod(_SnapTime.TInt64H_SortByDat, None, TInt64H)
TInt64H_swigregister = _SnapTime.TInt64H_swigregister
TInt64H_swigregister(TInt64H)

class TIntIntH(object):
    """Proxy of C++ THash<(TInt,TInt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _SnapTime.TIntIntH_HashPrimes

    def __init__(self, *args):
        """
        __init__(THash<(TInt,TInt)> self) -> TIntIntH
        __init__(THash<(TInt,TInt)> self, TIntH Hash) -> TIntIntH

        Parameters
        ----------
        Hash: THash< TInt,TInt > const &

        __init__(THash<(TInt,TInt)> self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(THash<(TInt,TInt)> self, int const & ExpectVals) -> TIntIntH

        Parameters
        ----------
        ExpectVals: int const &

        __init__(THash<(TInt,TInt)> self, TSIn SIn) -> TIntIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntIntH_swiginit(self, _SnapTime.new_TIntIntH(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntIntH self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntIntH_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntIntH self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntIntH_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntIntH self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntIntH_Save(self, SOut)


    def __eq__(self, Hash):
        """
        __eq__(TIntIntH self, TIntH Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt,TInt > const &

        """
        return _SnapTime.TIntIntH___eq__(self, Hash)


    def __lt__(self, Hash):
        """
        __lt__(TIntIntH self, TIntH Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt,TInt > const &

        """
        return _SnapTime.TIntIntH___lt__(self, Hash)


    def __call__(self, Key):
        """
        __call__(TIntIntH self, TInt Key) -> TInt

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntIntH___call__(self, Key)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntIntH self) -> ::TSize

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntIntH_GetMemUsed(self)


    def BegI(self):
        """
        BegI(TIntIntH self) -> TIntHI

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntIntH_BegI(self)


    def EndI(self):
        """
        EndI(TIntIntH self) -> TIntHI

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntIntH_EndI(self)


    def begin(self):
        """
        begin(TIntIntH self) -> TIntHI

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntIntH_begin(self)


    def end(self):
        """
        end(TIntIntH self) -> TIntHI

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntIntH_end(self)


    def GetI(self, Key):
        """
        GetI(TIntIntH self, TInt Key) -> TIntHI

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntIntH_GetI(self, Key)


    def Gen(self, ExpectVals):
        """
        Gen(TIntIntH self, int const & ExpectVals)

        Parameters
        ----------
        ExpectVals: int const &

        """
        return _SnapTime.TIntIntH_Gen(self, ExpectVals)


    def Clr(self, DoDel=True, NoDelLim=-1, ResetDat=True):
        """
        Clr(TIntIntH self, bool const & DoDel=True, int const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &
        ResetDat: bool const &

        Clr(TIntIntH self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TIntIntH self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntIntH self)

        Parameters
        ----------
        self: THash< TInt,TInt > *

        """
        return _SnapTime.TIntIntH_Clr(self, DoDel, NoDelLim, ResetDat)


    def Empty(self):
        """
        Empty(TIntIntH self) -> bool

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntIntH_Empty(self)


    def Len(self):
        """
        Len(TIntIntH self) -> int

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntIntH_Len(self)


    def GetPorts(self):
        """
        GetPorts(TIntIntH self) -> int

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntIntH_GetPorts(self)


    def IsAutoSize(self):
        """
        IsAutoSize(TIntIntH self) -> bool

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntIntH_IsAutoSize(self)


    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TIntIntH self) -> int

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntIntH_GetMxKeyIds(self)


    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TIntIntH self) -> int

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntIntH_GetReservedKeyIds(self)


    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TIntIntH self) -> bool

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntIntH_IsKeyIdEqKeyN(self)


    def AddKey(self, Key):
        """
        AddKey(TIntIntH self, TInt Key) -> int

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntIntH_AddKey(self, Key)


    def AddDat(self, *args):
        """
        AddDat(TIntIntH self, TInt Key) -> TInt

        Parameters
        ----------
        Key: TInt const &

        AddDat(TIntIntH self, TInt Key, TInt Dat) -> TInt

        Parameters
        ----------
        Key: TInt const &
        Dat: TInt const &

        """
        return _SnapTime.TIntIntH_AddDat(self, *args)


    def DelKey(self, Key):
        """
        DelKey(TIntIntH self, TInt Key)

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntIntH_DelKey(self, Key)


    def DelIfKey(self, Key):
        """
        DelIfKey(TIntIntH self, TInt Key) -> bool

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntIntH_DelIfKey(self, Key)


    def DelKeyId(self, KeyId):
        """
        DelKeyId(TIntIntH self, int const & KeyId)

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntIntH_DelKeyId(self, KeyId)


    def DelKeyIdV(self, KeyIdV):
        """
        DelKeyIdV(TIntIntH self, TInt64V KeyIdV)

        Parameters
        ----------
        KeyIdV: TInt64V const &

        """
        return _SnapTime.TIntIntH_DelKeyIdV(self, KeyIdV)


    def GetKey(self, KeyId):
        """
        GetKey(TIntIntH self, int const & KeyId) -> TInt

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntIntH_GetKey(self, KeyId)


    def GetKeyId(self, Key):
        """
        GetKeyId(TIntIntH self, TInt Key) -> int

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntIntH_GetKeyId(self, Key)


    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TIntIntH self, TRnd Rnd) -> int

        Parameters
        ----------
        Rnd: TRnd &

        GetRndKeyId(TIntIntH self, TRnd Rnd, double const & EmptyFrac) -> int

        Parameters
        ----------
        Rnd: TRnd &
        EmptyFrac: double const &

        """
        return _SnapTime.TIntIntH_GetRndKeyId(self, *args)


    def IsKey(self, *args):
        """
        IsKey(TIntIntH self, TInt Key) -> bool

        Parameters
        ----------
        Key: TInt const &

        IsKey(TIntIntH self, TInt Key, int & KeyId) -> bool

        Parameters
        ----------
        Key: TInt const &
        KeyId: int &

        """
        return _SnapTime.TIntIntH_IsKey(self, *args)


    def IsKeyId(self, KeyId):
        """
        IsKeyId(TIntIntH self, int const & KeyId) -> bool

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntIntH_IsKeyId(self, KeyId)


    def GetDat(self, *args):
        """
        GetDat(TIntIntH self, TInt Key) -> TInt

        Parameters
        ----------
        Key: TInt const &

        GetDat(TIntIntH self, TInt Key) -> TInt

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntIntH_GetDat(self, *args)


    def GetDatWithDefault(self, Key, DefaultValue):
        """
        GetDatWithDefault(TIntIntH self, TInt Key, TInt DefaultValue) -> TInt

        Parameters
        ----------
        Key: TInt const &
        DefaultValue: TInt

        """
        return _SnapTime.TIntIntH_GetDatWithDefault(self, Key, DefaultValue)


    def GetKeyDat(self, KeyId, Key, Dat):
        """
        GetKeyDat(TIntIntH self, int const & KeyId, TInt Key, TInt Dat)

        Parameters
        ----------
        KeyId: int const &
        Key: TInt &
        Dat: TInt &

        """
        return _SnapTime.TIntIntH_GetKeyDat(self, KeyId, Key, Dat)


    def IsKeyGetDat(self, Key, Dat):
        """
        IsKeyGetDat(TIntIntH self, TInt Key, TInt Dat) -> bool

        Parameters
        ----------
        Key: TInt const &
        Dat: TInt &

        """
        return _SnapTime.TIntIntH_IsKeyGetDat(self, Key, Dat)


    def FFirstKeyId(self):
        """
        FFirstKeyId(TIntIntH self) -> int

        Parameters
        ----------
        self: THash< TInt,TInt > const *

        """
        return _SnapTime.TIntIntH_FFirstKeyId(self)


    def FNextKeyId(self, KeyId):
        """
        FNextKeyId(TIntIntH self, int & KeyId) -> bool

        Parameters
        ----------
        KeyId: int &

        """
        return _SnapTime.TIntIntH_FNextKeyId(self, KeyId)


    def GetKeyV(self, KeyV):
        """
        GetKeyV(TIntIntH self, TIntV KeyV)

        Parameters
        ----------
        KeyV: TVec< TInt,int > &

        """
        return _SnapTime.TIntIntH_GetKeyV(self, KeyV)


    def GetDatV(self, DatV):
        """
        GetDatV(TIntIntH self, TIntV DatV)

        Parameters
        ----------
        DatV: TVec< TInt,int > &

        """
        return _SnapTime.TIntIntH_GetDatV(self, DatV)


    def GetKeyDatPrV(self, KeyDatPrV):
        """
        GetKeyDatPrV(TIntIntH self, TIntPrV KeyDatPrV)

        Parameters
        ----------
        KeyDatPrV: TVec< TPair< TInt,TInt >,int > &

        """
        return _SnapTime.TIntIntH_GetKeyDatPrV(self, KeyDatPrV)


    def GetDatKeyPrV(self, DatKeyPrV):
        """
        GetDatKeyPrV(TIntIntH self, TIntPrV DatKeyPrV)

        Parameters
        ----------
        DatKeyPrV: TVec< TPair< TInt,TInt >,int > &

        """
        return _SnapTime.TIntIntH_GetDatKeyPrV(self, DatKeyPrV)


    def GetKeyDatKdV(self, KeyDatKdV):
        """
        GetKeyDatKdV(TIntIntH self, TVec< TKeyDat< TInt,TInt >,int > & KeyDatKdV)

        Parameters
        ----------
        KeyDatKdV: TVec< TKeyDat< TInt,TInt >,int > &

        """
        return _SnapTime.TIntIntH_GetKeyDatKdV(self, KeyDatKdV)


    def GetDatKeyKdV(self, DatKeyKdV):
        """
        GetDatKeyKdV(TIntIntH self, TVec< TKeyDat< TInt,TInt >,int > & DatKeyKdV)

        Parameters
        ----------
        DatKeyKdV: TVec< TKeyDat< TInt,TInt >,int > &

        """
        return _SnapTime.TIntIntH_GetDatKeyKdV(self, DatKeyKdV)


    def Swap(self, Hash):
        """
        Swap(TIntIntH self, TIntH Hash)

        Parameters
        ----------
        Hash: THash< TInt,TInt > &

        """
        return _SnapTime.TIntIntH_Swap(self, Hash)


    def Defrag(self):
        """
        Defrag(TIntIntH self)

        Parameters
        ----------
        self: THash< TInt,TInt > *

        """
        return _SnapTime.TIntIntH_Defrag(self)


    def Pack(self):
        """
        Pack(TIntIntH self)

        Parameters
        ----------
        self: THash< TInt,TInt > *

        """
        return _SnapTime.TIntIntH_Pack(self)


    def Sort(self, CmpKey, Asc):
        """
        Sort(TIntIntH self, bool const & CmpKey, bool const & Asc)

        Parameters
        ----------
        CmpKey: bool const &
        Asc: bool const &

        """
        return _SnapTime.TIntIntH_Sort(self, CmpKey, Asc)


    def SortByKey(self, Asc=True):
        """
        SortByKey(TIntIntH self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByKey(TIntIntH self)

        Parameters
        ----------
        self: THash< TInt,TInt > *

        """
        return _SnapTime.TIntIntH_SortByKey(self, Asc)


    def SortByDat(self, Asc=True):
        """
        SortByDat(TIntIntH self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByDat(TIntIntH self)

        Parameters
        ----------
        self: THash< TInt,TInt > *

        """
        return _SnapTime.TIntIntH_SortByDat(self, Asc)

    __swig_destroy__ = _SnapTime.delete_TIntIntH
TIntIntH.LoadShM = new_instancemethod(_SnapTime.TIntIntH_LoadShM, None, TIntIntH)
TIntIntH.Load = new_instancemethod(_SnapTime.TIntIntH_Load, None, TIntIntH)
TIntIntH.Save = new_instancemethod(_SnapTime.TIntIntH_Save, None, TIntIntH)
TIntIntH.__eq__ = new_instancemethod(_SnapTime.TIntIntH___eq__, None, TIntIntH)
TIntIntH.__lt__ = new_instancemethod(_SnapTime.TIntIntH___lt__, None, TIntIntH)
TIntIntH.__call__ = new_instancemethod(_SnapTime.TIntIntH___call__, None, TIntIntH)
TIntIntH.GetMemUsed = new_instancemethod(_SnapTime.TIntIntH_GetMemUsed, None, TIntIntH)
TIntIntH.BegI = new_instancemethod(_SnapTime.TIntIntH_BegI, None, TIntIntH)
TIntIntH.EndI = new_instancemethod(_SnapTime.TIntIntH_EndI, None, TIntIntH)
TIntIntH.begin = new_instancemethod(_SnapTime.TIntIntH_begin, None, TIntIntH)
TIntIntH.end = new_instancemethod(_SnapTime.TIntIntH_end, None, TIntIntH)
TIntIntH.GetI = new_instancemethod(_SnapTime.TIntIntH_GetI, None, TIntIntH)
TIntIntH.Gen = new_instancemethod(_SnapTime.TIntIntH_Gen, None, TIntIntH)
TIntIntH.Clr = new_instancemethod(_SnapTime.TIntIntH_Clr, None, TIntIntH)
TIntIntH.Empty = new_instancemethod(_SnapTime.TIntIntH_Empty, None, TIntIntH)
TIntIntH.Len = new_instancemethod(_SnapTime.TIntIntH_Len, None, TIntIntH)
TIntIntH.GetPorts = new_instancemethod(_SnapTime.TIntIntH_GetPorts, None, TIntIntH)
TIntIntH.IsAutoSize = new_instancemethod(_SnapTime.TIntIntH_IsAutoSize, None, TIntIntH)
TIntIntH.GetMxKeyIds = new_instancemethod(_SnapTime.TIntIntH_GetMxKeyIds, None, TIntIntH)
TIntIntH.GetReservedKeyIds = new_instancemethod(_SnapTime.TIntIntH_GetReservedKeyIds, None, TIntIntH)
TIntIntH.IsKeyIdEqKeyN = new_instancemethod(_SnapTime.TIntIntH_IsKeyIdEqKeyN, None, TIntIntH)
TIntIntH.AddKey = new_instancemethod(_SnapTime.TIntIntH_AddKey, None, TIntIntH)
TIntIntH.AddDat = new_instancemethod(_SnapTime.TIntIntH_AddDat, None, TIntIntH)
TIntIntH.DelKey = new_instancemethod(_SnapTime.TIntIntH_DelKey, None, TIntIntH)
TIntIntH.DelIfKey = new_instancemethod(_SnapTime.TIntIntH_DelIfKey, None, TIntIntH)
TIntIntH.DelKeyId = new_instancemethod(_SnapTime.TIntIntH_DelKeyId, None, TIntIntH)
TIntIntH.DelKeyIdV = new_instancemethod(_SnapTime.TIntIntH_DelKeyIdV, None, TIntIntH)
TIntIntH.GetKey = new_instancemethod(_SnapTime.TIntIntH_GetKey, None, TIntIntH)
TIntIntH.GetKeyId = new_instancemethod(_SnapTime.TIntIntH_GetKeyId, None, TIntIntH)
TIntIntH.GetRndKeyId = new_instancemethod(_SnapTime.TIntIntH_GetRndKeyId, None, TIntIntH)
TIntIntH.IsKey = new_instancemethod(_SnapTime.TIntIntH_IsKey, None, TIntIntH)
TIntIntH.IsKeyId = new_instancemethod(_SnapTime.TIntIntH_IsKeyId, None, TIntIntH)
TIntIntH.GetDat = new_instancemethod(_SnapTime.TIntIntH_GetDat, None, TIntIntH)
TIntIntH.GetDatWithDefault = new_instancemethod(_SnapTime.TIntIntH_GetDatWithDefault, None, TIntIntH)
TIntIntH.GetKeyDat = new_instancemethod(_SnapTime.TIntIntH_GetKeyDat, None, TIntIntH)
TIntIntH.IsKeyGetDat = new_instancemethod(_SnapTime.TIntIntH_IsKeyGetDat, None, TIntIntH)
TIntIntH.FFirstKeyId = new_instancemethod(_SnapTime.TIntIntH_FFirstKeyId, None, TIntIntH)
TIntIntH.FNextKeyId = new_instancemethod(_SnapTime.TIntIntH_FNextKeyId, None, TIntIntH)
TIntIntH.GetKeyV = new_instancemethod(_SnapTime.TIntIntH_GetKeyV, None, TIntIntH)
TIntIntH.GetDatV = new_instancemethod(_SnapTime.TIntIntH_GetDatV, None, TIntIntH)
TIntIntH.GetKeyDatPrV = new_instancemethod(_SnapTime.TIntIntH_GetKeyDatPrV, None, TIntIntH)
TIntIntH.GetDatKeyPrV = new_instancemethod(_SnapTime.TIntIntH_GetDatKeyPrV, None, TIntIntH)
TIntIntH.GetKeyDatKdV = new_instancemethod(_SnapTime.TIntIntH_GetKeyDatKdV, None, TIntIntH)
TIntIntH.GetDatKeyKdV = new_instancemethod(_SnapTime.TIntIntH_GetDatKeyKdV, None, TIntIntH)
TIntIntH.Swap = new_instancemethod(_SnapTime.TIntIntH_Swap, None, TIntIntH)
TIntIntH.Defrag = new_instancemethod(_SnapTime.TIntIntH_Defrag, None, TIntIntH)
TIntIntH.Pack = new_instancemethod(_SnapTime.TIntIntH_Pack, None, TIntIntH)
TIntIntH.Sort = new_instancemethod(_SnapTime.TIntIntH_Sort, None, TIntIntH)
TIntIntH.SortByKey = new_instancemethod(_SnapTime.TIntIntH_SortByKey, None, TIntIntH)
TIntIntH.SortByDat = new_instancemethod(_SnapTime.TIntIntH_SortByDat, None, TIntIntH)
TIntIntH_swigregister = _SnapTime.TIntIntH_swigregister
TIntIntH_swigregister(TIntIntH)

class TIntFltH(object):
    """Proxy of C++ THash<(TInt,TFlt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _SnapTime.TIntFltH_HashPrimes

    def __init__(self, *args):
        """
        __init__(THash<(TInt,TFlt)> self) -> TIntFltH
        __init__(THash<(TInt,TFlt)> self, TIntFltH Hash) -> TIntFltH

        Parameters
        ----------
        Hash: THash< TInt,TFlt > const &

        __init__(THash<(TInt,TFlt)> self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntFltH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(THash<(TInt,TFlt)> self, int const & ExpectVals) -> TIntFltH

        Parameters
        ----------
        ExpectVals: int const &

        __init__(THash<(TInt,TFlt)> self, TSIn SIn) -> TIntFltH

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntFltH_swiginit(self, _SnapTime.new_TIntFltH(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntFltH self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntFltH_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntFltH self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntFltH_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntFltH self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntFltH_Save(self, SOut)


    def __eq__(self, Hash):
        """
        __eq__(TIntFltH self, TIntFltH Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltH___eq__(self, Hash)


    def __lt__(self, Hash):
        """
        __lt__(TIntFltH self, TIntFltH Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltH___lt__(self, Hash)


    def __call__(self, Key):
        """
        __call__(TIntFltH self, TInt Key) -> TFlt

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntFltH___call__(self, Key)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntFltH self) -> ::TSize

        Parameters
        ----------
        self: THash< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltH_GetMemUsed(self)


    def BegI(self):
        """
        BegI(TIntFltH self) -> TIntFltHI

        Parameters
        ----------
        self: THash< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltH_BegI(self)


    def EndI(self):
        """
        EndI(TIntFltH self) -> TIntFltHI

        Parameters
        ----------
        self: THash< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltH_EndI(self)


    def begin(self):
        """
        begin(TIntFltH self) -> TIntFltHI

        Parameters
        ----------
        self: THash< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltH_begin(self)


    def end(self):
        """
        end(TIntFltH self) -> TIntFltHI

        Parameters
        ----------
        self: THash< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltH_end(self)


    def GetI(self, Key):
        """
        GetI(TIntFltH self, TInt Key) -> TIntFltHI

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntFltH_GetI(self, Key)


    def Gen(self, ExpectVals):
        """
        Gen(TIntFltH self, int const & ExpectVals)

        Parameters
        ----------
        ExpectVals: int const &

        """
        return _SnapTime.TIntFltH_Gen(self, ExpectVals)


    def Clr(self, DoDel=True, NoDelLim=-1, ResetDat=True):
        """
        Clr(TIntFltH self, bool const & DoDel=True, int const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &
        ResetDat: bool const &

        Clr(TIntFltH self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TIntFltH self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntFltH self)

        Parameters
        ----------
        self: THash< TInt,TFlt > *

        """
        return _SnapTime.TIntFltH_Clr(self, DoDel, NoDelLim, ResetDat)


    def Empty(self):
        """
        Empty(TIntFltH self) -> bool

        Parameters
        ----------
        self: THash< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltH_Empty(self)


    def Len(self):
        """
        Len(TIntFltH self) -> int

        Parameters
        ----------
        self: THash< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltH_Len(self)


    def GetPorts(self):
        """
        GetPorts(TIntFltH self) -> int

        Parameters
        ----------
        self: THash< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltH_GetPorts(self)


    def IsAutoSize(self):
        """
        IsAutoSize(TIntFltH self) -> bool

        Parameters
        ----------
        self: THash< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltH_IsAutoSize(self)


    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TIntFltH self) -> int

        Parameters
        ----------
        self: THash< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltH_GetMxKeyIds(self)


    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TIntFltH self) -> int

        Parameters
        ----------
        self: THash< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltH_GetReservedKeyIds(self)


    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TIntFltH self) -> bool

        Parameters
        ----------
        self: THash< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltH_IsKeyIdEqKeyN(self)


    def AddKey(self, Key):
        """
        AddKey(TIntFltH self, TInt Key) -> int

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntFltH_AddKey(self, Key)


    def AddDat(self, *args):
        """
        AddDat(TIntFltH self, TInt Key) -> TFlt

        Parameters
        ----------
        Key: TInt const &

        AddDat(TIntFltH self, TInt Key, TFlt Dat) -> TFlt

        Parameters
        ----------
        Key: TInt const &
        Dat: TFlt const &

        """
        return _SnapTime.TIntFltH_AddDat(self, *args)


    def DelKey(self, Key):
        """
        DelKey(TIntFltH self, TInt Key)

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntFltH_DelKey(self, Key)


    def DelIfKey(self, Key):
        """
        DelIfKey(TIntFltH self, TInt Key) -> bool

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntFltH_DelIfKey(self, Key)


    def DelKeyId(self, KeyId):
        """
        DelKeyId(TIntFltH self, int const & KeyId)

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntFltH_DelKeyId(self, KeyId)


    def DelKeyIdV(self, KeyIdV):
        """
        DelKeyIdV(TIntFltH self, TInt64V KeyIdV)

        Parameters
        ----------
        KeyIdV: TInt64V const &

        """
        return _SnapTime.TIntFltH_DelKeyIdV(self, KeyIdV)


    def GetKey(self, KeyId):
        """
        GetKey(TIntFltH self, int const & KeyId) -> TInt

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntFltH_GetKey(self, KeyId)


    def GetKeyId(self, Key):
        """
        GetKeyId(TIntFltH self, TInt Key) -> int

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntFltH_GetKeyId(self, Key)


    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TIntFltH self, TRnd Rnd) -> int

        Parameters
        ----------
        Rnd: TRnd &

        GetRndKeyId(TIntFltH self, TRnd Rnd, double const & EmptyFrac) -> int

        Parameters
        ----------
        Rnd: TRnd &
        EmptyFrac: double const &

        """
        return _SnapTime.TIntFltH_GetRndKeyId(self, *args)


    def IsKey(self, *args):
        """
        IsKey(TIntFltH self, TInt Key) -> bool

        Parameters
        ----------
        Key: TInt const &

        IsKey(TIntFltH self, TInt Key, int & KeyId) -> bool

        Parameters
        ----------
        Key: TInt const &
        KeyId: int &

        """
        return _SnapTime.TIntFltH_IsKey(self, *args)


    def IsKeyId(self, KeyId):
        """
        IsKeyId(TIntFltH self, int const & KeyId) -> bool

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntFltH_IsKeyId(self, KeyId)


    def GetDat(self, *args):
        """
        GetDat(TIntFltH self, TInt Key) -> TFlt

        Parameters
        ----------
        Key: TInt const &

        GetDat(TIntFltH self, TInt Key) -> TFlt

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntFltH_GetDat(self, *args)


    def GetDatWithDefault(self, Key, DefaultValue):
        """
        GetDatWithDefault(TIntFltH self, TInt Key, TFlt DefaultValue) -> TFlt

        Parameters
        ----------
        Key: TInt const &
        DefaultValue: TFlt

        """
        return _SnapTime.TIntFltH_GetDatWithDefault(self, Key, DefaultValue)


    def GetKeyDat(self, KeyId, Key, Dat):
        """
        GetKeyDat(TIntFltH self, int const & KeyId, TInt Key, TFlt Dat)

        Parameters
        ----------
        KeyId: int const &
        Key: TInt &
        Dat: TFlt &

        """
        return _SnapTime.TIntFltH_GetKeyDat(self, KeyId, Key, Dat)


    def IsKeyGetDat(self, Key, Dat):
        """
        IsKeyGetDat(TIntFltH self, TInt Key, TFlt Dat) -> bool

        Parameters
        ----------
        Key: TInt const &
        Dat: TFlt &

        """
        return _SnapTime.TIntFltH_IsKeyGetDat(self, Key, Dat)


    def FFirstKeyId(self):
        """
        FFirstKeyId(TIntFltH self) -> int

        Parameters
        ----------
        self: THash< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltH_FFirstKeyId(self)


    def FNextKeyId(self, KeyId):
        """
        FNextKeyId(TIntFltH self, int & KeyId) -> bool

        Parameters
        ----------
        KeyId: int &

        """
        return _SnapTime.TIntFltH_FNextKeyId(self, KeyId)


    def GetKeyV(self, KeyV):
        """
        GetKeyV(TIntFltH self, TIntV KeyV)

        Parameters
        ----------
        KeyV: TVec< TInt,int > &

        """
        return _SnapTime.TIntFltH_GetKeyV(self, KeyV)


    def GetDatV(self, DatV):
        """
        GetDatV(TIntFltH self, TFltV DatV)

        Parameters
        ----------
        DatV: TVec< TFlt,int > &

        """
        return _SnapTime.TIntFltH_GetDatV(self, DatV)


    def GetKeyDatPrV(self, KeyDatPrV):
        """
        GetKeyDatPrV(TIntFltH self, TVec< TPair< TInt,TFlt >,int > & KeyDatPrV)

        Parameters
        ----------
        KeyDatPrV: TVec< TPair< TInt,TFlt >,int > &

        """
        return _SnapTime.TIntFltH_GetKeyDatPrV(self, KeyDatPrV)


    def GetDatKeyPrV(self, DatKeyPrV):
        """
        GetDatKeyPrV(TIntFltH self, TVec< TPair< TFlt,TInt >,int > & DatKeyPrV)

        Parameters
        ----------
        DatKeyPrV: TVec< TPair< TFlt,TInt >,int > &

        """
        return _SnapTime.TIntFltH_GetDatKeyPrV(self, DatKeyPrV)


    def GetKeyDatKdV(self, KeyDatKdV):
        """
        GetKeyDatKdV(TIntFltH self, TIntFltKdV KeyDatKdV)

        Parameters
        ----------
        KeyDatKdV: TVec< TKeyDat< TInt,TFlt >,int > &

        """
        return _SnapTime.TIntFltH_GetKeyDatKdV(self, KeyDatKdV)


    def GetDatKeyKdV(self, DatKeyKdV):
        """
        GetDatKeyKdV(TIntFltH self, TVec< TKeyDat< TFlt,TInt >,int > & DatKeyKdV)

        Parameters
        ----------
        DatKeyKdV: TVec< TKeyDat< TFlt,TInt >,int > &

        """
        return _SnapTime.TIntFltH_GetDatKeyKdV(self, DatKeyKdV)


    def Swap(self, Hash):
        """
        Swap(TIntFltH self, TIntFltH Hash)

        Parameters
        ----------
        Hash: THash< TInt,TFlt > &

        """
        return _SnapTime.TIntFltH_Swap(self, Hash)


    def Defrag(self):
        """
        Defrag(TIntFltH self)

        Parameters
        ----------
        self: THash< TInt,TFlt > *

        """
        return _SnapTime.TIntFltH_Defrag(self)


    def Pack(self):
        """
        Pack(TIntFltH self)

        Parameters
        ----------
        self: THash< TInt,TFlt > *

        """
        return _SnapTime.TIntFltH_Pack(self)


    def Sort(self, CmpKey, Asc):
        """
        Sort(TIntFltH self, bool const & CmpKey, bool const & Asc)

        Parameters
        ----------
        CmpKey: bool const &
        Asc: bool const &

        """
        return _SnapTime.TIntFltH_Sort(self, CmpKey, Asc)


    def SortByKey(self, Asc=True):
        """
        SortByKey(TIntFltH self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByKey(TIntFltH self)

        Parameters
        ----------
        self: THash< TInt,TFlt > *

        """
        return _SnapTime.TIntFltH_SortByKey(self, Asc)


    def SortByDat(self, Asc=True):
        """
        SortByDat(TIntFltH self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByDat(TIntFltH self)

        Parameters
        ----------
        self: THash< TInt,TFlt > *

        """
        return _SnapTime.TIntFltH_SortByDat(self, Asc)

    __swig_destroy__ = _SnapTime.delete_TIntFltH
TIntFltH.LoadShM = new_instancemethod(_SnapTime.TIntFltH_LoadShM, None, TIntFltH)
TIntFltH.Load = new_instancemethod(_SnapTime.TIntFltH_Load, None, TIntFltH)
TIntFltH.Save = new_instancemethod(_SnapTime.TIntFltH_Save, None, TIntFltH)
TIntFltH.__eq__ = new_instancemethod(_SnapTime.TIntFltH___eq__, None, TIntFltH)
TIntFltH.__lt__ = new_instancemethod(_SnapTime.TIntFltH___lt__, None, TIntFltH)
TIntFltH.__call__ = new_instancemethod(_SnapTime.TIntFltH___call__, None, TIntFltH)
TIntFltH.GetMemUsed = new_instancemethod(_SnapTime.TIntFltH_GetMemUsed, None, TIntFltH)
TIntFltH.BegI = new_instancemethod(_SnapTime.TIntFltH_BegI, None, TIntFltH)
TIntFltH.EndI = new_instancemethod(_SnapTime.TIntFltH_EndI, None, TIntFltH)
TIntFltH.begin = new_instancemethod(_SnapTime.TIntFltH_begin, None, TIntFltH)
TIntFltH.end = new_instancemethod(_SnapTime.TIntFltH_end, None, TIntFltH)
TIntFltH.GetI = new_instancemethod(_SnapTime.TIntFltH_GetI, None, TIntFltH)
TIntFltH.Gen = new_instancemethod(_SnapTime.TIntFltH_Gen, None, TIntFltH)
TIntFltH.Clr = new_instancemethod(_SnapTime.TIntFltH_Clr, None, TIntFltH)
TIntFltH.Empty = new_instancemethod(_SnapTime.TIntFltH_Empty, None, TIntFltH)
TIntFltH.Len = new_instancemethod(_SnapTime.TIntFltH_Len, None, TIntFltH)
TIntFltH.GetPorts = new_instancemethod(_SnapTime.TIntFltH_GetPorts, None, TIntFltH)
TIntFltH.IsAutoSize = new_instancemethod(_SnapTime.TIntFltH_IsAutoSize, None, TIntFltH)
TIntFltH.GetMxKeyIds = new_instancemethod(_SnapTime.TIntFltH_GetMxKeyIds, None, TIntFltH)
TIntFltH.GetReservedKeyIds = new_instancemethod(_SnapTime.TIntFltH_GetReservedKeyIds, None, TIntFltH)
TIntFltH.IsKeyIdEqKeyN = new_instancemethod(_SnapTime.TIntFltH_IsKeyIdEqKeyN, None, TIntFltH)
TIntFltH.AddKey = new_instancemethod(_SnapTime.TIntFltH_AddKey, None, TIntFltH)
TIntFltH.AddDat = new_instancemethod(_SnapTime.TIntFltH_AddDat, None, TIntFltH)
TIntFltH.DelKey = new_instancemethod(_SnapTime.TIntFltH_DelKey, None, TIntFltH)
TIntFltH.DelIfKey = new_instancemethod(_SnapTime.TIntFltH_DelIfKey, None, TIntFltH)
TIntFltH.DelKeyId = new_instancemethod(_SnapTime.TIntFltH_DelKeyId, None, TIntFltH)
TIntFltH.DelKeyIdV = new_instancemethod(_SnapTime.TIntFltH_DelKeyIdV, None, TIntFltH)
TIntFltH.GetKey = new_instancemethod(_SnapTime.TIntFltH_GetKey, None, TIntFltH)
TIntFltH.GetKeyId = new_instancemethod(_SnapTime.TIntFltH_GetKeyId, None, TIntFltH)
TIntFltH.GetRndKeyId = new_instancemethod(_SnapTime.TIntFltH_GetRndKeyId, None, TIntFltH)
TIntFltH.IsKey = new_instancemethod(_SnapTime.TIntFltH_IsKey, None, TIntFltH)
TIntFltH.IsKeyId = new_instancemethod(_SnapTime.TIntFltH_IsKeyId, None, TIntFltH)
TIntFltH.GetDat = new_instancemethod(_SnapTime.TIntFltH_GetDat, None, TIntFltH)
TIntFltH.GetDatWithDefault = new_instancemethod(_SnapTime.TIntFltH_GetDatWithDefault, None, TIntFltH)
TIntFltH.GetKeyDat = new_instancemethod(_SnapTime.TIntFltH_GetKeyDat, None, TIntFltH)
TIntFltH.IsKeyGetDat = new_instancemethod(_SnapTime.TIntFltH_IsKeyGetDat, None, TIntFltH)
TIntFltH.FFirstKeyId = new_instancemethod(_SnapTime.TIntFltH_FFirstKeyId, None, TIntFltH)
TIntFltH.FNextKeyId = new_instancemethod(_SnapTime.TIntFltH_FNextKeyId, None, TIntFltH)
TIntFltH.GetKeyV = new_instancemethod(_SnapTime.TIntFltH_GetKeyV, None, TIntFltH)
TIntFltH.GetDatV = new_instancemethod(_SnapTime.TIntFltH_GetDatV, None, TIntFltH)
TIntFltH.GetKeyDatPrV = new_instancemethod(_SnapTime.TIntFltH_GetKeyDatPrV, None, TIntFltH)
TIntFltH.GetDatKeyPrV = new_instancemethod(_SnapTime.TIntFltH_GetDatKeyPrV, None, TIntFltH)
TIntFltH.GetKeyDatKdV = new_instancemethod(_SnapTime.TIntFltH_GetKeyDatKdV, None, TIntFltH)
TIntFltH.GetDatKeyKdV = new_instancemethod(_SnapTime.TIntFltH_GetDatKeyKdV, None, TIntFltH)
TIntFltH.Swap = new_instancemethod(_SnapTime.TIntFltH_Swap, None, TIntFltH)
TIntFltH.Defrag = new_instancemethod(_SnapTime.TIntFltH_Defrag, None, TIntFltH)
TIntFltH.Pack = new_instancemethod(_SnapTime.TIntFltH_Pack, None, TIntFltH)
TIntFltH.Sort = new_instancemethod(_SnapTime.TIntFltH_Sort, None, TIntFltH)
TIntFltH.SortByKey = new_instancemethod(_SnapTime.TIntFltH_SortByKey, None, TIntFltH)
TIntFltH.SortByDat = new_instancemethod(_SnapTime.TIntFltH_SortByDat, None, TIntFltH)
TIntFltH_swigregister = _SnapTime.TIntFltH_swigregister
TIntFltH_swigregister(TIntFltH)

class TIntFlt64H(object):
    """Proxy of C++ THash<(TInt64,TFlt,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _SnapTime.TIntFlt64H_HashPrimes

    def __init__(self, *args):
        """
        __init__(THash<(TInt64,TFlt,int64)> self) -> TIntFlt64H
        __init__(THash<(TInt64,TFlt,int64)> self, TIntFlt64H Hash) -> TIntFlt64H

        Parameters
        ----------
        Hash: THash< TInt64,TFlt,int64 > const &

        __init__(THash<(TInt64,TFlt,int64)> self, long long const & ExpectVals, bool const & _AutoSizeP=False) -> TIntFlt64H

        Parameters
        ----------
        ExpectVals: long long const &
        _AutoSizeP: bool const &

        __init__(THash<(TInt64,TFlt,int64)> self, long long const & ExpectVals) -> TIntFlt64H

        Parameters
        ----------
        ExpectVals: long long const &

        __init__(THash<(TInt64,TFlt,int64)> self, TSIn SIn) -> TIntFlt64H

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntFlt64H_swiginit(self, _SnapTime.new_TIntFlt64H(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntFlt64H self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntFlt64H_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntFlt64H self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntFlt64H_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntFlt64H self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntFlt64H_Save(self, SOut)


    def __eq__(self, Hash):
        """
        __eq__(TIntFlt64H self, TIntFlt64H Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt64,TFlt,int64 > const &

        """
        return _SnapTime.TIntFlt64H___eq__(self, Hash)


    def __lt__(self, Hash):
        """
        __lt__(TIntFlt64H self, TIntFlt64H Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt64,TFlt,int64 > const &

        """
        return _SnapTime.TIntFlt64H___lt__(self, Hash)


    def __call__(self, Key):
        """
        __call__(TIntFlt64H self, TInt64 Key) -> TFlt

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TIntFlt64H___call__(self, Key)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntFlt64H self) -> ::TSize

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64H_GetMemUsed(self)


    def BegI(self):
        """
        BegI(TIntFlt64H self) -> TIntFlt64HI

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64H_BegI(self)


    def EndI(self):
        """
        EndI(TIntFlt64H self) -> TIntFlt64HI

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64H_EndI(self)


    def begin(self):
        """
        begin(TIntFlt64H self) -> TIntFlt64HI

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64H_begin(self)


    def end(self):
        """
        end(TIntFlt64H self) -> TIntFlt64HI

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64H_end(self)


    def GetI(self, Key):
        """
        GetI(TIntFlt64H self, TInt64 Key) -> TIntFlt64HI

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TIntFlt64H_GetI(self, Key)


    def Gen(self, ExpectVals):
        """
        Gen(TIntFlt64H self, long long const & ExpectVals)

        Parameters
        ----------
        ExpectVals: long long const &

        """
        return _SnapTime.TIntFlt64H_Gen(self, ExpectVals)


    def Clr(self, DoDel=True, NoDelLim=-1, ResetDat=True):
        """
        Clr(TIntFlt64H self, bool const & DoDel=True, long long const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &
        ResetDat: bool const &

        Clr(TIntFlt64H self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(TIntFlt64H self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntFlt64H self)

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > *

        """
        return _SnapTime.TIntFlt64H_Clr(self, DoDel, NoDelLim, ResetDat)


    def Empty(self):
        """
        Empty(TIntFlt64H self) -> bool

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64H_Empty(self)


    def Len(self):
        """
        Len(TIntFlt64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64H_Len(self)


    def GetPorts(self):
        """
        GetPorts(TIntFlt64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64H_GetPorts(self)


    def IsAutoSize(self):
        """
        IsAutoSize(TIntFlt64H self) -> bool

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64H_IsAutoSize(self)


    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TIntFlt64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64H_GetMxKeyIds(self)


    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TIntFlt64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64H_GetReservedKeyIds(self)


    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TIntFlt64H self) -> bool

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64H_IsKeyIdEqKeyN(self)


    def AddKey(self, Key):
        """
        AddKey(TIntFlt64H self, TInt64 Key) -> long long

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TIntFlt64H_AddKey(self, Key)


    def AddDat(self, *args):
        """
        AddDat(TIntFlt64H self, TInt64 Key) -> TFlt

        Parameters
        ----------
        Key: TInt64 const &

        AddDat(TIntFlt64H self, TInt64 Key, TFlt Dat) -> TFlt

        Parameters
        ----------
        Key: TInt64 const &
        Dat: TFlt const &

        """
        return _SnapTime.TIntFlt64H_AddDat(self, *args)


    def DelKey(self, Key):
        """
        DelKey(TIntFlt64H self, TInt64 Key)

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TIntFlt64H_DelKey(self, Key)


    def DelIfKey(self, Key):
        """
        DelIfKey(TIntFlt64H self, TInt64 Key) -> bool

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TIntFlt64H_DelIfKey(self, Key)


    def DelKeyId(self, KeyId):
        """
        DelKeyId(TIntFlt64H self, long long const & KeyId)

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TIntFlt64H_DelKeyId(self, KeyId)


    def DelKeyIdV(self, KeyIdV):
        """
        DelKeyIdV(TIntFlt64H self, TInt64V KeyIdV)

        Parameters
        ----------
        KeyIdV: TInt64V const &

        """
        return _SnapTime.TIntFlt64H_DelKeyIdV(self, KeyIdV)


    def GetKey(self, KeyId):
        """
        GetKey(TIntFlt64H self, long long const & KeyId) -> TInt64

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TIntFlt64H_GetKey(self, KeyId)


    def GetKeyId(self, Key):
        """
        GetKeyId(TIntFlt64H self, TInt64 Key) -> long long

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TIntFlt64H_GetKeyId(self, Key)


    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TIntFlt64H self, TRnd Rnd) -> long long

        Parameters
        ----------
        Rnd: TRnd &

        GetRndKeyId(TIntFlt64H self, TRnd Rnd, double const & EmptyFrac) -> long long

        Parameters
        ----------
        Rnd: TRnd &
        EmptyFrac: double const &

        """
        return _SnapTime.TIntFlt64H_GetRndKeyId(self, *args)


    def IsKey(self, *args):
        """
        IsKey(TIntFlt64H self, TInt64 Key) -> bool

        Parameters
        ----------
        Key: TInt64 const &

        IsKey(TIntFlt64H self, TInt64 Key, long long & KeyId) -> bool

        Parameters
        ----------
        Key: TInt64 const &
        KeyId: long long &

        """
        return _SnapTime.TIntFlt64H_IsKey(self, *args)


    def IsKeyId(self, KeyId):
        """
        IsKeyId(TIntFlt64H self, long long const & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TIntFlt64H_IsKeyId(self, KeyId)


    def GetDat(self, *args):
        """
        GetDat(TIntFlt64H self, TInt64 Key) -> TFlt

        Parameters
        ----------
        Key: TInt64 const &

        GetDat(TIntFlt64H self, TInt64 Key) -> TFlt

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TIntFlt64H_GetDat(self, *args)


    def GetDatWithDefault(self, Key, DefaultValue):
        """
        GetDatWithDefault(TIntFlt64H self, TInt64 Key, TFlt DefaultValue) -> TFlt

        Parameters
        ----------
        Key: TInt64 const &
        DefaultValue: TFlt

        """
        return _SnapTime.TIntFlt64H_GetDatWithDefault(self, Key, DefaultValue)


    def GetKeyDat(self, KeyId, Key, Dat):
        """
        GetKeyDat(TIntFlt64H self, long long const & KeyId, TInt64 Key, TFlt Dat)

        Parameters
        ----------
        KeyId: long long const &
        Key: TInt64 &
        Dat: TFlt &

        """
        return _SnapTime.TIntFlt64H_GetKeyDat(self, KeyId, Key, Dat)


    def IsKeyGetDat(self, Key, Dat):
        """
        IsKeyGetDat(TIntFlt64H self, TInt64 Key, TFlt Dat) -> bool

        Parameters
        ----------
        Key: TInt64 const &
        Dat: TFlt &

        """
        return _SnapTime.TIntFlt64H_IsKeyGetDat(self, Key, Dat)


    def FFirstKeyId(self):
        """
        FFirstKeyId(TIntFlt64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64H_FFirstKeyId(self)


    def FNextKeyId(self, KeyId):
        """
        FNextKeyId(TIntFlt64H self, long long & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long &

        """
        return _SnapTime.TIntFlt64H_FNextKeyId(self, KeyId)


    def GetKeyV(self, KeyV):
        """
        GetKeyV(TIntFlt64H self, TInt64V KeyV)

        Parameters
        ----------
        KeyV: TVec< TInt64,long long > &

        """
        return _SnapTime.TIntFlt64H_GetKeyV(self, KeyV)


    def GetDatV(self, DatV):
        """
        GetDatV(TIntFlt64H self, TFlt64V DatV)

        Parameters
        ----------
        DatV: TVec< TFlt,long long > &

        """
        return _SnapTime.TIntFlt64H_GetDatV(self, DatV)


    def GetKeyDatPrV(self, KeyDatPrV):
        """
        GetKeyDatPrV(TIntFlt64H self, TVec< TPair< TInt64,TFlt >,long long > & KeyDatPrV)

        Parameters
        ----------
        KeyDatPrV: TVec< TPair< TInt64,TFlt >,long long > &

        """
        return _SnapTime.TIntFlt64H_GetKeyDatPrV(self, KeyDatPrV)


    def GetDatKeyPrV(self, DatKeyPrV):
        """
        GetDatKeyPrV(TIntFlt64H self, TVec< TPair< TFlt,TInt64 >,long long > & DatKeyPrV)

        Parameters
        ----------
        DatKeyPrV: TVec< TPair< TFlt,TInt64 >,long long > &

        """
        return _SnapTime.TIntFlt64H_GetDatKeyPrV(self, DatKeyPrV)


    def GetKeyDatKdV(self, KeyDatKdV):
        """
        GetKeyDatKdV(TIntFlt64H self, TIntFltKd64V KeyDatKdV)

        Parameters
        ----------
        KeyDatKdV: TVec< TKeyDat< TInt64,TFlt >,long long > &

        """
        return _SnapTime.TIntFlt64H_GetKeyDatKdV(self, KeyDatKdV)


    def GetDatKeyKdV(self, DatKeyKdV):
        """
        GetDatKeyKdV(TIntFlt64H self, TVec< TKeyDat< TFlt,TInt64 >,long long > & DatKeyKdV)

        Parameters
        ----------
        DatKeyKdV: TVec< TKeyDat< TFlt,TInt64 >,long long > &

        """
        return _SnapTime.TIntFlt64H_GetDatKeyKdV(self, DatKeyKdV)


    def Swap(self, Hash):
        """
        Swap(TIntFlt64H self, TIntFlt64H Hash)

        Parameters
        ----------
        Hash: THash< TInt64,TFlt,int64 > &

        """
        return _SnapTime.TIntFlt64H_Swap(self, Hash)


    def Defrag(self):
        """
        Defrag(TIntFlt64H self)

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > *

        """
        return _SnapTime.TIntFlt64H_Defrag(self)


    def Pack(self):
        """
        Pack(TIntFlt64H self)

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > *

        """
        return _SnapTime.TIntFlt64H_Pack(self)


    def Sort(self, CmpKey, Asc):
        """
        Sort(TIntFlt64H self, bool const & CmpKey, bool const & Asc)

        Parameters
        ----------
        CmpKey: bool const &
        Asc: bool const &

        """
        return _SnapTime.TIntFlt64H_Sort(self, CmpKey, Asc)


    def SortByKey(self, Asc=True):
        """
        SortByKey(TIntFlt64H self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByKey(TIntFlt64H self)

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > *

        """
        return _SnapTime.TIntFlt64H_SortByKey(self, Asc)


    def SortByDat(self, Asc=True):
        """
        SortByDat(TIntFlt64H self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByDat(TIntFlt64H self)

        Parameters
        ----------
        self: THash< TInt64,TFlt,int64 > *

        """
        return _SnapTime.TIntFlt64H_SortByDat(self, Asc)

    __swig_destroy__ = _SnapTime.delete_TIntFlt64H
TIntFlt64H.LoadShM = new_instancemethod(_SnapTime.TIntFlt64H_LoadShM, None, TIntFlt64H)
TIntFlt64H.Load = new_instancemethod(_SnapTime.TIntFlt64H_Load, None, TIntFlt64H)
TIntFlt64H.Save = new_instancemethod(_SnapTime.TIntFlt64H_Save, None, TIntFlt64H)
TIntFlt64H.__eq__ = new_instancemethod(_SnapTime.TIntFlt64H___eq__, None, TIntFlt64H)
TIntFlt64H.__lt__ = new_instancemethod(_SnapTime.TIntFlt64H___lt__, None, TIntFlt64H)
TIntFlt64H.__call__ = new_instancemethod(_SnapTime.TIntFlt64H___call__, None, TIntFlt64H)
TIntFlt64H.GetMemUsed = new_instancemethod(_SnapTime.TIntFlt64H_GetMemUsed, None, TIntFlt64H)
TIntFlt64H.BegI = new_instancemethod(_SnapTime.TIntFlt64H_BegI, None, TIntFlt64H)
TIntFlt64H.EndI = new_instancemethod(_SnapTime.TIntFlt64H_EndI, None, TIntFlt64H)
TIntFlt64H.begin = new_instancemethod(_SnapTime.TIntFlt64H_begin, None, TIntFlt64H)
TIntFlt64H.end = new_instancemethod(_SnapTime.TIntFlt64H_end, None, TIntFlt64H)
TIntFlt64H.GetI = new_instancemethod(_SnapTime.TIntFlt64H_GetI, None, TIntFlt64H)
TIntFlt64H.Gen = new_instancemethod(_SnapTime.TIntFlt64H_Gen, None, TIntFlt64H)
TIntFlt64H.Clr = new_instancemethod(_SnapTime.TIntFlt64H_Clr, None, TIntFlt64H)
TIntFlt64H.Empty = new_instancemethod(_SnapTime.TIntFlt64H_Empty, None, TIntFlt64H)
TIntFlt64H.Len = new_instancemethod(_SnapTime.TIntFlt64H_Len, None, TIntFlt64H)
TIntFlt64H.GetPorts = new_instancemethod(_SnapTime.TIntFlt64H_GetPorts, None, TIntFlt64H)
TIntFlt64H.IsAutoSize = new_instancemethod(_SnapTime.TIntFlt64H_IsAutoSize, None, TIntFlt64H)
TIntFlt64H.GetMxKeyIds = new_instancemethod(_SnapTime.TIntFlt64H_GetMxKeyIds, None, TIntFlt64H)
TIntFlt64H.GetReservedKeyIds = new_instancemethod(_SnapTime.TIntFlt64H_GetReservedKeyIds, None, TIntFlt64H)
TIntFlt64H.IsKeyIdEqKeyN = new_instancemethod(_SnapTime.TIntFlt64H_IsKeyIdEqKeyN, None, TIntFlt64H)
TIntFlt64H.AddKey = new_instancemethod(_SnapTime.TIntFlt64H_AddKey, None, TIntFlt64H)
TIntFlt64H.AddDat = new_instancemethod(_SnapTime.TIntFlt64H_AddDat, None, TIntFlt64H)
TIntFlt64H.DelKey = new_instancemethod(_SnapTime.TIntFlt64H_DelKey, None, TIntFlt64H)
TIntFlt64H.DelIfKey = new_instancemethod(_SnapTime.TIntFlt64H_DelIfKey, None, TIntFlt64H)
TIntFlt64H.DelKeyId = new_instancemethod(_SnapTime.TIntFlt64H_DelKeyId, None, TIntFlt64H)
TIntFlt64H.DelKeyIdV = new_instancemethod(_SnapTime.TIntFlt64H_DelKeyIdV, None, TIntFlt64H)
TIntFlt64H.GetKey = new_instancemethod(_SnapTime.TIntFlt64H_GetKey, None, TIntFlt64H)
TIntFlt64H.GetKeyId = new_instancemethod(_SnapTime.TIntFlt64H_GetKeyId, None, TIntFlt64H)
TIntFlt64H.GetRndKeyId = new_instancemethod(_SnapTime.TIntFlt64H_GetRndKeyId, None, TIntFlt64H)
TIntFlt64H.IsKey = new_instancemethod(_SnapTime.TIntFlt64H_IsKey, None, TIntFlt64H)
TIntFlt64H.IsKeyId = new_instancemethod(_SnapTime.TIntFlt64H_IsKeyId, None, TIntFlt64H)
TIntFlt64H.GetDat = new_instancemethod(_SnapTime.TIntFlt64H_GetDat, None, TIntFlt64H)
TIntFlt64H.GetDatWithDefault = new_instancemethod(_SnapTime.TIntFlt64H_GetDatWithDefault, None, TIntFlt64H)
TIntFlt64H.GetKeyDat = new_instancemethod(_SnapTime.TIntFlt64H_GetKeyDat, None, TIntFlt64H)
TIntFlt64H.IsKeyGetDat = new_instancemethod(_SnapTime.TIntFlt64H_IsKeyGetDat, None, TIntFlt64H)
TIntFlt64H.FFirstKeyId = new_instancemethod(_SnapTime.TIntFlt64H_FFirstKeyId, None, TIntFlt64H)
TIntFlt64H.FNextKeyId = new_instancemethod(_SnapTime.TIntFlt64H_FNextKeyId, None, TIntFlt64H)
TIntFlt64H.GetKeyV = new_instancemethod(_SnapTime.TIntFlt64H_GetKeyV, None, TIntFlt64H)
TIntFlt64H.GetDatV = new_instancemethod(_SnapTime.TIntFlt64H_GetDatV, None, TIntFlt64H)
TIntFlt64H.GetKeyDatPrV = new_instancemethod(_SnapTime.TIntFlt64H_GetKeyDatPrV, None, TIntFlt64H)
TIntFlt64H.GetDatKeyPrV = new_instancemethod(_SnapTime.TIntFlt64H_GetDatKeyPrV, None, TIntFlt64H)
TIntFlt64H.GetKeyDatKdV = new_instancemethod(_SnapTime.TIntFlt64H_GetKeyDatKdV, None, TIntFlt64H)
TIntFlt64H.GetDatKeyKdV = new_instancemethod(_SnapTime.TIntFlt64H_GetDatKeyKdV, None, TIntFlt64H)
TIntFlt64H.Swap = new_instancemethod(_SnapTime.TIntFlt64H_Swap, None, TIntFlt64H)
TIntFlt64H.Defrag = new_instancemethod(_SnapTime.TIntFlt64H_Defrag, None, TIntFlt64H)
TIntFlt64H.Pack = new_instancemethod(_SnapTime.TIntFlt64H_Pack, None, TIntFlt64H)
TIntFlt64H.Sort = new_instancemethod(_SnapTime.TIntFlt64H_Sort, None, TIntFlt64H)
TIntFlt64H.SortByKey = new_instancemethod(_SnapTime.TIntFlt64H_SortByKey, None, TIntFlt64H)
TIntFlt64H.SortByDat = new_instancemethod(_SnapTime.TIntFlt64H_SortByDat, None, TIntFlt64H)
TIntFlt64H_swigregister = _SnapTime.TIntFlt64H_swigregister
TIntFlt64H_swigregister(TIntFlt64H)

class TIntStrH(object):
    """Proxy of C++ THash<(TInt,TStr)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _SnapTime.TIntStrH_HashPrimes

    def __init__(self, *args):
        """
        __init__(THash<(TInt,TStr)> self) -> TIntStrH
        __init__(THash<(TInt,TStr)> self, TIntStrH Hash) -> TIntStrH

        Parameters
        ----------
        Hash: THash< TInt,TStr > const &

        __init__(THash<(TInt,TStr)> self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntStrH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(THash<(TInt,TStr)> self, int const & ExpectVals) -> TIntStrH

        Parameters
        ----------
        ExpectVals: int const &

        __init__(THash<(TInt,TStr)> self, TSIn SIn) -> TIntStrH

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntStrH_swiginit(self, _SnapTime.new_TIntStrH(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntStrH self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntStrH_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntStrH self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntStrH_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntStrH self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntStrH_Save(self, SOut)


    def __eq__(self, Hash):
        """
        __eq__(TIntStrH self, TIntStrH Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt,TStr > const &

        """
        return _SnapTime.TIntStrH___eq__(self, Hash)


    def __lt__(self, Hash):
        """
        __lt__(TIntStrH self, TIntStrH Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt,TStr > const &

        """
        return _SnapTime.TIntStrH___lt__(self, Hash)


    def __call__(self, Key):
        """
        __call__(TIntStrH self, TInt Key) -> TStr

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntStrH___call__(self, Key)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntStrH self) -> ::TSize

        Parameters
        ----------
        self: THash< TInt,TStr > const *

        """
        return _SnapTime.TIntStrH_GetMemUsed(self)


    def BegI(self):
        """
        BegI(TIntStrH self) -> TIntStrHI

        Parameters
        ----------
        self: THash< TInt,TStr > const *

        """
        return _SnapTime.TIntStrH_BegI(self)


    def EndI(self):
        """
        EndI(TIntStrH self) -> TIntStrHI

        Parameters
        ----------
        self: THash< TInt,TStr > const *

        """
        return _SnapTime.TIntStrH_EndI(self)


    def begin(self):
        """
        begin(TIntStrH self) -> TIntStrHI

        Parameters
        ----------
        self: THash< TInt,TStr > const *

        """
        return _SnapTime.TIntStrH_begin(self)


    def end(self):
        """
        end(TIntStrH self) -> TIntStrHI

        Parameters
        ----------
        self: THash< TInt,TStr > const *

        """
        return _SnapTime.TIntStrH_end(self)


    def GetI(self, Key):
        """
        GetI(TIntStrH self, TInt Key) -> TIntStrHI

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntStrH_GetI(self, Key)


    def Gen(self, ExpectVals):
        """
        Gen(TIntStrH self, int const & ExpectVals)

        Parameters
        ----------
        ExpectVals: int const &

        """
        return _SnapTime.TIntStrH_Gen(self, ExpectVals)


    def Clr(self, DoDel=True, NoDelLim=-1, ResetDat=True):
        """
        Clr(TIntStrH self, bool const & DoDel=True, int const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &
        ResetDat: bool const &

        Clr(TIntStrH self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TIntStrH self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntStrH self)

        Parameters
        ----------
        self: THash< TInt,TStr > *

        """
        return _SnapTime.TIntStrH_Clr(self, DoDel, NoDelLim, ResetDat)


    def Empty(self):
        """
        Empty(TIntStrH self) -> bool

        Parameters
        ----------
        self: THash< TInt,TStr > const *

        """
        return _SnapTime.TIntStrH_Empty(self)


    def Len(self):
        """
        Len(TIntStrH self) -> int

        Parameters
        ----------
        self: THash< TInt,TStr > const *

        """
        return _SnapTime.TIntStrH_Len(self)


    def GetPorts(self):
        """
        GetPorts(TIntStrH self) -> int

        Parameters
        ----------
        self: THash< TInt,TStr > const *

        """
        return _SnapTime.TIntStrH_GetPorts(self)


    def IsAutoSize(self):
        """
        IsAutoSize(TIntStrH self) -> bool

        Parameters
        ----------
        self: THash< TInt,TStr > const *

        """
        return _SnapTime.TIntStrH_IsAutoSize(self)


    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TIntStrH self) -> int

        Parameters
        ----------
        self: THash< TInt,TStr > const *

        """
        return _SnapTime.TIntStrH_GetMxKeyIds(self)


    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TIntStrH self) -> int

        Parameters
        ----------
        self: THash< TInt,TStr > const *

        """
        return _SnapTime.TIntStrH_GetReservedKeyIds(self)


    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TIntStrH self) -> bool

        Parameters
        ----------
        self: THash< TInt,TStr > const *

        """
        return _SnapTime.TIntStrH_IsKeyIdEqKeyN(self)


    def AddKey(self, Key):
        """
        AddKey(TIntStrH self, TInt Key) -> int

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntStrH_AddKey(self, Key)


    def AddDat(self, *args):
        """
        AddDat(TIntStrH self, TInt Key) -> TStr

        Parameters
        ----------
        Key: TInt const &

        AddDat(TIntStrH self, TInt Key, TStr Dat) -> TStr

        Parameters
        ----------
        Key: TInt const &
        Dat: TStr const &

        """
        return _SnapTime.TIntStrH_AddDat(self, *args)


    def DelKey(self, Key):
        """
        DelKey(TIntStrH self, TInt Key)

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntStrH_DelKey(self, Key)


    def DelIfKey(self, Key):
        """
        DelIfKey(TIntStrH self, TInt Key) -> bool

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntStrH_DelIfKey(self, Key)


    def DelKeyId(self, KeyId):
        """
        DelKeyId(TIntStrH self, int const & KeyId)

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntStrH_DelKeyId(self, KeyId)


    def DelKeyIdV(self, KeyIdV):
        """
        DelKeyIdV(TIntStrH self, TInt64V KeyIdV)

        Parameters
        ----------
        KeyIdV: TInt64V const &

        """
        return _SnapTime.TIntStrH_DelKeyIdV(self, KeyIdV)


    def GetKey(self, KeyId):
        """
        GetKey(TIntStrH self, int const & KeyId) -> TInt

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntStrH_GetKey(self, KeyId)


    def GetKeyId(self, Key):
        """
        GetKeyId(TIntStrH self, TInt Key) -> int

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntStrH_GetKeyId(self, Key)


    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TIntStrH self, TRnd Rnd) -> int

        Parameters
        ----------
        Rnd: TRnd &

        GetRndKeyId(TIntStrH self, TRnd Rnd, double const & EmptyFrac) -> int

        Parameters
        ----------
        Rnd: TRnd &
        EmptyFrac: double const &

        """
        return _SnapTime.TIntStrH_GetRndKeyId(self, *args)


    def IsKey(self, *args):
        """
        IsKey(TIntStrH self, TInt Key) -> bool

        Parameters
        ----------
        Key: TInt const &

        IsKey(TIntStrH self, TInt Key, int & KeyId) -> bool

        Parameters
        ----------
        Key: TInt const &
        KeyId: int &

        """
        return _SnapTime.TIntStrH_IsKey(self, *args)


    def IsKeyId(self, KeyId):
        """
        IsKeyId(TIntStrH self, int const & KeyId) -> bool

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntStrH_IsKeyId(self, KeyId)


    def GetDat(self, *args):
        """
        GetDat(TIntStrH self, TInt Key) -> TStr

        Parameters
        ----------
        Key: TInt const &

        GetDat(TIntStrH self, TInt Key) -> TStr

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntStrH_GetDat(self, *args)


    def GetDatWithDefault(self, Key, DefaultValue):
        """
        GetDatWithDefault(TIntStrH self, TInt Key, TStr DefaultValue) -> TStr

        Parameters
        ----------
        Key: TInt const &
        DefaultValue: TStr

        """
        return _SnapTime.TIntStrH_GetDatWithDefault(self, Key, DefaultValue)


    def GetKeyDat(self, KeyId, Key, Dat):
        """
        GetKeyDat(TIntStrH self, int const & KeyId, TInt Key, TStr Dat)

        Parameters
        ----------
        KeyId: int const &
        Key: TInt &
        Dat: TStr &

        """
        return _SnapTime.TIntStrH_GetKeyDat(self, KeyId, Key, Dat)


    def IsKeyGetDat(self, Key, Dat):
        """
        IsKeyGetDat(TIntStrH self, TInt Key, TStr Dat) -> bool

        Parameters
        ----------
        Key: TInt const &
        Dat: TStr &

        """
        return _SnapTime.TIntStrH_IsKeyGetDat(self, Key, Dat)


    def FFirstKeyId(self):
        """
        FFirstKeyId(TIntStrH self) -> int

        Parameters
        ----------
        self: THash< TInt,TStr > const *

        """
        return _SnapTime.TIntStrH_FFirstKeyId(self)


    def FNextKeyId(self, KeyId):
        """
        FNextKeyId(TIntStrH self, int & KeyId) -> bool

        Parameters
        ----------
        KeyId: int &

        """
        return _SnapTime.TIntStrH_FNextKeyId(self, KeyId)


    def GetKeyV(self, KeyV):
        """
        GetKeyV(TIntStrH self, TIntV KeyV)

        Parameters
        ----------
        KeyV: TVec< TInt,int > &

        """
        return _SnapTime.TIntStrH_GetKeyV(self, KeyV)


    def GetDatV(self, DatV):
        """
        GetDatV(TIntStrH self, TStrV DatV)

        Parameters
        ----------
        DatV: TVec< TStr,int > &

        """
        return _SnapTime.TIntStrH_GetDatV(self, DatV)


    def GetKeyDatPrV(self, KeyDatPrV):
        """
        GetKeyDatPrV(TIntStrH self, TVec< TPair< TInt,TStr >,int > & KeyDatPrV)

        Parameters
        ----------
        KeyDatPrV: TVec< TPair< TInt,TStr >,int > &

        """
        return _SnapTime.TIntStrH_GetKeyDatPrV(self, KeyDatPrV)


    def GetDatKeyPrV(self, DatKeyPrV):
        """
        GetDatKeyPrV(TIntStrH self, TStrIntPrV DatKeyPrV)

        Parameters
        ----------
        DatKeyPrV: TVec< TPair< TStr,TInt >,int > &

        """
        return _SnapTime.TIntStrH_GetDatKeyPrV(self, DatKeyPrV)


    def GetKeyDatKdV(self, KeyDatKdV):
        """
        GetKeyDatKdV(TIntStrH self, TVec< TKeyDat< TInt,TStr >,int > & KeyDatKdV)

        Parameters
        ----------
        KeyDatKdV: TVec< TKeyDat< TInt,TStr >,int > &

        """
        return _SnapTime.TIntStrH_GetKeyDatKdV(self, KeyDatKdV)


    def GetDatKeyKdV(self, DatKeyKdV):
        """
        GetDatKeyKdV(TIntStrH self, TVec< TKeyDat< TStr,TInt >,int > & DatKeyKdV)

        Parameters
        ----------
        DatKeyKdV: TVec< TKeyDat< TStr,TInt >,int > &

        """
        return _SnapTime.TIntStrH_GetDatKeyKdV(self, DatKeyKdV)


    def Swap(self, Hash):
        """
        Swap(TIntStrH self, TIntStrH Hash)

        Parameters
        ----------
        Hash: THash< TInt,TStr > &

        """
        return _SnapTime.TIntStrH_Swap(self, Hash)


    def Defrag(self):
        """
        Defrag(TIntStrH self)

        Parameters
        ----------
        self: THash< TInt,TStr > *

        """
        return _SnapTime.TIntStrH_Defrag(self)


    def Pack(self):
        """
        Pack(TIntStrH self)

        Parameters
        ----------
        self: THash< TInt,TStr > *

        """
        return _SnapTime.TIntStrH_Pack(self)


    def Sort(self, CmpKey, Asc):
        """
        Sort(TIntStrH self, bool const & CmpKey, bool const & Asc)

        Parameters
        ----------
        CmpKey: bool const &
        Asc: bool const &

        """
        return _SnapTime.TIntStrH_Sort(self, CmpKey, Asc)


    def SortByKey(self, Asc=True):
        """
        SortByKey(TIntStrH self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByKey(TIntStrH self)

        Parameters
        ----------
        self: THash< TInt,TStr > *

        """
        return _SnapTime.TIntStrH_SortByKey(self, Asc)


    def SortByDat(self, Asc=True):
        """
        SortByDat(TIntStrH self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByDat(TIntStrH self)

        Parameters
        ----------
        self: THash< TInt,TStr > *

        """
        return _SnapTime.TIntStrH_SortByDat(self, Asc)

    __swig_destroy__ = _SnapTime.delete_TIntStrH
TIntStrH.LoadShM = new_instancemethod(_SnapTime.TIntStrH_LoadShM, None, TIntStrH)
TIntStrH.Load = new_instancemethod(_SnapTime.TIntStrH_Load, None, TIntStrH)
TIntStrH.Save = new_instancemethod(_SnapTime.TIntStrH_Save, None, TIntStrH)
TIntStrH.__eq__ = new_instancemethod(_SnapTime.TIntStrH___eq__, None, TIntStrH)
TIntStrH.__lt__ = new_instancemethod(_SnapTime.TIntStrH___lt__, None, TIntStrH)
TIntStrH.__call__ = new_instancemethod(_SnapTime.TIntStrH___call__, None, TIntStrH)
TIntStrH.GetMemUsed = new_instancemethod(_SnapTime.TIntStrH_GetMemUsed, None, TIntStrH)
TIntStrH.BegI = new_instancemethod(_SnapTime.TIntStrH_BegI, None, TIntStrH)
TIntStrH.EndI = new_instancemethod(_SnapTime.TIntStrH_EndI, None, TIntStrH)
TIntStrH.begin = new_instancemethod(_SnapTime.TIntStrH_begin, None, TIntStrH)
TIntStrH.end = new_instancemethod(_SnapTime.TIntStrH_end, None, TIntStrH)
TIntStrH.GetI = new_instancemethod(_SnapTime.TIntStrH_GetI, None, TIntStrH)
TIntStrH.Gen = new_instancemethod(_SnapTime.TIntStrH_Gen, None, TIntStrH)
TIntStrH.Clr = new_instancemethod(_SnapTime.TIntStrH_Clr, None, TIntStrH)
TIntStrH.Empty = new_instancemethod(_SnapTime.TIntStrH_Empty, None, TIntStrH)
TIntStrH.Len = new_instancemethod(_SnapTime.TIntStrH_Len, None, TIntStrH)
TIntStrH.GetPorts = new_instancemethod(_SnapTime.TIntStrH_GetPorts, None, TIntStrH)
TIntStrH.IsAutoSize = new_instancemethod(_SnapTime.TIntStrH_IsAutoSize, None, TIntStrH)
TIntStrH.GetMxKeyIds = new_instancemethod(_SnapTime.TIntStrH_GetMxKeyIds, None, TIntStrH)
TIntStrH.GetReservedKeyIds = new_instancemethod(_SnapTime.TIntStrH_GetReservedKeyIds, None, TIntStrH)
TIntStrH.IsKeyIdEqKeyN = new_instancemethod(_SnapTime.TIntStrH_IsKeyIdEqKeyN, None, TIntStrH)
TIntStrH.AddKey = new_instancemethod(_SnapTime.TIntStrH_AddKey, None, TIntStrH)
TIntStrH.AddDat = new_instancemethod(_SnapTime.TIntStrH_AddDat, None, TIntStrH)
TIntStrH.DelKey = new_instancemethod(_SnapTime.TIntStrH_DelKey, None, TIntStrH)
TIntStrH.DelIfKey = new_instancemethod(_SnapTime.TIntStrH_DelIfKey, None, TIntStrH)
TIntStrH.DelKeyId = new_instancemethod(_SnapTime.TIntStrH_DelKeyId, None, TIntStrH)
TIntStrH.DelKeyIdV = new_instancemethod(_SnapTime.TIntStrH_DelKeyIdV, None, TIntStrH)
TIntStrH.GetKey = new_instancemethod(_SnapTime.TIntStrH_GetKey, None, TIntStrH)
TIntStrH.GetKeyId = new_instancemethod(_SnapTime.TIntStrH_GetKeyId, None, TIntStrH)
TIntStrH.GetRndKeyId = new_instancemethod(_SnapTime.TIntStrH_GetRndKeyId, None, TIntStrH)
TIntStrH.IsKey = new_instancemethod(_SnapTime.TIntStrH_IsKey, None, TIntStrH)
TIntStrH.IsKeyId = new_instancemethod(_SnapTime.TIntStrH_IsKeyId, None, TIntStrH)
TIntStrH.GetDat = new_instancemethod(_SnapTime.TIntStrH_GetDat, None, TIntStrH)
TIntStrH.GetDatWithDefault = new_instancemethod(_SnapTime.TIntStrH_GetDatWithDefault, None, TIntStrH)
TIntStrH.GetKeyDat = new_instancemethod(_SnapTime.TIntStrH_GetKeyDat, None, TIntStrH)
TIntStrH.IsKeyGetDat = new_instancemethod(_SnapTime.TIntStrH_IsKeyGetDat, None, TIntStrH)
TIntStrH.FFirstKeyId = new_instancemethod(_SnapTime.TIntStrH_FFirstKeyId, None, TIntStrH)
TIntStrH.FNextKeyId = new_instancemethod(_SnapTime.TIntStrH_FNextKeyId, None, TIntStrH)
TIntStrH.GetKeyV = new_instancemethod(_SnapTime.TIntStrH_GetKeyV, None, TIntStrH)
TIntStrH.GetDatV = new_instancemethod(_SnapTime.TIntStrH_GetDatV, None, TIntStrH)
TIntStrH.GetKeyDatPrV = new_instancemethod(_SnapTime.TIntStrH_GetKeyDatPrV, None, TIntStrH)
TIntStrH.GetDatKeyPrV = new_instancemethod(_SnapTime.TIntStrH_GetDatKeyPrV, None, TIntStrH)
TIntStrH.GetKeyDatKdV = new_instancemethod(_SnapTime.TIntStrH_GetKeyDatKdV, None, TIntStrH)
TIntStrH.GetDatKeyKdV = new_instancemethod(_SnapTime.TIntStrH_GetDatKeyKdV, None, TIntStrH)
TIntStrH.Swap = new_instancemethod(_SnapTime.TIntStrH_Swap, None, TIntStrH)
TIntStrH.Defrag = new_instancemethod(_SnapTime.TIntStrH_Defrag, None, TIntStrH)
TIntStrH.Pack = new_instancemethod(_SnapTime.TIntStrH_Pack, None, TIntStrH)
TIntStrH.Sort = new_instancemethod(_SnapTime.TIntStrH_Sort, None, TIntStrH)
TIntStrH.SortByKey = new_instancemethod(_SnapTime.TIntStrH_SortByKey, None, TIntStrH)
TIntStrH.SortByDat = new_instancemethod(_SnapTime.TIntStrH_SortByDat, None, TIntStrH)
TIntStrH_swigregister = _SnapTime.TIntStrH_swigregister
TIntStrH_swigregister(TIntStrH)

class TIntStr64H(object):
    """Proxy of C++ THash<(TInt64,TStr,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _SnapTime.TIntStr64H_HashPrimes

    def __init__(self, *args):
        """
        __init__(THash<(TInt64,TStr,int64)> self) -> TIntStr64H
        __init__(THash<(TInt64,TStr,int64)> self, TIntStr64H Hash) -> TIntStr64H

        Parameters
        ----------
        Hash: THash< TInt64,TStr,int64 > const &

        __init__(THash<(TInt64,TStr,int64)> self, long long const & ExpectVals, bool const & _AutoSizeP=False) -> TIntStr64H

        Parameters
        ----------
        ExpectVals: long long const &
        _AutoSizeP: bool const &

        __init__(THash<(TInt64,TStr,int64)> self, long long const & ExpectVals) -> TIntStr64H

        Parameters
        ----------
        ExpectVals: long long const &

        __init__(THash<(TInt64,TStr,int64)> self, TSIn SIn) -> TIntStr64H

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntStr64H_swiginit(self, _SnapTime.new_TIntStr64H(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntStr64H self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntStr64H_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntStr64H self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntStr64H_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntStr64H self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntStr64H_Save(self, SOut)


    def __eq__(self, Hash):
        """
        __eq__(TIntStr64H self, TIntStr64H Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt64,TStr,int64 > const &

        """
        return _SnapTime.TIntStr64H___eq__(self, Hash)


    def __lt__(self, Hash):
        """
        __lt__(TIntStr64H self, TIntStr64H Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt64,TStr,int64 > const &

        """
        return _SnapTime.TIntStr64H___lt__(self, Hash)


    def __call__(self, Key):
        """
        __call__(TIntStr64H self, TInt64 Key) -> TStr

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TIntStr64H___call__(self, Key)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntStr64H self) -> ::TSize

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64H_GetMemUsed(self)


    def BegI(self):
        """
        BegI(TIntStr64H self) -> TIntStr64HI

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64H_BegI(self)


    def EndI(self):
        """
        EndI(TIntStr64H self) -> TIntStr64HI

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64H_EndI(self)


    def begin(self):
        """
        begin(TIntStr64H self) -> TIntStr64HI

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64H_begin(self)


    def end(self):
        """
        end(TIntStr64H self) -> TIntStr64HI

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64H_end(self)


    def GetI(self, Key):
        """
        GetI(TIntStr64H self, TInt64 Key) -> TIntStr64HI

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TIntStr64H_GetI(self, Key)


    def Gen(self, ExpectVals):
        """
        Gen(TIntStr64H self, long long const & ExpectVals)

        Parameters
        ----------
        ExpectVals: long long const &

        """
        return _SnapTime.TIntStr64H_Gen(self, ExpectVals)


    def Clr(self, DoDel=True, NoDelLim=-1, ResetDat=True):
        """
        Clr(TIntStr64H self, bool const & DoDel=True, long long const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &
        ResetDat: bool const &

        Clr(TIntStr64H self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(TIntStr64H self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntStr64H self)

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > *

        """
        return _SnapTime.TIntStr64H_Clr(self, DoDel, NoDelLim, ResetDat)


    def Empty(self):
        """
        Empty(TIntStr64H self) -> bool

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64H_Empty(self)


    def Len(self):
        """
        Len(TIntStr64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64H_Len(self)


    def GetPorts(self):
        """
        GetPorts(TIntStr64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64H_GetPorts(self)


    def IsAutoSize(self):
        """
        IsAutoSize(TIntStr64H self) -> bool

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64H_IsAutoSize(self)


    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TIntStr64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64H_GetMxKeyIds(self)


    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TIntStr64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64H_GetReservedKeyIds(self)


    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TIntStr64H self) -> bool

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64H_IsKeyIdEqKeyN(self)


    def AddKey(self, Key):
        """
        AddKey(TIntStr64H self, TInt64 Key) -> long long

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TIntStr64H_AddKey(self, Key)


    def AddDat(self, *args):
        """
        AddDat(TIntStr64H self, TInt64 Key) -> TStr

        Parameters
        ----------
        Key: TInt64 const &

        AddDat(TIntStr64H self, TInt64 Key, TStr Dat) -> TStr

        Parameters
        ----------
        Key: TInt64 const &
        Dat: TStr const &

        """
        return _SnapTime.TIntStr64H_AddDat(self, *args)


    def DelKey(self, Key):
        """
        DelKey(TIntStr64H self, TInt64 Key)

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TIntStr64H_DelKey(self, Key)


    def DelIfKey(self, Key):
        """
        DelIfKey(TIntStr64H self, TInt64 Key) -> bool

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TIntStr64H_DelIfKey(self, Key)


    def DelKeyId(self, KeyId):
        """
        DelKeyId(TIntStr64H self, long long const & KeyId)

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TIntStr64H_DelKeyId(self, KeyId)


    def DelKeyIdV(self, KeyIdV):
        """
        DelKeyIdV(TIntStr64H self, TInt64V KeyIdV)

        Parameters
        ----------
        KeyIdV: TInt64V const &

        """
        return _SnapTime.TIntStr64H_DelKeyIdV(self, KeyIdV)


    def GetKey(self, KeyId):
        """
        GetKey(TIntStr64H self, long long const & KeyId) -> TInt64

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TIntStr64H_GetKey(self, KeyId)


    def GetKeyId(self, Key):
        """
        GetKeyId(TIntStr64H self, TInt64 Key) -> long long

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TIntStr64H_GetKeyId(self, Key)


    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TIntStr64H self, TRnd Rnd) -> long long

        Parameters
        ----------
        Rnd: TRnd &

        GetRndKeyId(TIntStr64H self, TRnd Rnd, double const & EmptyFrac) -> long long

        Parameters
        ----------
        Rnd: TRnd &
        EmptyFrac: double const &

        """
        return _SnapTime.TIntStr64H_GetRndKeyId(self, *args)


    def IsKey(self, *args):
        """
        IsKey(TIntStr64H self, TInt64 Key) -> bool

        Parameters
        ----------
        Key: TInt64 const &

        IsKey(TIntStr64H self, TInt64 Key, long long & KeyId) -> bool

        Parameters
        ----------
        Key: TInt64 const &
        KeyId: long long &

        """
        return _SnapTime.TIntStr64H_IsKey(self, *args)


    def IsKeyId(self, KeyId):
        """
        IsKeyId(TIntStr64H self, long long const & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TIntStr64H_IsKeyId(self, KeyId)


    def GetDat(self, *args):
        """
        GetDat(TIntStr64H self, TInt64 Key) -> TStr

        Parameters
        ----------
        Key: TInt64 const &

        GetDat(TIntStr64H self, TInt64 Key) -> TStr

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TIntStr64H_GetDat(self, *args)


    def GetDatWithDefault(self, Key, DefaultValue):
        """
        GetDatWithDefault(TIntStr64H self, TInt64 Key, TStr DefaultValue) -> TStr

        Parameters
        ----------
        Key: TInt64 const &
        DefaultValue: TStr

        """
        return _SnapTime.TIntStr64H_GetDatWithDefault(self, Key, DefaultValue)


    def GetKeyDat(self, KeyId, Key, Dat):
        """
        GetKeyDat(TIntStr64H self, long long const & KeyId, TInt64 Key, TStr Dat)

        Parameters
        ----------
        KeyId: long long const &
        Key: TInt64 &
        Dat: TStr &

        """
        return _SnapTime.TIntStr64H_GetKeyDat(self, KeyId, Key, Dat)


    def IsKeyGetDat(self, Key, Dat):
        """
        IsKeyGetDat(TIntStr64H self, TInt64 Key, TStr Dat) -> bool

        Parameters
        ----------
        Key: TInt64 const &
        Dat: TStr &

        """
        return _SnapTime.TIntStr64H_IsKeyGetDat(self, Key, Dat)


    def FFirstKeyId(self):
        """
        FFirstKeyId(TIntStr64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64H_FFirstKeyId(self)


    def FNextKeyId(self, KeyId):
        """
        FNextKeyId(TIntStr64H self, long long & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long &

        """
        return _SnapTime.TIntStr64H_FNextKeyId(self, KeyId)


    def GetKeyV(self, KeyV):
        """
        GetKeyV(TIntStr64H self, TInt64V KeyV)

        Parameters
        ----------
        KeyV: TVec< TInt64,long long > &

        """
        return _SnapTime.TIntStr64H_GetKeyV(self, KeyV)


    def GetDatV(self, DatV):
        """
        GetDatV(TIntStr64H self, TStr64V DatV)

        Parameters
        ----------
        DatV: TVec< TStr,long long > &

        """
        return _SnapTime.TIntStr64H_GetDatV(self, DatV)


    def GetKeyDatPrV(self, KeyDatPrV):
        """
        GetKeyDatPrV(TIntStr64H self, TVec< TPair< TInt64,TStr >,long long > & KeyDatPrV)

        Parameters
        ----------
        KeyDatPrV: TVec< TPair< TInt64,TStr >,long long > &

        """
        return _SnapTime.TIntStr64H_GetKeyDatPrV(self, KeyDatPrV)


    def GetDatKeyPrV(self, DatKeyPrV):
        """
        GetDatKeyPrV(TIntStr64H self, TVec< TPair< TStr,TInt64 >,long long > & DatKeyPrV)

        Parameters
        ----------
        DatKeyPrV: TVec< TPair< TStr,TInt64 >,long long > &

        """
        return _SnapTime.TIntStr64H_GetDatKeyPrV(self, DatKeyPrV)


    def GetKeyDatKdV(self, KeyDatKdV):
        """
        GetKeyDatKdV(TIntStr64H self, TVec< TKeyDat< TInt64,TStr >,long long > & KeyDatKdV)

        Parameters
        ----------
        KeyDatKdV: TVec< TKeyDat< TInt64,TStr >,long long > &

        """
        return _SnapTime.TIntStr64H_GetKeyDatKdV(self, KeyDatKdV)


    def GetDatKeyKdV(self, DatKeyKdV):
        """
        GetDatKeyKdV(TIntStr64H self, TVec< TKeyDat< TStr,TInt64 >,long long > & DatKeyKdV)

        Parameters
        ----------
        DatKeyKdV: TVec< TKeyDat< TStr,TInt64 >,long long > &

        """
        return _SnapTime.TIntStr64H_GetDatKeyKdV(self, DatKeyKdV)


    def Swap(self, Hash):
        """
        Swap(TIntStr64H self, TIntStr64H Hash)

        Parameters
        ----------
        Hash: THash< TInt64,TStr,int64 > &

        """
        return _SnapTime.TIntStr64H_Swap(self, Hash)


    def Defrag(self):
        """
        Defrag(TIntStr64H self)

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > *

        """
        return _SnapTime.TIntStr64H_Defrag(self)


    def Pack(self):
        """
        Pack(TIntStr64H self)

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > *

        """
        return _SnapTime.TIntStr64H_Pack(self)


    def Sort(self, CmpKey, Asc):
        """
        Sort(TIntStr64H self, bool const & CmpKey, bool const & Asc)

        Parameters
        ----------
        CmpKey: bool const &
        Asc: bool const &

        """
        return _SnapTime.TIntStr64H_Sort(self, CmpKey, Asc)


    def SortByKey(self, Asc=True):
        """
        SortByKey(TIntStr64H self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByKey(TIntStr64H self)

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > *

        """
        return _SnapTime.TIntStr64H_SortByKey(self, Asc)


    def SortByDat(self, Asc=True):
        """
        SortByDat(TIntStr64H self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByDat(TIntStr64H self)

        Parameters
        ----------
        self: THash< TInt64,TStr,int64 > *

        """
        return _SnapTime.TIntStr64H_SortByDat(self, Asc)

    __swig_destroy__ = _SnapTime.delete_TIntStr64H
TIntStr64H.LoadShM = new_instancemethod(_SnapTime.TIntStr64H_LoadShM, None, TIntStr64H)
TIntStr64H.Load = new_instancemethod(_SnapTime.TIntStr64H_Load, None, TIntStr64H)
TIntStr64H.Save = new_instancemethod(_SnapTime.TIntStr64H_Save, None, TIntStr64H)
TIntStr64H.__eq__ = new_instancemethod(_SnapTime.TIntStr64H___eq__, None, TIntStr64H)
TIntStr64H.__lt__ = new_instancemethod(_SnapTime.TIntStr64H___lt__, None, TIntStr64H)
TIntStr64H.__call__ = new_instancemethod(_SnapTime.TIntStr64H___call__, None, TIntStr64H)
TIntStr64H.GetMemUsed = new_instancemethod(_SnapTime.TIntStr64H_GetMemUsed, None, TIntStr64H)
TIntStr64H.BegI = new_instancemethod(_SnapTime.TIntStr64H_BegI, None, TIntStr64H)
TIntStr64H.EndI = new_instancemethod(_SnapTime.TIntStr64H_EndI, None, TIntStr64H)
TIntStr64H.begin = new_instancemethod(_SnapTime.TIntStr64H_begin, None, TIntStr64H)
TIntStr64H.end = new_instancemethod(_SnapTime.TIntStr64H_end, None, TIntStr64H)
TIntStr64H.GetI = new_instancemethod(_SnapTime.TIntStr64H_GetI, None, TIntStr64H)
TIntStr64H.Gen = new_instancemethod(_SnapTime.TIntStr64H_Gen, None, TIntStr64H)
TIntStr64H.Clr = new_instancemethod(_SnapTime.TIntStr64H_Clr, None, TIntStr64H)
TIntStr64H.Empty = new_instancemethod(_SnapTime.TIntStr64H_Empty, None, TIntStr64H)
TIntStr64H.Len = new_instancemethod(_SnapTime.TIntStr64H_Len, None, TIntStr64H)
TIntStr64H.GetPorts = new_instancemethod(_SnapTime.TIntStr64H_GetPorts, None, TIntStr64H)
TIntStr64H.IsAutoSize = new_instancemethod(_SnapTime.TIntStr64H_IsAutoSize, None, TIntStr64H)
TIntStr64H.GetMxKeyIds = new_instancemethod(_SnapTime.TIntStr64H_GetMxKeyIds, None, TIntStr64H)
TIntStr64H.GetReservedKeyIds = new_instancemethod(_SnapTime.TIntStr64H_GetReservedKeyIds, None, TIntStr64H)
TIntStr64H.IsKeyIdEqKeyN = new_instancemethod(_SnapTime.TIntStr64H_IsKeyIdEqKeyN, None, TIntStr64H)
TIntStr64H.AddKey = new_instancemethod(_SnapTime.TIntStr64H_AddKey, None, TIntStr64H)
TIntStr64H.AddDat = new_instancemethod(_SnapTime.TIntStr64H_AddDat, None, TIntStr64H)
TIntStr64H.DelKey = new_instancemethod(_SnapTime.TIntStr64H_DelKey, None, TIntStr64H)
TIntStr64H.DelIfKey = new_instancemethod(_SnapTime.TIntStr64H_DelIfKey, None, TIntStr64H)
TIntStr64H.DelKeyId = new_instancemethod(_SnapTime.TIntStr64H_DelKeyId, None, TIntStr64H)
TIntStr64H.DelKeyIdV = new_instancemethod(_SnapTime.TIntStr64H_DelKeyIdV, None, TIntStr64H)
TIntStr64H.GetKey = new_instancemethod(_SnapTime.TIntStr64H_GetKey, None, TIntStr64H)
TIntStr64H.GetKeyId = new_instancemethod(_SnapTime.TIntStr64H_GetKeyId, None, TIntStr64H)
TIntStr64H.GetRndKeyId = new_instancemethod(_SnapTime.TIntStr64H_GetRndKeyId, None, TIntStr64H)
TIntStr64H.IsKey = new_instancemethod(_SnapTime.TIntStr64H_IsKey, None, TIntStr64H)
TIntStr64H.IsKeyId = new_instancemethod(_SnapTime.TIntStr64H_IsKeyId, None, TIntStr64H)
TIntStr64H.GetDat = new_instancemethod(_SnapTime.TIntStr64H_GetDat, None, TIntStr64H)
TIntStr64H.GetDatWithDefault = new_instancemethod(_SnapTime.TIntStr64H_GetDatWithDefault, None, TIntStr64H)
TIntStr64H.GetKeyDat = new_instancemethod(_SnapTime.TIntStr64H_GetKeyDat, None, TIntStr64H)
TIntStr64H.IsKeyGetDat = new_instancemethod(_SnapTime.TIntStr64H_IsKeyGetDat, None, TIntStr64H)
TIntStr64H.FFirstKeyId = new_instancemethod(_SnapTime.TIntStr64H_FFirstKeyId, None, TIntStr64H)
TIntStr64H.FNextKeyId = new_instancemethod(_SnapTime.TIntStr64H_FNextKeyId, None, TIntStr64H)
TIntStr64H.GetKeyV = new_instancemethod(_SnapTime.TIntStr64H_GetKeyV, None, TIntStr64H)
TIntStr64H.GetDatV = new_instancemethod(_SnapTime.TIntStr64H_GetDatV, None, TIntStr64H)
TIntStr64H.GetKeyDatPrV = new_instancemethod(_SnapTime.TIntStr64H_GetKeyDatPrV, None, TIntStr64H)
TIntStr64H.GetDatKeyPrV = new_instancemethod(_SnapTime.TIntStr64H_GetDatKeyPrV, None, TIntStr64H)
TIntStr64H.GetKeyDatKdV = new_instancemethod(_SnapTime.TIntStr64H_GetKeyDatKdV, None, TIntStr64H)
TIntStr64H.GetDatKeyKdV = new_instancemethod(_SnapTime.TIntStr64H_GetDatKeyKdV, None, TIntStr64H)
TIntStr64H.Swap = new_instancemethod(_SnapTime.TIntStr64H_Swap, None, TIntStr64H)
TIntStr64H.Defrag = new_instancemethod(_SnapTime.TIntStr64H_Defrag, None, TIntStr64H)
TIntStr64H.Pack = new_instancemethod(_SnapTime.TIntStr64H_Pack, None, TIntStr64H)
TIntStr64H.Sort = new_instancemethod(_SnapTime.TIntStr64H_Sort, None, TIntStr64H)
TIntStr64H.SortByKey = new_instancemethod(_SnapTime.TIntStr64H_SortByKey, None, TIntStr64H)
TIntStr64H.SortByDat = new_instancemethod(_SnapTime.TIntStr64H_SortByDat, None, TIntStr64H)
TIntStr64H_swigregister = _SnapTime.TIntStr64H_swigregister
TIntStr64H_swigregister(TIntStr64H)

class TIntPrFltH(object):
    """Proxy of C++ THash<(TIntPr,TFlt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _SnapTime.TIntPrFltH_HashPrimes

    def __init__(self, *args):
        """
        __init__(THash<(TIntPr,TFlt)> self) -> TIntPrFltH
        __init__(THash<(TIntPr,TFlt)> self, TIntPrFltH Hash) -> TIntPrFltH

        Parameters
        ----------
        Hash: THash< TIntPr,TFlt > const &

        __init__(THash<(TIntPr,TFlt)> self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntPrFltH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(THash<(TIntPr,TFlt)> self, int const & ExpectVals) -> TIntPrFltH

        Parameters
        ----------
        ExpectVals: int const &

        __init__(THash<(TIntPr,TFlt)> self, TSIn SIn) -> TIntPrFltH

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntPrFltH_swiginit(self, _SnapTime.new_TIntPrFltH(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntPrFltH self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntPrFltH_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntPrFltH self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntPrFltH_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntPrFltH self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntPrFltH_Save(self, SOut)


    def __eq__(self, Hash):
        """
        __eq__(TIntPrFltH self, TIntPrFltH Hash) -> bool

        Parameters
        ----------
        Hash: THash< TIntPr,TFlt > const &

        """
        return _SnapTime.TIntPrFltH___eq__(self, Hash)


    def __lt__(self, Hash):
        """
        __lt__(TIntPrFltH self, TIntPrFltH Hash) -> bool

        Parameters
        ----------
        Hash: THash< TIntPr,TFlt > const &

        """
        return _SnapTime.TIntPrFltH___lt__(self, Hash)


    def __call__(self, Key):
        """
        __call__(TIntPrFltH self, TIntPr Key) -> TFlt

        Parameters
        ----------
        Key: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrFltH___call__(self, Key)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntPrFltH self) -> ::TSize

        Parameters
        ----------
        self: THash< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltH_GetMemUsed(self)


    def BegI(self):
        """
        BegI(TIntPrFltH self) -> TIntPrFltHI

        Parameters
        ----------
        self: THash< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltH_BegI(self)


    def EndI(self):
        """
        EndI(TIntPrFltH self) -> TIntPrFltHI

        Parameters
        ----------
        self: THash< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltH_EndI(self)


    def begin(self):
        """
        begin(TIntPrFltH self) -> TIntPrFltHI

        Parameters
        ----------
        self: THash< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltH_begin(self)


    def end(self):
        """
        end(TIntPrFltH self) -> TIntPrFltHI

        Parameters
        ----------
        self: THash< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltH_end(self)


    def GetI(self, Key):
        """
        GetI(TIntPrFltH self, TIntPr Key) -> TIntPrFltHI

        Parameters
        ----------
        Key: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrFltH_GetI(self, Key)


    def Gen(self, ExpectVals):
        """
        Gen(TIntPrFltH self, int const & ExpectVals)

        Parameters
        ----------
        ExpectVals: int const &

        """
        return _SnapTime.TIntPrFltH_Gen(self, ExpectVals)


    def Clr(self, DoDel=True, NoDelLim=-1, ResetDat=True):
        """
        Clr(TIntPrFltH self, bool const & DoDel=True, int const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &
        ResetDat: bool const &

        Clr(TIntPrFltH self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TIntPrFltH self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntPrFltH self)

        Parameters
        ----------
        self: THash< TIntPr,TFlt > *

        """
        return _SnapTime.TIntPrFltH_Clr(self, DoDel, NoDelLim, ResetDat)


    def Empty(self):
        """
        Empty(TIntPrFltH self) -> bool

        Parameters
        ----------
        self: THash< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltH_Empty(self)


    def Len(self):
        """
        Len(TIntPrFltH self) -> int

        Parameters
        ----------
        self: THash< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltH_Len(self)


    def GetPorts(self):
        """
        GetPorts(TIntPrFltH self) -> int

        Parameters
        ----------
        self: THash< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltH_GetPorts(self)


    def IsAutoSize(self):
        """
        IsAutoSize(TIntPrFltH self) -> bool

        Parameters
        ----------
        self: THash< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltH_IsAutoSize(self)


    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TIntPrFltH self) -> int

        Parameters
        ----------
        self: THash< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltH_GetMxKeyIds(self)


    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TIntPrFltH self) -> int

        Parameters
        ----------
        self: THash< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltH_GetReservedKeyIds(self)


    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TIntPrFltH self) -> bool

        Parameters
        ----------
        self: THash< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltH_IsKeyIdEqKeyN(self)


    def AddKey(self, Key):
        """
        AddKey(TIntPrFltH self, TIntPr Key) -> int

        Parameters
        ----------
        Key: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrFltH_AddKey(self, Key)


    def AddDat(self, *args):
        """
        AddDat(TIntPrFltH self, TIntPr Key) -> TFlt

        Parameters
        ----------
        Key: TPair< TInt,TInt > const &

        AddDat(TIntPrFltH self, TIntPr Key, TFlt Dat) -> TFlt

        Parameters
        ----------
        Key: TPair< TInt,TInt > const &
        Dat: TFlt const &

        """
        return _SnapTime.TIntPrFltH_AddDat(self, *args)


    def DelKey(self, Key):
        """
        DelKey(TIntPrFltH self, TIntPr Key)

        Parameters
        ----------
        Key: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrFltH_DelKey(self, Key)


    def DelIfKey(self, Key):
        """
        DelIfKey(TIntPrFltH self, TIntPr Key) -> bool

        Parameters
        ----------
        Key: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrFltH_DelIfKey(self, Key)


    def DelKeyId(self, KeyId):
        """
        DelKeyId(TIntPrFltH self, int const & KeyId)

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntPrFltH_DelKeyId(self, KeyId)


    def DelKeyIdV(self, KeyIdV):
        """
        DelKeyIdV(TIntPrFltH self, TInt64V KeyIdV)

        Parameters
        ----------
        KeyIdV: TInt64V const &

        """
        return _SnapTime.TIntPrFltH_DelKeyIdV(self, KeyIdV)


    def GetKey(self, KeyId):
        """
        GetKey(TIntPrFltH self, int const & KeyId) -> TIntPr

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntPrFltH_GetKey(self, KeyId)


    def GetKeyId(self, Key):
        """
        GetKeyId(TIntPrFltH self, TIntPr Key) -> int

        Parameters
        ----------
        Key: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrFltH_GetKeyId(self, Key)


    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TIntPrFltH self, TRnd Rnd) -> int

        Parameters
        ----------
        Rnd: TRnd &

        GetRndKeyId(TIntPrFltH self, TRnd Rnd, double const & EmptyFrac) -> int

        Parameters
        ----------
        Rnd: TRnd &
        EmptyFrac: double const &

        """
        return _SnapTime.TIntPrFltH_GetRndKeyId(self, *args)


    def IsKey(self, *args):
        """
        IsKey(TIntPrFltH self, TIntPr Key) -> bool

        Parameters
        ----------
        Key: TPair< TInt,TInt > const &

        IsKey(TIntPrFltH self, TIntPr Key, int & KeyId) -> bool

        Parameters
        ----------
        Key: TPair< TInt,TInt > const &
        KeyId: int &

        """
        return _SnapTime.TIntPrFltH_IsKey(self, *args)


    def IsKeyId(self, KeyId):
        """
        IsKeyId(TIntPrFltH self, int const & KeyId) -> bool

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntPrFltH_IsKeyId(self, KeyId)


    def GetDat(self, *args):
        """
        GetDat(TIntPrFltH self, TIntPr Key) -> TFlt

        Parameters
        ----------
        Key: TPair< TInt,TInt > const &

        GetDat(TIntPrFltH self, TIntPr Key) -> TFlt

        Parameters
        ----------
        Key: TPair< TInt,TInt > const &

        """
        return _SnapTime.TIntPrFltH_GetDat(self, *args)


    def GetDatWithDefault(self, Key, DefaultValue):
        """
        GetDatWithDefault(TIntPrFltH self, TIntPr Key, TFlt DefaultValue) -> TFlt

        Parameters
        ----------
        Key: TPair< TInt,TInt > const &
        DefaultValue: TFlt

        """
        return _SnapTime.TIntPrFltH_GetDatWithDefault(self, Key, DefaultValue)


    def GetKeyDat(self, KeyId, Key, Dat):
        """
        GetKeyDat(TIntPrFltH self, int const & KeyId, TIntPr Key, TFlt Dat)

        Parameters
        ----------
        KeyId: int const &
        Key: TPair< TInt,TInt > &
        Dat: TFlt &

        """
        return _SnapTime.TIntPrFltH_GetKeyDat(self, KeyId, Key, Dat)


    def IsKeyGetDat(self, Key, Dat):
        """
        IsKeyGetDat(TIntPrFltH self, TIntPr Key, TFlt Dat) -> bool

        Parameters
        ----------
        Key: TPair< TInt,TInt > const &
        Dat: TFlt &

        """
        return _SnapTime.TIntPrFltH_IsKeyGetDat(self, Key, Dat)


    def FFirstKeyId(self):
        """
        FFirstKeyId(TIntPrFltH self) -> int

        Parameters
        ----------
        self: THash< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltH_FFirstKeyId(self)


    def FNextKeyId(self, KeyId):
        """
        FNextKeyId(TIntPrFltH self, int & KeyId) -> bool

        Parameters
        ----------
        KeyId: int &

        """
        return _SnapTime.TIntPrFltH_FNextKeyId(self, KeyId)


    def GetKeyV(self, KeyV):
        """
        GetKeyV(TIntPrFltH self, TIntPrV KeyV)

        Parameters
        ----------
        KeyV: TVec< TPair< TInt,TInt >,int > &

        """
        return _SnapTime.TIntPrFltH_GetKeyV(self, KeyV)


    def GetDatV(self, DatV):
        """
        GetDatV(TIntPrFltH self, TFltV DatV)

        Parameters
        ----------
        DatV: TVec< TFlt,int > &

        """
        return _SnapTime.TIntPrFltH_GetDatV(self, DatV)


    def GetKeyDatPrV(self, KeyDatPrV):
        """
        GetKeyDatPrV(TIntPrFltH self, TVec< TPair< TPair< TInt,TInt >,TFlt >,int > & KeyDatPrV)

        Parameters
        ----------
        KeyDatPrV: TVec< TPair< TPair< TInt,TInt >,TFlt >,int > &

        """
        return _SnapTime.TIntPrFltH_GetKeyDatPrV(self, KeyDatPrV)


    def GetDatKeyPrV(self, DatKeyPrV):
        """
        GetDatKeyPrV(TIntPrFltH self, TVec< TPair< TFlt,TPair< TInt,TInt > >,int > & DatKeyPrV)

        Parameters
        ----------
        DatKeyPrV: TVec< TPair< TFlt,TPair< TInt,TInt > >,int > &

        """
        return _SnapTime.TIntPrFltH_GetDatKeyPrV(self, DatKeyPrV)


    def GetKeyDatKdV(self, KeyDatKdV):
        """
        GetKeyDatKdV(TIntPrFltH self, TVec< TKeyDat< TPair< TInt,TInt >,TFlt >,int > & KeyDatKdV)

        Parameters
        ----------
        KeyDatKdV: TVec< TKeyDat< TPair< TInt,TInt >,TFlt >,int > &

        """
        return _SnapTime.TIntPrFltH_GetKeyDatKdV(self, KeyDatKdV)


    def GetDatKeyKdV(self, DatKeyKdV):
        """
        GetDatKeyKdV(TIntPrFltH self, TVec< TKeyDat< TFlt,TPair< TInt,TInt > >,int > & DatKeyKdV)

        Parameters
        ----------
        DatKeyKdV: TVec< TKeyDat< TFlt,TPair< TInt,TInt > >,int > &

        """
        return _SnapTime.TIntPrFltH_GetDatKeyKdV(self, DatKeyKdV)


    def Swap(self, Hash):
        """
        Swap(TIntPrFltH self, TIntPrFltH Hash)

        Parameters
        ----------
        Hash: THash< TIntPr,TFlt > &

        """
        return _SnapTime.TIntPrFltH_Swap(self, Hash)


    def Defrag(self):
        """
        Defrag(TIntPrFltH self)

        Parameters
        ----------
        self: THash< TIntPr,TFlt > *

        """
        return _SnapTime.TIntPrFltH_Defrag(self)


    def Pack(self):
        """
        Pack(TIntPrFltH self)

        Parameters
        ----------
        self: THash< TIntPr,TFlt > *

        """
        return _SnapTime.TIntPrFltH_Pack(self)


    def Sort(self, CmpKey, Asc):
        """
        Sort(TIntPrFltH self, bool const & CmpKey, bool const & Asc)

        Parameters
        ----------
        CmpKey: bool const &
        Asc: bool const &

        """
        return _SnapTime.TIntPrFltH_Sort(self, CmpKey, Asc)


    def SortByKey(self, Asc=True):
        """
        SortByKey(TIntPrFltH self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByKey(TIntPrFltH self)

        Parameters
        ----------
        self: THash< TIntPr,TFlt > *

        """
        return _SnapTime.TIntPrFltH_SortByKey(self, Asc)


    def SortByDat(self, Asc=True):
        """
        SortByDat(TIntPrFltH self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByDat(TIntPrFltH self)

        Parameters
        ----------
        self: THash< TIntPr,TFlt > *

        """
        return _SnapTime.TIntPrFltH_SortByDat(self, Asc)

    __swig_destroy__ = _SnapTime.delete_TIntPrFltH
TIntPrFltH.LoadShM = new_instancemethod(_SnapTime.TIntPrFltH_LoadShM, None, TIntPrFltH)
TIntPrFltH.Load = new_instancemethod(_SnapTime.TIntPrFltH_Load, None, TIntPrFltH)
TIntPrFltH.Save = new_instancemethod(_SnapTime.TIntPrFltH_Save, None, TIntPrFltH)
TIntPrFltH.__eq__ = new_instancemethod(_SnapTime.TIntPrFltH___eq__, None, TIntPrFltH)
TIntPrFltH.__lt__ = new_instancemethod(_SnapTime.TIntPrFltH___lt__, None, TIntPrFltH)
TIntPrFltH.__call__ = new_instancemethod(_SnapTime.TIntPrFltH___call__, None, TIntPrFltH)
TIntPrFltH.GetMemUsed = new_instancemethod(_SnapTime.TIntPrFltH_GetMemUsed, None, TIntPrFltH)
TIntPrFltH.BegI = new_instancemethod(_SnapTime.TIntPrFltH_BegI, None, TIntPrFltH)
TIntPrFltH.EndI = new_instancemethod(_SnapTime.TIntPrFltH_EndI, None, TIntPrFltH)
TIntPrFltH.begin = new_instancemethod(_SnapTime.TIntPrFltH_begin, None, TIntPrFltH)
TIntPrFltH.end = new_instancemethod(_SnapTime.TIntPrFltH_end, None, TIntPrFltH)
TIntPrFltH.GetI = new_instancemethod(_SnapTime.TIntPrFltH_GetI, None, TIntPrFltH)
TIntPrFltH.Gen = new_instancemethod(_SnapTime.TIntPrFltH_Gen, None, TIntPrFltH)
TIntPrFltH.Clr = new_instancemethod(_SnapTime.TIntPrFltH_Clr, None, TIntPrFltH)
TIntPrFltH.Empty = new_instancemethod(_SnapTime.TIntPrFltH_Empty, None, TIntPrFltH)
TIntPrFltH.Len = new_instancemethod(_SnapTime.TIntPrFltH_Len, None, TIntPrFltH)
TIntPrFltH.GetPorts = new_instancemethod(_SnapTime.TIntPrFltH_GetPorts, None, TIntPrFltH)
TIntPrFltH.IsAutoSize = new_instancemethod(_SnapTime.TIntPrFltH_IsAutoSize, None, TIntPrFltH)
TIntPrFltH.GetMxKeyIds = new_instancemethod(_SnapTime.TIntPrFltH_GetMxKeyIds, None, TIntPrFltH)
TIntPrFltH.GetReservedKeyIds = new_instancemethod(_SnapTime.TIntPrFltH_GetReservedKeyIds, None, TIntPrFltH)
TIntPrFltH.IsKeyIdEqKeyN = new_instancemethod(_SnapTime.TIntPrFltH_IsKeyIdEqKeyN, None, TIntPrFltH)
TIntPrFltH.AddKey = new_instancemethod(_SnapTime.TIntPrFltH_AddKey, None, TIntPrFltH)
TIntPrFltH.AddDat = new_instancemethod(_SnapTime.TIntPrFltH_AddDat, None, TIntPrFltH)
TIntPrFltH.DelKey = new_instancemethod(_SnapTime.TIntPrFltH_DelKey, None, TIntPrFltH)
TIntPrFltH.DelIfKey = new_instancemethod(_SnapTime.TIntPrFltH_DelIfKey, None, TIntPrFltH)
TIntPrFltH.DelKeyId = new_instancemethod(_SnapTime.TIntPrFltH_DelKeyId, None, TIntPrFltH)
TIntPrFltH.DelKeyIdV = new_instancemethod(_SnapTime.TIntPrFltH_DelKeyIdV, None, TIntPrFltH)
TIntPrFltH.GetKey = new_instancemethod(_SnapTime.TIntPrFltH_GetKey, None, TIntPrFltH)
TIntPrFltH.GetKeyId = new_instancemethod(_SnapTime.TIntPrFltH_GetKeyId, None, TIntPrFltH)
TIntPrFltH.GetRndKeyId = new_instancemethod(_SnapTime.TIntPrFltH_GetRndKeyId, None, TIntPrFltH)
TIntPrFltH.IsKey = new_instancemethod(_SnapTime.TIntPrFltH_IsKey, None, TIntPrFltH)
TIntPrFltH.IsKeyId = new_instancemethod(_SnapTime.TIntPrFltH_IsKeyId, None, TIntPrFltH)
TIntPrFltH.GetDat = new_instancemethod(_SnapTime.TIntPrFltH_GetDat, None, TIntPrFltH)
TIntPrFltH.GetDatWithDefault = new_instancemethod(_SnapTime.TIntPrFltH_GetDatWithDefault, None, TIntPrFltH)
TIntPrFltH.GetKeyDat = new_instancemethod(_SnapTime.TIntPrFltH_GetKeyDat, None, TIntPrFltH)
TIntPrFltH.IsKeyGetDat = new_instancemethod(_SnapTime.TIntPrFltH_IsKeyGetDat, None, TIntPrFltH)
TIntPrFltH.FFirstKeyId = new_instancemethod(_SnapTime.TIntPrFltH_FFirstKeyId, None, TIntPrFltH)
TIntPrFltH.FNextKeyId = new_instancemethod(_SnapTime.TIntPrFltH_FNextKeyId, None, TIntPrFltH)
TIntPrFltH.GetKeyV = new_instancemethod(_SnapTime.TIntPrFltH_GetKeyV, None, TIntPrFltH)
TIntPrFltH.GetDatV = new_instancemethod(_SnapTime.TIntPrFltH_GetDatV, None, TIntPrFltH)
TIntPrFltH.GetKeyDatPrV = new_instancemethod(_SnapTime.TIntPrFltH_GetKeyDatPrV, None, TIntPrFltH)
TIntPrFltH.GetDatKeyPrV = new_instancemethod(_SnapTime.TIntPrFltH_GetDatKeyPrV, None, TIntPrFltH)
TIntPrFltH.GetKeyDatKdV = new_instancemethod(_SnapTime.TIntPrFltH_GetKeyDatKdV, None, TIntPrFltH)
TIntPrFltH.GetDatKeyKdV = new_instancemethod(_SnapTime.TIntPrFltH_GetDatKeyKdV, None, TIntPrFltH)
TIntPrFltH.Swap = new_instancemethod(_SnapTime.TIntPrFltH_Swap, None, TIntPrFltH)
TIntPrFltH.Defrag = new_instancemethod(_SnapTime.TIntPrFltH_Defrag, None, TIntPrFltH)
TIntPrFltH.Pack = new_instancemethod(_SnapTime.TIntPrFltH_Pack, None, TIntPrFltH)
TIntPrFltH.Sort = new_instancemethod(_SnapTime.TIntPrFltH_Sort, None, TIntPrFltH)
TIntPrFltH.SortByKey = new_instancemethod(_SnapTime.TIntPrFltH_SortByKey, None, TIntPrFltH)
TIntPrFltH.SortByDat = new_instancemethod(_SnapTime.TIntPrFltH_SortByDat, None, TIntPrFltH)
TIntPrFltH_swigregister = _SnapTime.TIntPrFltH_swigregister
TIntPrFltH_swigregister(TIntPrFltH)

class TIntPrFlt64H(object):
    """Proxy of C++ THash<(TInt64Pr,TFlt,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _SnapTime.TIntPrFlt64H_HashPrimes

    def __init__(self, *args):
        """
        __init__(THash<(TInt64Pr,TFlt,int64)> self) -> TIntPrFlt64H
        __init__(THash<(TInt64Pr,TFlt,int64)> self, TIntPrFlt64H Hash) -> TIntPrFlt64H

        Parameters
        ----------
        Hash: THash< TInt64Pr,TFlt,int64 > const &

        __init__(THash<(TInt64Pr,TFlt,int64)> self, long long const & ExpectVals, bool const & _AutoSizeP=False) -> TIntPrFlt64H

        Parameters
        ----------
        ExpectVals: long long const &
        _AutoSizeP: bool const &

        __init__(THash<(TInt64Pr,TFlt,int64)> self, long long const & ExpectVals) -> TIntPrFlt64H

        Parameters
        ----------
        ExpectVals: long long const &

        __init__(THash<(TInt64Pr,TFlt,int64)> self, TSIn SIn) -> TIntPrFlt64H

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntPrFlt64H_swiginit(self, _SnapTime.new_TIntPrFlt64H(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TIntPrFlt64H self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TIntPrFlt64H_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TIntPrFlt64H self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntPrFlt64H_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntPrFlt64H self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntPrFlt64H_Save(self, SOut)


    def __eq__(self, Hash):
        """
        __eq__(TIntPrFlt64H self, TIntPrFlt64H Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt64Pr,TFlt,int64 > const &

        """
        return _SnapTime.TIntPrFlt64H___eq__(self, Hash)


    def __lt__(self, Hash):
        """
        __lt__(TIntPrFlt64H self, TIntPrFlt64H Hash) -> bool

        Parameters
        ----------
        Hash: THash< TInt64Pr,TFlt,int64 > const &

        """
        return _SnapTime.TIntPrFlt64H___lt__(self, Hash)


    def __call__(self, Key):
        """
        __call__(TIntPrFlt64H self, TInt64Pr Key) -> TFlt

        Parameters
        ----------
        Key: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPrFlt64H___call__(self, Key)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntPrFlt64H self) -> ::TSize

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64H_GetMemUsed(self)


    def BegI(self):
        """
        BegI(TIntPrFlt64H self) -> TIntPrFlt64HI

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64H_BegI(self)


    def EndI(self):
        """
        EndI(TIntPrFlt64H self) -> TIntPrFlt64HI

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64H_EndI(self)


    def begin(self):
        """
        begin(TIntPrFlt64H self) -> TIntPrFlt64HI

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64H_begin(self)


    def end(self):
        """
        end(TIntPrFlt64H self) -> TIntPrFlt64HI

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64H_end(self)


    def GetI(self, Key):
        """
        GetI(TIntPrFlt64H self, TInt64Pr Key) -> TIntPrFlt64HI

        Parameters
        ----------
        Key: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPrFlt64H_GetI(self, Key)


    def Gen(self, ExpectVals):
        """
        Gen(TIntPrFlt64H self, long long const & ExpectVals)

        Parameters
        ----------
        ExpectVals: long long const &

        """
        return _SnapTime.TIntPrFlt64H_Gen(self, ExpectVals)


    def Clr(self, DoDel=True, NoDelLim=-1, ResetDat=True):
        """
        Clr(TIntPrFlt64H self, bool const & DoDel=True, long long const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &
        ResetDat: bool const &

        Clr(TIntPrFlt64H self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(TIntPrFlt64H self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntPrFlt64H self)

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > *

        """
        return _SnapTime.TIntPrFlt64H_Clr(self, DoDel, NoDelLim, ResetDat)


    def Empty(self):
        """
        Empty(TIntPrFlt64H self) -> bool

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64H_Empty(self)


    def Len(self):
        """
        Len(TIntPrFlt64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64H_Len(self)


    def GetPorts(self):
        """
        GetPorts(TIntPrFlt64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64H_GetPorts(self)


    def IsAutoSize(self):
        """
        IsAutoSize(TIntPrFlt64H self) -> bool

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64H_IsAutoSize(self)


    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TIntPrFlt64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64H_GetMxKeyIds(self)


    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TIntPrFlt64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64H_GetReservedKeyIds(self)


    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TIntPrFlt64H self) -> bool

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64H_IsKeyIdEqKeyN(self)


    def AddKey(self, Key):
        """
        AddKey(TIntPrFlt64H self, TInt64Pr Key) -> long long

        Parameters
        ----------
        Key: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPrFlt64H_AddKey(self, Key)


    def AddDat(self, *args):
        """
        AddDat(TIntPrFlt64H self, TInt64Pr Key) -> TFlt

        Parameters
        ----------
        Key: TPair< TInt64,TInt64 > const &

        AddDat(TIntPrFlt64H self, TInt64Pr Key, TFlt Dat) -> TFlt

        Parameters
        ----------
        Key: TPair< TInt64,TInt64 > const &
        Dat: TFlt const &

        """
        return _SnapTime.TIntPrFlt64H_AddDat(self, *args)


    def DelKey(self, Key):
        """
        DelKey(TIntPrFlt64H self, TInt64Pr Key)

        Parameters
        ----------
        Key: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPrFlt64H_DelKey(self, Key)


    def DelIfKey(self, Key):
        """
        DelIfKey(TIntPrFlt64H self, TInt64Pr Key) -> bool

        Parameters
        ----------
        Key: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPrFlt64H_DelIfKey(self, Key)


    def DelKeyId(self, KeyId):
        """
        DelKeyId(TIntPrFlt64H self, long long const & KeyId)

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TIntPrFlt64H_DelKeyId(self, KeyId)


    def DelKeyIdV(self, KeyIdV):
        """
        DelKeyIdV(TIntPrFlt64H self, TInt64V KeyIdV)

        Parameters
        ----------
        KeyIdV: TInt64V const &

        """
        return _SnapTime.TIntPrFlt64H_DelKeyIdV(self, KeyIdV)


    def GetKey(self, KeyId):
        """
        GetKey(TIntPrFlt64H self, long long const & KeyId) -> TInt64Pr

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TIntPrFlt64H_GetKey(self, KeyId)


    def GetKeyId(self, Key):
        """
        GetKeyId(TIntPrFlt64H self, TInt64Pr Key) -> long long

        Parameters
        ----------
        Key: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPrFlt64H_GetKeyId(self, Key)


    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TIntPrFlt64H self, TRnd Rnd) -> long long

        Parameters
        ----------
        Rnd: TRnd &

        GetRndKeyId(TIntPrFlt64H self, TRnd Rnd, double const & EmptyFrac) -> long long

        Parameters
        ----------
        Rnd: TRnd &
        EmptyFrac: double const &

        """
        return _SnapTime.TIntPrFlt64H_GetRndKeyId(self, *args)


    def IsKey(self, *args):
        """
        IsKey(TIntPrFlt64H self, TInt64Pr Key) -> bool

        Parameters
        ----------
        Key: TPair< TInt64,TInt64 > const &

        IsKey(TIntPrFlt64H self, TInt64Pr Key, long long & KeyId) -> bool

        Parameters
        ----------
        Key: TPair< TInt64,TInt64 > const &
        KeyId: long long &

        """
        return _SnapTime.TIntPrFlt64H_IsKey(self, *args)


    def IsKeyId(self, KeyId):
        """
        IsKeyId(TIntPrFlt64H self, long long const & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TIntPrFlt64H_IsKeyId(self, KeyId)


    def GetDat(self, *args):
        """
        GetDat(TIntPrFlt64H self, TInt64Pr Key) -> TFlt

        Parameters
        ----------
        Key: TPair< TInt64,TInt64 > const &

        GetDat(TIntPrFlt64H self, TInt64Pr Key) -> TFlt

        Parameters
        ----------
        Key: TPair< TInt64,TInt64 > const &

        """
        return _SnapTime.TIntPrFlt64H_GetDat(self, *args)


    def GetDatWithDefault(self, Key, DefaultValue):
        """
        GetDatWithDefault(TIntPrFlt64H self, TInt64Pr Key, TFlt DefaultValue) -> TFlt

        Parameters
        ----------
        Key: TPair< TInt64,TInt64 > const &
        DefaultValue: TFlt

        """
        return _SnapTime.TIntPrFlt64H_GetDatWithDefault(self, Key, DefaultValue)


    def GetKeyDat(self, KeyId, Key, Dat):
        """
        GetKeyDat(TIntPrFlt64H self, long long const & KeyId, TInt64Pr Key, TFlt Dat)

        Parameters
        ----------
        KeyId: long long const &
        Key: TPair< TInt64,TInt64 > &
        Dat: TFlt &

        """
        return _SnapTime.TIntPrFlt64H_GetKeyDat(self, KeyId, Key, Dat)


    def IsKeyGetDat(self, Key, Dat):
        """
        IsKeyGetDat(TIntPrFlt64H self, TInt64Pr Key, TFlt Dat) -> bool

        Parameters
        ----------
        Key: TPair< TInt64,TInt64 > const &
        Dat: TFlt &

        """
        return _SnapTime.TIntPrFlt64H_IsKeyGetDat(self, Key, Dat)


    def FFirstKeyId(self):
        """
        FFirstKeyId(TIntPrFlt64H self) -> long long

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64H_FFirstKeyId(self)


    def FNextKeyId(self, KeyId):
        """
        FNextKeyId(TIntPrFlt64H self, long long & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long &

        """
        return _SnapTime.TIntPrFlt64H_FNextKeyId(self, KeyId)


    def GetKeyV(self, KeyV):
        """
        GetKeyV(TIntPrFlt64H self, TIntPr64V KeyV)

        Parameters
        ----------
        KeyV: TVec< TPair< TInt64,TInt64 >,long long > &

        """
        return _SnapTime.TIntPrFlt64H_GetKeyV(self, KeyV)


    def GetDatV(self, DatV):
        """
        GetDatV(TIntPrFlt64H self, TFlt64V DatV)

        Parameters
        ----------
        DatV: TVec< TFlt,long long > &

        """
        return _SnapTime.TIntPrFlt64H_GetDatV(self, DatV)


    def GetKeyDatPrV(self, KeyDatPrV):
        """
        GetKeyDatPrV(TIntPrFlt64H self, TVec< TPair< TPair< TInt64,TInt64 >,TFlt >,long long > & KeyDatPrV)

        Parameters
        ----------
        KeyDatPrV: TVec< TPair< TPair< TInt64,TInt64 >,TFlt >,long long > &

        """
        return _SnapTime.TIntPrFlt64H_GetKeyDatPrV(self, KeyDatPrV)


    def GetDatKeyPrV(self, DatKeyPrV):
        """
        GetDatKeyPrV(TIntPrFlt64H self, TVec< TPair< TFlt,TPair< TInt64,TInt64 > >,long long > & DatKeyPrV)

        Parameters
        ----------
        DatKeyPrV: TVec< TPair< TFlt,TPair< TInt64,TInt64 > >,long long > &

        """
        return _SnapTime.TIntPrFlt64H_GetDatKeyPrV(self, DatKeyPrV)


    def GetKeyDatKdV(self, KeyDatKdV):
        """
        GetKeyDatKdV(TIntPrFlt64H self, TVec< TKeyDat< TPair< TInt64,TInt64 >,TFlt >,long long > & KeyDatKdV)

        Parameters
        ----------
        KeyDatKdV: TVec< TKeyDat< TPair< TInt64,TInt64 >,TFlt >,long long > &

        """
        return _SnapTime.TIntPrFlt64H_GetKeyDatKdV(self, KeyDatKdV)


    def GetDatKeyKdV(self, DatKeyKdV):
        """
        GetDatKeyKdV(TIntPrFlt64H self, TVec< TKeyDat< TFlt,TPair< TInt64,TInt64 > >,long long > & DatKeyKdV)

        Parameters
        ----------
        DatKeyKdV: TVec< TKeyDat< TFlt,TPair< TInt64,TInt64 > >,long long > &

        """
        return _SnapTime.TIntPrFlt64H_GetDatKeyKdV(self, DatKeyKdV)


    def Swap(self, Hash):
        """
        Swap(TIntPrFlt64H self, TIntPrFlt64H Hash)

        Parameters
        ----------
        Hash: THash< TInt64Pr,TFlt,int64 > &

        """
        return _SnapTime.TIntPrFlt64H_Swap(self, Hash)


    def Defrag(self):
        """
        Defrag(TIntPrFlt64H self)

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > *

        """
        return _SnapTime.TIntPrFlt64H_Defrag(self)


    def Pack(self):
        """
        Pack(TIntPrFlt64H self)

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > *

        """
        return _SnapTime.TIntPrFlt64H_Pack(self)


    def Sort(self, CmpKey, Asc):
        """
        Sort(TIntPrFlt64H self, bool const & CmpKey, bool const & Asc)

        Parameters
        ----------
        CmpKey: bool const &
        Asc: bool const &

        """
        return _SnapTime.TIntPrFlt64H_Sort(self, CmpKey, Asc)


    def SortByKey(self, Asc=True):
        """
        SortByKey(TIntPrFlt64H self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByKey(TIntPrFlt64H self)

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > *

        """
        return _SnapTime.TIntPrFlt64H_SortByKey(self, Asc)


    def SortByDat(self, Asc=True):
        """
        SortByDat(TIntPrFlt64H self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByDat(TIntPrFlt64H self)

        Parameters
        ----------
        self: THash< TInt64Pr,TFlt,int64 > *

        """
        return _SnapTime.TIntPrFlt64H_SortByDat(self, Asc)

    __swig_destroy__ = _SnapTime.delete_TIntPrFlt64H
TIntPrFlt64H.LoadShM = new_instancemethod(_SnapTime.TIntPrFlt64H_LoadShM, None, TIntPrFlt64H)
TIntPrFlt64H.Load = new_instancemethod(_SnapTime.TIntPrFlt64H_Load, None, TIntPrFlt64H)
TIntPrFlt64H.Save = new_instancemethod(_SnapTime.TIntPrFlt64H_Save, None, TIntPrFlt64H)
TIntPrFlt64H.__eq__ = new_instancemethod(_SnapTime.TIntPrFlt64H___eq__, None, TIntPrFlt64H)
TIntPrFlt64H.__lt__ = new_instancemethod(_SnapTime.TIntPrFlt64H___lt__, None, TIntPrFlt64H)
TIntPrFlt64H.__call__ = new_instancemethod(_SnapTime.TIntPrFlt64H___call__, None, TIntPrFlt64H)
TIntPrFlt64H.GetMemUsed = new_instancemethod(_SnapTime.TIntPrFlt64H_GetMemUsed, None, TIntPrFlt64H)
TIntPrFlt64H.BegI = new_instancemethod(_SnapTime.TIntPrFlt64H_BegI, None, TIntPrFlt64H)
TIntPrFlt64H.EndI = new_instancemethod(_SnapTime.TIntPrFlt64H_EndI, None, TIntPrFlt64H)
TIntPrFlt64H.begin = new_instancemethod(_SnapTime.TIntPrFlt64H_begin, None, TIntPrFlt64H)
TIntPrFlt64H.end = new_instancemethod(_SnapTime.TIntPrFlt64H_end, None, TIntPrFlt64H)
TIntPrFlt64H.GetI = new_instancemethod(_SnapTime.TIntPrFlt64H_GetI, None, TIntPrFlt64H)
TIntPrFlt64H.Gen = new_instancemethod(_SnapTime.TIntPrFlt64H_Gen, None, TIntPrFlt64H)
TIntPrFlt64H.Clr = new_instancemethod(_SnapTime.TIntPrFlt64H_Clr, None, TIntPrFlt64H)
TIntPrFlt64H.Empty = new_instancemethod(_SnapTime.TIntPrFlt64H_Empty, None, TIntPrFlt64H)
TIntPrFlt64H.Len = new_instancemethod(_SnapTime.TIntPrFlt64H_Len, None, TIntPrFlt64H)
TIntPrFlt64H.GetPorts = new_instancemethod(_SnapTime.TIntPrFlt64H_GetPorts, None, TIntPrFlt64H)
TIntPrFlt64H.IsAutoSize = new_instancemethod(_SnapTime.TIntPrFlt64H_IsAutoSize, None, TIntPrFlt64H)
TIntPrFlt64H.GetMxKeyIds = new_instancemethod(_SnapTime.TIntPrFlt64H_GetMxKeyIds, None, TIntPrFlt64H)
TIntPrFlt64H.GetReservedKeyIds = new_instancemethod(_SnapTime.TIntPrFlt64H_GetReservedKeyIds, None, TIntPrFlt64H)
TIntPrFlt64H.IsKeyIdEqKeyN = new_instancemethod(_SnapTime.TIntPrFlt64H_IsKeyIdEqKeyN, None, TIntPrFlt64H)
TIntPrFlt64H.AddKey = new_instancemethod(_SnapTime.TIntPrFlt64H_AddKey, None, TIntPrFlt64H)
TIntPrFlt64H.AddDat = new_instancemethod(_SnapTime.TIntPrFlt64H_AddDat, None, TIntPrFlt64H)
TIntPrFlt64H.DelKey = new_instancemethod(_SnapTime.TIntPrFlt64H_DelKey, None, TIntPrFlt64H)
TIntPrFlt64H.DelIfKey = new_instancemethod(_SnapTime.TIntPrFlt64H_DelIfKey, None, TIntPrFlt64H)
TIntPrFlt64H.DelKeyId = new_instancemethod(_SnapTime.TIntPrFlt64H_DelKeyId, None, TIntPrFlt64H)
TIntPrFlt64H.DelKeyIdV = new_instancemethod(_SnapTime.TIntPrFlt64H_DelKeyIdV, None, TIntPrFlt64H)
TIntPrFlt64H.GetKey = new_instancemethod(_SnapTime.TIntPrFlt64H_GetKey, None, TIntPrFlt64H)
TIntPrFlt64H.GetKeyId = new_instancemethod(_SnapTime.TIntPrFlt64H_GetKeyId, None, TIntPrFlt64H)
TIntPrFlt64H.GetRndKeyId = new_instancemethod(_SnapTime.TIntPrFlt64H_GetRndKeyId, None, TIntPrFlt64H)
TIntPrFlt64H.IsKey = new_instancemethod(_SnapTime.TIntPrFlt64H_IsKey, None, TIntPrFlt64H)
TIntPrFlt64H.IsKeyId = new_instancemethod(_SnapTime.TIntPrFlt64H_IsKeyId, None, TIntPrFlt64H)
TIntPrFlt64H.GetDat = new_instancemethod(_SnapTime.TIntPrFlt64H_GetDat, None, TIntPrFlt64H)
TIntPrFlt64H.GetDatWithDefault = new_instancemethod(_SnapTime.TIntPrFlt64H_GetDatWithDefault, None, TIntPrFlt64H)
TIntPrFlt64H.GetKeyDat = new_instancemethod(_SnapTime.TIntPrFlt64H_GetKeyDat, None, TIntPrFlt64H)
TIntPrFlt64H.IsKeyGetDat = new_instancemethod(_SnapTime.TIntPrFlt64H_IsKeyGetDat, None, TIntPrFlt64H)
TIntPrFlt64H.FFirstKeyId = new_instancemethod(_SnapTime.TIntPrFlt64H_FFirstKeyId, None, TIntPrFlt64H)
TIntPrFlt64H.FNextKeyId = new_instancemethod(_SnapTime.TIntPrFlt64H_FNextKeyId, None, TIntPrFlt64H)
TIntPrFlt64H.GetKeyV = new_instancemethod(_SnapTime.TIntPrFlt64H_GetKeyV, None, TIntPrFlt64H)
TIntPrFlt64H.GetDatV = new_instancemethod(_SnapTime.TIntPrFlt64H_GetDatV, None, TIntPrFlt64H)
TIntPrFlt64H.GetKeyDatPrV = new_instancemethod(_SnapTime.TIntPrFlt64H_GetKeyDatPrV, None, TIntPrFlt64H)
TIntPrFlt64H.GetDatKeyPrV = new_instancemethod(_SnapTime.TIntPrFlt64H_GetDatKeyPrV, None, TIntPrFlt64H)
TIntPrFlt64H.GetKeyDatKdV = new_instancemethod(_SnapTime.TIntPrFlt64H_GetKeyDatKdV, None, TIntPrFlt64H)
TIntPrFlt64H.GetDatKeyKdV = new_instancemethod(_SnapTime.TIntPrFlt64H_GetDatKeyKdV, None, TIntPrFlt64H)
TIntPrFlt64H.Swap = new_instancemethod(_SnapTime.TIntPrFlt64H_Swap, None, TIntPrFlt64H)
TIntPrFlt64H.Defrag = new_instancemethod(_SnapTime.TIntPrFlt64H_Defrag, None, TIntPrFlt64H)
TIntPrFlt64H.Pack = new_instancemethod(_SnapTime.TIntPrFlt64H_Pack, None, TIntPrFlt64H)
TIntPrFlt64H.Sort = new_instancemethod(_SnapTime.TIntPrFlt64H_Sort, None, TIntPrFlt64H)
TIntPrFlt64H.SortByKey = new_instancemethod(_SnapTime.TIntPrFlt64H_SortByKey, None, TIntPrFlt64H)
TIntPrFlt64H.SortByDat = new_instancemethod(_SnapTime.TIntPrFlt64H_SortByDat, None, TIntPrFlt64H)
TIntPrFlt64H_swigregister = _SnapTime.TIntPrFlt64H_swigregister
TIntPrFlt64H_swigregister(TIntPrFlt64H)

class TStrIntH(object):
    """Proxy of C++ THash<(TStr,TInt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _SnapTime.TStrIntH_HashPrimes

    def __init__(self, *args):
        """
        __init__(THash<(TStr,TInt)> self) -> TStrIntH
        __init__(THash<(TStr,TInt)> self, TStrIntH Hash) -> TStrIntH

        Parameters
        ----------
        Hash: THash< TStr,TInt > const &

        __init__(THash<(TStr,TInt)> self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(THash<(TStr,TInt)> self, int const & ExpectVals) -> TStrIntH

        Parameters
        ----------
        ExpectVals: int const &

        __init__(THash<(TStr,TInt)> self, TSIn SIn) -> TStrIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TStrIntH_swiginit(self, _SnapTime.new_TStrIntH(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TStrIntH self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TStrIntH_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TStrIntH self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TStrIntH_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TStrIntH self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TStrIntH_Save(self, SOut)


    def __eq__(self, Hash):
        """
        __eq__(TStrIntH self, TStrIntH Hash) -> bool

        Parameters
        ----------
        Hash: THash< TStr,TInt > const &

        """
        return _SnapTime.TStrIntH___eq__(self, Hash)


    def __lt__(self, Hash):
        """
        __lt__(TStrIntH self, TStrIntH Hash) -> bool

        Parameters
        ----------
        Hash: THash< TStr,TInt > const &

        """
        return _SnapTime.TStrIntH___lt__(self, Hash)


    def __call__(self, Key):
        """
        __call__(TStrIntH self, TStr Key) -> TInt

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrIntH___call__(self, Key)


    def GetMemUsed(self):
        """
        GetMemUsed(TStrIntH self) -> ::TSize

        Parameters
        ----------
        self: THash< TStr,TInt > const *

        """
        return _SnapTime.TStrIntH_GetMemUsed(self)


    def BegI(self):
        """
        BegI(TStrIntH self) -> TStrIntHI

        Parameters
        ----------
        self: THash< TStr,TInt > const *

        """
        return _SnapTime.TStrIntH_BegI(self)


    def EndI(self):
        """
        EndI(TStrIntH self) -> TStrIntHI

        Parameters
        ----------
        self: THash< TStr,TInt > const *

        """
        return _SnapTime.TStrIntH_EndI(self)


    def begin(self):
        """
        begin(TStrIntH self) -> TStrIntHI

        Parameters
        ----------
        self: THash< TStr,TInt > const *

        """
        return _SnapTime.TStrIntH_begin(self)


    def end(self):
        """
        end(TStrIntH self) -> TStrIntHI

        Parameters
        ----------
        self: THash< TStr,TInt > const *

        """
        return _SnapTime.TStrIntH_end(self)


    def GetI(self, Key):
        """
        GetI(TStrIntH self, TStr Key) -> TStrIntHI

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrIntH_GetI(self, Key)


    def Gen(self, ExpectVals):
        """
        Gen(TStrIntH self, int const & ExpectVals)

        Parameters
        ----------
        ExpectVals: int const &

        """
        return _SnapTime.TStrIntH_Gen(self, ExpectVals)


    def Clr(self, DoDel=True, NoDelLim=-1, ResetDat=True):
        """
        Clr(TStrIntH self, bool const & DoDel=True, int const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &
        ResetDat: bool const &

        Clr(TStrIntH self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TStrIntH self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TStrIntH self)

        Parameters
        ----------
        self: THash< TStr,TInt > *

        """
        return _SnapTime.TStrIntH_Clr(self, DoDel, NoDelLim, ResetDat)


    def Empty(self):
        """
        Empty(TStrIntH self) -> bool

        Parameters
        ----------
        self: THash< TStr,TInt > const *

        """
        return _SnapTime.TStrIntH_Empty(self)


    def Len(self):
        """
        Len(TStrIntH self) -> int

        Parameters
        ----------
        self: THash< TStr,TInt > const *

        """
        return _SnapTime.TStrIntH_Len(self)


    def GetPorts(self):
        """
        GetPorts(TStrIntH self) -> int

        Parameters
        ----------
        self: THash< TStr,TInt > const *

        """
        return _SnapTime.TStrIntH_GetPorts(self)


    def IsAutoSize(self):
        """
        IsAutoSize(TStrIntH self) -> bool

        Parameters
        ----------
        self: THash< TStr,TInt > const *

        """
        return _SnapTime.TStrIntH_IsAutoSize(self)


    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TStrIntH self) -> int

        Parameters
        ----------
        self: THash< TStr,TInt > const *

        """
        return _SnapTime.TStrIntH_GetMxKeyIds(self)


    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TStrIntH self) -> int

        Parameters
        ----------
        self: THash< TStr,TInt > const *

        """
        return _SnapTime.TStrIntH_GetReservedKeyIds(self)


    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TStrIntH self) -> bool

        Parameters
        ----------
        self: THash< TStr,TInt > const *

        """
        return _SnapTime.TStrIntH_IsKeyIdEqKeyN(self)


    def AddKey(self, Key):
        """
        AddKey(TStrIntH self, TStr Key) -> int

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrIntH_AddKey(self, Key)


    def AddDat(self, *args):
        """
        AddDat(TStrIntH self, TStr Key) -> TInt

        Parameters
        ----------
        Key: TStr const &

        AddDat(TStrIntH self, TStr Key, TInt Dat) -> TInt

        Parameters
        ----------
        Key: TStr const &
        Dat: TInt const &

        """
        return _SnapTime.TStrIntH_AddDat(self, *args)


    def DelKey(self, Key):
        """
        DelKey(TStrIntH self, TStr Key)

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrIntH_DelKey(self, Key)


    def DelIfKey(self, Key):
        """
        DelIfKey(TStrIntH self, TStr Key) -> bool

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrIntH_DelIfKey(self, Key)


    def DelKeyId(self, KeyId):
        """
        DelKeyId(TStrIntH self, int const & KeyId)

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TStrIntH_DelKeyId(self, KeyId)


    def DelKeyIdV(self, KeyIdV):
        """
        DelKeyIdV(TStrIntH self, TInt64V KeyIdV)

        Parameters
        ----------
        KeyIdV: TInt64V const &

        """
        return _SnapTime.TStrIntH_DelKeyIdV(self, KeyIdV)


    def GetKey(self, KeyId):
        """
        GetKey(TStrIntH self, int const & KeyId) -> TStr

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TStrIntH_GetKey(self, KeyId)


    def GetKeyId(self, Key):
        """
        GetKeyId(TStrIntH self, TStr Key) -> int

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrIntH_GetKeyId(self, Key)


    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TStrIntH self, TRnd Rnd) -> int

        Parameters
        ----------
        Rnd: TRnd &

        GetRndKeyId(TStrIntH self, TRnd Rnd, double const & EmptyFrac) -> int

        Parameters
        ----------
        Rnd: TRnd &
        EmptyFrac: double const &

        """
        return _SnapTime.TStrIntH_GetRndKeyId(self, *args)


    def IsKey(self, *args):
        """
        IsKey(TStrIntH self, TStr Key) -> bool

        Parameters
        ----------
        Key: TStr const &

        IsKey(TStrIntH self, TStr Key, int & KeyId) -> bool

        Parameters
        ----------
        Key: TStr const &
        KeyId: int &

        """
        return _SnapTime.TStrIntH_IsKey(self, *args)


    def IsKeyId(self, KeyId):
        """
        IsKeyId(TStrIntH self, int const & KeyId) -> bool

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TStrIntH_IsKeyId(self, KeyId)


    def GetDat(self, *args):
        """
        GetDat(TStrIntH self, TStr Key) -> TInt

        Parameters
        ----------
        Key: TStr const &

        GetDat(TStrIntH self, TStr Key) -> TInt

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrIntH_GetDat(self, *args)


    def GetDatWithDefault(self, Key, DefaultValue):
        """
        GetDatWithDefault(TStrIntH self, TStr Key, TInt DefaultValue) -> TInt

        Parameters
        ----------
        Key: TStr const &
        DefaultValue: TInt

        """
        return _SnapTime.TStrIntH_GetDatWithDefault(self, Key, DefaultValue)


    def GetKeyDat(self, KeyId, Key, Dat):
        """
        GetKeyDat(TStrIntH self, int const & KeyId, TStr Key, TInt Dat)

        Parameters
        ----------
        KeyId: int const &
        Key: TStr &
        Dat: TInt &

        """
        return _SnapTime.TStrIntH_GetKeyDat(self, KeyId, Key, Dat)


    def IsKeyGetDat(self, Key, Dat):
        """
        IsKeyGetDat(TStrIntH self, TStr Key, TInt Dat) -> bool

        Parameters
        ----------
        Key: TStr const &
        Dat: TInt &

        """
        return _SnapTime.TStrIntH_IsKeyGetDat(self, Key, Dat)


    def FFirstKeyId(self):
        """
        FFirstKeyId(TStrIntH self) -> int

        Parameters
        ----------
        self: THash< TStr,TInt > const *

        """
        return _SnapTime.TStrIntH_FFirstKeyId(self)


    def FNextKeyId(self, KeyId):
        """
        FNextKeyId(TStrIntH self, int & KeyId) -> bool

        Parameters
        ----------
        KeyId: int &

        """
        return _SnapTime.TStrIntH_FNextKeyId(self, KeyId)


    def GetKeyV(self, KeyV):
        """
        GetKeyV(TStrIntH self, TStrV KeyV)

        Parameters
        ----------
        KeyV: TVec< TStr,int > &

        """
        return _SnapTime.TStrIntH_GetKeyV(self, KeyV)


    def GetDatV(self, DatV):
        """
        GetDatV(TStrIntH self, TIntV DatV)

        Parameters
        ----------
        DatV: TVec< TInt,int > &

        """
        return _SnapTime.TStrIntH_GetDatV(self, DatV)


    def GetKeyDatPrV(self, KeyDatPrV):
        """
        GetKeyDatPrV(TStrIntH self, TStrIntPrV KeyDatPrV)

        Parameters
        ----------
        KeyDatPrV: TVec< TPair< TStr,TInt >,int > &

        """
        return _SnapTime.TStrIntH_GetKeyDatPrV(self, KeyDatPrV)


    def GetDatKeyPrV(self, DatKeyPrV):
        """
        GetDatKeyPrV(TStrIntH self, TVec< TPair< TInt,TStr >,int > & DatKeyPrV)

        Parameters
        ----------
        DatKeyPrV: TVec< TPair< TInt,TStr >,int > &

        """
        return _SnapTime.TStrIntH_GetDatKeyPrV(self, DatKeyPrV)


    def GetKeyDatKdV(self, KeyDatKdV):
        """
        GetKeyDatKdV(TStrIntH self, TVec< TKeyDat< TStr,TInt >,int > & KeyDatKdV)

        Parameters
        ----------
        KeyDatKdV: TVec< TKeyDat< TStr,TInt >,int > &

        """
        return _SnapTime.TStrIntH_GetKeyDatKdV(self, KeyDatKdV)


    def GetDatKeyKdV(self, DatKeyKdV):
        """
        GetDatKeyKdV(TStrIntH self, TVec< TKeyDat< TInt,TStr >,int > & DatKeyKdV)

        Parameters
        ----------
        DatKeyKdV: TVec< TKeyDat< TInt,TStr >,int > &

        """
        return _SnapTime.TStrIntH_GetDatKeyKdV(self, DatKeyKdV)


    def Swap(self, Hash):
        """
        Swap(TStrIntH self, TStrIntH Hash)

        Parameters
        ----------
        Hash: THash< TStr,TInt > &

        """
        return _SnapTime.TStrIntH_Swap(self, Hash)


    def Defrag(self):
        """
        Defrag(TStrIntH self)

        Parameters
        ----------
        self: THash< TStr,TInt > *

        """
        return _SnapTime.TStrIntH_Defrag(self)


    def Pack(self):
        """
        Pack(TStrIntH self)

        Parameters
        ----------
        self: THash< TStr,TInt > *

        """
        return _SnapTime.TStrIntH_Pack(self)


    def Sort(self, CmpKey, Asc):
        """
        Sort(TStrIntH self, bool const & CmpKey, bool const & Asc)

        Parameters
        ----------
        CmpKey: bool const &
        Asc: bool const &

        """
        return _SnapTime.TStrIntH_Sort(self, CmpKey, Asc)


    def SortByKey(self, Asc=True):
        """
        SortByKey(TStrIntH self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByKey(TStrIntH self)

        Parameters
        ----------
        self: THash< TStr,TInt > *

        """
        return _SnapTime.TStrIntH_SortByKey(self, Asc)


    def SortByDat(self, Asc=True):
        """
        SortByDat(TStrIntH self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByDat(TStrIntH self)

        Parameters
        ----------
        self: THash< TStr,TInt > *

        """
        return _SnapTime.TStrIntH_SortByDat(self, Asc)

    __swig_destroy__ = _SnapTime.delete_TStrIntH
TStrIntH.LoadShM = new_instancemethod(_SnapTime.TStrIntH_LoadShM, None, TStrIntH)
TStrIntH.Load = new_instancemethod(_SnapTime.TStrIntH_Load, None, TStrIntH)
TStrIntH.Save = new_instancemethod(_SnapTime.TStrIntH_Save, None, TStrIntH)
TStrIntH.__eq__ = new_instancemethod(_SnapTime.TStrIntH___eq__, None, TStrIntH)
TStrIntH.__lt__ = new_instancemethod(_SnapTime.TStrIntH___lt__, None, TStrIntH)
TStrIntH.__call__ = new_instancemethod(_SnapTime.TStrIntH___call__, None, TStrIntH)
TStrIntH.GetMemUsed = new_instancemethod(_SnapTime.TStrIntH_GetMemUsed, None, TStrIntH)
TStrIntH.BegI = new_instancemethod(_SnapTime.TStrIntH_BegI, None, TStrIntH)
TStrIntH.EndI = new_instancemethod(_SnapTime.TStrIntH_EndI, None, TStrIntH)
TStrIntH.begin = new_instancemethod(_SnapTime.TStrIntH_begin, None, TStrIntH)
TStrIntH.end = new_instancemethod(_SnapTime.TStrIntH_end, None, TStrIntH)
TStrIntH.GetI = new_instancemethod(_SnapTime.TStrIntH_GetI, None, TStrIntH)
TStrIntH.Gen = new_instancemethod(_SnapTime.TStrIntH_Gen, None, TStrIntH)
TStrIntH.Clr = new_instancemethod(_SnapTime.TStrIntH_Clr, None, TStrIntH)
TStrIntH.Empty = new_instancemethod(_SnapTime.TStrIntH_Empty, None, TStrIntH)
TStrIntH.Len = new_instancemethod(_SnapTime.TStrIntH_Len, None, TStrIntH)
TStrIntH.GetPorts = new_instancemethod(_SnapTime.TStrIntH_GetPorts, None, TStrIntH)
TStrIntH.IsAutoSize = new_instancemethod(_SnapTime.TStrIntH_IsAutoSize, None, TStrIntH)
TStrIntH.GetMxKeyIds = new_instancemethod(_SnapTime.TStrIntH_GetMxKeyIds, None, TStrIntH)
TStrIntH.GetReservedKeyIds = new_instancemethod(_SnapTime.TStrIntH_GetReservedKeyIds, None, TStrIntH)
TStrIntH.IsKeyIdEqKeyN = new_instancemethod(_SnapTime.TStrIntH_IsKeyIdEqKeyN, None, TStrIntH)
TStrIntH.AddKey = new_instancemethod(_SnapTime.TStrIntH_AddKey, None, TStrIntH)
TStrIntH.AddDat = new_instancemethod(_SnapTime.TStrIntH_AddDat, None, TStrIntH)
TStrIntH.DelKey = new_instancemethod(_SnapTime.TStrIntH_DelKey, None, TStrIntH)
TStrIntH.DelIfKey = new_instancemethod(_SnapTime.TStrIntH_DelIfKey, None, TStrIntH)
TStrIntH.DelKeyId = new_instancemethod(_SnapTime.TStrIntH_DelKeyId, None, TStrIntH)
TStrIntH.DelKeyIdV = new_instancemethod(_SnapTime.TStrIntH_DelKeyIdV, None, TStrIntH)
TStrIntH.GetKey = new_instancemethod(_SnapTime.TStrIntH_GetKey, None, TStrIntH)
TStrIntH.GetKeyId = new_instancemethod(_SnapTime.TStrIntH_GetKeyId, None, TStrIntH)
TStrIntH.GetRndKeyId = new_instancemethod(_SnapTime.TStrIntH_GetRndKeyId, None, TStrIntH)
TStrIntH.IsKey = new_instancemethod(_SnapTime.TStrIntH_IsKey, None, TStrIntH)
TStrIntH.IsKeyId = new_instancemethod(_SnapTime.TStrIntH_IsKeyId, None, TStrIntH)
TStrIntH.GetDat = new_instancemethod(_SnapTime.TStrIntH_GetDat, None, TStrIntH)
TStrIntH.GetDatWithDefault = new_instancemethod(_SnapTime.TStrIntH_GetDatWithDefault, None, TStrIntH)
TStrIntH.GetKeyDat = new_instancemethod(_SnapTime.TStrIntH_GetKeyDat, None, TStrIntH)
TStrIntH.IsKeyGetDat = new_instancemethod(_SnapTime.TStrIntH_IsKeyGetDat, None, TStrIntH)
TStrIntH.FFirstKeyId = new_instancemethod(_SnapTime.TStrIntH_FFirstKeyId, None, TStrIntH)
TStrIntH.FNextKeyId = new_instancemethod(_SnapTime.TStrIntH_FNextKeyId, None, TStrIntH)
TStrIntH.GetKeyV = new_instancemethod(_SnapTime.TStrIntH_GetKeyV, None, TStrIntH)
TStrIntH.GetDatV = new_instancemethod(_SnapTime.TStrIntH_GetDatV, None, TStrIntH)
TStrIntH.GetKeyDatPrV = new_instancemethod(_SnapTime.TStrIntH_GetKeyDatPrV, None, TStrIntH)
TStrIntH.GetDatKeyPrV = new_instancemethod(_SnapTime.TStrIntH_GetDatKeyPrV, None, TStrIntH)
TStrIntH.GetKeyDatKdV = new_instancemethod(_SnapTime.TStrIntH_GetKeyDatKdV, None, TStrIntH)
TStrIntH.GetDatKeyKdV = new_instancemethod(_SnapTime.TStrIntH_GetDatKeyKdV, None, TStrIntH)
TStrIntH.Swap = new_instancemethod(_SnapTime.TStrIntH_Swap, None, TStrIntH)
TStrIntH.Defrag = new_instancemethod(_SnapTime.TStrIntH_Defrag, None, TStrIntH)
TStrIntH.Pack = new_instancemethod(_SnapTime.TStrIntH_Pack, None, TStrIntH)
TStrIntH.Sort = new_instancemethod(_SnapTime.TStrIntH_Sort, None, TStrIntH)
TStrIntH.SortByKey = new_instancemethod(_SnapTime.TStrIntH_SortByKey, None, TStrIntH)
TStrIntH.SortByDat = new_instancemethod(_SnapTime.TStrIntH_SortByDat, None, TStrIntH)
TStrIntH_swigregister = _SnapTime.TStrIntH_swigregister
TStrIntH_swigregister(TStrIntH)

class TStrInt64H(object):
    """Proxy of C++ THash<(TStr,TInt64,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _SnapTime.TStrInt64H_HashPrimes

    def __init__(self, *args):
        """
        __init__(THash<(TStr,TInt64,int64)> self) -> TStrInt64H
        __init__(THash<(TStr,TInt64,int64)> self, TStrInt64H Hash) -> TStrInt64H

        Parameters
        ----------
        Hash: THash< TStr,TInt64,int64 > const &

        __init__(THash<(TStr,TInt64,int64)> self, long long const & ExpectVals, bool const & _AutoSizeP=False) -> TStrInt64H

        Parameters
        ----------
        ExpectVals: long long const &
        _AutoSizeP: bool const &

        __init__(THash<(TStr,TInt64,int64)> self, long long const & ExpectVals) -> TStrInt64H

        Parameters
        ----------
        ExpectVals: long long const &

        __init__(THash<(TStr,TInt64,int64)> self, TSIn SIn) -> TStrInt64H

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TStrInt64H_swiginit(self, _SnapTime.new_TStrInt64H(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TStrInt64H self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TStrInt64H_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TStrInt64H self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TStrInt64H_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TStrInt64H self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TStrInt64H_Save(self, SOut)


    def __eq__(self, Hash):
        """
        __eq__(TStrInt64H self, TStrInt64H Hash) -> bool

        Parameters
        ----------
        Hash: THash< TStr,TInt64,int64 > const &

        """
        return _SnapTime.TStrInt64H___eq__(self, Hash)


    def __lt__(self, Hash):
        """
        __lt__(TStrInt64H self, TStrInt64H Hash) -> bool

        Parameters
        ----------
        Hash: THash< TStr,TInt64,int64 > const &

        """
        return _SnapTime.TStrInt64H___lt__(self, Hash)


    def __call__(self, Key):
        """
        __call__(TStrInt64H self, TStr Key) -> TInt64

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrInt64H___call__(self, Key)


    def GetMemUsed(self):
        """
        GetMemUsed(TStrInt64H self) -> ::TSize

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64H_GetMemUsed(self)


    def BegI(self):
        """
        BegI(TStrInt64H self) -> TStrInt64HI

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64H_BegI(self)


    def EndI(self):
        """
        EndI(TStrInt64H self) -> TStrInt64HI

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64H_EndI(self)


    def begin(self):
        """
        begin(TStrInt64H self) -> TStrInt64HI

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64H_begin(self)


    def end(self):
        """
        end(TStrInt64H self) -> TStrInt64HI

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64H_end(self)


    def GetI(self, Key):
        """
        GetI(TStrInt64H self, TStr Key) -> TStrInt64HI

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrInt64H_GetI(self, Key)


    def Gen(self, ExpectVals):
        """
        Gen(TStrInt64H self, long long const & ExpectVals)

        Parameters
        ----------
        ExpectVals: long long const &

        """
        return _SnapTime.TStrInt64H_Gen(self, ExpectVals)


    def Clr(self, DoDel=True, NoDelLim=-1, ResetDat=True):
        """
        Clr(TStrInt64H self, bool const & DoDel=True, long long const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &
        ResetDat: bool const &

        Clr(TStrInt64H self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(TStrInt64H self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TStrInt64H self)

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > *

        """
        return _SnapTime.TStrInt64H_Clr(self, DoDel, NoDelLim, ResetDat)


    def Empty(self):
        """
        Empty(TStrInt64H self) -> bool

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64H_Empty(self)


    def Len(self):
        """
        Len(TStrInt64H self) -> long long

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64H_Len(self)


    def GetPorts(self):
        """
        GetPorts(TStrInt64H self) -> long long

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64H_GetPorts(self)


    def IsAutoSize(self):
        """
        IsAutoSize(TStrInt64H self) -> bool

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64H_IsAutoSize(self)


    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TStrInt64H self) -> long long

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64H_GetMxKeyIds(self)


    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TStrInt64H self) -> long long

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64H_GetReservedKeyIds(self)


    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TStrInt64H self) -> bool

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64H_IsKeyIdEqKeyN(self)


    def AddKey(self, Key):
        """
        AddKey(TStrInt64H self, TStr Key) -> long long

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrInt64H_AddKey(self, Key)


    def AddDat(self, *args):
        """
        AddDat(TStrInt64H self, TStr Key) -> TInt64

        Parameters
        ----------
        Key: TStr const &

        AddDat(TStrInt64H self, TStr Key, TInt64 Dat) -> TInt64

        Parameters
        ----------
        Key: TStr const &
        Dat: TInt64 const &

        """
        return _SnapTime.TStrInt64H_AddDat(self, *args)


    def DelKey(self, Key):
        """
        DelKey(TStrInt64H self, TStr Key)

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrInt64H_DelKey(self, Key)


    def DelIfKey(self, Key):
        """
        DelIfKey(TStrInt64H self, TStr Key) -> bool

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrInt64H_DelIfKey(self, Key)


    def DelKeyId(self, KeyId):
        """
        DelKeyId(TStrInt64H self, long long const & KeyId)

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TStrInt64H_DelKeyId(self, KeyId)


    def DelKeyIdV(self, KeyIdV):
        """
        DelKeyIdV(TStrInt64H self, TInt64V KeyIdV)

        Parameters
        ----------
        KeyIdV: TInt64V const &

        """
        return _SnapTime.TStrInt64H_DelKeyIdV(self, KeyIdV)


    def GetKey(self, KeyId):
        """
        GetKey(TStrInt64H self, long long const & KeyId) -> TStr

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TStrInt64H_GetKey(self, KeyId)


    def GetKeyId(self, Key):
        """
        GetKeyId(TStrInt64H self, TStr Key) -> long long

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrInt64H_GetKeyId(self, Key)


    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TStrInt64H self, TRnd Rnd) -> long long

        Parameters
        ----------
        Rnd: TRnd &

        GetRndKeyId(TStrInt64H self, TRnd Rnd, double const & EmptyFrac) -> long long

        Parameters
        ----------
        Rnd: TRnd &
        EmptyFrac: double const &

        """
        return _SnapTime.TStrInt64H_GetRndKeyId(self, *args)


    def IsKey(self, *args):
        """
        IsKey(TStrInt64H self, TStr Key) -> bool

        Parameters
        ----------
        Key: TStr const &

        IsKey(TStrInt64H self, TStr Key, long long & KeyId) -> bool

        Parameters
        ----------
        Key: TStr const &
        KeyId: long long &

        """
        return _SnapTime.TStrInt64H_IsKey(self, *args)


    def IsKeyId(self, KeyId):
        """
        IsKeyId(TStrInt64H self, long long const & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TStrInt64H_IsKeyId(self, KeyId)


    def GetDat(self, *args):
        """
        GetDat(TStrInt64H self, TStr Key) -> TInt64

        Parameters
        ----------
        Key: TStr const &

        GetDat(TStrInt64H self, TStr Key) -> TInt64

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrInt64H_GetDat(self, *args)


    def GetDatWithDefault(self, Key, DefaultValue):
        """
        GetDatWithDefault(TStrInt64H self, TStr Key, TInt64 DefaultValue) -> TInt64

        Parameters
        ----------
        Key: TStr const &
        DefaultValue: TInt64

        """
        return _SnapTime.TStrInt64H_GetDatWithDefault(self, Key, DefaultValue)


    def GetKeyDat(self, KeyId, Key, Dat):
        """
        GetKeyDat(TStrInt64H self, long long const & KeyId, TStr Key, TInt64 Dat)

        Parameters
        ----------
        KeyId: long long const &
        Key: TStr &
        Dat: TInt64 &

        """
        return _SnapTime.TStrInt64H_GetKeyDat(self, KeyId, Key, Dat)


    def IsKeyGetDat(self, Key, Dat):
        """
        IsKeyGetDat(TStrInt64H self, TStr Key, TInt64 Dat) -> bool

        Parameters
        ----------
        Key: TStr const &
        Dat: TInt64 &

        """
        return _SnapTime.TStrInt64H_IsKeyGetDat(self, Key, Dat)


    def FFirstKeyId(self):
        """
        FFirstKeyId(TStrInt64H self) -> long long

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64H_FFirstKeyId(self)


    def FNextKeyId(self, KeyId):
        """
        FNextKeyId(TStrInt64H self, long long & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long &

        """
        return _SnapTime.TStrInt64H_FNextKeyId(self, KeyId)


    def GetKeyV(self, KeyV):
        """
        GetKeyV(TStrInt64H self, TStr64V KeyV)

        Parameters
        ----------
        KeyV: TVec< TStr,long long > &

        """
        return _SnapTime.TStrInt64H_GetKeyV(self, KeyV)


    def GetDatV(self, DatV):
        """
        GetDatV(TStrInt64H self, TInt64V DatV)

        Parameters
        ----------
        DatV: TVec< TInt64,long long > &

        """
        return _SnapTime.TStrInt64H_GetDatV(self, DatV)


    def GetKeyDatPrV(self, KeyDatPrV):
        """
        GetKeyDatPrV(TStrInt64H self, TVec< TPair< TStr,TInt64 >,long long > & KeyDatPrV)

        Parameters
        ----------
        KeyDatPrV: TVec< TPair< TStr,TInt64 >,long long > &

        """
        return _SnapTime.TStrInt64H_GetKeyDatPrV(self, KeyDatPrV)


    def GetDatKeyPrV(self, DatKeyPrV):
        """
        GetDatKeyPrV(TStrInt64H self, TVec< TPair< TInt64,TStr >,long long > & DatKeyPrV)

        Parameters
        ----------
        DatKeyPrV: TVec< TPair< TInt64,TStr >,long long > &

        """
        return _SnapTime.TStrInt64H_GetDatKeyPrV(self, DatKeyPrV)


    def GetKeyDatKdV(self, KeyDatKdV):
        """
        GetKeyDatKdV(TStrInt64H self, TVec< TKeyDat< TStr,TInt64 >,long long > & KeyDatKdV)

        Parameters
        ----------
        KeyDatKdV: TVec< TKeyDat< TStr,TInt64 >,long long > &

        """
        return _SnapTime.TStrInt64H_GetKeyDatKdV(self, KeyDatKdV)


    def GetDatKeyKdV(self, DatKeyKdV):
        """
        GetDatKeyKdV(TStrInt64H self, TVec< TKeyDat< TInt64,TStr >,long long > & DatKeyKdV)

        Parameters
        ----------
        DatKeyKdV: TVec< TKeyDat< TInt64,TStr >,long long > &

        """
        return _SnapTime.TStrInt64H_GetDatKeyKdV(self, DatKeyKdV)


    def Swap(self, Hash):
        """
        Swap(TStrInt64H self, TStrInt64H Hash)

        Parameters
        ----------
        Hash: THash< TStr,TInt64,int64 > &

        """
        return _SnapTime.TStrInt64H_Swap(self, Hash)


    def Defrag(self):
        """
        Defrag(TStrInt64H self)

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > *

        """
        return _SnapTime.TStrInt64H_Defrag(self)


    def Pack(self):
        """
        Pack(TStrInt64H self)

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > *

        """
        return _SnapTime.TStrInt64H_Pack(self)


    def Sort(self, CmpKey, Asc):
        """
        Sort(TStrInt64H self, bool const & CmpKey, bool const & Asc)

        Parameters
        ----------
        CmpKey: bool const &
        Asc: bool const &

        """
        return _SnapTime.TStrInt64H_Sort(self, CmpKey, Asc)


    def SortByKey(self, Asc=True):
        """
        SortByKey(TStrInt64H self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByKey(TStrInt64H self)

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > *

        """
        return _SnapTime.TStrInt64H_SortByKey(self, Asc)


    def SortByDat(self, Asc=True):
        """
        SortByDat(TStrInt64H self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        SortByDat(TStrInt64H self)

        Parameters
        ----------
        self: THash< TStr,TInt64,int64 > *

        """
        return _SnapTime.TStrInt64H_SortByDat(self, Asc)

    __swig_destroy__ = _SnapTime.delete_TStrInt64H
TStrInt64H.LoadShM = new_instancemethod(_SnapTime.TStrInt64H_LoadShM, None, TStrInt64H)
TStrInt64H.Load = new_instancemethod(_SnapTime.TStrInt64H_Load, None, TStrInt64H)
TStrInt64H.Save = new_instancemethod(_SnapTime.TStrInt64H_Save, None, TStrInt64H)
TStrInt64H.__eq__ = new_instancemethod(_SnapTime.TStrInt64H___eq__, None, TStrInt64H)
TStrInt64H.__lt__ = new_instancemethod(_SnapTime.TStrInt64H___lt__, None, TStrInt64H)
TStrInt64H.__call__ = new_instancemethod(_SnapTime.TStrInt64H___call__, None, TStrInt64H)
TStrInt64H.GetMemUsed = new_instancemethod(_SnapTime.TStrInt64H_GetMemUsed, None, TStrInt64H)
TStrInt64H.BegI = new_instancemethod(_SnapTime.TStrInt64H_BegI, None, TStrInt64H)
TStrInt64H.EndI = new_instancemethod(_SnapTime.TStrInt64H_EndI, None, TStrInt64H)
TStrInt64H.begin = new_instancemethod(_SnapTime.TStrInt64H_begin, None, TStrInt64H)
TStrInt64H.end = new_instancemethod(_SnapTime.TStrInt64H_end, None, TStrInt64H)
TStrInt64H.GetI = new_instancemethod(_SnapTime.TStrInt64H_GetI, None, TStrInt64H)
TStrInt64H.Gen = new_instancemethod(_SnapTime.TStrInt64H_Gen, None, TStrInt64H)
TStrInt64H.Clr = new_instancemethod(_SnapTime.TStrInt64H_Clr, None, TStrInt64H)
TStrInt64H.Empty = new_instancemethod(_SnapTime.TStrInt64H_Empty, None, TStrInt64H)
TStrInt64H.Len = new_instancemethod(_SnapTime.TStrInt64H_Len, None, TStrInt64H)
TStrInt64H.GetPorts = new_instancemethod(_SnapTime.TStrInt64H_GetPorts, None, TStrInt64H)
TStrInt64H.IsAutoSize = new_instancemethod(_SnapTime.TStrInt64H_IsAutoSize, None, TStrInt64H)
TStrInt64H.GetMxKeyIds = new_instancemethod(_SnapTime.TStrInt64H_GetMxKeyIds, None, TStrInt64H)
TStrInt64H.GetReservedKeyIds = new_instancemethod(_SnapTime.TStrInt64H_GetReservedKeyIds, None, TStrInt64H)
TStrInt64H.IsKeyIdEqKeyN = new_instancemethod(_SnapTime.TStrInt64H_IsKeyIdEqKeyN, None, TStrInt64H)
TStrInt64H.AddKey = new_instancemethod(_SnapTime.TStrInt64H_AddKey, None, TStrInt64H)
TStrInt64H.AddDat = new_instancemethod(_SnapTime.TStrInt64H_AddDat, None, TStrInt64H)
TStrInt64H.DelKey = new_instancemethod(_SnapTime.TStrInt64H_DelKey, None, TStrInt64H)
TStrInt64H.DelIfKey = new_instancemethod(_SnapTime.TStrInt64H_DelIfKey, None, TStrInt64H)
TStrInt64H.DelKeyId = new_instancemethod(_SnapTime.TStrInt64H_DelKeyId, None, TStrInt64H)
TStrInt64H.DelKeyIdV = new_instancemethod(_SnapTime.TStrInt64H_DelKeyIdV, None, TStrInt64H)
TStrInt64H.GetKey = new_instancemethod(_SnapTime.TStrInt64H_GetKey, None, TStrInt64H)
TStrInt64H.GetKeyId = new_instancemethod(_SnapTime.TStrInt64H_GetKeyId, None, TStrInt64H)
TStrInt64H.GetRndKeyId = new_instancemethod(_SnapTime.TStrInt64H_GetRndKeyId, None, TStrInt64H)
TStrInt64H.IsKey = new_instancemethod(_SnapTime.TStrInt64H_IsKey, None, TStrInt64H)
TStrInt64H.IsKeyId = new_instancemethod(_SnapTime.TStrInt64H_IsKeyId, None, TStrInt64H)
TStrInt64H.GetDat = new_instancemethod(_SnapTime.TStrInt64H_GetDat, None, TStrInt64H)
TStrInt64H.GetDatWithDefault = new_instancemethod(_SnapTime.TStrInt64H_GetDatWithDefault, None, TStrInt64H)
TStrInt64H.GetKeyDat = new_instancemethod(_SnapTime.TStrInt64H_GetKeyDat, None, TStrInt64H)
TStrInt64H.IsKeyGetDat = new_instancemethod(_SnapTime.TStrInt64H_IsKeyGetDat, None, TStrInt64H)
TStrInt64H.FFirstKeyId = new_instancemethod(_SnapTime.TStrInt64H_FFirstKeyId, None, TStrInt64H)
TStrInt64H.FNextKeyId = new_instancemethod(_SnapTime.TStrInt64H_FNextKeyId, None, TStrInt64H)
TStrInt64H.GetKeyV = new_instancemethod(_SnapTime.TStrInt64H_GetKeyV, None, TStrInt64H)
TStrInt64H.GetDatV = new_instancemethod(_SnapTime.TStrInt64H_GetDatV, None, TStrInt64H)
TStrInt64H.GetKeyDatPrV = new_instancemethod(_SnapTime.TStrInt64H_GetKeyDatPrV, None, TStrInt64H)
TStrInt64H.GetDatKeyPrV = new_instancemethod(_SnapTime.TStrInt64H_GetDatKeyPrV, None, TStrInt64H)
TStrInt64H.GetKeyDatKdV = new_instancemethod(_SnapTime.TStrInt64H_GetKeyDatKdV, None, TStrInt64H)
TStrInt64H.GetDatKeyKdV = new_instancemethod(_SnapTime.TStrInt64H_GetDatKeyKdV, None, TStrInt64H)
TStrInt64H.Swap = new_instancemethod(_SnapTime.TStrInt64H_Swap, None, TStrInt64H)
TStrInt64H.Defrag = new_instancemethod(_SnapTime.TStrInt64H_Defrag, None, TStrInt64H)
TStrInt64H.Pack = new_instancemethod(_SnapTime.TStrInt64H_Pack, None, TStrInt64H)
TStrInt64H.Sort = new_instancemethod(_SnapTime.TStrInt64H_Sort, None, TStrInt64H)
TStrInt64H.SortByKey = new_instancemethod(_SnapTime.TStrInt64H_SortByKey, None, TStrInt64H)
TStrInt64H.SortByDat = new_instancemethod(_SnapTime.TStrInt64H_SortByDat, None, TStrInt64H)
TStrInt64H_swigregister = _SnapTime.TStrInt64H_swigregister
TStrInt64H_swigregister(TStrInt64H)

class TStrIntSH(object):
    """Proxy of C++ TStrHash<(TInt,TStrPool,int64,TDefaultHashFunc<(TStr)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TStrHash<(TInt,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self) -> TStrIntSH
        __init__(TStrHash<(TInt,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self, TStrHash< TInt,TStrPool,long long,TDefaultHashFunc< TStr > >::PStringPool const & StrPool) -> TStrIntSH

        Parameters
        ----------
        StrPool: TStrHash< TInt,TStrPool,long long,TDefaultHashFunc< TStr > >::PStringPool const &

        __init__(TStrHash<(TInt,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self, long long const & Ports, bool const & _AutoSizeP=False, TStrHash< TInt,TStrPool,long long,TDefaultHashFunc< TStr > >::PStringPool const & StrPool) -> TStrIntSH

        Parameters
        ----------
        Ports: long long const &
        _AutoSizeP: bool const &
        StrPool: TStrHash< TInt,TStrPool,long long,TDefaultHashFunc< TStr > >::PStringPool const &

        __init__(TStrHash<(TInt,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self, long long const & Ports, bool const & _AutoSizeP=False) -> TStrIntSH

        Parameters
        ----------
        Ports: long long const &
        _AutoSizeP: bool const &

        __init__(TStrHash<(TInt,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self, long long const & Ports) -> TStrIntSH

        Parameters
        ----------
        Ports: long long const &

        __init__(TStrHash<(TInt,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self, TStrIntSH Hash) -> TStrIntSH

        Parameters
        ----------
        Hash: TStrHash< TInt,TStrPool,int64,TDefaultHashFunc< TStr > > const &

        __init__(TStrHash<(TInt,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self, TSIn SIn, bool PoolToo=True) -> TStrIntSH

        Parameters
        ----------
        SIn: TSIn &
        PoolToo: bool

        __init__(TStrHash<(TInt,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self, TSIn SIn) -> TStrIntSH

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TStrIntSH_swiginit(self, _SnapTime.new_TStrIntSH(*args))

    def Load(self, SIn, PoolToo=True):
        """
        Load(TStrIntSH self, TSIn SIn, bool PoolToo=True)

        Parameters
        ----------
        SIn: TSIn &
        PoolToo: bool

        Load(TStrIntSH self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TStrIntSH_Load(self, SIn, PoolToo)


    def LoadShM(self, ShMIn, SharedPool=True):
        """
        LoadShM(TStrIntSH self, TShMIn ShMIn, bool SharedPool=True)

        Parameters
        ----------
        ShMIn: TShMIn &
        SharedPool: bool

        LoadShM(TStrIntSH self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TStrIntSH_LoadShM(self, ShMIn, SharedPool)


    def Save(self, SOut, PoolToo=True):
        """
        Save(TStrIntSH self, TSOut SOut, bool PoolToo=True)

        Parameters
        ----------
        SOut: TSOut &
        PoolToo: bool

        Save(TStrIntSH self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TStrIntSH_Save(self, SOut, PoolToo)


    def SetPool(self, StrPool):
        """
        SetPool(TStrIntSH self, TStrHash< TInt,TStrPool,long long,TDefaultHashFunc< TStr > >::PStringPool const & StrPool)

        Parameters
        ----------
        StrPool: TStrHash< TInt,TStrPool,long long,TDefaultHashFunc< TStr > >::PStringPool const &

        """
        return _SnapTime.TStrIntSH_SetPool(self, StrPool)


    def GetPool(self):
        """
        GetPool(TStrIntSH self) -> TStrHash< TInt,TStrPool,long long,TDefaultHashFunc< TStr > >::PStringPool

        Parameters
        ----------
        self: TStrHash< TInt,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrIntSH_GetPool(self)


    def Empty(self):
        """
        Empty(TStrIntSH self) -> bool

        Parameters
        ----------
        self: TStrHash< TInt,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrIntSH_Empty(self)


    def Len(self):
        """
        Len(TStrIntSH self) -> long long

        Parameters
        ----------
        self: TStrHash< TInt,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrIntSH_Len(self)


    def Reserved(self):
        """
        Reserved(TStrIntSH self) -> long long

        Parameters
        ----------
        self: TStrHash< TInt,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrIntSH_Reserved(self)


    def GetPorts(self):
        """
        GetPorts(TStrIntSH self) -> long long

        Parameters
        ----------
        self: TStrHash< TInt,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrIntSH_GetPorts(self)


    def IsAutoSize(self):
        """
        IsAutoSize(TStrIntSH self) -> bool

        Parameters
        ----------
        self: TStrHash< TInt,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrIntSH_IsAutoSize(self)


    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TStrIntSH self) -> long long

        Parameters
        ----------
        self: TStrHash< TInt,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrIntSH_GetMxKeyIds(self)


    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TStrIntSH self) -> bool

        Parameters
        ----------
        self: TStrHash< TInt,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrIntSH_IsKeyIdEqKeyN(self)


    def AddKey(self, *args):
        """
        AddKey(TStrIntSH self, char const * Key) -> long long

        Parameters
        ----------
        Key: char const *

        AddKey(TStrIntSH self, TStr Key) -> long long

        Parameters
        ----------
        Key: TStr const &

        AddKey(TStrIntSH self, TChA Key) -> long long

        Parameters
        ----------
        Key: TChA const &

        """
        return _SnapTime.TStrIntSH_AddKey(self, *args)


    def AddDat(self, *args):
        """
        AddDat(TStrIntSH self, char const * Key, TInt Dat) -> long long

        Parameters
        ----------
        Key: char const *
        Dat: TInt const &

        AddDat(TStrIntSH self, TStr Key, TInt Dat) -> long long

        Parameters
        ----------
        Key: TStr const &
        Dat: TInt const &

        AddDat(TStrIntSH self, TChA Key, TInt Dat) -> long long

        Parameters
        ----------
        Key: TChA const &
        Dat: TInt const &

        AddDat(TStrIntSH self, char const * Key) -> TInt

        Parameters
        ----------
        Key: char const *

        AddDat(TStrIntSH self, TStr Key) -> TInt

        Parameters
        ----------
        Key: TStr const &

        AddDat(TStrIntSH self, TChA Key) -> TInt

        Parameters
        ----------
        Key: TChA const &

        """
        return _SnapTime.TStrIntSH_AddDat(self, *args)


    def AddDatId(self, *args):
        """
        AddDatId(TStrIntSH self, char const * Key) -> TInt

        Parameters
        ----------
        Key: char const *

        AddDatId(TStrIntSH self, TStr Key) -> TInt

        Parameters
        ----------
        Key: TStr const &

        AddDatId(TStrIntSH self, TChA Key) -> TInt

        Parameters
        ----------
        Key: TChA const &

        """
        return _SnapTime.TStrIntSH_AddDatId(self, *args)


    def __call__(self, Key):
        """
        __call__(TStrIntSH self, char const * Key) -> TInt

        Parameters
        ----------
        Key: char const *

        """
        return _SnapTime.TStrIntSH___call__(self, Key)


    def GetMemUsed(self):
        """
        GetMemUsed(TStrIntSH self) -> ::TSize

        Parameters
        ----------
        self: TStrHash< TInt,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrIntSH_GetMemUsed(self)


    def GetDat(self, *args):
        """
        GetDat(TStrIntSH self, char const * Key) -> TInt

        Parameters
        ----------
        Key: char const *

        GetDat(TStrIntSH self, TStr Key) -> TInt

        Parameters
        ----------
        Key: TStr const &

        GetDat(TStrIntSH self, char const * Key) -> TInt

        Parameters
        ----------
        Key: char const *

        GetDat(TStrIntSH self, TStr Key) -> TInt

        Parameters
        ----------
        Key: TStr const &

        GetDat(TStrIntSH self, TChA Key) -> TInt

        Parameters
        ----------
        Key: TChA const &

        """
        return _SnapTime.TStrIntSH_GetDat(self, *args)


    def GetDatId(self, *args):
        """
        GetDatId(TStrIntSH self, long long const & KeyId) -> TInt

        Parameters
        ----------
        KeyId: long long const &

        GetDatId(TStrIntSH self, long long const & KeyId) -> TInt

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TStrIntSH_GetDatId(self, *args)


    def GetKeyDat(self, *args):
        """
        GetKeyDat(TStrIntSH self, long long const & KeyId, long long & KeyO, TInt Dat)

        Parameters
        ----------
        KeyId: long long const &
        KeyO: long long &
        Dat: TInt &

        GetKeyDat(TStrIntSH self, long long const & KeyId, char const *& Key, TInt Dat)

        Parameters
        ----------
        KeyId: long long const &
        Key: char const *&
        Dat: TInt &

        GetKeyDat(TStrIntSH self, long long const & KeyId, TStr Key, TInt Dat)

        Parameters
        ----------
        KeyId: long long const &
        Key: TStr &
        Dat: TInt &

        GetKeyDat(TStrIntSH self, long long const & KeyId, TChA Key, TInt Dat)

        Parameters
        ----------
        KeyId: long long const &
        Key: TChA &
        Dat: TInt &

        """
        return _SnapTime.TStrIntSH_GetKeyDat(self, *args)


    def GetKeyId(self, *args):
        """
        GetKeyId(TStrIntSH self, char const * Key) -> long long

        Parameters
        ----------
        Key: char const *

        GetKeyId(TStrIntSH self, TStr Key) -> long long

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrIntSH_GetKeyId(self, *args)


    def GetKey(self, KeyId):
        """
        GetKey(TStrIntSH self, long long const & KeyId) -> char const *

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TStrIntSH_GetKey(self, KeyId)


    def GetKeyOfs(self, KeyId):
        """
        GetKeyOfs(TStrIntSH self, long long const & KeyId) -> long long

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TStrIntSH_GetKeyOfs(self, KeyId)


    def KeyFromOfs(self, KeyO):
        """
        KeyFromOfs(TStrIntSH self, long long const & KeyO) -> char const *

        Parameters
        ----------
        KeyO: long long const &

        """
        return _SnapTime.TStrIntSH_KeyFromOfs(self, KeyO)


    def IsKey(self, *args):
        """
        IsKey(TStrIntSH self, char const * Key) -> bool

        Parameters
        ----------
        Key: char const *

        IsKey(TStrIntSH self, TStr Key) -> bool

        Parameters
        ----------
        Key: TStr const &

        IsKey(TStrIntSH self, TChA Key) -> bool

        Parameters
        ----------
        Key: TChA const &

        IsKey(TStrIntSH self, char const * Key, long long & KeyId) -> bool

        Parameters
        ----------
        Key: char const *
        KeyId: long long &

        """
        return _SnapTime.TStrIntSH_IsKey(self, *args)


    def IsKeyGetDat(self, *args):
        """
        IsKeyGetDat(TStrIntSH self, char const * Key, TInt Dat) -> bool

        Parameters
        ----------
        Key: char const *
        Dat: TInt &

        IsKeyGetDat(TStrIntSH self, TStr Key, TInt Dat) -> bool

        Parameters
        ----------
        Key: TStr const &
        Dat: TInt &

        IsKeyGetDat(TStrIntSH self, TChA Key, TInt Dat) -> bool

        Parameters
        ----------
        Key: TChA const &
        Dat: TInt &

        """
        return _SnapTime.TStrIntSH_IsKeyGetDat(self, *args)


    def IsKeyId(self, KeyId):
        """
        IsKeyId(TStrIntSH self, long long const & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TStrIntSH_IsKeyId(self, KeyId)


    def FFirstKeyId(self):
        """
        FFirstKeyId(TStrIntSH self) -> long long

        Parameters
        ----------
        self: TStrHash< TInt,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrIntSH_FFirstKeyId(self)


    def FNextKeyId(self, KeyId):
        """
        FNextKeyId(TStrIntSH self, long long & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long &

        """
        return _SnapTime.TStrIntSH_FNextKeyId(self, KeyId)


    def GetKeyV(self, KeyV):
        """
        GetKeyV(TStrIntSH self, TStr64V KeyV)

        Parameters
        ----------
        KeyV: TVec< TStr,long long > &

        """
        return _SnapTime.TStrIntSH_GetKeyV(self, KeyV)


    def GetStrIdV(self, StrIdV):
        """
        GetStrIdV(TStrIntSH self, TInt64V StrIdV)

        Parameters
        ----------
        StrIdV: TInt64V &

        """
        return _SnapTime.TStrIntSH_GetStrIdV(self, StrIdV)


    def GetDatV(self, DatV):
        """
        GetDatV(TStrIntSH self, TVec< TInt,long long > & DatV)

        Parameters
        ----------
        DatV: TVec< TInt,long long > &

        """
        return _SnapTime.TStrIntSH_GetDatV(self, DatV)


    def GetKeyDatPrV(self, KeyDatPrV):
        """
        GetKeyDatPrV(TStrIntSH self, TVec< TPair< TStr,TInt >,long long > & KeyDatPrV)

        Parameters
        ----------
        KeyDatPrV: TVec< TPair< TStr,TInt >,long long > &

        """
        return _SnapTime.TStrIntSH_GetKeyDatPrV(self, KeyDatPrV)


    def GetDatKeyPrV(self, DatKeyPrV):
        """
        GetDatKeyPrV(TStrIntSH self, TVec< TPair< TInt,TStr >,long long > & DatKeyPrV)

        Parameters
        ----------
        DatKeyPrV: TVec< TPair< TInt,TStr >,long long > &

        """
        return _SnapTime.TStrIntSH_GetDatKeyPrV(self, DatKeyPrV)


    def Pack(self):
        """
        Pack(TStrIntSH self)

        Parameters
        ----------
        self: TStrHash< TInt,TStrPool,int64,TDefaultHashFunc< TStr > > *

        """
        return _SnapTime.TStrIntSH_Pack(self)

    __swig_destroy__ = _SnapTime.delete_TStrIntSH
TStrIntSH.Load = new_instancemethod(_SnapTime.TStrIntSH_Load, None, TStrIntSH)
TStrIntSH.LoadShM = new_instancemethod(_SnapTime.TStrIntSH_LoadShM, None, TStrIntSH)
TStrIntSH.Save = new_instancemethod(_SnapTime.TStrIntSH_Save, None, TStrIntSH)
TStrIntSH.SetPool = new_instancemethod(_SnapTime.TStrIntSH_SetPool, None, TStrIntSH)
TStrIntSH.GetPool = new_instancemethod(_SnapTime.TStrIntSH_GetPool, None, TStrIntSH)
TStrIntSH.Empty = new_instancemethod(_SnapTime.TStrIntSH_Empty, None, TStrIntSH)
TStrIntSH.Len = new_instancemethod(_SnapTime.TStrIntSH_Len, None, TStrIntSH)
TStrIntSH.Reserved = new_instancemethod(_SnapTime.TStrIntSH_Reserved, None, TStrIntSH)
TStrIntSH.GetPorts = new_instancemethod(_SnapTime.TStrIntSH_GetPorts, None, TStrIntSH)
TStrIntSH.IsAutoSize = new_instancemethod(_SnapTime.TStrIntSH_IsAutoSize, None, TStrIntSH)
TStrIntSH.GetMxKeyIds = new_instancemethod(_SnapTime.TStrIntSH_GetMxKeyIds, None, TStrIntSH)
TStrIntSH.IsKeyIdEqKeyN = new_instancemethod(_SnapTime.TStrIntSH_IsKeyIdEqKeyN, None, TStrIntSH)
TStrIntSH.AddKey = new_instancemethod(_SnapTime.TStrIntSH_AddKey, None, TStrIntSH)
TStrIntSH.AddDat = new_instancemethod(_SnapTime.TStrIntSH_AddDat, None, TStrIntSH)
TStrIntSH.AddDatId = new_instancemethod(_SnapTime.TStrIntSH_AddDatId, None, TStrIntSH)
TStrIntSH.__call__ = new_instancemethod(_SnapTime.TStrIntSH___call__, None, TStrIntSH)
TStrIntSH.GetMemUsed = new_instancemethod(_SnapTime.TStrIntSH_GetMemUsed, None, TStrIntSH)
TStrIntSH.GetDat = new_instancemethod(_SnapTime.TStrIntSH_GetDat, None, TStrIntSH)
TStrIntSH.GetDatId = new_instancemethod(_SnapTime.TStrIntSH_GetDatId, None, TStrIntSH)
TStrIntSH.GetKeyDat = new_instancemethod(_SnapTime.TStrIntSH_GetKeyDat, None, TStrIntSH)
TStrIntSH.GetKeyId = new_instancemethod(_SnapTime.TStrIntSH_GetKeyId, None, TStrIntSH)
TStrIntSH.GetKey = new_instancemethod(_SnapTime.TStrIntSH_GetKey, None, TStrIntSH)
TStrIntSH.GetKeyOfs = new_instancemethod(_SnapTime.TStrIntSH_GetKeyOfs, None, TStrIntSH)
TStrIntSH.KeyFromOfs = new_instancemethod(_SnapTime.TStrIntSH_KeyFromOfs, None, TStrIntSH)
TStrIntSH.IsKey = new_instancemethod(_SnapTime.TStrIntSH_IsKey, None, TStrIntSH)
TStrIntSH.IsKeyGetDat = new_instancemethod(_SnapTime.TStrIntSH_IsKeyGetDat, None, TStrIntSH)
TStrIntSH.IsKeyId = new_instancemethod(_SnapTime.TStrIntSH_IsKeyId, None, TStrIntSH)
TStrIntSH.FFirstKeyId = new_instancemethod(_SnapTime.TStrIntSH_FFirstKeyId, None, TStrIntSH)
TStrIntSH.FNextKeyId = new_instancemethod(_SnapTime.TStrIntSH_FNextKeyId, None, TStrIntSH)
TStrIntSH.GetKeyV = new_instancemethod(_SnapTime.TStrIntSH_GetKeyV, None, TStrIntSH)
TStrIntSH.GetStrIdV = new_instancemethod(_SnapTime.TStrIntSH_GetStrIdV, None, TStrIntSH)
TStrIntSH.GetDatV = new_instancemethod(_SnapTime.TStrIntSH_GetDatV, None, TStrIntSH)
TStrIntSH.GetKeyDatPrV = new_instancemethod(_SnapTime.TStrIntSH_GetKeyDatPrV, None, TStrIntSH)
TStrIntSH.GetDatKeyPrV = new_instancemethod(_SnapTime.TStrIntSH_GetDatKeyPrV, None, TStrIntSH)
TStrIntSH.Pack = new_instancemethod(_SnapTime.TStrIntSH_Pack, None, TStrIntSH)
TStrIntSH_swigregister = _SnapTime.TStrIntSH_swigregister
TStrIntSH_swigregister(TStrIntSH)

class TStrInt64SH(object):
    """Proxy of C++ TStrHash<(TInt64,TStrPool,int64,TDefaultHashFunc<(TStr)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TStrHash<(TInt64,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self) -> TStrInt64SH
        __init__(TStrHash<(TInt64,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self, TStrHash< TInt64,TStrPool,long long,TDefaultHashFunc< TStr > >::PStringPool const & StrPool) -> TStrInt64SH

        Parameters
        ----------
        StrPool: TStrHash< TInt64,TStrPool,long long,TDefaultHashFunc< TStr > >::PStringPool const &

        __init__(TStrHash<(TInt64,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self, long long const & Ports, bool const & _AutoSizeP=False, TStrHash< TInt64,TStrPool,long long,TDefaultHashFunc< TStr > >::PStringPool const & StrPool) -> TStrInt64SH

        Parameters
        ----------
        Ports: long long const &
        _AutoSizeP: bool const &
        StrPool: TStrHash< TInt64,TStrPool,long long,TDefaultHashFunc< TStr > >::PStringPool const &

        __init__(TStrHash<(TInt64,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self, long long const & Ports, bool const & _AutoSizeP=False) -> TStrInt64SH

        Parameters
        ----------
        Ports: long long const &
        _AutoSizeP: bool const &

        __init__(TStrHash<(TInt64,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self, long long const & Ports) -> TStrInt64SH

        Parameters
        ----------
        Ports: long long const &

        __init__(TStrHash<(TInt64,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self, TStrInt64SH Hash) -> TStrInt64SH

        Parameters
        ----------
        Hash: TStrHash< TInt64,TStrPool,int64,TDefaultHashFunc< TStr > > const &

        __init__(TStrHash<(TInt64,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self, TSIn SIn, bool PoolToo=True) -> TStrInt64SH

        Parameters
        ----------
        SIn: TSIn &
        PoolToo: bool

        __init__(TStrHash<(TInt64,TStrPool,int64,TDefaultHashFunc<(TStr)>)> self, TSIn SIn) -> TStrInt64SH

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TStrInt64SH_swiginit(self, _SnapTime.new_TStrInt64SH(*args))

    def Load(self, SIn, PoolToo=True):
        """
        Load(TStrInt64SH self, TSIn SIn, bool PoolToo=True)

        Parameters
        ----------
        SIn: TSIn &
        PoolToo: bool

        Load(TStrInt64SH self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TStrInt64SH_Load(self, SIn, PoolToo)


    def LoadShM(self, ShMIn, SharedPool=True):
        """
        LoadShM(TStrInt64SH self, TShMIn ShMIn, bool SharedPool=True)

        Parameters
        ----------
        ShMIn: TShMIn &
        SharedPool: bool

        LoadShM(TStrInt64SH self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TStrInt64SH_LoadShM(self, ShMIn, SharedPool)


    def Save(self, SOut, PoolToo=True):
        """
        Save(TStrInt64SH self, TSOut SOut, bool PoolToo=True)

        Parameters
        ----------
        SOut: TSOut &
        PoolToo: bool

        Save(TStrInt64SH self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TStrInt64SH_Save(self, SOut, PoolToo)


    def SetPool(self, StrPool):
        """
        SetPool(TStrInt64SH self, TStrHash< TInt64,TStrPool,long long,TDefaultHashFunc< TStr > >::PStringPool const & StrPool)

        Parameters
        ----------
        StrPool: TStrHash< TInt64,TStrPool,long long,TDefaultHashFunc< TStr > >::PStringPool const &

        """
        return _SnapTime.TStrInt64SH_SetPool(self, StrPool)


    def GetPool(self):
        """
        GetPool(TStrInt64SH self) -> TStrHash< TInt64,TStrPool,long long,TDefaultHashFunc< TStr > >::PStringPool

        Parameters
        ----------
        self: TStrHash< TInt64,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrInt64SH_GetPool(self)


    def Empty(self):
        """
        Empty(TStrInt64SH self) -> bool

        Parameters
        ----------
        self: TStrHash< TInt64,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrInt64SH_Empty(self)


    def Len(self):
        """
        Len(TStrInt64SH self) -> long long

        Parameters
        ----------
        self: TStrHash< TInt64,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrInt64SH_Len(self)


    def Reserved(self):
        """
        Reserved(TStrInt64SH self) -> long long

        Parameters
        ----------
        self: TStrHash< TInt64,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrInt64SH_Reserved(self)


    def GetPorts(self):
        """
        GetPorts(TStrInt64SH self) -> long long

        Parameters
        ----------
        self: TStrHash< TInt64,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrInt64SH_GetPorts(self)


    def IsAutoSize(self):
        """
        IsAutoSize(TStrInt64SH self) -> bool

        Parameters
        ----------
        self: TStrHash< TInt64,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrInt64SH_IsAutoSize(self)


    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TStrInt64SH self) -> long long

        Parameters
        ----------
        self: TStrHash< TInt64,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrInt64SH_GetMxKeyIds(self)


    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TStrInt64SH self) -> bool

        Parameters
        ----------
        self: TStrHash< TInt64,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrInt64SH_IsKeyIdEqKeyN(self)


    def AddKey(self, *args):
        """
        AddKey(TStrInt64SH self, char const * Key) -> long long

        Parameters
        ----------
        Key: char const *

        AddKey(TStrInt64SH self, TStr Key) -> long long

        Parameters
        ----------
        Key: TStr const &

        AddKey(TStrInt64SH self, TChA Key) -> long long

        Parameters
        ----------
        Key: TChA const &

        """
        return _SnapTime.TStrInt64SH_AddKey(self, *args)


    def AddDat(self, *args):
        """
        AddDat(TStrInt64SH self, char const * Key, TInt64 Dat) -> long long

        Parameters
        ----------
        Key: char const *
        Dat: TInt64 const &

        AddDat(TStrInt64SH self, TStr Key, TInt64 Dat) -> long long

        Parameters
        ----------
        Key: TStr const &
        Dat: TInt64 const &

        AddDat(TStrInt64SH self, TChA Key, TInt64 Dat) -> long long

        Parameters
        ----------
        Key: TChA const &
        Dat: TInt64 const &

        AddDat(TStrInt64SH self, char const * Key) -> TInt64

        Parameters
        ----------
        Key: char const *

        AddDat(TStrInt64SH self, TStr Key) -> TInt64

        Parameters
        ----------
        Key: TStr const &

        AddDat(TStrInt64SH self, TChA Key) -> TInt64

        Parameters
        ----------
        Key: TChA const &

        """
        return _SnapTime.TStrInt64SH_AddDat(self, *args)


    def AddDatId(self, *args):
        """
        AddDatId(TStrInt64SH self, char const * Key) -> TInt64

        Parameters
        ----------
        Key: char const *

        AddDatId(TStrInt64SH self, TStr Key) -> TInt64

        Parameters
        ----------
        Key: TStr const &

        AddDatId(TStrInt64SH self, TChA Key) -> TInt64

        Parameters
        ----------
        Key: TChA const &

        """
        return _SnapTime.TStrInt64SH_AddDatId(self, *args)


    def __call__(self, Key):
        """
        __call__(TStrInt64SH self, char const * Key) -> TInt64

        Parameters
        ----------
        Key: char const *

        """
        return _SnapTime.TStrInt64SH___call__(self, Key)


    def GetMemUsed(self):
        """
        GetMemUsed(TStrInt64SH self) -> ::TSize

        Parameters
        ----------
        self: TStrHash< TInt64,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrInt64SH_GetMemUsed(self)


    def GetDat(self, *args):
        """
        GetDat(TStrInt64SH self, char const * Key) -> TInt64

        Parameters
        ----------
        Key: char const *

        GetDat(TStrInt64SH self, TStr Key) -> TInt64

        Parameters
        ----------
        Key: TStr const &

        GetDat(TStrInt64SH self, char const * Key) -> TInt64

        Parameters
        ----------
        Key: char const *

        GetDat(TStrInt64SH self, TStr Key) -> TInt64

        Parameters
        ----------
        Key: TStr const &

        GetDat(TStrInt64SH self, TChA Key) -> TInt64

        Parameters
        ----------
        Key: TChA const &

        """
        return _SnapTime.TStrInt64SH_GetDat(self, *args)


    def GetDatId(self, *args):
        """
        GetDatId(TStrInt64SH self, long long const & KeyId) -> TInt64

        Parameters
        ----------
        KeyId: long long const &

        GetDatId(TStrInt64SH self, long long const & KeyId) -> TInt64

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TStrInt64SH_GetDatId(self, *args)


    def GetKeyDat(self, *args):
        """
        GetKeyDat(TStrInt64SH self, long long const & KeyId, long long & KeyO, TInt64 Dat)

        Parameters
        ----------
        KeyId: long long const &
        KeyO: long long &
        Dat: TInt64 &

        GetKeyDat(TStrInt64SH self, long long const & KeyId, char const *& Key, TInt64 Dat)

        Parameters
        ----------
        KeyId: long long const &
        Key: char const *&
        Dat: TInt64 &

        GetKeyDat(TStrInt64SH self, long long const & KeyId, TStr Key, TInt64 Dat)

        Parameters
        ----------
        KeyId: long long const &
        Key: TStr &
        Dat: TInt64 &

        GetKeyDat(TStrInt64SH self, long long const & KeyId, TChA Key, TInt64 Dat)

        Parameters
        ----------
        KeyId: long long const &
        Key: TChA &
        Dat: TInt64 &

        """
        return _SnapTime.TStrInt64SH_GetKeyDat(self, *args)


    def GetKeyId(self, *args):
        """
        GetKeyId(TStrInt64SH self, char const * Key) -> long long

        Parameters
        ----------
        Key: char const *

        GetKeyId(TStrInt64SH self, TStr Key) -> long long

        Parameters
        ----------
        Key: TStr const &

        """
        return _SnapTime.TStrInt64SH_GetKeyId(self, *args)


    def GetKey(self, KeyId):
        """
        GetKey(TStrInt64SH self, long long const & KeyId) -> char const *

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TStrInt64SH_GetKey(self, KeyId)


    def GetKeyOfs(self, KeyId):
        """
        GetKeyOfs(TStrInt64SH self, long long const & KeyId) -> long long

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TStrInt64SH_GetKeyOfs(self, KeyId)


    def KeyFromOfs(self, KeyO):
        """
        KeyFromOfs(TStrInt64SH self, long long const & KeyO) -> char const *

        Parameters
        ----------
        KeyO: long long const &

        """
        return _SnapTime.TStrInt64SH_KeyFromOfs(self, KeyO)


    def IsKey(self, *args):
        """
        IsKey(TStrInt64SH self, char const * Key) -> bool

        Parameters
        ----------
        Key: char const *

        IsKey(TStrInt64SH self, TStr Key) -> bool

        Parameters
        ----------
        Key: TStr const &

        IsKey(TStrInt64SH self, TChA Key) -> bool

        Parameters
        ----------
        Key: TChA const &

        IsKey(TStrInt64SH self, char const * Key, long long & KeyId) -> bool

        Parameters
        ----------
        Key: char const *
        KeyId: long long &

        """
        return _SnapTime.TStrInt64SH_IsKey(self, *args)


    def IsKeyGetDat(self, *args):
        """
        IsKeyGetDat(TStrInt64SH self, char const * Key, TInt64 Dat) -> bool

        Parameters
        ----------
        Key: char const *
        Dat: TInt64 &

        IsKeyGetDat(TStrInt64SH self, TStr Key, TInt64 Dat) -> bool

        Parameters
        ----------
        Key: TStr const &
        Dat: TInt64 &

        IsKeyGetDat(TStrInt64SH self, TChA Key, TInt64 Dat) -> bool

        Parameters
        ----------
        Key: TChA const &
        Dat: TInt64 &

        """
        return _SnapTime.TStrInt64SH_IsKeyGetDat(self, *args)


    def IsKeyId(self, KeyId):
        """
        IsKeyId(TStrInt64SH self, long long const & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TStrInt64SH_IsKeyId(self, KeyId)


    def FFirstKeyId(self):
        """
        FFirstKeyId(TStrInt64SH self) -> long long

        Parameters
        ----------
        self: TStrHash< TInt64,TStrPool,int64,TDefaultHashFunc< TStr > > const *

        """
        return _SnapTime.TStrInt64SH_FFirstKeyId(self)


    def FNextKeyId(self, KeyId):
        """
        FNextKeyId(TStrInt64SH self, long long & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long &

        """
        return _SnapTime.TStrInt64SH_FNextKeyId(self, KeyId)


    def GetKeyV(self, KeyV):
        """
        GetKeyV(TStrInt64SH self, TStr64V KeyV)

        Parameters
        ----------
        KeyV: TVec< TStr,long long > &

        """
        return _SnapTime.TStrInt64SH_GetKeyV(self, KeyV)


    def GetStrIdV(self, StrIdV):
        """
        GetStrIdV(TStrInt64SH self, TInt64V StrIdV)

        Parameters
        ----------
        StrIdV: TInt64V &

        """
        return _SnapTime.TStrInt64SH_GetStrIdV(self, StrIdV)


    def GetDatV(self, DatV):
        """
        GetDatV(TStrInt64SH self, TInt64V DatV)

        Parameters
        ----------
        DatV: TVec< TInt64,long long > &

        """
        return _SnapTime.TStrInt64SH_GetDatV(self, DatV)


    def GetKeyDatPrV(self, KeyDatPrV):
        """
        GetKeyDatPrV(TStrInt64SH self, TVec< TPair< TStr,TInt64 >,long long > & KeyDatPrV)

        Parameters
        ----------
        KeyDatPrV: TVec< TPair< TStr,TInt64 >,long long > &

        """
        return _SnapTime.TStrInt64SH_GetKeyDatPrV(self, KeyDatPrV)


    def GetDatKeyPrV(self, DatKeyPrV):
        """
        GetDatKeyPrV(TStrInt64SH self, TVec< TPair< TInt64,TStr >,long long > & DatKeyPrV)

        Parameters
        ----------
        DatKeyPrV: TVec< TPair< TInt64,TStr >,long long > &

        """
        return _SnapTime.TStrInt64SH_GetDatKeyPrV(self, DatKeyPrV)


    def Pack(self):
        """
        Pack(TStrInt64SH self)

        Parameters
        ----------
        self: TStrHash< TInt64,TStrPool,int64,TDefaultHashFunc< TStr > > *

        """
        return _SnapTime.TStrInt64SH_Pack(self)

    __swig_destroy__ = _SnapTime.delete_TStrInt64SH
TStrInt64SH.Load = new_instancemethod(_SnapTime.TStrInt64SH_Load, None, TStrInt64SH)
TStrInt64SH.LoadShM = new_instancemethod(_SnapTime.TStrInt64SH_LoadShM, None, TStrInt64SH)
TStrInt64SH.Save = new_instancemethod(_SnapTime.TStrInt64SH_Save, None, TStrInt64SH)
TStrInt64SH.SetPool = new_instancemethod(_SnapTime.TStrInt64SH_SetPool, None, TStrInt64SH)
TStrInt64SH.GetPool = new_instancemethod(_SnapTime.TStrInt64SH_GetPool, None, TStrInt64SH)
TStrInt64SH.Empty = new_instancemethod(_SnapTime.TStrInt64SH_Empty, None, TStrInt64SH)
TStrInt64SH.Len = new_instancemethod(_SnapTime.TStrInt64SH_Len, None, TStrInt64SH)
TStrInt64SH.Reserved = new_instancemethod(_SnapTime.TStrInt64SH_Reserved, None, TStrInt64SH)
TStrInt64SH.GetPorts = new_instancemethod(_SnapTime.TStrInt64SH_GetPorts, None, TStrInt64SH)
TStrInt64SH.IsAutoSize = new_instancemethod(_SnapTime.TStrInt64SH_IsAutoSize, None, TStrInt64SH)
TStrInt64SH.GetMxKeyIds = new_instancemethod(_SnapTime.TStrInt64SH_GetMxKeyIds, None, TStrInt64SH)
TStrInt64SH.IsKeyIdEqKeyN = new_instancemethod(_SnapTime.TStrInt64SH_IsKeyIdEqKeyN, None, TStrInt64SH)
TStrInt64SH.AddKey = new_instancemethod(_SnapTime.TStrInt64SH_AddKey, None, TStrInt64SH)
TStrInt64SH.AddDat = new_instancemethod(_SnapTime.TStrInt64SH_AddDat, None, TStrInt64SH)
TStrInt64SH.AddDatId = new_instancemethod(_SnapTime.TStrInt64SH_AddDatId, None, TStrInt64SH)
TStrInt64SH.__call__ = new_instancemethod(_SnapTime.TStrInt64SH___call__, None, TStrInt64SH)
TStrInt64SH.GetMemUsed = new_instancemethod(_SnapTime.TStrInt64SH_GetMemUsed, None, TStrInt64SH)
TStrInt64SH.GetDat = new_instancemethod(_SnapTime.TStrInt64SH_GetDat, None, TStrInt64SH)
TStrInt64SH.GetDatId = new_instancemethod(_SnapTime.TStrInt64SH_GetDatId, None, TStrInt64SH)
TStrInt64SH.GetKeyDat = new_instancemethod(_SnapTime.TStrInt64SH_GetKeyDat, None, TStrInt64SH)
TStrInt64SH.GetKeyId = new_instancemethod(_SnapTime.TStrInt64SH_GetKeyId, None, TStrInt64SH)
TStrInt64SH.GetKey = new_instancemethod(_SnapTime.TStrInt64SH_GetKey, None, TStrInt64SH)
TStrInt64SH.GetKeyOfs = new_instancemethod(_SnapTime.TStrInt64SH_GetKeyOfs, None, TStrInt64SH)
TStrInt64SH.KeyFromOfs = new_instancemethod(_SnapTime.TStrInt64SH_KeyFromOfs, None, TStrInt64SH)
TStrInt64SH.IsKey = new_instancemethod(_SnapTime.TStrInt64SH_IsKey, None, TStrInt64SH)
TStrInt64SH.IsKeyGetDat = new_instancemethod(_SnapTime.TStrInt64SH_IsKeyGetDat, None, TStrInt64SH)
TStrInt64SH.IsKeyId = new_instancemethod(_SnapTime.TStrInt64SH_IsKeyId, None, TStrInt64SH)
TStrInt64SH.FFirstKeyId = new_instancemethod(_SnapTime.TStrInt64SH_FFirstKeyId, None, TStrInt64SH)
TStrInt64SH.FNextKeyId = new_instancemethod(_SnapTime.TStrInt64SH_FNextKeyId, None, TStrInt64SH)
TStrInt64SH.GetKeyV = new_instancemethod(_SnapTime.TStrInt64SH_GetKeyV, None, TStrInt64SH)
TStrInt64SH.GetStrIdV = new_instancemethod(_SnapTime.TStrInt64SH_GetStrIdV, None, TStrInt64SH)
TStrInt64SH.GetDatV = new_instancemethod(_SnapTime.TStrInt64SH_GetDatV, None, TStrInt64SH)
TStrInt64SH.GetKeyDatPrV = new_instancemethod(_SnapTime.TStrInt64SH_GetKeyDatPrV, None, TStrInt64SH)
TStrInt64SH.GetDatKeyPrV = new_instancemethod(_SnapTime.TStrInt64SH_GetDatKeyPrV, None, TStrInt64SH)
TStrInt64SH.Pack = new_instancemethod(_SnapTime.TStrInt64SH_Pack, None, TStrInt64SH)
TStrInt64SH_swigregister = _SnapTime.TStrInt64SH_swigregister
TStrInt64SH_swigregister(TStrInt64SH)

class TIntHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TInt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(THashKeyDatI<(TInt,TInt)> self) -> TIntHI
        __init__(THashKeyDatI<(TInt,TInt)> self, TIntHI _HashKeyDatI) -> TIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        __init__(THashKeyDatI<(TInt,TInt)> self, THashKeyDatI< TInt,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TInt >::THKeyDat const * _EndI) -> TIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TInt >::THKeyDat const *

        """
        _SnapTime.TIntHI_swiginit(self, _SnapTime.new_TIntHI(*args))

    def __eq__(self, HashKeyDatI):
        """
        __eq__(TIntHI self, TIntHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        """
        return _SnapTime.TIntHI___eq__(self, HashKeyDatI)


    def __ne__(self, HashKeyDatI):
        """
        __ne__(TIntHI self, TIntHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        """
        return _SnapTime.TIntHI___ne__(self, HashKeyDatI)


    def __lt__(self, HashKeyDatI):
        """
        __lt__(TIntHI self, TIntHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        """
        return _SnapTime.TIntHI___lt__(self, HashKeyDatI)


    def __ref__(self):
        """
        __ref__(TIntHI self) -> THashKeyDatI< TInt,TInt >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > const *

        """
        return _SnapTime.TIntHI___ref__(self)


    def __call__(self):
        """
        __call__(TIntHI self) -> THashKeyDatI< TInt,TInt >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > const *

        """
        return _SnapTime.TIntHI___call__(self)


    def __deref__(self):
        """
        __deref__(TIntHI self) -> THashKeyDatI< TInt,TInt >::THKeyDat *

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > const *

        """
        return _SnapTime.TIntHI___deref__(self)


    def Next(self):
        """
        Next(TIntHI self) -> TIntHI

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > *

        """
        return _SnapTime.TIntHI_Next(self)


    def IsEmpty(self):
        """
        IsEmpty(TIntHI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > const *

        """
        return _SnapTime.TIntHI_IsEmpty(self)


    def IsEnd(self):
        """
        IsEnd(TIntHI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > const *

        """
        return _SnapTime.TIntHI_IsEnd(self)


    def GetKey(self):
        """
        GetKey(TIntHI self) -> TInt

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > const *

        """
        return _SnapTime.TIntHI_GetKey(self)


    def GetDat(self, *args):
        """
        GetDat(TIntHI self) -> TInt
        GetDat(TIntHI self) -> TInt

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > *

        """
        return _SnapTime.TIntHI_GetDat(self, *args)

    __swig_destroy__ = _SnapTime.delete_TIntHI
TIntHI.__eq__ = new_instancemethod(_SnapTime.TIntHI___eq__, None, TIntHI)
TIntHI.__ne__ = new_instancemethod(_SnapTime.TIntHI___ne__, None, TIntHI)
TIntHI.__lt__ = new_instancemethod(_SnapTime.TIntHI___lt__, None, TIntHI)
TIntHI.__ref__ = new_instancemethod(_SnapTime.TIntHI___ref__, None, TIntHI)
TIntHI.__call__ = new_instancemethod(_SnapTime.TIntHI___call__, None, TIntHI)
TIntHI.__deref__ = new_instancemethod(_SnapTime.TIntHI___deref__, None, TIntHI)
TIntHI.Next = new_instancemethod(_SnapTime.TIntHI_Next, None, TIntHI)
TIntHI.IsEmpty = new_instancemethod(_SnapTime.TIntHI_IsEmpty, None, TIntHI)
TIntHI.IsEnd = new_instancemethod(_SnapTime.TIntHI_IsEnd, None, TIntHI)
TIntHI.GetKey = new_instancemethod(_SnapTime.TIntHI_GetKey, None, TIntHI)
TIntHI.GetDat = new_instancemethod(_SnapTime.TIntHI_GetDat, None, TIntHI)
TIntHI_swigregister = _SnapTime.TIntHI_swigregister
TIntHI_swigregister(TIntHI)

class TInt64HI(object):
    """Proxy of C++ THashKeyDatI<(TInt64,TInt64,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(THashKeyDatI<(TInt64,TInt64,int64)> self) -> TInt64HI
        __init__(THashKeyDatI<(TInt64,TInt64,int64)> self, TInt64HI _HashKeyDatI) -> TInt64HI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt64,TInt64,int64 > const &

        __init__(THashKeyDatI<(TInt64,TInt64,int64)> self, THashKeyDatI< TInt64,TInt64,long long >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt64,TInt64,long long >::THKeyDat const * _EndI) -> TInt64HI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt64,TInt64,long long >::THKeyDat const *
        _EndI: THashKeyDatI< TInt64,TInt64,long long >::THKeyDat const *

        """
        _SnapTime.TInt64HI_swiginit(self, _SnapTime.new_TInt64HI(*args))

    def __eq__(self, HashKeyDatI):
        """
        __eq__(TInt64HI self, TInt64HI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt64,TInt64,int64 > const &

        """
        return _SnapTime.TInt64HI___eq__(self, HashKeyDatI)


    def __ne__(self, HashKeyDatI):
        """
        __ne__(TInt64HI self, TInt64HI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt64,TInt64,int64 > const &

        """
        return _SnapTime.TInt64HI___ne__(self, HashKeyDatI)


    def __lt__(self, HashKeyDatI):
        """
        __lt__(TInt64HI self, TInt64HI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt64,TInt64,int64 > const &

        """
        return _SnapTime.TInt64HI___lt__(self, HashKeyDatI)


    def __ref__(self):
        """
        __ref__(TInt64HI self) -> THashKeyDatI< TInt64,TInt64,long long >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64HI___ref__(self)


    def __call__(self):
        """
        __call__(TInt64HI self) -> THashKeyDatI< TInt64,TInt64,long long >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64HI___call__(self)


    def __deref__(self):
        """
        __deref__(TInt64HI self) -> THashKeyDatI< TInt64,TInt64,long long >::THKeyDat *

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64HI___deref__(self)


    def Next(self):
        """
        Next(TInt64HI self) -> TInt64HI

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TInt64,int64 > *

        """
        return _SnapTime.TInt64HI_Next(self)


    def IsEmpty(self):
        """
        IsEmpty(TInt64HI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64HI_IsEmpty(self)


    def IsEnd(self):
        """
        IsEnd(TInt64HI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64HI_IsEnd(self)


    def GetKey(self):
        """
        GetKey(TInt64HI self) -> TInt64

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TInt64,int64 > const *

        """
        return _SnapTime.TInt64HI_GetKey(self)


    def GetDat(self, *args):
        """
        GetDat(TInt64HI self) -> TInt64
        GetDat(TInt64HI self) -> TInt64

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TInt64,int64 > *

        """
        return _SnapTime.TInt64HI_GetDat(self, *args)

    __swig_destroy__ = _SnapTime.delete_TInt64HI
TInt64HI.__eq__ = new_instancemethod(_SnapTime.TInt64HI___eq__, None, TInt64HI)
TInt64HI.__ne__ = new_instancemethod(_SnapTime.TInt64HI___ne__, None, TInt64HI)
TInt64HI.__lt__ = new_instancemethod(_SnapTime.TInt64HI___lt__, None, TInt64HI)
TInt64HI.__ref__ = new_instancemethod(_SnapTime.TInt64HI___ref__, None, TInt64HI)
TInt64HI.__call__ = new_instancemethod(_SnapTime.TInt64HI___call__, None, TInt64HI)
TInt64HI.__deref__ = new_instancemethod(_SnapTime.TInt64HI___deref__, None, TInt64HI)
TInt64HI.Next = new_instancemethod(_SnapTime.TInt64HI_Next, None, TInt64HI)
TInt64HI.IsEmpty = new_instancemethod(_SnapTime.TInt64HI_IsEmpty, None, TInt64HI)
TInt64HI.IsEnd = new_instancemethod(_SnapTime.TInt64HI_IsEnd, None, TInt64HI)
TInt64HI.GetKey = new_instancemethod(_SnapTime.TInt64HI_GetKey, None, TInt64HI)
TInt64HI.GetDat = new_instancemethod(_SnapTime.TInt64HI_GetDat, None, TInt64HI)
TInt64HI_swigregister = _SnapTime.TInt64HI_swigregister
TInt64HI_swigregister(TInt64HI)

class TIntIntHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TInt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(THashKeyDatI<(TInt,TInt)> self) -> TIntIntHI
        __init__(THashKeyDatI<(TInt,TInt)> self, TIntHI _HashKeyDatI) -> TIntIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        __init__(THashKeyDatI<(TInt,TInt)> self, THashKeyDatI< TInt,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TInt >::THKeyDat const * _EndI) -> TIntIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TInt >::THKeyDat const *

        """
        _SnapTime.TIntIntHI_swiginit(self, _SnapTime.new_TIntIntHI(*args))

    def __eq__(self, HashKeyDatI):
        """
        __eq__(TIntIntHI self, TIntHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        """
        return _SnapTime.TIntIntHI___eq__(self, HashKeyDatI)


    def __ne__(self, HashKeyDatI):
        """
        __ne__(TIntIntHI self, TIntHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        """
        return _SnapTime.TIntIntHI___ne__(self, HashKeyDatI)


    def __lt__(self, HashKeyDatI):
        """
        __lt__(TIntIntHI self, TIntHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        """
        return _SnapTime.TIntIntHI___lt__(self, HashKeyDatI)


    def __ref__(self):
        """
        __ref__(TIntIntHI self) -> THashKeyDatI< TInt,TInt >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > const *

        """
        return _SnapTime.TIntIntHI___ref__(self)


    def __call__(self):
        """
        __call__(TIntIntHI self) -> THashKeyDatI< TInt,TInt >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > const *

        """
        return _SnapTime.TIntIntHI___call__(self)


    def __deref__(self):
        """
        __deref__(TIntIntHI self) -> THashKeyDatI< TInt,TInt >::THKeyDat *

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > const *

        """
        return _SnapTime.TIntIntHI___deref__(self)


    def Next(self):
        """
        Next(TIntIntHI self) -> TIntHI

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > *

        """
        return _SnapTime.TIntIntHI_Next(self)


    def IsEmpty(self):
        """
        IsEmpty(TIntIntHI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > const *

        """
        return _SnapTime.TIntIntHI_IsEmpty(self)


    def IsEnd(self):
        """
        IsEnd(TIntIntHI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > const *

        """
        return _SnapTime.TIntIntHI_IsEnd(self)


    def GetKey(self):
        """
        GetKey(TIntIntHI self) -> TInt

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > const *

        """
        return _SnapTime.TIntIntHI_GetKey(self)


    def GetDat(self, *args):
        """
        GetDat(TIntIntHI self) -> TInt
        GetDat(TIntIntHI self) -> TInt

        Parameters
        ----------
        self: THashKeyDatI< TInt,TInt > *

        """
        return _SnapTime.TIntIntHI_GetDat(self, *args)

    __swig_destroy__ = _SnapTime.delete_TIntIntHI
TIntIntHI.__eq__ = new_instancemethod(_SnapTime.TIntIntHI___eq__, None, TIntIntHI)
TIntIntHI.__ne__ = new_instancemethod(_SnapTime.TIntIntHI___ne__, None, TIntIntHI)
TIntIntHI.__lt__ = new_instancemethod(_SnapTime.TIntIntHI___lt__, None, TIntIntHI)
TIntIntHI.__ref__ = new_instancemethod(_SnapTime.TIntIntHI___ref__, None, TIntIntHI)
TIntIntHI.__call__ = new_instancemethod(_SnapTime.TIntIntHI___call__, None, TIntIntHI)
TIntIntHI.__deref__ = new_instancemethod(_SnapTime.TIntIntHI___deref__, None, TIntIntHI)
TIntIntHI.Next = new_instancemethod(_SnapTime.TIntIntHI_Next, None, TIntIntHI)
TIntIntHI.IsEmpty = new_instancemethod(_SnapTime.TIntIntHI_IsEmpty, None, TIntIntHI)
TIntIntHI.IsEnd = new_instancemethod(_SnapTime.TIntIntHI_IsEnd, None, TIntIntHI)
TIntIntHI.GetKey = new_instancemethod(_SnapTime.TIntIntHI_GetKey, None, TIntIntHI)
TIntIntHI.GetDat = new_instancemethod(_SnapTime.TIntIntHI_GetDat, None, TIntIntHI)
TIntIntHI_swigregister = _SnapTime.TIntIntHI_swigregister
TIntIntHI_swigregister(TIntIntHI)

class TIntFltHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TFlt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(THashKeyDatI<(TInt,TFlt)> self) -> TIntFltHI
        __init__(THashKeyDatI<(TInt,TFlt)> self, TIntFltHI _HashKeyDatI) -> TIntFltHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TFlt > const &

        __init__(THashKeyDatI<(TInt,TFlt)> self, THashKeyDatI< TInt,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TFlt >::THKeyDat const * _EndI) -> TIntFltHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TFlt >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TFlt >::THKeyDat const *

        """
        _SnapTime.TIntFltHI_swiginit(self, _SnapTime.new_TIntFltHI(*args))

    def __eq__(self, HashKeyDatI):
        """
        __eq__(TIntFltHI self, TIntFltHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltHI___eq__(self, HashKeyDatI)


    def __ne__(self, HashKeyDatI):
        """
        __ne__(TIntFltHI self, TIntFltHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltHI___ne__(self, HashKeyDatI)


    def __lt__(self, HashKeyDatI):
        """
        __lt__(TIntFltHI self, TIntFltHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt,TFlt > const &

        """
        return _SnapTime.TIntFltHI___lt__(self, HashKeyDatI)


    def __ref__(self):
        """
        __ref__(TIntFltHI self) -> THashKeyDatI< TInt,TFlt >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltHI___ref__(self)


    def __call__(self):
        """
        __call__(TIntFltHI self) -> THashKeyDatI< TInt,TFlt >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltHI___call__(self)


    def __deref__(self):
        """
        __deref__(TIntFltHI self) -> THashKeyDatI< TInt,TFlt >::THKeyDat *

        Parameters
        ----------
        self: THashKeyDatI< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltHI___deref__(self)


    def Next(self):
        """
        Next(TIntFltHI self) -> TIntFltHI

        Parameters
        ----------
        self: THashKeyDatI< TInt,TFlt > *

        """
        return _SnapTime.TIntFltHI_Next(self)


    def IsEmpty(self):
        """
        IsEmpty(TIntFltHI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltHI_IsEmpty(self)


    def IsEnd(self):
        """
        IsEnd(TIntFltHI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltHI_IsEnd(self)


    def GetKey(self):
        """
        GetKey(TIntFltHI self) -> TInt

        Parameters
        ----------
        self: THashKeyDatI< TInt,TFlt > const *

        """
        return _SnapTime.TIntFltHI_GetKey(self)


    def GetDat(self, *args):
        """
        GetDat(TIntFltHI self) -> TFlt
        GetDat(TIntFltHI self) -> TFlt

        Parameters
        ----------
        self: THashKeyDatI< TInt,TFlt > *

        """
        return _SnapTime.TIntFltHI_GetDat(self, *args)

    __swig_destroy__ = _SnapTime.delete_TIntFltHI
TIntFltHI.__eq__ = new_instancemethod(_SnapTime.TIntFltHI___eq__, None, TIntFltHI)
TIntFltHI.__ne__ = new_instancemethod(_SnapTime.TIntFltHI___ne__, None, TIntFltHI)
TIntFltHI.__lt__ = new_instancemethod(_SnapTime.TIntFltHI___lt__, None, TIntFltHI)
TIntFltHI.__ref__ = new_instancemethod(_SnapTime.TIntFltHI___ref__, None, TIntFltHI)
TIntFltHI.__call__ = new_instancemethod(_SnapTime.TIntFltHI___call__, None, TIntFltHI)
TIntFltHI.__deref__ = new_instancemethod(_SnapTime.TIntFltHI___deref__, None, TIntFltHI)
TIntFltHI.Next = new_instancemethod(_SnapTime.TIntFltHI_Next, None, TIntFltHI)
TIntFltHI.IsEmpty = new_instancemethod(_SnapTime.TIntFltHI_IsEmpty, None, TIntFltHI)
TIntFltHI.IsEnd = new_instancemethod(_SnapTime.TIntFltHI_IsEnd, None, TIntFltHI)
TIntFltHI.GetKey = new_instancemethod(_SnapTime.TIntFltHI_GetKey, None, TIntFltHI)
TIntFltHI.GetDat = new_instancemethod(_SnapTime.TIntFltHI_GetDat, None, TIntFltHI)
TIntFltHI_swigregister = _SnapTime.TIntFltHI_swigregister
TIntFltHI_swigregister(TIntFltHI)

class TIntFlt64HI(object):
    """Proxy of C++ THashKeyDatI<(TInt64,TFlt,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(THashKeyDatI<(TInt64,TFlt,int64)> self) -> TIntFlt64HI
        __init__(THashKeyDatI<(TInt64,TFlt,int64)> self, TIntFlt64HI _HashKeyDatI) -> TIntFlt64HI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt64,TFlt,int64 > const &

        __init__(THashKeyDatI<(TInt64,TFlt,int64)> self, THashKeyDatI< TInt64,TFlt,long long >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt64,TFlt,long long >::THKeyDat const * _EndI) -> TIntFlt64HI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt64,TFlt,long long >::THKeyDat const *
        _EndI: THashKeyDatI< TInt64,TFlt,long long >::THKeyDat const *

        """
        _SnapTime.TIntFlt64HI_swiginit(self, _SnapTime.new_TIntFlt64HI(*args))

    def __eq__(self, HashKeyDatI):
        """
        __eq__(TIntFlt64HI self, TIntFlt64HI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt64,TFlt,int64 > const &

        """
        return _SnapTime.TIntFlt64HI___eq__(self, HashKeyDatI)


    def __ne__(self, HashKeyDatI):
        """
        __ne__(TIntFlt64HI self, TIntFlt64HI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt64,TFlt,int64 > const &

        """
        return _SnapTime.TIntFlt64HI___ne__(self, HashKeyDatI)


    def __lt__(self, HashKeyDatI):
        """
        __lt__(TIntFlt64HI self, TIntFlt64HI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt64,TFlt,int64 > const &

        """
        return _SnapTime.TIntFlt64HI___lt__(self, HashKeyDatI)


    def __ref__(self):
        """
        __ref__(TIntFlt64HI self) -> THashKeyDatI< TInt64,TFlt,long long >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64HI___ref__(self)


    def __call__(self):
        """
        __call__(TIntFlt64HI self) -> THashKeyDatI< TInt64,TFlt,long long >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64HI___call__(self)


    def __deref__(self):
        """
        __deref__(TIntFlt64HI self) -> THashKeyDatI< TInt64,TFlt,long long >::THKeyDat *

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64HI___deref__(self)


    def Next(self):
        """
        Next(TIntFlt64HI self) -> TIntFlt64HI

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TFlt,int64 > *

        """
        return _SnapTime.TIntFlt64HI_Next(self)


    def IsEmpty(self):
        """
        IsEmpty(TIntFlt64HI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64HI_IsEmpty(self)


    def IsEnd(self):
        """
        IsEnd(TIntFlt64HI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64HI_IsEnd(self)


    def GetKey(self):
        """
        GetKey(TIntFlt64HI self) -> TInt64

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TFlt,int64 > const *

        """
        return _SnapTime.TIntFlt64HI_GetKey(self)


    def GetDat(self, *args):
        """
        GetDat(TIntFlt64HI self) -> TFlt
        GetDat(TIntFlt64HI self) -> TFlt

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TFlt,int64 > *

        """
        return _SnapTime.TIntFlt64HI_GetDat(self, *args)

    __swig_destroy__ = _SnapTime.delete_TIntFlt64HI
TIntFlt64HI.__eq__ = new_instancemethod(_SnapTime.TIntFlt64HI___eq__, None, TIntFlt64HI)
TIntFlt64HI.__ne__ = new_instancemethod(_SnapTime.TIntFlt64HI___ne__, None, TIntFlt64HI)
TIntFlt64HI.__lt__ = new_instancemethod(_SnapTime.TIntFlt64HI___lt__, None, TIntFlt64HI)
TIntFlt64HI.__ref__ = new_instancemethod(_SnapTime.TIntFlt64HI___ref__, None, TIntFlt64HI)
TIntFlt64HI.__call__ = new_instancemethod(_SnapTime.TIntFlt64HI___call__, None, TIntFlt64HI)
TIntFlt64HI.__deref__ = new_instancemethod(_SnapTime.TIntFlt64HI___deref__, None, TIntFlt64HI)
TIntFlt64HI.Next = new_instancemethod(_SnapTime.TIntFlt64HI_Next, None, TIntFlt64HI)
TIntFlt64HI.IsEmpty = new_instancemethod(_SnapTime.TIntFlt64HI_IsEmpty, None, TIntFlt64HI)
TIntFlt64HI.IsEnd = new_instancemethod(_SnapTime.TIntFlt64HI_IsEnd, None, TIntFlt64HI)
TIntFlt64HI.GetKey = new_instancemethod(_SnapTime.TIntFlt64HI_GetKey, None, TIntFlt64HI)
TIntFlt64HI.GetDat = new_instancemethod(_SnapTime.TIntFlt64HI_GetDat, None, TIntFlt64HI)
TIntFlt64HI_swigregister = _SnapTime.TIntFlt64HI_swigregister
TIntFlt64HI_swigregister(TIntFlt64HI)

class TIntStrHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TStr)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(THashKeyDatI<(TInt,TStr)> self) -> TIntStrHI
        __init__(THashKeyDatI<(TInt,TStr)> self, TIntStrHI _HashKeyDatI) -> TIntStrHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TStr > const &

        __init__(THashKeyDatI<(TInt,TStr)> self, THashKeyDatI< TInt,TStr >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TStr >::THKeyDat const * _EndI) -> TIntStrHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TStr >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TStr >::THKeyDat const *

        """
        _SnapTime.TIntStrHI_swiginit(self, _SnapTime.new_TIntStrHI(*args))

    def __eq__(self, HashKeyDatI):
        """
        __eq__(TIntStrHI self, TIntStrHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt,TStr > const &

        """
        return _SnapTime.TIntStrHI___eq__(self, HashKeyDatI)


    def __ne__(self, HashKeyDatI):
        """
        __ne__(TIntStrHI self, TIntStrHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt,TStr > const &

        """
        return _SnapTime.TIntStrHI___ne__(self, HashKeyDatI)


    def __lt__(self, HashKeyDatI):
        """
        __lt__(TIntStrHI self, TIntStrHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt,TStr > const &

        """
        return _SnapTime.TIntStrHI___lt__(self, HashKeyDatI)


    def __ref__(self):
        """
        __ref__(TIntStrHI self) -> THashKeyDatI< TInt,TStr >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt,TStr > const *

        """
        return _SnapTime.TIntStrHI___ref__(self)


    def __call__(self):
        """
        __call__(TIntStrHI self) -> THashKeyDatI< TInt,TStr >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt,TStr > const *

        """
        return _SnapTime.TIntStrHI___call__(self)


    def __deref__(self):
        """
        __deref__(TIntStrHI self) -> THashKeyDatI< TInt,TStr >::THKeyDat *

        Parameters
        ----------
        self: THashKeyDatI< TInt,TStr > const *

        """
        return _SnapTime.TIntStrHI___deref__(self)


    def Next(self):
        """
        Next(TIntStrHI self) -> TIntStrHI

        Parameters
        ----------
        self: THashKeyDatI< TInt,TStr > *

        """
        return _SnapTime.TIntStrHI_Next(self)


    def IsEmpty(self):
        """
        IsEmpty(TIntStrHI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt,TStr > const *

        """
        return _SnapTime.TIntStrHI_IsEmpty(self)


    def IsEnd(self):
        """
        IsEnd(TIntStrHI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt,TStr > const *

        """
        return _SnapTime.TIntStrHI_IsEnd(self)


    def GetKey(self):
        """
        GetKey(TIntStrHI self) -> TInt

        Parameters
        ----------
        self: THashKeyDatI< TInt,TStr > const *

        """
        return _SnapTime.TIntStrHI_GetKey(self)


    def GetDat(self, *args):
        """
        GetDat(TIntStrHI self) -> TStr
        GetDat(TIntStrHI self) -> TStr

        Parameters
        ----------
        self: THashKeyDatI< TInt,TStr > *

        """
        return _SnapTime.TIntStrHI_GetDat(self, *args)

    __swig_destroy__ = _SnapTime.delete_TIntStrHI
TIntStrHI.__eq__ = new_instancemethod(_SnapTime.TIntStrHI___eq__, None, TIntStrHI)
TIntStrHI.__ne__ = new_instancemethod(_SnapTime.TIntStrHI___ne__, None, TIntStrHI)
TIntStrHI.__lt__ = new_instancemethod(_SnapTime.TIntStrHI___lt__, None, TIntStrHI)
TIntStrHI.__ref__ = new_instancemethod(_SnapTime.TIntStrHI___ref__, None, TIntStrHI)
TIntStrHI.__call__ = new_instancemethod(_SnapTime.TIntStrHI___call__, None, TIntStrHI)
TIntStrHI.__deref__ = new_instancemethod(_SnapTime.TIntStrHI___deref__, None, TIntStrHI)
TIntStrHI.Next = new_instancemethod(_SnapTime.TIntStrHI_Next, None, TIntStrHI)
TIntStrHI.IsEmpty = new_instancemethod(_SnapTime.TIntStrHI_IsEmpty, None, TIntStrHI)
TIntStrHI.IsEnd = new_instancemethod(_SnapTime.TIntStrHI_IsEnd, None, TIntStrHI)
TIntStrHI.GetKey = new_instancemethod(_SnapTime.TIntStrHI_GetKey, None, TIntStrHI)
TIntStrHI.GetDat = new_instancemethod(_SnapTime.TIntStrHI_GetDat, None, TIntStrHI)
TIntStrHI_swigregister = _SnapTime.TIntStrHI_swigregister
TIntStrHI_swigregister(TIntStrHI)

class TIntStr64HI(object):
    """Proxy of C++ THashKeyDatI<(TInt64,TStr,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(THashKeyDatI<(TInt64,TStr,int64)> self) -> TIntStr64HI
        __init__(THashKeyDatI<(TInt64,TStr,int64)> self, TIntStr64HI _HashKeyDatI) -> TIntStr64HI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt64,TStr,int64 > const &

        __init__(THashKeyDatI<(TInt64,TStr,int64)> self, THashKeyDatI< TInt64,TStr,long long >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt64,TStr,long long >::THKeyDat const * _EndI) -> TIntStr64HI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt64,TStr,long long >::THKeyDat const *
        _EndI: THashKeyDatI< TInt64,TStr,long long >::THKeyDat const *

        """
        _SnapTime.TIntStr64HI_swiginit(self, _SnapTime.new_TIntStr64HI(*args))

    def __eq__(self, HashKeyDatI):
        """
        __eq__(TIntStr64HI self, TIntStr64HI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt64,TStr,int64 > const &

        """
        return _SnapTime.TIntStr64HI___eq__(self, HashKeyDatI)


    def __ne__(self, HashKeyDatI):
        """
        __ne__(TIntStr64HI self, TIntStr64HI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt64,TStr,int64 > const &

        """
        return _SnapTime.TIntStr64HI___ne__(self, HashKeyDatI)


    def __lt__(self, HashKeyDatI):
        """
        __lt__(TIntStr64HI self, TIntStr64HI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt64,TStr,int64 > const &

        """
        return _SnapTime.TIntStr64HI___lt__(self, HashKeyDatI)


    def __ref__(self):
        """
        __ref__(TIntStr64HI self) -> THashKeyDatI< TInt64,TStr,long long >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64HI___ref__(self)


    def __call__(self):
        """
        __call__(TIntStr64HI self) -> THashKeyDatI< TInt64,TStr,long long >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64HI___call__(self)


    def __deref__(self):
        """
        __deref__(TIntStr64HI self) -> THashKeyDatI< TInt64,TStr,long long >::THKeyDat *

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64HI___deref__(self)


    def Next(self):
        """
        Next(TIntStr64HI self) -> TIntStr64HI

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TStr,int64 > *

        """
        return _SnapTime.TIntStr64HI_Next(self)


    def IsEmpty(self):
        """
        IsEmpty(TIntStr64HI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64HI_IsEmpty(self)


    def IsEnd(self):
        """
        IsEnd(TIntStr64HI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64HI_IsEnd(self)


    def GetKey(self):
        """
        GetKey(TIntStr64HI self) -> TInt64

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TStr,int64 > const *

        """
        return _SnapTime.TIntStr64HI_GetKey(self)


    def GetDat(self, *args):
        """
        GetDat(TIntStr64HI self) -> TStr
        GetDat(TIntStr64HI self) -> TStr

        Parameters
        ----------
        self: THashKeyDatI< TInt64,TStr,int64 > *

        """
        return _SnapTime.TIntStr64HI_GetDat(self, *args)

    __swig_destroy__ = _SnapTime.delete_TIntStr64HI
TIntStr64HI.__eq__ = new_instancemethod(_SnapTime.TIntStr64HI___eq__, None, TIntStr64HI)
TIntStr64HI.__ne__ = new_instancemethod(_SnapTime.TIntStr64HI___ne__, None, TIntStr64HI)
TIntStr64HI.__lt__ = new_instancemethod(_SnapTime.TIntStr64HI___lt__, None, TIntStr64HI)
TIntStr64HI.__ref__ = new_instancemethod(_SnapTime.TIntStr64HI___ref__, None, TIntStr64HI)
TIntStr64HI.__call__ = new_instancemethod(_SnapTime.TIntStr64HI___call__, None, TIntStr64HI)
TIntStr64HI.__deref__ = new_instancemethod(_SnapTime.TIntStr64HI___deref__, None, TIntStr64HI)
TIntStr64HI.Next = new_instancemethod(_SnapTime.TIntStr64HI_Next, None, TIntStr64HI)
TIntStr64HI.IsEmpty = new_instancemethod(_SnapTime.TIntStr64HI_IsEmpty, None, TIntStr64HI)
TIntStr64HI.IsEnd = new_instancemethod(_SnapTime.TIntStr64HI_IsEnd, None, TIntStr64HI)
TIntStr64HI.GetKey = new_instancemethod(_SnapTime.TIntStr64HI_GetKey, None, TIntStr64HI)
TIntStr64HI.GetDat = new_instancemethod(_SnapTime.TIntStr64HI_GetDat, None, TIntStr64HI)
TIntStr64HI_swigregister = _SnapTime.TIntStr64HI_swigregister
TIntStr64HI_swigregister(TIntStr64HI)

class TIntPrFltHI(object):
    """Proxy of C++ THashKeyDatI<(TIntPr,TFlt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(THashKeyDatI<(TIntPr,TFlt)> self) -> TIntPrFltHI
        __init__(THashKeyDatI<(TIntPr,TFlt)> self, TIntPrFltHI _HashKeyDatI) -> TIntPrFltHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TIntPr,TFlt > const &

        __init__(THashKeyDatI<(TIntPr,TFlt)> self, THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const * _EndI) -> TIntPrFltHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const *

        """
        _SnapTime.TIntPrFltHI_swiginit(self, _SnapTime.new_TIntPrFltHI(*args))

    def __eq__(self, HashKeyDatI):
        """
        __eq__(TIntPrFltHI self, TIntPrFltHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TIntPr,TFlt > const &

        """
        return _SnapTime.TIntPrFltHI___eq__(self, HashKeyDatI)


    def __ne__(self, HashKeyDatI):
        """
        __ne__(TIntPrFltHI self, TIntPrFltHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TIntPr,TFlt > const &

        """
        return _SnapTime.TIntPrFltHI___ne__(self, HashKeyDatI)


    def __lt__(self, HashKeyDatI):
        """
        __lt__(TIntPrFltHI self, TIntPrFltHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TIntPr,TFlt > const &

        """
        return _SnapTime.TIntPrFltHI___lt__(self, HashKeyDatI)


    def __ref__(self):
        """
        __ref__(TIntPrFltHI self) -> THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltHI___ref__(self)


    def __call__(self):
        """
        __call__(TIntPrFltHI self) -> THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltHI___call__(self)


    def __deref__(self):
        """
        __deref__(TIntPrFltHI self) -> THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat *

        Parameters
        ----------
        self: THashKeyDatI< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltHI___deref__(self)


    def Next(self):
        """
        Next(TIntPrFltHI self) -> TIntPrFltHI

        Parameters
        ----------
        self: THashKeyDatI< TIntPr,TFlt > *

        """
        return _SnapTime.TIntPrFltHI_Next(self)


    def IsEmpty(self):
        """
        IsEmpty(TIntPrFltHI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltHI_IsEmpty(self)


    def IsEnd(self):
        """
        IsEnd(TIntPrFltHI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltHI_IsEnd(self)


    def GetKey(self):
        """
        GetKey(TIntPrFltHI self) -> TIntPr

        Parameters
        ----------
        self: THashKeyDatI< TIntPr,TFlt > const *

        """
        return _SnapTime.TIntPrFltHI_GetKey(self)


    def GetDat(self, *args):
        """
        GetDat(TIntPrFltHI self) -> TFlt
        GetDat(TIntPrFltHI self) -> TFlt

        Parameters
        ----------
        self: THashKeyDatI< TIntPr,TFlt > *

        """
        return _SnapTime.TIntPrFltHI_GetDat(self, *args)

    __swig_destroy__ = _SnapTime.delete_TIntPrFltHI
TIntPrFltHI.__eq__ = new_instancemethod(_SnapTime.TIntPrFltHI___eq__, None, TIntPrFltHI)
TIntPrFltHI.__ne__ = new_instancemethod(_SnapTime.TIntPrFltHI___ne__, None, TIntPrFltHI)
TIntPrFltHI.__lt__ = new_instancemethod(_SnapTime.TIntPrFltHI___lt__, None, TIntPrFltHI)
TIntPrFltHI.__ref__ = new_instancemethod(_SnapTime.TIntPrFltHI___ref__, None, TIntPrFltHI)
TIntPrFltHI.__call__ = new_instancemethod(_SnapTime.TIntPrFltHI___call__, None, TIntPrFltHI)
TIntPrFltHI.__deref__ = new_instancemethod(_SnapTime.TIntPrFltHI___deref__, None, TIntPrFltHI)
TIntPrFltHI.Next = new_instancemethod(_SnapTime.TIntPrFltHI_Next, None, TIntPrFltHI)
TIntPrFltHI.IsEmpty = new_instancemethod(_SnapTime.TIntPrFltHI_IsEmpty, None, TIntPrFltHI)
TIntPrFltHI.IsEnd = new_instancemethod(_SnapTime.TIntPrFltHI_IsEnd, None, TIntPrFltHI)
TIntPrFltHI.GetKey = new_instancemethod(_SnapTime.TIntPrFltHI_GetKey, None, TIntPrFltHI)
TIntPrFltHI.GetDat = new_instancemethod(_SnapTime.TIntPrFltHI_GetDat, None, TIntPrFltHI)
TIntPrFltHI_swigregister = _SnapTime.TIntPrFltHI_swigregister
TIntPrFltHI_swigregister(TIntPrFltHI)

class TIntPrFlt64HI(object):
    """Proxy of C++ THashKeyDatI<(TInt64Pr,TFlt,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(THashKeyDatI<(TInt64Pr,TFlt,int64)> self) -> TIntPrFlt64HI
        __init__(THashKeyDatI<(TInt64Pr,TFlt,int64)> self, TIntPrFlt64HI _HashKeyDatI) -> TIntPrFlt64HI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt64Pr,TFlt,int64 > const &

        __init__(THashKeyDatI<(TInt64Pr,TFlt,int64)> self, THashKeyDatI< TPair< TInt64,TInt64 >,TFlt,long long >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt64,TInt64 >,TFlt,long long >::THKeyDat const * _EndI) -> TIntPrFlt64HI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TInt64,TInt64 >,TFlt,long long >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TInt64,TInt64 >,TFlt,long long >::THKeyDat const *

        """
        _SnapTime.TIntPrFlt64HI_swiginit(self, _SnapTime.new_TIntPrFlt64HI(*args))

    def __eq__(self, HashKeyDatI):
        """
        __eq__(TIntPrFlt64HI self, TIntPrFlt64HI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt64Pr,TFlt,int64 > const &

        """
        return _SnapTime.TIntPrFlt64HI___eq__(self, HashKeyDatI)


    def __ne__(self, HashKeyDatI):
        """
        __ne__(TIntPrFlt64HI self, TIntPrFlt64HI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt64Pr,TFlt,int64 > const &

        """
        return _SnapTime.TIntPrFlt64HI___ne__(self, HashKeyDatI)


    def __lt__(self, HashKeyDatI):
        """
        __lt__(TIntPrFlt64HI self, TIntPrFlt64HI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TInt64Pr,TFlt,int64 > const &

        """
        return _SnapTime.TIntPrFlt64HI___lt__(self, HashKeyDatI)


    def __ref__(self):
        """
        __ref__(TIntPrFlt64HI self) -> THashKeyDatI< TPair< TInt64,TInt64 >,TFlt,long long >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64HI___ref__(self)


    def __call__(self):
        """
        __call__(TIntPrFlt64HI self) -> THashKeyDatI< TPair< TInt64,TInt64 >,TFlt,long long >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64HI___call__(self)


    def __deref__(self):
        """
        __deref__(TIntPrFlt64HI self) -> THashKeyDatI< TPair< TInt64,TInt64 >,TFlt,long long >::THKeyDat *

        Parameters
        ----------
        self: THashKeyDatI< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64HI___deref__(self)


    def Next(self):
        """
        Next(TIntPrFlt64HI self) -> TIntPrFlt64HI

        Parameters
        ----------
        self: THashKeyDatI< TInt64Pr,TFlt,int64 > *

        """
        return _SnapTime.TIntPrFlt64HI_Next(self)


    def IsEmpty(self):
        """
        IsEmpty(TIntPrFlt64HI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64HI_IsEmpty(self)


    def IsEnd(self):
        """
        IsEnd(TIntPrFlt64HI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64HI_IsEnd(self)


    def GetKey(self):
        """
        GetKey(TIntPrFlt64HI self) -> TInt64Pr

        Parameters
        ----------
        self: THashKeyDatI< TInt64Pr,TFlt,int64 > const *

        """
        return _SnapTime.TIntPrFlt64HI_GetKey(self)


    def GetDat(self, *args):
        """
        GetDat(TIntPrFlt64HI self) -> TFlt
        GetDat(TIntPrFlt64HI self) -> TFlt

        Parameters
        ----------
        self: THashKeyDatI< TInt64Pr,TFlt,int64 > *

        """
        return _SnapTime.TIntPrFlt64HI_GetDat(self, *args)

    __swig_destroy__ = _SnapTime.delete_TIntPrFlt64HI
TIntPrFlt64HI.__eq__ = new_instancemethod(_SnapTime.TIntPrFlt64HI___eq__, None, TIntPrFlt64HI)
TIntPrFlt64HI.__ne__ = new_instancemethod(_SnapTime.TIntPrFlt64HI___ne__, None, TIntPrFlt64HI)
TIntPrFlt64HI.__lt__ = new_instancemethod(_SnapTime.TIntPrFlt64HI___lt__, None, TIntPrFlt64HI)
TIntPrFlt64HI.__ref__ = new_instancemethod(_SnapTime.TIntPrFlt64HI___ref__, None, TIntPrFlt64HI)
TIntPrFlt64HI.__call__ = new_instancemethod(_SnapTime.TIntPrFlt64HI___call__, None, TIntPrFlt64HI)
TIntPrFlt64HI.__deref__ = new_instancemethod(_SnapTime.TIntPrFlt64HI___deref__, None, TIntPrFlt64HI)
TIntPrFlt64HI.Next = new_instancemethod(_SnapTime.TIntPrFlt64HI_Next, None, TIntPrFlt64HI)
TIntPrFlt64HI.IsEmpty = new_instancemethod(_SnapTime.TIntPrFlt64HI_IsEmpty, None, TIntPrFlt64HI)
TIntPrFlt64HI.IsEnd = new_instancemethod(_SnapTime.TIntPrFlt64HI_IsEnd, None, TIntPrFlt64HI)
TIntPrFlt64HI.GetKey = new_instancemethod(_SnapTime.TIntPrFlt64HI_GetKey, None, TIntPrFlt64HI)
TIntPrFlt64HI.GetDat = new_instancemethod(_SnapTime.TIntPrFlt64HI_GetDat, None, TIntPrFlt64HI)
TIntPrFlt64HI_swigregister = _SnapTime.TIntPrFlt64HI_swigregister
TIntPrFlt64HI_swigregister(TIntPrFlt64HI)

class TStrIntHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TInt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(THashKeyDatI<(TStr,TInt)> self) -> TStrIntHI
        __init__(THashKeyDatI<(TStr,TInt)> self, TStrIntHI _HashKeyDatI) -> TStrIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TInt > const &

        __init__(THashKeyDatI<(TStr,TInt)> self, THashKeyDatI< TStr,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TInt >::THKeyDat const * _EndI) -> TStrIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TInt >::THKeyDat const *

        """
        _SnapTime.TStrIntHI_swiginit(self, _SnapTime.new_TStrIntHI(*args))

    def __eq__(self, HashKeyDatI):
        """
        __eq__(TStrIntHI self, TStrIntHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TStr,TInt > const &

        """
        return _SnapTime.TStrIntHI___eq__(self, HashKeyDatI)


    def __ne__(self, HashKeyDatI):
        """
        __ne__(TStrIntHI self, TStrIntHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TStr,TInt > const &

        """
        return _SnapTime.TStrIntHI___ne__(self, HashKeyDatI)


    def __lt__(self, HashKeyDatI):
        """
        __lt__(TStrIntHI self, TStrIntHI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TStr,TInt > const &

        """
        return _SnapTime.TStrIntHI___lt__(self, HashKeyDatI)


    def __ref__(self):
        """
        __ref__(TStrIntHI self) -> THashKeyDatI< TStr,TInt >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt > const *

        """
        return _SnapTime.TStrIntHI___ref__(self)


    def __call__(self):
        """
        __call__(TStrIntHI self) -> THashKeyDatI< TStr,TInt >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt > const *

        """
        return _SnapTime.TStrIntHI___call__(self)


    def __deref__(self):
        """
        __deref__(TStrIntHI self) -> THashKeyDatI< TStr,TInt >::THKeyDat *

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt > const *

        """
        return _SnapTime.TStrIntHI___deref__(self)


    def Next(self):
        """
        Next(TStrIntHI self) -> TStrIntHI

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt > *

        """
        return _SnapTime.TStrIntHI_Next(self)


    def IsEmpty(self):
        """
        IsEmpty(TStrIntHI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt > const *

        """
        return _SnapTime.TStrIntHI_IsEmpty(self)


    def IsEnd(self):
        """
        IsEnd(TStrIntHI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt > const *

        """
        return _SnapTime.TStrIntHI_IsEnd(self)


    def GetKey(self):
        """
        GetKey(TStrIntHI self) -> TStr

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt > const *

        """
        return _SnapTime.TStrIntHI_GetKey(self)


    def GetDat(self, *args):
        """
        GetDat(TStrIntHI self) -> TInt
        GetDat(TStrIntHI self) -> TInt

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt > *

        """
        return _SnapTime.TStrIntHI_GetDat(self, *args)

    __swig_destroy__ = _SnapTime.delete_TStrIntHI
TStrIntHI.__eq__ = new_instancemethod(_SnapTime.TStrIntHI___eq__, None, TStrIntHI)
TStrIntHI.__ne__ = new_instancemethod(_SnapTime.TStrIntHI___ne__, None, TStrIntHI)
TStrIntHI.__lt__ = new_instancemethod(_SnapTime.TStrIntHI___lt__, None, TStrIntHI)
TStrIntHI.__ref__ = new_instancemethod(_SnapTime.TStrIntHI___ref__, None, TStrIntHI)
TStrIntHI.__call__ = new_instancemethod(_SnapTime.TStrIntHI___call__, None, TStrIntHI)
TStrIntHI.__deref__ = new_instancemethod(_SnapTime.TStrIntHI___deref__, None, TStrIntHI)
TStrIntHI.Next = new_instancemethod(_SnapTime.TStrIntHI_Next, None, TStrIntHI)
TStrIntHI.IsEmpty = new_instancemethod(_SnapTime.TStrIntHI_IsEmpty, None, TStrIntHI)
TStrIntHI.IsEnd = new_instancemethod(_SnapTime.TStrIntHI_IsEnd, None, TStrIntHI)
TStrIntHI.GetKey = new_instancemethod(_SnapTime.TStrIntHI_GetKey, None, TStrIntHI)
TStrIntHI.GetDat = new_instancemethod(_SnapTime.TStrIntHI_GetDat, None, TStrIntHI)
TStrIntHI_swigregister = _SnapTime.TStrIntHI_swigregister
TStrIntHI_swigregister(TStrIntHI)

class TStrInt64HI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TInt64,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(THashKeyDatI<(TStr,TInt64,int64)> self) -> TStrInt64HI
        __init__(THashKeyDatI<(TStr,TInt64,int64)> self, TStrInt64HI _HashKeyDatI) -> TStrInt64HI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TInt64,int64 > const &

        __init__(THashKeyDatI<(TStr,TInt64,int64)> self, THashKeyDatI< TStr,TInt64,long long >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TInt64,long long >::THKeyDat const * _EndI) -> TStrInt64HI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TInt64,long long >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TInt64,long long >::THKeyDat const *

        """
        _SnapTime.TStrInt64HI_swiginit(self, _SnapTime.new_TStrInt64HI(*args))

    def __eq__(self, HashKeyDatI):
        """
        __eq__(TStrInt64HI self, TStrInt64HI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TStr,TInt64,int64 > const &

        """
        return _SnapTime.TStrInt64HI___eq__(self, HashKeyDatI)


    def __ne__(self, HashKeyDatI):
        """
        __ne__(TStrInt64HI self, TStrInt64HI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TStr,TInt64,int64 > const &

        """
        return _SnapTime.TStrInt64HI___ne__(self, HashKeyDatI)


    def __lt__(self, HashKeyDatI):
        """
        __lt__(TStrInt64HI self, TStrInt64HI HashKeyDatI) -> bool

        Parameters
        ----------
        HashKeyDatI: THashKeyDatI< TStr,TInt64,int64 > const &

        """
        return _SnapTime.TStrInt64HI___lt__(self, HashKeyDatI)


    def __ref__(self):
        """
        __ref__(TStrInt64HI self) -> THashKeyDatI< TStr,TInt64,long long >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64HI___ref__(self)


    def __call__(self):
        """
        __call__(TStrInt64HI self) -> THashKeyDatI< TStr,TInt64,long long >::THKeyDat &

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64HI___call__(self)


    def __deref__(self):
        """
        __deref__(TStrInt64HI self) -> THashKeyDatI< TStr,TInt64,long long >::THKeyDat *

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64HI___deref__(self)


    def Next(self):
        """
        Next(TStrInt64HI self) -> TStrInt64HI

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt64,int64 > *

        """
        return _SnapTime.TStrInt64HI_Next(self)


    def IsEmpty(self):
        """
        IsEmpty(TStrInt64HI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64HI_IsEmpty(self)


    def IsEnd(self):
        """
        IsEnd(TStrInt64HI self) -> bool

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64HI_IsEnd(self)


    def GetKey(self):
        """
        GetKey(TStrInt64HI self) -> TStr

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt64,int64 > const *

        """
        return _SnapTime.TStrInt64HI_GetKey(self)


    def GetDat(self, *args):
        """
        GetDat(TStrInt64HI self) -> TInt64
        GetDat(TStrInt64HI self) -> TInt64

        Parameters
        ----------
        self: THashKeyDatI< TStr,TInt64,int64 > *

        """
        return _SnapTime.TStrInt64HI_GetDat(self, *args)

    __swig_destroy__ = _SnapTime.delete_TStrInt64HI
TStrInt64HI.__eq__ = new_instancemethod(_SnapTime.TStrInt64HI___eq__, None, TStrInt64HI)
TStrInt64HI.__ne__ = new_instancemethod(_SnapTime.TStrInt64HI___ne__, None, TStrInt64HI)
TStrInt64HI.__lt__ = new_instancemethod(_SnapTime.TStrInt64HI___lt__, None, TStrInt64HI)
TStrInt64HI.__ref__ = new_instancemethod(_SnapTime.TStrInt64HI___ref__, None, TStrInt64HI)
TStrInt64HI.__call__ = new_instancemethod(_SnapTime.TStrInt64HI___call__, None, TStrInt64HI)
TStrInt64HI.__deref__ = new_instancemethod(_SnapTime.TStrInt64HI___deref__, None, TStrInt64HI)
TStrInt64HI.Next = new_instancemethod(_SnapTime.TStrInt64HI_Next, None, TStrInt64HI)
TStrInt64HI.IsEmpty = new_instancemethod(_SnapTime.TStrInt64HI_IsEmpty, None, TStrInt64HI)
TStrInt64HI.IsEnd = new_instancemethod(_SnapTime.TStrInt64HI_IsEnd, None, TStrInt64HI)
TStrInt64HI.GetKey = new_instancemethod(_SnapTime.TStrInt64HI_GetKey, None, TStrInt64HI)
TStrInt64HI.GetDat = new_instancemethod(_SnapTime.TStrInt64HI_GetDat, None, TStrInt64HI)
TStrInt64HI_swigregister = _SnapTime.TStrInt64HI_swigregister
TStrInt64HI_swigregister(TStrInt64HI)

class TCnComV(object):
    """Proxy of C++ TVec<(TCnCom,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _SnapTime.delete_TCnComV

    def __init__(self, *args):
        """
        __init__(TVec<(TCnCom,int64)> self) -> TCnComV
        __init__(TVec<(TCnCom,int64)> self, TCnComV Vec) -> TCnComV

        Parameters
        ----------
        Vec: TVec< TCnCom,long long > const &

        __init__(TVec<(TCnCom,int64)> self, TCnComV Vec) -> TCnComV

        Parameters
        ----------
        Vec: TVec< TCnCom,long long > &&

        __init__(TVec<(TCnCom,int64)> self, long long const & _Vals) -> TCnComV

        Parameters
        ----------
        _Vals: long long const &

        __init__(TVec<(TCnCom,int64)> self, long long const & _MxVals, long long const & _Vals) -> TCnComV

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        __init__(TVec<(TCnCom,int64)> self, long long const & _MxVals, long long const & _Vals, TCnCom Dat) -> TCnComV

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &
        Dat: TCnCom

        __init__(TVec<(TCnCom,int64)> self, TCnCom _ValT, long long const & _Vals) -> TCnComV

        Parameters
        ----------
        _ValT: TCnCom *
        _Vals: long long const &

        __init__(TVec<(TCnCom,int64)> self, TSIn SIn) -> TCnComV

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TCnComV_swiginit(self, _SnapTime.new_TCnComV(*args))

    def LoadShM(self, ShMIn):
        """
        LoadShM(TCnComV self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.TCnComV_LoadShM(self, ShMIn)


    def Load(self, SIn):
        """
        Load(TCnComV self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TCnComV_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TCnComV self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TCnComV_Save(self, SOut)


    def __add__(self, Val):
        """
        __add__(TCnComV self, TCnCom Val) -> TCnComV

        Parameters
        ----------
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(TCnComV self, TCnComV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TCnCom,long long > const &

        """
        return _SnapTime.TCnComV___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(TCnComV self, TCnComV Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TCnCom,long long > const &

        """
        return _SnapTime.TCnComV___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(TCnComV self) -> long long

        Parameters
        ----------
        self: TVec< TCnCom,int64 > const *

        """
        return _SnapTime.TCnComV_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(TCnComV self) -> long long

        Parameters
        ----------
        self: TVec< TCnCom,int64 > const *

        """
        return _SnapTime.TCnComV_GetMemSize(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TCnComV self) -> int

        Parameters
        ----------
        self: TVec< TCnCom,int64 > const *

        """
        return _SnapTime.TCnComV_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TCnComV self) -> int

        Parameters
        ----------
        self: TVec< TCnCom,int64 > const *

        """
        return _SnapTime.TCnComV_GetSecHashCd(self)


    def Gen(self, *args):
        """
        Gen(TCnComV self, long long const & _Vals)

        Parameters
        ----------
        _Vals: long long const &

        Gen(TCnComV self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TCnComV_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(TCnComV self, TCnCom _ValT, long long const & _Vals)

        Parameters
        ----------
        _ValT: TCnCom *
        _Vals: long long const &

        """
        return _SnapTime.TCnComV_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(TCnComV self) -> bool

        Parameters
        ----------
        self: TVec< TCnCom,int64 > const *

        """
        return _SnapTime.TCnComV_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(TCnComV self, long long const & _MxVals)

        Parameters
        ----------
        _MxVals: long long const &

        Reserve(TCnComV self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.TCnComV_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TCnComV self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(TCnComV self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TCnComV self)

        Parameters
        ----------
        self: TVec< TCnCom,int64 > *

        """
        return _SnapTime.TCnComV_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(TCnComV self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Trunc(TCnComV self)

        Parameters
        ----------
        self: TVec< TCnCom,int64 > *

        """
        return _SnapTime.TCnComV_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(TCnComV self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Reduce(TCnComV self)

        Parameters
        ----------
        self: TVec< TCnCom,int64 > *

        """
        return _SnapTime.TCnComV_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(TCnComV self)

        Parameters
        ----------
        self: TVec< TCnCom,int64 > *

        """
        return _SnapTime.TCnComV_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(TCnComV self, TCnComV Vec)

        Parameters
        ----------
        Vec: TVec< TCnCom,long long > &

        """
        return _SnapTime.TCnComV_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(TCnComV self, TCnComV Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TCnCom,long long > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.TCnComV_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(TCnComV self) -> bool

        Parameters
        ----------
        self: TVec< TCnCom,int64 > const *

        """
        return _SnapTime.TCnComV_Empty(self)


    def Len(self):
        """
        Len(TCnComV self) -> long long

        Parameters
        ----------
        self: TVec< TCnCom,int64 > const *

        """
        return _SnapTime.TCnComV_Len(self)


    def Reserved(self):
        """
        Reserved(TCnComV self) -> long long

        Parameters
        ----------
        self: TVec< TCnCom,int64 > const *

        """
        return _SnapTime.TCnComV_Reserved(self)


    def Last(self, *args):
        """
        Last(TCnComV self) -> TCnCom
        Last(TCnComV self) -> TCnCom

        Parameters
        ----------
        self: TVec< TCnCom,int64 > *

        """
        return _SnapTime.TCnComV_Last(self, *args)


    def LastValN(self):
        """
        LastValN(TCnComV self) -> long long

        Parameters
        ----------
        self: TVec< TCnCom,int64 > const *

        """
        return _SnapTime.TCnComV_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(TCnComV self) -> TCnCom
        LastLast(TCnComV self) -> TCnCom

        Parameters
        ----------
        self: TVec< TCnCom,int64 > *

        """
        return _SnapTime.TCnComV_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(TCnComV self, TRnd Rnd) -> TCnCom

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TCnComV self) -> TCnCom
        GetRndVal(TCnComV self, TRnd Rnd) -> TCnCom

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(TCnComV self) -> TCnCom

        Parameters
        ----------
        self: TVec< TCnCom,int64 > *

        """
        return _SnapTime.TCnComV_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(TCnComV self) -> TCnCom

        Parameters
        ----------
        self: TVec< TCnCom,int64 > const *

        """
        return _SnapTime.TCnComV_BegI(self)


    def begin(self):
        """
        begin(TCnComV self) -> TCnCom

        Parameters
        ----------
        self: TVec< TCnCom,int64 > const *

        """
        return _SnapTime.TCnComV_begin(self)


    def EndI(self):
        """
        EndI(TCnComV self) -> TCnCom

        Parameters
        ----------
        self: TVec< TCnCom,int64 > const *

        """
        return _SnapTime.TCnComV_EndI(self)


    def end(self):
        """
        end(TCnComV self) -> TCnCom

        Parameters
        ----------
        self: TVec< TCnCom,int64 > const *

        """
        return _SnapTime.TCnComV_end(self)


    def GetI(self, ValN):
        """
        GetI(TCnComV self, long long const & ValN) -> TCnCom

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TCnComV_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(TCnComV self) -> long long
        Add(TCnComV self, TCnCom Val) -> long long

        Parameters
        ----------
        Val: TCnCom const &

        Add(TCnComV self, TCnCom Val) -> long long

        Parameters
        ----------
        Val: TCnCom &

        Add(TCnComV self, TCnCom Val, long long const & ResizeLen) -> long long

        Parameters
        ----------
        Val: TCnCom const &
        ResizeLen: long long const &

        """
        return _SnapTime.TCnComV_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(TCnComV self, TCnCom Val) -> long long

        Parameters
        ----------
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(TCnComV self, TCnCom Val, int Inc) -> long long

        Parameters
        ----------
        Val: TCnCom const &
        Inc: int

        """
        return _SnapTime.TCnComV_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(TCnComV self, TCnComV ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TCnCom,long long > const &

        """
        return _SnapTime.TCnComV_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(TCnComV self, TCnCom Val, bool const & Asc=True, long long const & _MxVals=-1) -> long long

        Parameters
        ----------
        Val: TCnCom const &
        Asc: bool const &
        _MxVals: long long const &

        AddSorted(TCnComV self, TCnCom Val, bool const & Asc=True) -> long long

        Parameters
        ----------
        Val: TCnCom const &
        Asc: bool const &

        AddSorted(TCnComV self, TCnCom Val) -> long long

        Parameters
        ----------
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(TCnComV self, TCnCom Val, bool const & Asc) -> long long

        Parameters
        ----------
        Val: TCnCom const &
        Asc: bool const &

        """
        return _SnapTime.TCnComV_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(TCnComV self, TCnCom Val) -> long long

        Parameters
        ----------
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(TCnComV self, TCnComV ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TCnCom,long long > const &

        """
        return _SnapTime.TCnComV_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(TCnComV self, TCnCom Val) -> long long

        Parameters
        ----------
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(TCnComV self, long long const & ValN) -> TCnCom

        Parameters
        ----------
        ValN: long long const &

        GetVal(TCnComV self, long long const & ValN) -> TCnCom

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.TCnComV_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(TCnComV self, long long const & ValN, TCnCom Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(TCnComV self, long long const & BValN, long long const & EValN, TCnComV ValV)

        Parameters
        ----------
        BValN: long long const &
        EValN: long long const &
        ValV: TVec< TCnCom,long long > &

        """
        return _SnapTime.TCnComV_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(TCnComV self, long long const & ValN, TCnCom Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(TCnComV self, long long const & ValN)

        Parameters
        ----------
        ValN: long long const &

        Del(TCnComV self, long long const & MnValN, long long const & MxValN)

        Parameters
        ----------
        MnValN: long long const &
        MxValN: long long const &

        """
        return _SnapTime.TCnComV_Del(self, *args)


    def DelLast(self):
        """
        DelLast(TCnComV self)

        Parameters
        ----------
        self: TVec< TCnCom,int64 > *

        """
        return _SnapTime.TCnComV_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(TCnComV self, TCnCom Val) -> bool

        Parameters
        ----------
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(TCnComV self, TCnCom Val)

        Parameters
        ----------
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(TCnComV self, TCnCom Val)

        Parameters
        ----------
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(TCnComV self, long long const & FromValN, long long const & ToValN)

        Parameters
        ----------
        FromValN: long long const &
        ToValN: long long const &

        """
        return _SnapTime.TCnComV_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(TCnComV self, TCnComV Vec)

        Parameters
        ----------
        Vec: TVec< TCnCom,long long > &

        Swap(TCnComV self, long long const & ValN1, long long const & ValN2)

        Parameters
        ----------
        ValN1: long long const &
        ValN2: long long const &

        """
        return _SnapTime.TCnComV_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TCnCom LVal, TCnCom RVal)

        Parameters
        ----------
        LVal: TVec< TCnCom,long long >::TIter
        RVal: TVec< TCnCom,long long >::TIter

        """
        return _SnapTime.TCnComV_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(TCnComV self) -> TVec< TCnCom,int >

        Parameters
        ----------
        self: TVec< TCnCom,int64 > *

        """
        return _SnapTime.TCnComV_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(TCnComV self) -> bool

        Parameters
        ----------
        self: TVec< TCnCom,int64 > *

        """
        return _SnapTime.TCnComV_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(TCnComV self) -> bool

        Parameters
        ----------
        self: TVec< TCnCom,int64 > *

        """
        return _SnapTime.TCnComV_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(TCnComV self, long long const & LValN, long long const & RValN) -> long long

        Parameters
        ----------
        LValN: long long const &
        RValN: long long const &

        """
        return _SnapTime.TCnComV_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(TCnComV self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TCnComV_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(TCnComV self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TCnComV_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(TCnComV self, long long const & MnLValN, long long const & MxRValN, bool const & Asc) -> long long

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TCnComV_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(TCnComV self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.TCnComV_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(TCnComV self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(TCnComV self)

        Parameters
        ----------
        self: TVec< TCnCom,int64 > *

        """
        return _SnapTime.TCnComV_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(TCnComV self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(TCnComV self) -> bool

        Parameters
        ----------
        self: TVec< TCnCom,int64 > const *

        """
        return _SnapTime.TCnComV_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(TCnComV self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TCnComV_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(TCnComV self)
        Reverse(TCnComV self, long long LValN, long long RValN)

        Parameters
        ----------
        LValN: long long
        RValN: long long

        """
        return _SnapTime.TCnComV_Reverse(self, *args)


    def Merge(self):
        """
        Merge(TCnComV self)

        Parameters
        ----------
        self: TVec< TCnCom,int64 > *

        """
        return _SnapTime.TCnComV_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(TCnComV self, TCnComV ValV)

        Parameters
        ----------
        ValV: TVec< TCnCom,long long > const &

        Intrs(TCnComV self, TCnComV ValV, TCnComV DstValV)

        Parameters
        ----------
        ValV: TVec< TCnCom,long long > const &
        DstValV: TVec< TCnCom,long long > &

        """
        return _SnapTime.TCnComV_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(TCnComV self, TCnComV ValV)

        Parameters
        ----------
        ValV: TVec< TCnCom,long long > const &

        Union(TCnComV self, TCnComV ValV, TCnComV DstValV)

        Parameters
        ----------
        ValV: TVec< TCnCom,long long > const &
        DstValV: TVec< TCnCom,long long > &

        """
        return _SnapTime.TCnComV_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(TCnComV self, TCnComV ValV)

        Parameters
        ----------
        ValV: TVec< TCnCom,long long > const &

        Diff(TCnComV self, TCnComV ValV, TCnComV DstValV)

        Parameters
        ----------
        ValV: TVec< TCnCom,long long > const &
        DstValV: TVec< TCnCom,long long > &

        """
        return _SnapTime.TCnComV_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(TCnComV self, TCnComV ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TCnCom,long long > const &

        """
        return _SnapTime.TCnComV_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(TCnComV self, TCnComV ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TCnCom,long long > const &

        """
        return _SnapTime.TCnComV_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(TCnComV self, TCnCom Val) -> long long

        Parameters
        ----------
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(TCnComV self, TCnCom Val) -> long long

        Parameters
        ----------
        Val: TCnCom const &

        SearchBin(TCnComV self, TCnCom Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TCnCom const &
        InsValN: long long &

        """
        return _SnapTime.TCnComV_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(TCnComV self, TCnCom Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TCnCom const &
        InsValN: long long &

        """
        return _SnapTime.TCnComV_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(TCnComV self, TCnCom Val, long long const & BValN=0) -> long long

        Parameters
        ----------
        Val: TCnCom const &
        BValN: long long const &

        SearchForw(TCnComV self, TCnCom Val) -> long long

        Parameters
        ----------
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(TCnComV self, TCnCom Val) -> long long

        Parameters
        ----------
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(TCnComV self, TCnComV ValV, long long const & BValN=0) -> long long

        Parameters
        ----------
        ValV: TVec< TCnCom,long long > const &
        BValN: long long const &

        SearchVForw(TCnComV self, TCnComV ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TCnCom,long long > const &

        """
        return _SnapTime.TCnComV_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(TCnComV self, TCnCom Val) -> bool

        Parameters
        ----------
        Val: TCnCom const &

        IsIn(TCnComV self, TCnCom Val, long long & ValN) -> bool

        Parameters
        ----------
        Val: TCnCom const &
        ValN: long long &

        """
        return _SnapTime.TCnComV_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(TCnComV self, TCnCom Val) -> bool

        Parameters
        ----------
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(TCnComV self, TCnCom Val) -> TCnCom

        Parameters
        ----------
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(TCnComV self, TCnCom Val) -> TCnCom

        Parameters
        ----------
        Val: TCnCom const &

        """
        return _SnapTime.TCnComV_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(TCnComV self) -> long long

        Parameters
        ----------
        self: TVec< TCnCom,int64 > const *

        """
        return _SnapTime.TCnComV_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TCnCom Val1) -> TCnComV

        Parameters
        ----------
        Val1: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2) -> TCnComV

        Parameters
        ----------
        Val1: TCnCom const &
        Val2: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3) -> TCnComV

        Parameters
        ----------
        Val1: TCnCom const &
        Val2: TCnCom const &
        Val3: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4) -> TCnComV

        Parameters
        ----------
        Val1: TCnCom const &
        Val2: TCnCom const &
        Val3: TCnCom const &
        Val4: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5) -> TCnComV

        Parameters
        ----------
        Val1: TCnCom const &
        Val2: TCnCom const &
        Val3: TCnCom const &
        Val4: TCnCom const &
        Val5: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6) -> TCnComV

        Parameters
        ----------
        Val1: TCnCom const &
        Val2: TCnCom const &
        Val3: TCnCom const &
        Val4: TCnCom const &
        Val5: TCnCom const &
        Val6: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6, TCnCom Val7) -> TCnComV

        Parameters
        ----------
        Val1: TCnCom const &
        Val2: TCnCom const &
        Val3: TCnCom const &
        Val4: TCnCom const &
        Val5: TCnCom const &
        Val6: TCnCom const &
        Val7: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6, TCnCom Val7, TCnCom Val8) -> TCnComV

        Parameters
        ----------
        Val1: TCnCom const &
        Val2: TCnCom const &
        Val3: TCnCom const &
        Val4: TCnCom const &
        Val5: TCnCom const &
        Val6: TCnCom const &
        Val7: TCnCom const &
        Val8: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6, TCnCom Val7, TCnCom Val8, TCnCom Val9) -> TCnComV

        Parameters
        ----------
        Val1: TCnCom const &
        Val2: TCnCom const &
        Val3: TCnCom const &
        Val4: TCnCom const &
        Val5: TCnCom const &
        Val6: TCnCom const &
        Val7: TCnCom const &
        Val8: TCnCom const &
        Val9: TCnCom const &

        """
        return _SnapTime.TCnComV_GetV(*args)

    GetV = staticmethod(GetV)
TCnComV.LoadShM = new_instancemethod(_SnapTime.TCnComV_LoadShM, None, TCnComV)
TCnComV.Load = new_instancemethod(_SnapTime.TCnComV_Load, None, TCnComV)
TCnComV.Save = new_instancemethod(_SnapTime.TCnComV_Save, None, TCnComV)
TCnComV.__add__ = new_instancemethod(_SnapTime.TCnComV___add__, None, TCnComV)
TCnComV.__eq__ = new_instancemethod(_SnapTime.TCnComV___eq__, None, TCnComV)
TCnComV.__lt__ = new_instancemethod(_SnapTime.TCnComV___lt__, None, TCnComV)
TCnComV.GetMemUsed = new_instancemethod(_SnapTime.TCnComV_GetMemUsed, None, TCnComV)
TCnComV.GetMemSize = new_instancemethod(_SnapTime.TCnComV_GetMemSize, None, TCnComV)
TCnComV.GetPrimHashCd = new_instancemethod(_SnapTime.TCnComV_GetPrimHashCd, None, TCnComV)
TCnComV.GetSecHashCd = new_instancemethod(_SnapTime.TCnComV_GetSecHashCd, None, TCnComV)
TCnComV.Gen = new_instancemethod(_SnapTime.TCnComV_Gen, None, TCnComV)
TCnComV.GenExt = new_instancemethod(_SnapTime.TCnComV_GenExt, None, TCnComV)
TCnComV.IsExt = new_instancemethod(_SnapTime.TCnComV_IsExt, None, TCnComV)
TCnComV.Reserve = new_instancemethod(_SnapTime.TCnComV_Reserve, None, TCnComV)
TCnComV.Clr = new_instancemethod(_SnapTime.TCnComV_Clr, None, TCnComV)
TCnComV.Trunc = new_instancemethod(_SnapTime.TCnComV_Trunc, None, TCnComV)
TCnComV.Reduce = new_instancemethod(_SnapTime.TCnComV_Reduce, None, TCnComV)
TCnComV.Pack = new_instancemethod(_SnapTime.TCnComV_Pack, None, TCnComV)
TCnComV.MoveFrom = new_instancemethod(_SnapTime.TCnComV_MoveFrom, None, TCnComV)
TCnComV.CopyUniqueFrom = new_instancemethod(_SnapTime.TCnComV_CopyUniqueFrom, None, TCnComV)
TCnComV.Empty = new_instancemethod(_SnapTime.TCnComV_Empty, None, TCnComV)
TCnComV.Len = new_instancemethod(_SnapTime.TCnComV_Len, None, TCnComV)
TCnComV.Reserved = new_instancemethod(_SnapTime.TCnComV_Reserved, None, TCnComV)
TCnComV.Last = new_instancemethod(_SnapTime.TCnComV_Last, None, TCnComV)
TCnComV.LastValN = new_instancemethod(_SnapTime.TCnComV_LastValN, None, TCnComV)
TCnComV.LastLast = new_instancemethod(_SnapTime.TCnComV_LastLast, None, TCnComV)
TCnComV.GetRndVal = new_instancemethod(_SnapTime.TCnComV_GetRndVal, None, TCnComV)
TCnComV.BegI = new_instancemethod(_SnapTime.TCnComV_BegI, None, TCnComV)
TCnComV.begin = new_instancemethod(_SnapTime.TCnComV_begin, None, TCnComV)
TCnComV.EndI = new_instancemethod(_SnapTime.TCnComV_EndI, None, TCnComV)
TCnComV.end = new_instancemethod(_SnapTime.TCnComV_end, None, TCnComV)
TCnComV.GetI = new_instancemethod(_SnapTime.TCnComV_GetI, None, TCnComV)
TCnComV.Add = new_instancemethod(_SnapTime.TCnComV_Add, None, TCnComV)
TCnComV.AddMP = new_instancemethod(_SnapTime.TCnComV_AddMP, None, TCnComV)
TCnComV.MoveLastMP = new_instancemethod(_SnapTime.TCnComV_MoveLastMP, None, TCnComV)
TCnComV.AddV = new_instancemethod(_SnapTime.TCnComV_AddV, None, TCnComV)
TCnComV.AddSorted = new_instancemethod(_SnapTime.TCnComV_AddSorted, None, TCnComV)
TCnComV.AddBackSorted = new_instancemethod(_SnapTime.TCnComV_AddBackSorted, None, TCnComV)
TCnComV.AddMerged = new_instancemethod(_SnapTime.TCnComV_AddMerged, None, TCnComV)
TCnComV.AddVMerged = new_instancemethod(_SnapTime.TCnComV_AddVMerged, None, TCnComV)
TCnComV.AddUnique = new_instancemethod(_SnapTime.TCnComV_AddUnique, None, TCnComV)
TCnComV.GetVal = new_instancemethod(_SnapTime.TCnComV_GetVal, None, TCnComV)
TCnComV.SetVal = new_instancemethod(_SnapTime.TCnComV_SetVal, None, TCnComV)
TCnComV.GetSubValV = new_instancemethod(_SnapTime.TCnComV_GetSubValV, None, TCnComV)
TCnComV.Ins = new_instancemethod(_SnapTime.TCnComV_Ins, None, TCnComV)
TCnComV.Del = new_instancemethod(_SnapTime.TCnComV_Del, None, TCnComV)
TCnComV.DelLast = new_instancemethod(_SnapTime.TCnComV_DelLast, None, TCnComV)
TCnComV.DelIfIn = new_instancemethod(_SnapTime.TCnComV_DelIfIn, None, TCnComV)
TCnComV.DelAll = new_instancemethod(_SnapTime.TCnComV_DelAll, None, TCnComV)
TCnComV.PutAll = new_instancemethod(_SnapTime.TCnComV_PutAll, None, TCnComV)
TCnComV.Move = new_instancemethod(_SnapTime.TCnComV_Move, None, TCnComV)
TCnComV.Swap = new_instancemethod(_SnapTime.TCnComV_Swap, None, TCnComV)
TCnComV.Get32BitVector = new_instancemethod(_SnapTime.TCnComV_Get32BitVector, None, TCnComV)
TCnComV.NextPerm = new_instancemethod(_SnapTime.TCnComV_NextPerm, None, TCnComV)
TCnComV.PrevPerm = new_instancemethod(_SnapTime.TCnComV_PrevPerm, None, TCnComV)
TCnComV.GetPivotValN = new_instancemethod(_SnapTime.TCnComV_GetPivotValN, None, TCnComV)
TCnComV.BSort = new_instancemethod(_SnapTime.TCnComV_BSort, None, TCnComV)
TCnComV.ISort = new_instancemethod(_SnapTime.TCnComV_ISort, None, TCnComV)
TCnComV.Partition = new_instancemethod(_SnapTime.TCnComV_Partition, None, TCnComV)
TCnComV.QSort = new_instancemethod(_SnapTime.TCnComV_QSort, None, TCnComV)
TCnComV.Sort = new_instancemethod(_SnapTime.TCnComV_Sort, None, TCnComV)
TCnComV.IsSorted = new_instancemethod(_SnapTime.TCnComV_IsSorted, None, TCnComV)
TCnComV.Shuffle = new_instancemethod(_SnapTime.TCnComV_Shuffle, None, TCnComV)
TCnComV.Reverse = new_instancemethod(_SnapTime.TCnComV_Reverse, None, TCnComV)
TCnComV.Merge = new_instancemethod(_SnapTime.TCnComV_Merge, None, TCnComV)
TCnComV.Intrs = new_instancemethod(_SnapTime.TCnComV_Intrs, None, TCnComV)
TCnComV.Union = new_instancemethod(_SnapTime.TCnComV_Union, None, TCnComV)
TCnComV.Diff = new_instancemethod(_SnapTime.TCnComV_Diff, None, TCnComV)
TCnComV.IntrsLen = new_instancemethod(_SnapTime.TCnComV_IntrsLen, None, TCnComV)
TCnComV.UnionLen = new_instancemethod(_SnapTime.TCnComV_UnionLen, None, TCnComV)
TCnComV.Count = new_instancemethod(_SnapTime.TCnComV_Count, None, TCnComV)
TCnComV.SearchBin = new_instancemethod(_SnapTime.TCnComV_SearchBin, None, TCnComV)
TCnComV.SearchBinLeft = new_instancemethod(_SnapTime.TCnComV_SearchBinLeft, None, TCnComV)
TCnComV.SearchForw = new_instancemethod(_SnapTime.TCnComV_SearchForw, None, TCnComV)
TCnComV.SearchBack = new_instancemethod(_SnapTime.TCnComV_SearchBack, None, TCnComV)
TCnComV.SearchVForw = new_instancemethod(_SnapTime.TCnComV_SearchVForw, None, TCnComV)
TCnComV.IsIn = new_instancemethod(_SnapTime.TCnComV_IsIn, None, TCnComV)
TCnComV.IsInBin = new_instancemethod(_SnapTime.TCnComV_IsInBin, None, TCnComV)
TCnComV.GetDat = new_instancemethod(_SnapTime.TCnComV_GetDat, None, TCnComV)
TCnComV.GetAddDat = new_instancemethod(_SnapTime.TCnComV_GetAddDat, None, TCnComV)
TCnComV.GetMxValN = new_instancemethod(_SnapTime.TCnComV_GetMxValN, None, TCnComV)
TCnComV_swigregister = _SnapTime.TCnComV_swigregister
TCnComV_swigregister(TCnComV)

def TCnComV_SwapI(LVal, RVal):
    """
    TCnComV_SwapI(TCnCom LVal, TCnCom RVal)

    Parameters
    ----------
    LVal: TVec< TCnCom,long long >::TIter
    RVal: TVec< TCnCom,long long >::TIter

    """
    return _SnapTime.TCnComV_SwapI(LVal, RVal)

def TCnComV_GetV(*args):
    """
    GetV(TCnCom Val1) -> TCnComV

    Parameters
    ----------
    Val1: TCnCom const &

    GetV(TCnCom Val1, TCnCom Val2) -> TCnComV

    Parameters
    ----------
    Val1: TCnCom const &
    Val2: TCnCom const &

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3) -> TCnComV

    Parameters
    ----------
    Val1: TCnCom const &
    Val2: TCnCom const &
    Val3: TCnCom const &

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4) -> TCnComV

    Parameters
    ----------
    Val1: TCnCom const &
    Val2: TCnCom const &
    Val3: TCnCom const &
    Val4: TCnCom const &

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5) -> TCnComV

    Parameters
    ----------
    Val1: TCnCom const &
    Val2: TCnCom const &
    Val3: TCnCom const &
    Val4: TCnCom const &
    Val5: TCnCom const &

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6) -> TCnComV

    Parameters
    ----------
    Val1: TCnCom const &
    Val2: TCnCom const &
    Val3: TCnCom const &
    Val4: TCnCom const &
    Val5: TCnCom const &
    Val6: TCnCom const &

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6, TCnCom Val7) -> TCnComV

    Parameters
    ----------
    Val1: TCnCom const &
    Val2: TCnCom const &
    Val3: TCnCom const &
    Val4: TCnCom const &
    Val5: TCnCom const &
    Val6: TCnCom const &
    Val7: TCnCom const &

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6, TCnCom Val7, TCnCom Val8) -> TCnComV

    Parameters
    ----------
    Val1: TCnCom const &
    Val2: TCnCom const &
    Val3: TCnCom const &
    Val4: TCnCom const &
    Val5: TCnCom const &
    Val6: TCnCom const &
    Val7: TCnCom const &
    Val8: TCnCom const &

    TCnComV_GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6, TCnCom Val7, TCnCom Val8, TCnCom Val9) -> TCnComV

    Parameters
    ----------
    Val1: TCnCom const &
    Val2: TCnCom const &
    Val3: TCnCom const &
    Val4: TCnCom const &
    Val5: TCnCom const &
    Val6: TCnCom const &
    Val7: TCnCom const &
    Val8: TCnCom const &
    Val9: TCnCom const &

    """
    return _SnapTime.TCnComV_GetV(*args)

class TStrTAttrPr(object):
    """Proxy of C++ TPair<(TStr,TAttrType)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_SnapTime.TStrTAttrPr_Val1_get, _SnapTime.TStrTAttrPr_Val1_set)
    Val2 = _swig_property(_SnapTime.TStrTAttrPr_Val2_get, _SnapTime.TStrTAttrPr_Val2_set)

    def __init__(self, *args):
        """
        __init__(TPair<(TStr,TAttrType)> self) -> TStrTAttrPr
        __init__(TPair<(TStr,TAttrType)> self, TStrTAttrPr Pair) -> TStrTAttrPr

        Parameters
        ----------
        Pair: TPair< TStr,TAttrType > const &

        __init__(TPair<(TStr,TAttrType)> self, TStrTAttrPr Pair) -> TStrTAttrPr

        Parameters
        ----------
        Pair: TPair< TStr,TAttrType > const &&

        __init__(TPair<(TStr,TAttrType)> self, TStr _Val1, enum TAttrType_ const & _Val2) -> TStrTAttrPr

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: enum TAttrType_ const &

        """
        _SnapTime.TStrTAttrPr_swiginit(self, _SnapTime.new_TStrTAttrPr(*args))

    def __eq__(self, Pair):
        """
        __eq__(TStrTAttrPr self, TStrTAttrPr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.TStrTAttrPr___eq__(self, Pair)


    def __lt__(self, Pair):
        """
        __lt__(TStrTAttrPr self, TStrTAttrPr Pair) -> bool

        Parameters
        ----------
        Pair: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.TStrTAttrPr___lt__(self, Pair)


    def GetVal(self, _Val1, _Val2):
        """
        GetVal(TStrTAttrPr self, TStr _Val1, enum TAttrType_ & _Val2)

        Parameters
        ----------
        _Val1: TStr &
        _Val2: enum TAttrType_ &

        """
        return _SnapTime.TStrTAttrPr_GetVal(self, _Val1, _Val2)


    def GetVal1(self):
        """
        GetVal1(TStrTAttrPr self) -> TStr

        Parameters
        ----------
        self: TPair< TStr,TAttrType > const *

        """
        return _SnapTime.TStrTAttrPr_GetVal1(self)


    def GetVal2(self):
        """
        GetVal2(TStrTAttrPr self) -> enum TAttrType_ const &

        Parameters
        ----------
        self: TPair< TStr,TAttrType > const *

        """
        return _SnapTime.TStrTAttrPr_GetVal2(self)

    __swig_destroy__ = _SnapTime.delete_TStrTAttrPr
TStrTAttrPr.__eq__ = new_instancemethod(_SnapTime.TStrTAttrPr___eq__, None, TStrTAttrPr)
TStrTAttrPr.__lt__ = new_instancemethod(_SnapTime.TStrTAttrPr___lt__, None, TStrTAttrPr)
TStrTAttrPr.GetVal = new_instancemethod(_SnapTime.TStrTAttrPr_GetVal, None, TStrTAttrPr)
TStrTAttrPr.GetVal1 = new_instancemethod(_SnapTime.TStrTAttrPr_GetVal1, None, TStrTAttrPr)
TStrTAttrPr.GetVal2 = new_instancemethod(_SnapTime.TStrTAttrPr_GetVal2, None, TStrTAttrPr)
TStrTAttrPr_swigregister = _SnapTime.TStrTAttrPr_swigregister
TStrTAttrPr_swigregister(TStrTAttrPr)

class Schema(object):
    """Proxy of C++ TVec<(TPair<(TStr,TAttrType)>,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TVec<(TPair<(TStr,TAttrType)>,int64)> self) -> Schema
        __init__(TVec<(TPair<(TStr,TAttrType)>,int64)> self, Schema Vec) -> Schema

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TAttrType >,long long > const &

        __init__(TVec<(TPair<(TStr,TAttrType)>,int64)> self, Schema Vec) -> Schema

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TAttrType >,long long > &&

        __init__(TVec<(TPair<(TStr,TAttrType)>,int64)> self, long long const & _Vals) -> Schema

        Parameters
        ----------
        _Vals: long long const &

        __init__(TVec<(TPair<(TStr,TAttrType)>,int64)> self, long long const & _MxVals, long long const & _Vals) -> Schema

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        __init__(TVec<(TPair<(TStr,TAttrType)>,int64)> self, long long const & _MxVals, long long const & _Vals, TStrTAttrPr Dat) -> Schema

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &
        Dat: TPair< TStr,TAttrType >

        __init__(TVec<(TPair<(TStr,TAttrType)>,int64)> self, TStrTAttrPr _ValT, long long const & _Vals) -> Schema

        Parameters
        ----------
        _ValT: TPair< TStr,TAttrType > *
        _Vals: long long const &

        """
        _SnapTime.Schema_swiginit(self, _SnapTime.new_Schema(*args))
    __swig_destroy__ = _SnapTime.delete_Schema

    def LoadShM(self, ShMIn):
        """
        LoadShM(Schema self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.Schema_LoadShM(self, ShMIn)


    def __add__(self, Val):
        """
        __add__(Schema self, TStrTAttrPr Val) -> Schema

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema___add__(self, Val)


    def __eq__(self, Vec):
        """
        __eq__(Schema self, Schema Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TAttrType >,long long > const &

        """
        return _SnapTime.Schema___eq__(self, Vec)


    def __lt__(self, Vec):
        """
        __lt__(Schema self, Schema Vec) -> bool

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TAttrType >,long long > const &

        """
        return _SnapTime.Schema___lt__(self, Vec)


    def GetMemUsed(self):
        """
        GetMemUsed(Schema self) -> long long

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > const *

        """
        return _SnapTime.Schema_GetMemUsed(self)


    def GetMemSize(self):
        """
        GetMemSize(Schema self) -> long long

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > const *

        """
        return _SnapTime.Schema_GetMemSize(self)


    def Gen(self, *args):
        """
        Gen(Schema self, long long const & _Vals)

        Parameters
        ----------
        _Vals: long long const &

        Gen(Schema self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.Schema_Gen(self, *args)


    def GenExt(self, _ValT, _Vals):
        """
        GenExt(Schema self, TStrTAttrPr _ValT, long long const & _Vals)

        Parameters
        ----------
        _ValT: TPair< TStr,TAttrType > *
        _Vals: long long const &

        """
        return _SnapTime.Schema_GenExt(self, _ValT, _Vals)


    def IsExt(self):
        """
        IsExt(Schema self) -> bool

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > const *

        """
        return _SnapTime.Schema_IsExt(self)


    def Reserve(self, *args):
        """
        Reserve(Schema self, long long const & _MxVals)

        Parameters
        ----------
        _MxVals: long long const &

        Reserve(Schema self, long long const & _MxVals, long long const & _Vals)

        Parameters
        ----------
        _MxVals: long long const &
        _Vals: long long const &

        """
        return _SnapTime.Schema_Reserve(self, *args)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(Schema self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(Schema self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(Schema self)

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > *

        """
        return _SnapTime.Schema_Clr(self, DoDel, NoDelLim)


    def Trunc(self, _Vals=-1):
        """
        Trunc(Schema self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Trunc(Schema self)

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > *

        """
        return _SnapTime.Schema_Trunc(self, _Vals)


    def Reduce(self, _Vals=-1):
        """
        Reduce(Schema self, long long const & _Vals=-1)

        Parameters
        ----------
        _Vals: long long const &

        Reduce(Schema self)

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > *

        """
        return _SnapTime.Schema_Reduce(self, _Vals)


    def Pack(self):
        """
        Pack(Schema self)

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > *

        """
        return _SnapTime.Schema_Pack(self)


    def MoveFrom(self, Vec):
        """
        MoveFrom(Schema self, Schema Vec)

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TAttrType >,long long > &

        """
        return _SnapTime.Schema_MoveFrom(self, Vec)


    def CopyUniqueFrom(self, Vec, Offset, Sz):
        """
        CopyUniqueFrom(Schema self, Schema Vec, TInt64 Offset, TInt64 Sz)

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TAttrType >,long long > &
        Offset: TInt64
        Sz: TInt64

        """
        return _SnapTime.Schema_CopyUniqueFrom(self, Vec, Offset, Sz)


    def Empty(self):
        """
        Empty(Schema self) -> bool

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > const *

        """
        return _SnapTime.Schema_Empty(self)


    def Len(self):
        """
        Len(Schema self) -> long long

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > const *

        """
        return _SnapTime.Schema_Len(self)


    def Reserved(self):
        """
        Reserved(Schema self) -> long long

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > const *

        """
        return _SnapTime.Schema_Reserved(self)


    def Last(self, *args):
        """
        Last(Schema self) -> TStrTAttrPr
        Last(Schema self) -> TStrTAttrPr

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > *

        """
        return _SnapTime.Schema_Last(self, *args)


    def LastValN(self):
        """
        LastValN(Schema self) -> long long

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > const *

        """
        return _SnapTime.Schema_LastValN(self)


    def LastLast(self, *args):
        """
        LastLast(Schema self) -> TStrTAttrPr
        LastLast(Schema self) -> TStrTAttrPr

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > *

        """
        return _SnapTime.Schema_LastLast(self, *args)


    def GetRndVal(self, *args):
        """
        GetRndVal(Schema self, TRnd Rnd) -> TStrTAttrPr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(Schema self) -> TStrTAttrPr
        GetRndVal(Schema self, TRnd Rnd) -> TStrTAttrPr

        Parameters
        ----------
        Rnd: TRnd &

        GetRndVal(Schema self) -> TStrTAttrPr

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > *

        """
        return _SnapTime.Schema_GetRndVal(self, *args)


    def BegI(self):
        """
        BegI(Schema self) -> TStrTAttrPr

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > const *

        """
        return _SnapTime.Schema_BegI(self)


    def begin(self):
        """
        begin(Schema self) -> TStrTAttrPr

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > const *

        """
        return _SnapTime.Schema_begin(self)


    def EndI(self):
        """
        EndI(Schema self) -> TStrTAttrPr

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > const *

        """
        return _SnapTime.Schema_EndI(self)


    def end(self):
        """
        end(Schema self) -> TStrTAttrPr

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > const *

        """
        return _SnapTime.Schema_end(self)


    def GetI(self, ValN):
        """
        GetI(Schema self, long long const & ValN) -> TStrTAttrPr

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.Schema_GetI(self, ValN)


    def Add(self, *args):
        """
        Add(Schema self) -> long long
        Add(Schema self, TStrTAttrPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        Add(Schema self, TStrTAttrPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > &

        Add(Schema self, TStrTAttrPr Val, long long const & ResizeLen) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &
        ResizeLen: long long const &

        """
        return _SnapTime.Schema_Add(self, *args)


    def AddMP(self, Val):
        """
        AddMP(Schema self, TStrTAttrPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_AddMP(self, Val)


    def MoveLastMP(self, Val, Inc):
        """
        MoveLastMP(Schema self, TStrTAttrPr Val, int Inc) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &
        Inc: int

        """
        return _SnapTime.Schema_MoveLastMP(self, Val, Inc)


    def AddV(self, ValV):
        """
        AddV(Schema self, Schema ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TAttrType >,long long > const &

        """
        return _SnapTime.Schema_AddV(self, ValV)


    def AddSorted(self, Val, Asc=True, _MxVals=-1):
        """
        AddSorted(Schema self, TStrTAttrPr Val, bool const & Asc=True, long long const & _MxVals=-1) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &
        Asc: bool const &
        _MxVals: long long const &

        AddSorted(Schema self, TStrTAttrPr Val, bool const & Asc=True) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &
        Asc: bool const &

        AddSorted(Schema self, TStrTAttrPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_AddSorted(self, Val, Asc, _MxVals)


    def AddBackSorted(self, Val, Asc):
        """
        AddBackSorted(Schema self, TStrTAttrPr Val, bool const & Asc) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &
        Asc: bool const &

        """
        return _SnapTime.Schema_AddBackSorted(self, Val, Asc)


    def AddMerged(self, Val):
        """
        AddMerged(Schema self, TStrTAttrPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_AddMerged(self, Val)


    def AddVMerged(self, ValV):
        """
        AddVMerged(Schema self, Schema ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TAttrType >,long long > const &

        """
        return _SnapTime.Schema_AddVMerged(self, ValV)


    def AddUnique(self, Val):
        """
        AddUnique(Schema self, TStrTAttrPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_AddUnique(self, Val)


    def GetVal(self, *args):
        """
        GetVal(Schema self, long long const & ValN) -> TStrTAttrPr

        Parameters
        ----------
        ValN: long long const &

        GetVal(Schema self, long long const & ValN) -> TStrTAttrPr

        Parameters
        ----------
        ValN: long long const &

        """
        return _SnapTime.Schema_GetVal(self, *args)


    def SetVal(self, ValN, Val):
        """
        SetVal(Schema self, long long const & ValN, TStrTAttrPr Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_SetVal(self, ValN, Val)


    def GetSubValV(self, BValN, EValN, ValV):
        """
        GetSubValV(Schema self, long long const & BValN, long long const & EValN, Schema ValV)

        Parameters
        ----------
        BValN: long long const &
        EValN: long long const &
        ValV: TVec< TPair< TStr,TAttrType >,long long > &

        """
        return _SnapTime.Schema_GetSubValV(self, BValN, EValN, ValV)


    def Ins(self, ValN, Val):
        """
        Ins(Schema self, long long const & ValN, TStrTAttrPr Val)

        Parameters
        ----------
        ValN: long long const &
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_Ins(self, ValN, Val)


    def Del(self, *args):
        """
        Del(Schema self, long long const & ValN)

        Parameters
        ----------
        ValN: long long const &

        Del(Schema self, long long const & MnValN, long long const & MxValN)

        Parameters
        ----------
        MnValN: long long const &
        MxValN: long long const &

        """
        return _SnapTime.Schema_Del(self, *args)


    def DelLast(self):
        """
        DelLast(Schema self)

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > *

        """
        return _SnapTime.Schema_DelLast(self)


    def DelIfIn(self, Val):
        """
        DelIfIn(Schema self, TStrTAttrPr Val) -> bool

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_DelIfIn(self, Val)


    def DelAll(self, Val):
        """
        DelAll(Schema self, TStrTAttrPr Val)

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_DelAll(self, Val)


    def PutAll(self, Val):
        """
        PutAll(Schema self, TStrTAttrPr Val)

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_PutAll(self, Val)


    def Move(self, FromValN, ToValN):
        """
        Move(Schema self, long long const & FromValN, long long const & ToValN)

        Parameters
        ----------
        FromValN: long long const &
        ToValN: long long const &

        """
        return _SnapTime.Schema_Move(self, FromValN, ToValN)


    def Swap(self, *args):
        """
        Swap(Schema self, Schema Vec)

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TAttrType >,long long > &

        Swap(Schema self, long long const & ValN1, long long const & ValN2)

        Parameters
        ----------
        ValN1: long long const &
        ValN2: long long const &

        """
        return _SnapTime.Schema_Swap(self, *args)


    def SwapI(LVal, RVal):
        """
        SwapI(TStrTAttrPr LVal, TStrTAttrPr RVal)

        Parameters
        ----------
        LVal: TVec< TPair< TStr,enum TAttrType_ >,long long >::TIter
        RVal: TVec< TPair< TStr,enum TAttrType_ >,long long >::TIter

        """
        return _SnapTime.Schema_SwapI(LVal, RVal)

    SwapI = staticmethod(SwapI)

    def Get32BitVector(self):
        """
        Get32BitVector(Schema self) -> TVec< TPair< TStr,TAttrType >,int >

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > *

        """
        return _SnapTime.Schema_Get32BitVector(self)


    def NextPerm(self):
        """
        NextPerm(Schema self) -> bool

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > *

        """
        return _SnapTime.Schema_NextPerm(self)


    def PrevPerm(self):
        """
        PrevPerm(Schema self) -> bool

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > *

        """
        return _SnapTime.Schema_PrevPerm(self)


    def GetPivotValN(self, LValN, RValN):
        """
        GetPivotValN(Schema self, long long const & LValN, long long const & RValN) -> long long

        Parameters
        ----------
        LValN: long long const &
        RValN: long long const &

        """
        return _SnapTime.Schema_GetPivotValN(self, LValN, RValN)


    def BSort(self, MnLValN, MxRValN, Asc):
        """
        BSort(Schema self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.Schema_BSort(self, MnLValN, MxRValN, Asc)


    def ISort(self, MnLValN, MxRValN, Asc):
        """
        ISort(Schema self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.Schema_ISort(self, MnLValN, MxRValN, Asc)


    def Partition(self, MnLValN, MxRValN, Asc):
        """
        Partition(Schema self, long long const & MnLValN, long long const & MxRValN, bool const & Asc) -> long long

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.Schema_Partition(self, MnLValN, MxRValN, Asc)


    def QSort(self, MnLValN, MxRValN, Asc):
        """
        QSort(Schema self, long long const & MnLValN, long long const & MxRValN, bool const & Asc)

        Parameters
        ----------
        MnLValN: long long const &
        MxRValN: long long const &
        Asc: bool const &

        """
        return _SnapTime.Schema_QSort(self, MnLValN, MxRValN, Asc)


    def Sort(self, Asc=True):
        """
        Sort(Schema self, bool const & Asc=True)

        Parameters
        ----------
        Asc: bool const &

        Sort(Schema self)

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > *

        """
        return _SnapTime.Schema_Sort(self, Asc)


    def IsSorted(self, Asc=True):
        """
        IsSorted(Schema self, bool const & Asc=True) -> bool

        Parameters
        ----------
        Asc: bool const &

        IsSorted(Schema self) -> bool

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > const *

        """
        return _SnapTime.Schema_IsSorted(self, Asc)


    def Shuffle(self, Rnd):
        """
        Shuffle(Schema self, TRnd Rnd)

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.Schema_Shuffle(self, Rnd)


    def Reverse(self, *args):
        """
        Reverse(Schema self)
        Reverse(Schema self, long long LValN, long long RValN)

        Parameters
        ----------
        LValN: long long
        RValN: long long

        """
        return _SnapTime.Schema_Reverse(self, *args)


    def Merge(self):
        """
        Merge(Schema self)

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > *

        """
        return _SnapTime.Schema_Merge(self)


    def Intrs(self, *args):
        """
        Intrs(Schema self, Schema ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TAttrType >,long long > const &

        Intrs(Schema self, Schema ValV, Schema DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TAttrType >,long long > const &
        DstValV: TVec< TPair< TStr,TAttrType >,long long > &

        """
        return _SnapTime.Schema_Intrs(self, *args)


    def Union(self, *args):
        """
        Union(Schema self, Schema ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TAttrType >,long long > const &

        Union(Schema self, Schema ValV, Schema DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TAttrType >,long long > const &
        DstValV: TVec< TPair< TStr,TAttrType >,long long > &

        """
        return _SnapTime.Schema_Union(self, *args)


    def Diff(self, *args):
        """
        Diff(Schema self, Schema ValV)

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TAttrType >,long long > const &

        Diff(Schema self, Schema ValV, Schema DstValV)

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TAttrType >,long long > const &
        DstValV: TVec< TPair< TStr,TAttrType >,long long > &

        """
        return _SnapTime.Schema_Diff(self, *args)


    def IntrsLen(self, ValV):
        """
        IntrsLen(Schema self, Schema ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TAttrType >,long long > const &

        """
        return _SnapTime.Schema_IntrsLen(self, ValV)


    def UnionLen(self, ValV):
        """
        UnionLen(Schema self, Schema ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TAttrType >,long long > const &

        """
        return _SnapTime.Schema_UnionLen(self, ValV)


    def Count(self, Val):
        """
        Count(Schema self, TStrTAttrPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_Count(self, Val)


    def SearchBin(self, *args):
        """
        SearchBin(Schema self, TStrTAttrPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        SearchBin(Schema self, TStrTAttrPr Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &
        InsValN: long long &

        """
        return _SnapTime.Schema_SearchBin(self, *args)


    def SearchBinLeft(self, Val, InsValN):
        """
        SearchBinLeft(Schema self, TStrTAttrPr Val, long long & InsValN) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &
        InsValN: long long &

        """
        return _SnapTime.Schema_SearchBinLeft(self, Val, InsValN)


    def SearchForw(self, Val, BValN=0):
        """
        SearchForw(Schema self, TStrTAttrPr Val, long long const & BValN=0) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &
        BValN: long long const &

        SearchForw(Schema self, TStrTAttrPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_SearchForw(self, Val, BValN)


    def SearchBack(self, Val):
        """
        SearchBack(Schema self, TStrTAttrPr Val) -> long long

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_SearchBack(self, Val)


    def SearchVForw(self, ValV, BValN=0):
        """
        SearchVForw(Schema self, Schema ValV, long long const & BValN=0) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TAttrType >,long long > const &
        BValN: long long const &

        SearchVForw(Schema self, Schema ValV) -> long long

        Parameters
        ----------
        ValV: TVec< TPair< TStr,TAttrType >,long long > const &

        """
        return _SnapTime.Schema_SearchVForw(self, ValV, BValN)


    def IsIn(self, *args):
        """
        IsIn(Schema self, TStrTAttrPr Val) -> bool

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        IsIn(Schema self, TStrTAttrPr Val, long long & ValN) -> bool

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &
        ValN: long long &

        """
        return _SnapTime.Schema_IsIn(self, *args)


    def IsInBin(self, Val):
        """
        IsInBin(Schema self, TStrTAttrPr Val) -> bool

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_IsInBin(self, Val)


    def GetDat(self, Val):
        """
        GetDat(Schema self, TStrTAttrPr Val) -> TStrTAttrPr

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_GetDat(self, Val)


    def GetAddDat(self, Val):
        """
        GetAddDat(Schema self, TStrTAttrPr Val) -> TStrTAttrPr

        Parameters
        ----------
        Val: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_GetAddDat(self, Val)


    def GetMxValN(self):
        """
        GetMxValN(Schema self) -> long long

        Parameters
        ----------
        self: TVec< TPair< TStr,TAttrType >,int64 > const *

        """
        return _SnapTime.Schema_GetMxValN(self)


    def GetV(*args):
        """
        GetV(TStrTAttrPr Val1) -> Schema

        Parameters
        ----------
        Val1: TPair< TStr,TAttrType > const &

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2) -> Schema

        Parameters
        ----------
        Val1: TPair< TStr,TAttrType > const &
        Val2: TPair< TStr,TAttrType > const &

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3) -> Schema

        Parameters
        ----------
        Val1: TPair< TStr,TAttrType > const &
        Val2: TPair< TStr,TAttrType > const &
        Val3: TPair< TStr,TAttrType > const &

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, TStrTAttrPr Val4) -> Schema

        Parameters
        ----------
        Val1: TPair< TStr,TAttrType > const &
        Val2: TPair< TStr,TAttrType > const &
        Val3: TPair< TStr,TAttrType > const &
        Val4: TPair< TStr,TAttrType > const &

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, TStrTAttrPr Val4, TStrTAttrPr Val5) -> Schema

        Parameters
        ----------
        Val1: TPair< TStr,TAttrType > const &
        Val2: TPair< TStr,TAttrType > const &
        Val3: TPair< TStr,TAttrType > const &
        Val4: TPair< TStr,TAttrType > const &
        Val5: TPair< TStr,TAttrType > const &

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6) -> Schema

        Parameters
        ----------
        Val1: TPair< TStr,TAttrType > const &
        Val2: TPair< TStr,TAttrType > const &
        Val3: TPair< TStr,TAttrType > const &
        Val4: TPair< TStr,TAttrType > const &
        Val5: TPair< TStr,TAttrType > const &
        Val6: TPair< TStr,TAttrType > const &

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6, TStrTAttrPr Val7) -> Schema

        Parameters
        ----------
        Val1: TPair< TStr,TAttrType > const &
        Val2: TPair< TStr,TAttrType > const &
        Val3: TPair< TStr,TAttrType > const &
        Val4: TPair< TStr,TAttrType > const &
        Val5: TPair< TStr,TAttrType > const &
        Val6: TPair< TStr,TAttrType > const &
        Val7: TPair< TStr,TAttrType > const &

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6, TStrTAttrPr Val7, TStrTAttrPr Val8) -> Schema

        Parameters
        ----------
        Val1: TPair< TStr,TAttrType > const &
        Val2: TPair< TStr,TAttrType > const &
        Val3: TPair< TStr,TAttrType > const &
        Val4: TPair< TStr,TAttrType > const &
        Val5: TPair< TStr,TAttrType > const &
        Val6: TPair< TStr,TAttrType > const &
        Val7: TPair< TStr,TAttrType > const &
        Val8: TPair< TStr,TAttrType > const &

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6, TStrTAttrPr Val7, TStrTAttrPr Val8, TStrTAttrPr Val9) -> Schema

        Parameters
        ----------
        Val1: TPair< TStr,TAttrType > const &
        Val2: TPair< TStr,TAttrType > const &
        Val3: TPair< TStr,TAttrType > const &
        Val4: TPair< TStr,TAttrType > const &
        Val5: TPair< TStr,TAttrType > const &
        Val6: TPair< TStr,TAttrType > const &
        Val7: TPair< TStr,TAttrType > const &
        Val8: TPair< TStr,TAttrType > const &
        Val9: TPair< TStr,TAttrType > const &

        """
        return _SnapTime.Schema_GetV(*args)

    GetV = staticmethod(GetV)
Schema.LoadShM = new_instancemethod(_SnapTime.Schema_LoadShM, None, Schema)
Schema.__add__ = new_instancemethod(_SnapTime.Schema___add__, None, Schema)
Schema.__eq__ = new_instancemethod(_SnapTime.Schema___eq__, None, Schema)
Schema.__lt__ = new_instancemethod(_SnapTime.Schema___lt__, None, Schema)
Schema.GetMemUsed = new_instancemethod(_SnapTime.Schema_GetMemUsed, None, Schema)
Schema.GetMemSize = new_instancemethod(_SnapTime.Schema_GetMemSize, None, Schema)
Schema.Gen = new_instancemethod(_SnapTime.Schema_Gen, None, Schema)
Schema.GenExt = new_instancemethod(_SnapTime.Schema_GenExt, None, Schema)
Schema.IsExt = new_instancemethod(_SnapTime.Schema_IsExt, None, Schema)
Schema.Reserve = new_instancemethod(_SnapTime.Schema_Reserve, None, Schema)
Schema.Clr = new_instancemethod(_SnapTime.Schema_Clr, None, Schema)
Schema.Trunc = new_instancemethod(_SnapTime.Schema_Trunc, None, Schema)
Schema.Reduce = new_instancemethod(_SnapTime.Schema_Reduce, None, Schema)
Schema.Pack = new_instancemethod(_SnapTime.Schema_Pack, None, Schema)
Schema.MoveFrom = new_instancemethod(_SnapTime.Schema_MoveFrom, None, Schema)
Schema.CopyUniqueFrom = new_instancemethod(_SnapTime.Schema_CopyUniqueFrom, None, Schema)
Schema.Empty = new_instancemethod(_SnapTime.Schema_Empty, None, Schema)
Schema.Len = new_instancemethod(_SnapTime.Schema_Len, None, Schema)
Schema.Reserved = new_instancemethod(_SnapTime.Schema_Reserved, None, Schema)
Schema.Last = new_instancemethod(_SnapTime.Schema_Last, None, Schema)
Schema.LastValN = new_instancemethod(_SnapTime.Schema_LastValN, None, Schema)
Schema.LastLast = new_instancemethod(_SnapTime.Schema_LastLast, None, Schema)
Schema.GetRndVal = new_instancemethod(_SnapTime.Schema_GetRndVal, None, Schema)
Schema.BegI = new_instancemethod(_SnapTime.Schema_BegI, None, Schema)
Schema.begin = new_instancemethod(_SnapTime.Schema_begin, None, Schema)
Schema.EndI = new_instancemethod(_SnapTime.Schema_EndI, None, Schema)
Schema.end = new_instancemethod(_SnapTime.Schema_end, None, Schema)
Schema.GetI = new_instancemethod(_SnapTime.Schema_GetI, None, Schema)
Schema.Add = new_instancemethod(_SnapTime.Schema_Add, None, Schema)
Schema.AddMP = new_instancemethod(_SnapTime.Schema_AddMP, None, Schema)
Schema.MoveLastMP = new_instancemethod(_SnapTime.Schema_MoveLastMP, None, Schema)
Schema.AddV = new_instancemethod(_SnapTime.Schema_AddV, None, Schema)
Schema.AddSorted = new_instancemethod(_SnapTime.Schema_AddSorted, None, Schema)
Schema.AddBackSorted = new_instancemethod(_SnapTime.Schema_AddBackSorted, None, Schema)
Schema.AddMerged = new_instancemethod(_SnapTime.Schema_AddMerged, None, Schema)
Schema.AddVMerged = new_instancemethod(_SnapTime.Schema_AddVMerged, None, Schema)
Schema.AddUnique = new_instancemethod(_SnapTime.Schema_AddUnique, None, Schema)
Schema.GetVal = new_instancemethod(_SnapTime.Schema_GetVal, None, Schema)
Schema.SetVal = new_instancemethod(_SnapTime.Schema_SetVal, None, Schema)
Schema.GetSubValV = new_instancemethod(_SnapTime.Schema_GetSubValV, None, Schema)
Schema.Ins = new_instancemethod(_SnapTime.Schema_Ins, None, Schema)
Schema.Del = new_instancemethod(_SnapTime.Schema_Del, None, Schema)
Schema.DelLast = new_instancemethod(_SnapTime.Schema_DelLast, None, Schema)
Schema.DelIfIn = new_instancemethod(_SnapTime.Schema_DelIfIn, None, Schema)
Schema.DelAll = new_instancemethod(_SnapTime.Schema_DelAll, None, Schema)
Schema.PutAll = new_instancemethod(_SnapTime.Schema_PutAll, None, Schema)
Schema.Move = new_instancemethod(_SnapTime.Schema_Move, None, Schema)
Schema.Swap = new_instancemethod(_SnapTime.Schema_Swap, None, Schema)
Schema.Get32BitVector = new_instancemethod(_SnapTime.Schema_Get32BitVector, None, Schema)
Schema.NextPerm = new_instancemethod(_SnapTime.Schema_NextPerm, None, Schema)
Schema.PrevPerm = new_instancemethod(_SnapTime.Schema_PrevPerm, None, Schema)
Schema.GetPivotValN = new_instancemethod(_SnapTime.Schema_GetPivotValN, None, Schema)
Schema.BSort = new_instancemethod(_SnapTime.Schema_BSort, None, Schema)
Schema.ISort = new_instancemethod(_SnapTime.Schema_ISort, None, Schema)
Schema.Partition = new_instancemethod(_SnapTime.Schema_Partition, None, Schema)
Schema.QSort = new_instancemethod(_SnapTime.Schema_QSort, None, Schema)
Schema.Sort = new_instancemethod(_SnapTime.Schema_Sort, None, Schema)
Schema.IsSorted = new_instancemethod(_SnapTime.Schema_IsSorted, None, Schema)
Schema.Shuffle = new_instancemethod(_SnapTime.Schema_Shuffle, None, Schema)
Schema.Reverse = new_instancemethod(_SnapTime.Schema_Reverse, None, Schema)
Schema.Merge = new_instancemethod(_SnapTime.Schema_Merge, None, Schema)
Schema.Intrs = new_instancemethod(_SnapTime.Schema_Intrs, None, Schema)
Schema.Union = new_instancemethod(_SnapTime.Schema_Union, None, Schema)
Schema.Diff = new_instancemethod(_SnapTime.Schema_Diff, None, Schema)
Schema.IntrsLen = new_instancemethod(_SnapTime.Schema_IntrsLen, None, Schema)
Schema.UnionLen = new_instancemethod(_SnapTime.Schema_UnionLen, None, Schema)
Schema.Count = new_instancemethod(_SnapTime.Schema_Count, None, Schema)
Schema.SearchBin = new_instancemethod(_SnapTime.Schema_SearchBin, None, Schema)
Schema.SearchBinLeft = new_instancemethod(_SnapTime.Schema_SearchBinLeft, None, Schema)
Schema.SearchForw = new_instancemethod(_SnapTime.Schema_SearchForw, None, Schema)
Schema.SearchBack = new_instancemethod(_SnapTime.Schema_SearchBack, None, Schema)
Schema.SearchVForw = new_instancemethod(_SnapTime.Schema_SearchVForw, None, Schema)
Schema.IsIn = new_instancemethod(_SnapTime.Schema_IsIn, None, Schema)
Schema.IsInBin = new_instancemethod(_SnapTime.Schema_IsInBin, None, Schema)
Schema.GetDat = new_instancemethod(_SnapTime.Schema_GetDat, None, Schema)
Schema.GetAddDat = new_instancemethod(_SnapTime.Schema_GetAddDat, None, Schema)
Schema.GetMxValN = new_instancemethod(_SnapTime.Schema_GetMxValN, None, Schema)
Schema_swigregister = _SnapTime.Schema_swigregister
Schema_swigregister(Schema)

def Schema_SwapI(LVal, RVal):
    """
    Schema_SwapI(TStrTAttrPr LVal, TStrTAttrPr RVal)

    Parameters
    ----------
    LVal: TVec< TPair< TStr,enum TAttrType_ >,long long >::TIter
    RVal: TVec< TPair< TStr,enum TAttrType_ >,long long >::TIter

    """
    return _SnapTime.Schema_SwapI(LVal, RVal)

def Schema_GetV(*args):
    """
    GetV(TStrTAttrPr Val1) -> Schema

    Parameters
    ----------
    Val1: TPair< TStr,TAttrType > const &

    GetV(TStrTAttrPr Val1, TStrTAttrPr Val2) -> Schema

    Parameters
    ----------
    Val1: TPair< TStr,TAttrType > const &
    Val2: TPair< TStr,TAttrType > const &

    GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3) -> Schema

    Parameters
    ----------
    Val1: TPair< TStr,TAttrType > const &
    Val2: TPair< TStr,TAttrType > const &
    Val3: TPair< TStr,TAttrType > const &

    GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, TStrTAttrPr Val4) -> Schema

    Parameters
    ----------
    Val1: TPair< TStr,TAttrType > const &
    Val2: TPair< TStr,TAttrType > const &
    Val3: TPair< TStr,TAttrType > const &
    Val4: TPair< TStr,TAttrType > const &

    GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, TStrTAttrPr Val4, TStrTAttrPr Val5) -> Schema

    Parameters
    ----------
    Val1: TPair< TStr,TAttrType > const &
    Val2: TPair< TStr,TAttrType > const &
    Val3: TPair< TStr,TAttrType > const &
    Val4: TPair< TStr,TAttrType > const &
    Val5: TPair< TStr,TAttrType > const &

    GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6) -> Schema

    Parameters
    ----------
    Val1: TPair< TStr,TAttrType > const &
    Val2: TPair< TStr,TAttrType > const &
    Val3: TPair< TStr,TAttrType > const &
    Val4: TPair< TStr,TAttrType > const &
    Val5: TPair< TStr,TAttrType > const &
    Val6: TPair< TStr,TAttrType > const &

    GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6, TStrTAttrPr Val7) -> Schema

    Parameters
    ----------
    Val1: TPair< TStr,TAttrType > const &
    Val2: TPair< TStr,TAttrType > const &
    Val3: TPair< TStr,TAttrType > const &
    Val4: TPair< TStr,TAttrType > const &
    Val5: TPair< TStr,TAttrType > const &
    Val6: TPair< TStr,TAttrType > const &
    Val7: TPair< TStr,TAttrType > const &

    GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6, TStrTAttrPr Val7, TStrTAttrPr Val8) -> Schema

    Parameters
    ----------
    Val1: TPair< TStr,TAttrType > const &
    Val2: TPair< TStr,TAttrType > const &
    Val3: TPair< TStr,TAttrType > const &
    Val4: TPair< TStr,TAttrType > const &
    Val5: TPair< TStr,TAttrType > const &
    Val6: TPair< TStr,TAttrType > const &
    Val7: TPair< TStr,TAttrType > const &
    Val8: TPair< TStr,TAttrType > const &

    Schema_GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6, TStrTAttrPr Val7, TStrTAttrPr Val8, TStrTAttrPr Val9) -> Schema

    Parameters
    ----------
    Val1: TPair< TStr,TAttrType > const &
    Val2: TPair< TStr,TAttrType > const &
    Val3: TPair< TStr,TAttrType > const &
    Val4: TPair< TStr,TAttrType > const &
    Val5: TPair< TStr,TAttrType > const &
    Val6: TPair< TStr,TAttrType > const &
    Val7: TPair< TStr,TAttrType > const &
    Val8: TPair< TStr,TAttrType > const &
    Val9: TPair< TStr,TAttrType > const &

    """
    return _SnapTime.Schema_GetV(*args)

class TIntSet(object):
    """Proxy of C++ THashSet<(TInt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(THashSet<(TInt)> self) -> TIntSet
        __init__(THashSet<(TInt)> self, TIntSet Set) -> TIntSet

        Parameters
        ----------
        Set: THashSet< TInt > const &

        __init__(THashSet<(TInt)> self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntSet

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(THashSet<(TInt)> self, int const & ExpectVals) -> TIntSet

        Parameters
        ----------
        ExpectVals: int const &

        __init__(THashSet<(TInt)> self, TIntV KeyV) -> TIntSet

        Parameters
        ----------
        KeyV: TVec< TInt,int > const &

        __init__(THashSet<(TInt)> self, TSIn SIn) -> TIntSet

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TIntSet_swiginit(self, _SnapTime.new_TIntSet(*args))

    def Load(self, SIn):
        """
        Load(TIntSet self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TIntSet_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TIntSet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntSet_Save(self, SOut)


    def __eq__(self, Set):
        """
        __eq__(TIntSet self, TIntSet Set) -> bool

        Parameters
        ----------
        Set: THashSet< TInt > const &

        """
        return _SnapTime.TIntSet___eq__(self, Set)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntSet self) -> ::TSize

        Parameters
        ----------
        self: THashSet< TInt > const *

        """
        return _SnapTime.TIntSet_GetMemUsed(self)


    def BegI(self):
        """
        BegI(TIntSet self) -> TIntHSI

        Parameters
        ----------
        self: THashSet< TInt > const *

        """
        return _SnapTime.TIntSet_BegI(self)


    def EndI(self):
        """
        EndI(TIntSet self) -> TIntHSI

        Parameters
        ----------
        self: THashSet< TInt > const *

        """
        return _SnapTime.TIntSet_EndI(self)


    def begin(self):
        """
        begin(TIntSet self) -> TIntHSI

        Parameters
        ----------
        self: THashSet< TInt > const *

        """
        return _SnapTime.TIntSet_begin(self)


    def end(self):
        """
        end(TIntSet self) -> TIntHSI

        Parameters
        ----------
        self: THashSet< TInt > const *

        """
        return _SnapTime.TIntSet_end(self)


    def GetI(self, Key):
        """
        GetI(TIntSet self, TInt Key) -> TIntHSI

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntSet_GetI(self, Key)


    def Gen(self, ExpectVals):
        """
        Gen(TIntSet self, int const & ExpectVals)

        Parameters
        ----------
        ExpectVals: int const &

        """
        return _SnapTime.TIntSet_Gen(self, ExpectVals)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TIntSet self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: int const &

        Clr(TIntSet self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TIntSet self)

        Parameters
        ----------
        self: THashSet< TInt > *

        """
        return _SnapTime.TIntSet_Clr(self, DoDel, NoDelLim)


    def Empty(self):
        """
        Empty(TIntSet self) -> bool

        Parameters
        ----------
        self: THashSet< TInt > const *

        """
        return _SnapTime.TIntSet_Empty(self)


    def Len(self):
        """
        Len(TIntSet self) -> int

        Parameters
        ----------
        self: THashSet< TInt > const *

        """
        return _SnapTime.TIntSet_Len(self)


    def GetPorts(self):
        """
        GetPorts(TIntSet self) -> int

        Parameters
        ----------
        self: THashSet< TInt > const *

        """
        return _SnapTime.TIntSet_GetPorts(self)


    def IsAutoSize(self):
        """
        IsAutoSize(TIntSet self) -> bool

        Parameters
        ----------
        self: THashSet< TInt > const *

        """
        return _SnapTime.TIntSet_IsAutoSize(self)


    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TIntSet self) -> int

        Parameters
        ----------
        self: THashSet< TInt > const *

        """
        return _SnapTime.TIntSet_GetMxKeyIds(self)


    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TIntSet self) -> int

        Parameters
        ----------
        self: THashSet< TInt > const *

        """
        return _SnapTime.TIntSet_GetReservedKeyIds(self)


    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TIntSet self) -> bool

        Parameters
        ----------
        self: THashSet< TInt > const *

        """
        return _SnapTime.TIntSet_IsKeyIdEqKeyN(self)


    def AddKey(self, Key):
        """
        AddKey(TIntSet self, TInt Key) -> int

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntSet_AddKey(self, Key)


    def AddKeyV(self, KeyV):
        """
        AddKeyV(TIntSet self, TIntV KeyV)

        Parameters
        ----------
        KeyV: TVec< TInt,int > const &

        """
        return _SnapTime.TIntSet_AddKeyV(self, KeyV)


    def DelKey(self, Key):
        """
        DelKey(TIntSet self, TInt Key)

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntSet_DelKey(self, Key)


    def DelIfKey(self, Key):
        """
        DelIfKey(TIntSet self, TInt Key) -> bool

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntSet_DelIfKey(self, Key)


    def DelKeyId(self, KeyId):
        """
        DelKeyId(TIntSet self, int const & KeyId)

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntSet_DelKeyId(self, KeyId)


    def DelKeyIdV(self, KeyIdV):
        """
        DelKeyIdV(TIntSet self, TInt64V KeyIdV)

        Parameters
        ----------
        KeyIdV: TInt64V const &

        """
        return _SnapTime.TIntSet_DelKeyIdV(self, KeyIdV)


    def MarkDelKey(self, Key):
        """
        MarkDelKey(TIntSet self, TInt Key)

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntSet_MarkDelKey(self, Key)


    def MarkDelKeyId(self, KeyId):
        """
        MarkDelKeyId(TIntSet self, int const & KeyId)

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntSet_MarkDelKeyId(self, KeyId)


    def GetKey(self, KeyId):
        """
        GetKey(TIntSet self, int const & KeyId) -> TInt

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntSet_GetKey(self, KeyId)


    def GetKeyId(self, Key):
        """
        GetKeyId(TIntSet self, TInt Key) -> int

        Parameters
        ----------
        Key: TInt const &

        """
        return _SnapTime.TIntSet_GetKeyId(self, Key)


    def GetRndKeyId(self, Rnd):
        """
        GetRndKeyId(TIntSet self, TRnd Rnd) -> int

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TIntSet_GetRndKeyId(self, Rnd)


    def IsKey(self, *args):
        """
        IsKey(TIntSet self, TInt Key) -> bool

        Parameters
        ----------
        Key: TInt const &

        IsKey(TIntSet self, TInt Key, int & KeyId) -> bool

        Parameters
        ----------
        Key: TInt const &
        KeyId: int &

        """
        return _SnapTime.TIntSet_IsKey(self, *args)


    def IsKeyId(self, KeyId):
        """
        IsKeyId(TIntSet self, int const & KeyId) -> bool

        Parameters
        ----------
        KeyId: int const &

        """
        return _SnapTime.TIntSet_IsKeyId(self, KeyId)


    def FFirstKeyId(self):
        """
        FFirstKeyId(TIntSet self) -> int

        Parameters
        ----------
        self: THashSet< TInt > const *

        """
        return _SnapTime.TIntSet_FFirstKeyId(self)


    def FNextKeyId(self, KeyId):
        """
        FNextKeyId(TIntSet self, int & KeyId) -> bool

        Parameters
        ----------
        KeyId: int &

        """
        return _SnapTime.TIntSet_FNextKeyId(self, KeyId)


    def GetKeyV(self, KeyV):
        """
        GetKeyV(TIntSet self, TIntV KeyV)

        Parameters
        ----------
        KeyV: TVec< TInt,int > &

        """
        return _SnapTime.TIntSet_GetKeyV(self, KeyV)


    def Swap(self, Set):
        """
        Swap(TIntSet self, TIntSet Set)

        Parameters
        ----------
        Set: THashSet< TInt > &

        """
        return _SnapTime.TIntSet_Swap(self, Set)


    def Defrag(self):
        """
        Defrag(TIntSet self)

        Parameters
        ----------
        self: THashSet< TInt > *

        """
        return _SnapTime.TIntSet_Defrag(self)


    def Pack(self):
        """
        Pack(TIntSet self)

        Parameters
        ----------
        self: THashSet< TInt > *

        """
        return _SnapTime.TIntSet_Pack(self)


    def GetSet(*args):
        """
        GetSet(TInt Key1) -> TIntSet

        Parameters
        ----------
        Key1: TInt const &

        GetSet(TInt Key1, TInt Key2) -> TIntSet

        Parameters
        ----------
        Key1: TInt const &
        Key2: TInt const &

        GetSet(TInt Key1, TInt Key2, TInt Key3) -> TIntSet

        Parameters
        ----------
        Key1: TInt const &
        Key2: TInt const &
        Key3: TInt const &

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4) -> TIntSet

        Parameters
        ----------
        Key1: TInt const &
        Key2: TInt const &
        Key3: TInt const &
        Key4: TInt const &

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5) -> TIntSet

        Parameters
        ----------
        Key1: TInt const &
        Key2: TInt const &
        Key3: TInt const &
        Key4: TInt const &
        Key5: TInt const &

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6) -> TIntSet

        Parameters
        ----------
        Key1: TInt const &
        Key2: TInt const &
        Key3: TInt const &
        Key4: TInt const &
        Key5: TInt const &
        Key6: TInt const &

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6, TInt Key7) -> TIntSet

        Parameters
        ----------
        Key1: TInt const &
        Key2: TInt const &
        Key3: TInt const &
        Key4: TInt const &
        Key5: TInt const &
        Key6: TInt const &
        Key7: TInt const &

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6, TInt Key7, TInt Key8) -> TIntSet

        Parameters
        ----------
        Key1: TInt const &
        Key2: TInt const &
        Key3: TInt const &
        Key4: TInt const &
        Key5: TInt const &
        Key6: TInt const &
        Key7: TInt const &
        Key8: TInt const &

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6, TInt Key7, TInt Key8, TInt Key9) -> TIntSet

        Parameters
        ----------
        Key1: TInt const &
        Key2: TInt const &
        Key3: TInt const &
        Key4: TInt const &
        Key5: TInt const &
        Key6: TInt const &
        Key7: TInt const &
        Key8: TInt const &
        Key9: TInt const &

        """
        return _SnapTime.TIntSet_GetSet(*args)

    GetSet = staticmethod(GetSet)
    __swig_destroy__ = _SnapTime.delete_TIntSet
TIntSet.Load = new_instancemethod(_SnapTime.TIntSet_Load, None, TIntSet)
TIntSet.Save = new_instancemethod(_SnapTime.TIntSet_Save, None, TIntSet)
TIntSet.__eq__ = new_instancemethod(_SnapTime.TIntSet___eq__, None, TIntSet)
TIntSet.GetMemUsed = new_instancemethod(_SnapTime.TIntSet_GetMemUsed, None, TIntSet)
TIntSet.BegI = new_instancemethod(_SnapTime.TIntSet_BegI, None, TIntSet)
TIntSet.EndI = new_instancemethod(_SnapTime.TIntSet_EndI, None, TIntSet)
TIntSet.begin = new_instancemethod(_SnapTime.TIntSet_begin, None, TIntSet)
TIntSet.end = new_instancemethod(_SnapTime.TIntSet_end, None, TIntSet)
TIntSet.GetI = new_instancemethod(_SnapTime.TIntSet_GetI, None, TIntSet)
TIntSet.Gen = new_instancemethod(_SnapTime.TIntSet_Gen, None, TIntSet)
TIntSet.Clr = new_instancemethod(_SnapTime.TIntSet_Clr, None, TIntSet)
TIntSet.Empty = new_instancemethod(_SnapTime.TIntSet_Empty, None, TIntSet)
TIntSet.Len = new_instancemethod(_SnapTime.TIntSet_Len, None, TIntSet)
TIntSet.GetPorts = new_instancemethod(_SnapTime.TIntSet_GetPorts, None, TIntSet)
TIntSet.IsAutoSize = new_instancemethod(_SnapTime.TIntSet_IsAutoSize, None, TIntSet)
TIntSet.GetMxKeyIds = new_instancemethod(_SnapTime.TIntSet_GetMxKeyIds, None, TIntSet)
TIntSet.GetReservedKeyIds = new_instancemethod(_SnapTime.TIntSet_GetReservedKeyIds, None, TIntSet)
TIntSet.IsKeyIdEqKeyN = new_instancemethod(_SnapTime.TIntSet_IsKeyIdEqKeyN, None, TIntSet)
TIntSet.AddKey = new_instancemethod(_SnapTime.TIntSet_AddKey, None, TIntSet)
TIntSet.AddKeyV = new_instancemethod(_SnapTime.TIntSet_AddKeyV, None, TIntSet)
TIntSet.DelKey = new_instancemethod(_SnapTime.TIntSet_DelKey, None, TIntSet)
TIntSet.DelIfKey = new_instancemethod(_SnapTime.TIntSet_DelIfKey, None, TIntSet)
TIntSet.DelKeyId = new_instancemethod(_SnapTime.TIntSet_DelKeyId, None, TIntSet)
TIntSet.DelKeyIdV = new_instancemethod(_SnapTime.TIntSet_DelKeyIdV, None, TIntSet)
TIntSet.MarkDelKey = new_instancemethod(_SnapTime.TIntSet_MarkDelKey, None, TIntSet)
TIntSet.MarkDelKeyId = new_instancemethod(_SnapTime.TIntSet_MarkDelKeyId, None, TIntSet)
TIntSet.GetKey = new_instancemethod(_SnapTime.TIntSet_GetKey, None, TIntSet)
TIntSet.GetKeyId = new_instancemethod(_SnapTime.TIntSet_GetKeyId, None, TIntSet)
TIntSet.GetRndKeyId = new_instancemethod(_SnapTime.TIntSet_GetRndKeyId, None, TIntSet)
TIntSet.IsKey = new_instancemethod(_SnapTime.TIntSet_IsKey, None, TIntSet)
TIntSet.IsKeyId = new_instancemethod(_SnapTime.TIntSet_IsKeyId, None, TIntSet)
TIntSet.FFirstKeyId = new_instancemethod(_SnapTime.TIntSet_FFirstKeyId, None, TIntSet)
TIntSet.FNextKeyId = new_instancemethod(_SnapTime.TIntSet_FNextKeyId, None, TIntSet)
TIntSet.GetKeyV = new_instancemethod(_SnapTime.TIntSet_GetKeyV, None, TIntSet)
TIntSet.Swap = new_instancemethod(_SnapTime.TIntSet_Swap, None, TIntSet)
TIntSet.Defrag = new_instancemethod(_SnapTime.TIntSet_Defrag, None, TIntSet)
TIntSet.Pack = new_instancemethod(_SnapTime.TIntSet_Pack, None, TIntSet)
TIntSet_swigregister = _SnapTime.TIntSet_swigregister
TIntSet_swigregister(TIntSet)

def TIntSet_GetSet(*args):
    """
    GetSet(TInt Key1) -> TIntSet

    Parameters
    ----------
    Key1: TInt const &

    GetSet(TInt Key1, TInt Key2) -> TIntSet

    Parameters
    ----------
    Key1: TInt const &
    Key2: TInt const &

    GetSet(TInt Key1, TInt Key2, TInt Key3) -> TIntSet

    Parameters
    ----------
    Key1: TInt const &
    Key2: TInt const &
    Key3: TInt const &

    GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4) -> TIntSet

    Parameters
    ----------
    Key1: TInt const &
    Key2: TInt const &
    Key3: TInt const &
    Key4: TInt const &

    GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5) -> TIntSet

    Parameters
    ----------
    Key1: TInt const &
    Key2: TInt const &
    Key3: TInt const &
    Key4: TInt const &
    Key5: TInt const &

    GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6) -> TIntSet

    Parameters
    ----------
    Key1: TInt const &
    Key2: TInt const &
    Key3: TInt const &
    Key4: TInt const &
    Key5: TInt const &
    Key6: TInt const &

    GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6, TInt Key7) -> TIntSet

    Parameters
    ----------
    Key1: TInt const &
    Key2: TInt const &
    Key3: TInt const &
    Key4: TInt const &
    Key5: TInt const &
    Key6: TInt const &
    Key7: TInt const &

    GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6, TInt Key7, TInt Key8) -> TIntSet

    Parameters
    ----------
    Key1: TInt const &
    Key2: TInt const &
    Key3: TInt const &
    Key4: TInt const &
    Key5: TInt const &
    Key6: TInt const &
    Key7: TInt const &
    Key8: TInt const &

    TIntSet_GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6, TInt Key7, TInt Key8, TInt Key9) -> TIntSet

    Parameters
    ----------
    Key1: TInt const &
    Key2: TInt const &
    Key3: TInt const &
    Key4: TInt const &
    Key5: TInt const &
    Key6: TInt const &
    Key7: TInt const &
    Key8: TInt const &
    Key9: TInt const &

    """
    return _SnapTime.TIntSet_GetSet(*args)

class TIntHSI(object):
    """Proxy of C++ THashSetKeyI<(TInt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(THashSetKeyI<(TInt)> self) -> TIntHSI
        __init__(THashSetKeyI<(TInt)> self, TIntHSI _SetKeyI) -> TIntHSI

        Parameters
        ----------
        _SetKeyI: THashSetKeyI< TInt > const &

        __init__(THashSetKeyI<(TInt)> self, THashSetKeyI< TInt >::TSetKey const * _KeyI, THashSetKeyI< TInt >::TSetKey const * _EndI) -> TIntHSI

        Parameters
        ----------
        _KeyI: THashSetKeyI< TInt >::TSetKey const *
        _EndI: THashSetKeyI< TInt >::TSetKey const *

        """
        _SnapTime.TIntHSI_swiginit(self, _SnapTime.new_TIntHSI(*args))

    def __eq__(self, SetKeyI):
        """
        __eq__(TIntHSI self, TIntHSI SetKeyI) -> bool

        Parameters
        ----------
        SetKeyI: THashSetKeyI< TInt > const &

        """
        return _SnapTime.TIntHSI___eq__(self, SetKeyI)


    def __ne__(self, SetKeyI):
        """
        __ne__(TIntHSI self, TIntHSI SetKeyI) -> bool

        Parameters
        ----------
        SetKeyI: THashSetKeyI< TInt > const &

        """
        return _SnapTime.TIntHSI___ne__(self, SetKeyI)


    def __lt__(self, SetKeyI):
        """
        __lt__(TIntHSI self, TIntHSI SetKeyI) -> bool

        Parameters
        ----------
        SetKeyI: THashSetKeyI< TInt > const &

        """
        return _SnapTime.TIntHSI___lt__(self, SetKeyI)


    def __ref__(self):
        """
        __ref__(TIntHSI self) -> TInt

        Parameters
        ----------
        self: THashSetKeyI< TInt > const *

        """
        return _SnapTime.TIntHSI___ref__(self)


    def __call__(self):
        """
        __call__(TIntHSI self) -> TInt

        Parameters
        ----------
        self: THashSetKeyI< TInt > const *

        """
        return _SnapTime.TIntHSI___call__(self)


    def __deref__(self):
        """
        __deref__(TIntHSI self) -> TInt

        Parameters
        ----------
        self: THashSetKeyI< TInt > const *

        """
        return _SnapTime.TIntHSI___deref__(self)


    def Next(self):
        """
        Next(TIntHSI self) -> TIntHSI

        Parameters
        ----------
        self: THashSetKeyI< TInt > *

        """
        return _SnapTime.TIntHSI_Next(self)


    def IsEmpty(self):
        """
        IsEmpty(TIntHSI self) -> bool

        Parameters
        ----------
        self: THashSetKeyI< TInt > const *

        """
        return _SnapTime.TIntHSI_IsEmpty(self)


    def IsEnd(self):
        """
        IsEnd(TIntHSI self) -> bool

        Parameters
        ----------
        self: THashSetKeyI< TInt > const *

        """
        return _SnapTime.TIntHSI_IsEnd(self)


    def GetKey(self):
        """
        GetKey(TIntHSI self) -> TInt

        Parameters
        ----------
        self: THashSetKeyI< TInt > const *

        """
        return _SnapTime.TIntHSI_GetKey(self)

    __swig_destroy__ = _SnapTime.delete_TIntHSI
    Val = _swig_property(_SnapTime.TIntHSI_Val_get)
    Mn = _swig_property(_SnapTime.TIntHSI_Mn_get)
    Mx = _swig_property(_SnapTime.TIntHSI_Mx_get)
    Kilo = _swig_property(_SnapTime.TIntHSI_Kilo_get)
    Mega = _swig_property(_SnapTime.TIntHSI_Mega_get)
    Giga = _swig_property(_SnapTime.TIntHSI_Giga_get)
    Rnd = _swig_property(_SnapTime.TIntHSI_Rnd_get)

    def Save(self, SOut):
        """
        Save(TIntHSI self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TIntHSI_Save(self, SOut)


    def GetMemUsed(self):
        """
        GetMemUsed(TIntHSI self) -> int

        Parameters
        ----------
        self: THashSetKeyI< TInt > const *

        """
        return _SnapTime.TIntHSI_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntHSI self) -> int

        Parameters
        ----------
        self: THashSetKeyI< TInt > const *

        """
        return _SnapTime.TIntHSI_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntHSI self) -> int

        Parameters
        ----------
        self: THashSetKeyI< TInt > const *

        """
        return _SnapTime.TIntHSI_GetSecHashCd(self)

TIntHSI.__eq__ = new_instancemethod(_SnapTime.TIntHSI___eq__, None, TIntHSI)
TIntHSI.__ne__ = new_instancemethod(_SnapTime.TIntHSI___ne__, None, TIntHSI)
TIntHSI.__lt__ = new_instancemethod(_SnapTime.TIntHSI___lt__, None, TIntHSI)
TIntHSI.__ref__ = new_instancemethod(_SnapTime.TIntHSI___ref__, None, TIntHSI)
TIntHSI.__call__ = new_instancemethod(_SnapTime.TIntHSI___call__, None, TIntHSI)
TIntHSI.__deref__ = new_instancemethod(_SnapTime.TIntHSI___deref__, None, TIntHSI)
TIntHSI.Next = new_instancemethod(_SnapTime.TIntHSI_Next, None, TIntHSI)
TIntHSI.IsEmpty = new_instancemethod(_SnapTime.TIntHSI_IsEmpty, None, TIntHSI)
TIntHSI.IsEnd = new_instancemethod(_SnapTime.TIntHSI_IsEnd, None, TIntHSI)
TIntHSI.GetKey = new_instancemethod(_SnapTime.TIntHSI_GetKey, None, TIntHSI)
TIntHSI.Save = new_instancemethod(_SnapTime.TIntHSI_Save, None, TIntHSI)
TIntHSI.GetMemUsed = new_instancemethod(_SnapTime.TIntHSI_GetMemUsed, None, TIntHSI)
TIntHSI.GetPrimHashCd = new_instancemethod(_SnapTime.TIntHSI_GetPrimHashCd, None, TIntHSI)
TIntHSI.GetSecHashCd = new_instancemethod(_SnapTime.TIntHSI_GetSecHashCd, None, TIntHSI)
TIntHSI_swigregister = _SnapTime.TIntHSI_swigregister
TIntHSI_swigregister(TIntHSI)

class TInt64Set(object):
    """Proxy of C++ THashSet<(TInt64,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(THashSet<(TInt64,int64)> self) -> TInt64Set
        __init__(THashSet<(TInt64,int64)> self, TInt64Set Set) -> TInt64Set

        Parameters
        ----------
        Set: THashSet< TInt64,int64 > const &

        __init__(THashSet<(TInt64,int64)> self, long long const & ExpectVals, bool const & _AutoSizeP=False) -> TInt64Set

        Parameters
        ----------
        ExpectVals: long long const &
        _AutoSizeP: bool const &

        __init__(THashSet<(TInt64,int64)> self, long long const & ExpectVals) -> TInt64Set

        Parameters
        ----------
        ExpectVals: long long const &

        __init__(THashSet<(TInt64,int64)> self, TInt64V KeyV) -> TInt64Set

        Parameters
        ----------
        KeyV: TVec< TInt64,long long > const &

        __init__(THashSet<(TInt64,int64)> self, TSIn SIn) -> TInt64Set

        Parameters
        ----------
        SIn: TSIn &

        """
        _SnapTime.TInt64Set_swiginit(self, _SnapTime.new_TInt64Set(*args))

    def Load(self, SIn):
        """
        Load(TInt64Set self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TInt64Set_Load(self, SIn)


    def Save(self, SOut):
        """
        Save(TInt64Set self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TInt64Set_Save(self, SOut)


    def __eq__(self, Set):
        """
        __eq__(TInt64Set self, TInt64Set Set) -> bool

        Parameters
        ----------
        Set: THashSet< TInt64,int64 > const &

        """
        return _SnapTime.TInt64Set___eq__(self, Set)


    def GetMemUsed(self):
        """
        GetMemUsed(TInt64Set self) -> ::TSize

        Parameters
        ----------
        self: THashSet< TInt64,int64 > const *

        """
        return _SnapTime.TInt64Set_GetMemUsed(self)


    def BegI(self):
        """
        BegI(TInt64Set self) -> TInt64HSI

        Parameters
        ----------
        self: THashSet< TInt64,int64 > const *

        """
        return _SnapTime.TInt64Set_BegI(self)


    def EndI(self):
        """
        EndI(TInt64Set self) -> TInt64HSI

        Parameters
        ----------
        self: THashSet< TInt64,int64 > const *

        """
        return _SnapTime.TInt64Set_EndI(self)


    def begin(self):
        """
        begin(TInt64Set self) -> TInt64HSI

        Parameters
        ----------
        self: THashSet< TInt64,int64 > const *

        """
        return _SnapTime.TInt64Set_begin(self)


    def end(self):
        """
        end(TInt64Set self) -> TInt64HSI

        Parameters
        ----------
        self: THashSet< TInt64,int64 > const *

        """
        return _SnapTime.TInt64Set_end(self)


    def GetI(self, Key):
        """
        GetI(TInt64Set self, TInt64 Key) -> TInt64HSI

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TInt64Set_GetI(self, Key)


    def Gen(self, ExpectVals):
        """
        Gen(TInt64Set self, long long const & ExpectVals)

        Parameters
        ----------
        ExpectVals: long long const &

        """
        return _SnapTime.TInt64Set_Gen(self, ExpectVals)


    def Clr(self, DoDel=True, NoDelLim=-1):
        """
        Clr(TInt64Set self, bool const & DoDel=True, long long const & NoDelLim=-1)

        Parameters
        ----------
        DoDel: bool const &
        NoDelLim: long long const &

        Clr(TInt64Set self, bool const & DoDel=True)

        Parameters
        ----------
        DoDel: bool const &

        Clr(TInt64Set self)

        Parameters
        ----------
        self: THashSet< TInt64,int64 > *

        """
        return _SnapTime.TInt64Set_Clr(self, DoDel, NoDelLim)


    def Empty(self):
        """
        Empty(TInt64Set self) -> bool

        Parameters
        ----------
        self: THashSet< TInt64,int64 > const *

        """
        return _SnapTime.TInt64Set_Empty(self)


    def Len(self):
        """
        Len(TInt64Set self) -> long long

        Parameters
        ----------
        self: THashSet< TInt64,int64 > const *

        """
        return _SnapTime.TInt64Set_Len(self)


    def GetPorts(self):
        """
        GetPorts(TInt64Set self) -> long long

        Parameters
        ----------
        self: THashSet< TInt64,int64 > const *

        """
        return _SnapTime.TInt64Set_GetPorts(self)


    def IsAutoSize(self):
        """
        IsAutoSize(TInt64Set self) -> bool

        Parameters
        ----------
        self: THashSet< TInt64,int64 > const *

        """
        return _SnapTime.TInt64Set_IsAutoSize(self)


    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TInt64Set self) -> long long

        Parameters
        ----------
        self: THashSet< TInt64,int64 > const *

        """
        return _SnapTime.TInt64Set_GetMxKeyIds(self)


    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TInt64Set self) -> long long

        Parameters
        ----------
        self: THashSet< TInt64,int64 > const *

        """
        return _SnapTime.TInt64Set_GetReservedKeyIds(self)


    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TInt64Set self) -> bool

        Parameters
        ----------
        self: THashSet< TInt64,int64 > const *

        """
        return _SnapTime.TInt64Set_IsKeyIdEqKeyN(self)


    def AddKey(self, Key):
        """
        AddKey(TInt64Set self, TInt64 Key) -> long long

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TInt64Set_AddKey(self, Key)


    def AddKeyV(self, KeyV):
        """
        AddKeyV(TInt64Set self, TInt64V KeyV)

        Parameters
        ----------
        KeyV: TVec< TInt64,long long > const &

        """
        return _SnapTime.TInt64Set_AddKeyV(self, KeyV)


    def DelKey(self, Key):
        """
        DelKey(TInt64Set self, TInt64 Key)

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TInt64Set_DelKey(self, Key)


    def DelIfKey(self, Key):
        """
        DelIfKey(TInt64Set self, TInt64 Key) -> bool

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TInt64Set_DelIfKey(self, Key)


    def DelKeyId(self, KeyId):
        """
        DelKeyId(TInt64Set self, long long const & KeyId)

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TInt64Set_DelKeyId(self, KeyId)


    def DelKeyIdV(self, KeyIdV):
        """
        DelKeyIdV(TInt64Set self, TInt64V KeyIdV)

        Parameters
        ----------
        KeyIdV: TInt64V const &

        """
        return _SnapTime.TInt64Set_DelKeyIdV(self, KeyIdV)


    def MarkDelKey(self, Key):
        """
        MarkDelKey(TInt64Set self, TInt64 Key)

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TInt64Set_MarkDelKey(self, Key)


    def MarkDelKeyId(self, KeyId):
        """
        MarkDelKeyId(TInt64Set self, long long const & KeyId)

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TInt64Set_MarkDelKeyId(self, KeyId)


    def GetKey(self, KeyId):
        """
        GetKey(TInt64Set self, long long const & KeyId) -> TInt64

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TInt64Set_GetKey(self, KeyId)


    def GetKeyId(self, Key):
        """
        GetKeyId(TInt64Set self, TInt64 Key) -> long long

        Parameters
        ----------
        Key: TInt64 const &

        """
        return _SnapTime.TInt64Set_GetKeyId(self, Key)


    def GetRndKeyId(self, Rnd):
        """
        GetRndKeyId(TInt64Set self, TRnd Rnd) -> long long

        Parameters
        ----------
        Rnd: TRnd &

        """
        return _SnapTime.TInt64Set_GetRndKeyId(self, Rnd)


    def IsKey(self, *args):
        """
        IsKey(TInt64Set self, TInt64 Key) -> bool

        Parameters
        ----------
        Key: TInt64 const &

        IsKey(TInt64Set self, TInt64 Key, long long & KeyId) -> bool

        Parameters
        ----------
        Key: TInt64 const &
        KeyId: long long &

        """
        return _SnapTime.TInt64Set_IsKey(self, *args)


    def IsKeyId(self, KeyId):
        """
        IsKeyId(TInt64Set self, long long const & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long const &

        """
        return _SnapTime.TInt64Set_IsKeyId(self, KeyId)


    def FFirstKeyId(self):
        """
        FFirstKeyId(TInt64Set self) -> long long

        Parameters
        ----------
        self: THashSet< TInt64,int64 > const *

        """
        return _SnapTime.TInt64Set_FFirstKeyId(self)


    def FNextKeyId(self, KeyId):
        """
        FNextKeyId(TInt64Set self, long long & KeyId) -> bool

        Parameters
        ----------
        KeyId: long long &

        """
        return _SnapTime.TInt64Set_FNextKeyId(self, KeyId)


    def GetKeyV(self, KeyV):
        """
        GetKeyV(TInt64Set self, TInt64V KeyV)

        Parameters
        ----------
        KeyV: TVec< TInt64,long long > &

        """
        return _SnapTime.TInt64Set_GetKeyV(self, KeyV)


    def Swap(self, Set):
        """
        Swap(TInt64Set self, TInt64Set Set)

        Parameters
        ----------
        Set: THashSet< TInt64,int64 > &

        """
        return _SnapTime.TInt64Set_Swap(self, Set)


    def Defrag(self):
        """
        Defrag(TInt64Set self)

        Parameters
        ----------
        self: THashSet< TInt64,int64 > *

        """
        return _SnapTime.TInt64Set_Defrag(self)


    def Pack(self):
        """
        Pack(TInt64Set self)

        Parameters
        ----------
        self: THashSet< TInt64,int64 > *

        """
        return _SnapTime.TInt64Set_Pack(self)


    def GetSet(*args):
        """
        GetSet(TInt64 Key1) -> THashSet< TInt64 >

        Parameters
        ----------
        Key1: TInt64 const &

        GetSet(TInt64 Key1, TInt64 Key2) -> THashSet< TInt64 >

        Parameters
        ----------
        Key1: TInt64 const &
        Key2: TInt64 const &

        GetSet(TInt64 Key1, TInt64 Key2, TInt64 Key3) -> THashSet< TInt64 >

        Parameters
        ----------
        Key1: TInt64 const &
        Key2: TInt64 const &
        Key3: TInt64 const &

        GetSet(TInt64 Key1, TInt64 Key2, TInt64 Key3, TInt64 Key4) -> THashSet< TInt64 >

        Parameters
        ----------
        Key1: TInt64 const &
        Key2: TInt64 const &
        Key3: TInt64 const &
        Key4: TInt64 const &

        GetSet(TInt64 Key1, TInt64 Key2, TInt64 Key3, TInt64 Key4, TInt64 Key5) -> THashSet< TInt64 >

        Parameters
        ----------
        Key1: TInt64 const &
        Key2: TInt64 const &
        Key3: TInt64 const &
        Key4: TInt64 const &
        Key5: TInt64 const &

        GetSet(TInt64 Key1, TInt64 Key2, TInt64 Key3, TInt64 Key4, TInt64 Key5, TInt64 Key6) -> THashSet< TInt64 >

        Parameters
        ----------
        Key1: TInt64 const &
        Key2: TInt64 const &
        Key3: TInt64 const &
        Key4: TInt64 const &
        Key5: TInt64 const &
        Key6: TInt64 const &

        GetSet(TInt64 Key1, TInt64 Key2, TInt64 Key3, TInt64 Key4, TInt64 Key5, TInt64 Key6, TInt64 Key7) -> THashSet< TInt64 >

        Parameters
        ----------
        Key1: TInt64 const &
        Key2: TInt64 const &
        Key3: TInt64 const &
        Key4: TInt64 const &
        Key5: TInt64 const &
        Key6: TInt64 const &
        Key7: TInt64 const &

        GetSet(TInt64 Key1, TInt64 Key2, TInt64 Key3, TInt64 Key4, TInt64 Key5, TInt64 Key6, TInt64 Key7, TInt64 Key8) -> THashSet< TInt64 >

        Parameters
        ----------
        Key1: TInt64 const &
        Key2: TInt64 const &
        Key3: TInt64 const &
        Key4: TInt64 const &
        Key5: TInt64 const &
        Key6: TInt64 const &
        Key7: TInt64 const &
        Key8: TInt64 const &

        GetSet(TInt64 Key1, TInt64 Key2, TInt64 Key3, TInt64 Key4, TInt64 Key5, TInt64 Key6, TInt64 Key7, TInt64 Key8, TInt64 Key9) -> THashSet< TInt64 >

        Parameters
        ----------
        Key1: TInt64 const &
        Key2: TInt64 const &
        Key3: TInt64 const &
        Key4: TInt64 const &
        Key5: TInt64 const &
        Key6: TInt64 const &
        Key7: TInt64 const &
        Key8: TInt64 const &
        Key9: TInt64 const &

        """
        return _SnapTime.TInt64Set_GetSet(*args)

    GetSet = staticmethod(GetSet)
    __swig_destroy__ = _SnapTime.delete_TInt64Set
TInt64Set.Load = new_instancemethod(_SnapTime.TInt64Set_Load, None, TInt64Set)
TInt64Set.Save = new_instancemethod(_SnapTime.TInt64Set_Save, None, TInt64Set)
TInt64Set.__eq__ = new_instancemethod(_SnapTime.TInt64Set___eq__, None, TInt64Set)
TInt64Set.GetMemUsed = new_instancemethod(_SnapTime.TInt64Set_GetMemUsed, None, TInt64Set)
TInt64Set.BegI = new_instancemethod(_SnapTime.TInt64Set_BegI, None, TInt64Set)
TInt64Set.EndI = new_instancemethod(_SnapTime.TInt64Set_EndI, None, TInt64Set)
TInt64Set.begin = new_instancemethod(_SnapTime.TInt64Set_begin, None, TInt64Set)
TInt64Set.end = new_instancemethod(_SnapTime.TInt64Set_end, None, TInt64Set)
TInt64Set.GetI = new_instancemethod(_SnapTime.TInt64Set_GetI, None, TInt64Set)
TInt64Set.Gen = new_instancemethod(_SnapTime.TInt64Set_Gen, None, TInt64Set)
TInt64Set.Clr = new_instancemethod(_SnapTime.TInt64Set_Clr, None, TInt64Set)
TInt64Set.Empty = new_instancemethod(_SnapTime.TInt64Set_Empty, None, TInt64Set)
TInt64Set.Len = new_instancemethod(_SnapTime.TInt64Set_Len, None, TInt64Set)
TInt64Set.GetPorts = new_instancemethod(_SnapTime.TInt64Set_GetPorts, None, TInt64Set)
TInt64Set.IsAutoSize = new_instancemethod(_SnapTime.TInt64Set_IsAutoSize, None, TInt64Set)
TInt64Set.GetMxKeyIds = new_instancemethod(_SnapTime.TInt64Set_GetMxKeyIds, None, TInt64Set)
TInt64Set.GetReservedKeyIds = new_instancemethod(_SnapTime.TInt64Set_GetReservedKeyIds, None, TInt64Set)
TInt64Set.IsKeyIdEqKeyN = new_instancemethod(_SnapTime.TInt64Set_IsKeyIdEqKeyN, None, TInt64Set)
TInt64Set.AddKey = new_instancemethod(_SnapTime.TInt64Set_AddKey, None, TInt64Set)
TInt64Set.AddKeyV = new_instancemethod(_SnapTime.TInt64Set_AddKeyV, None, TInt64Set)
TInt64Set.DelKey = new_instancemethod(_SnapTime.TInt64Set_DelKey, None, TInt64Set)
TInt64Set.DelIfKey = new_instancemethod(_SnapTime.TInt64Set_DelIfKey, None, TInt64Set)
TInt64Set.DelKeyId = new_instancemethod(_SnapTime.TInt64Set_DelKeyId, None, TInt64Set)
TInt64Set.DelKeyIdV = new_instancemethod(_SnapTime.TInt64Set_DelKeyIdV, None, TInt64Set)
TInt64Set.MarkDelKey = new_instancemethod(_SnapTime.TInt64Set_MarkDelKey, None, TInt64Set)
TInt64Set.MarkDelKeyId = new_instancemethod(_SnapTime.TInt64Set_MarkDelKeyId, None, TInt64Set)
TInt64Set.GetKey = new_instancemethod(_SnapTime.TInt64Set_GetKey, None, TInt64Set)
TInt64Set.GetKeyId = new_instancemethod(_SnapTime.TInt64Set_GetKeyId, None, TInt64Set)
TInt64Set.GetRndKeyId = new_instancemethod(_SnapTime.TInt64Set_GetRndKeyId, None, TInt64Set)
TInt64Set.IsKey = new_instancemethod(_SnapTime.TInt64Set_IsKey, None, TInt64Set)
TInt64Set.IsKeyId = new_instancemethod(_SnapTime.TInt64Set_IsKeyId, None, TInt64Set)
TInt64Set.FFirstKeyId = new_instancemethod(_SnapTime.TInt64Set_FFirstKeyId, None, TInt64Set)
TInt64Set.FNextKeyId = new_instancemethod(_SnapTime.TInt64Set_FNextKeyId, None, TInt64Set)
TInt64Set.GetKeyV = new_instancemethod(_SnapTime.TInt64Set_GetKeyV, None, TInt64Set)
TInt64Set.Swap = new_instancemethod(_SnapTime.TInt64Set_Swap, None, TInt64Set)
TInt64Set.Defrag = new_instancemethod(_SnapTime.TInt64Set_Defrag, None, TInt64Set)
TInt64Set.Pack = new_instancemethod(_SnapTime.TInt64Set_Pack, None, TInt64Set)
TInt64Set_swigregister = _SnapTime.TInt64Set_swigregister
TInt64Set_swigregister(TInt64Set)

def TInt64Set_GetSet(*args):
    """
    GetSet(TInt64 Key1) -> THashSet< TInt64 >

    Parameters
    ----------
    Key1: TInt64 const &

    GetSet(TInt64 Key1, TInt64 Key2) -> THashSet< TInt64 >

    Parameters
    ----------
    Key1: TInt64 const &
    Key2: TInt64 const &

    GetSet(TInt64 Key1, TInt64 Key2, TInt64 Key3) -> THashSet< TInt64 >

    Parameters
    ----------
    Key1: TInt64 const &
    Key2: TInt64 const &
    Key3: TInt64 const &

    GetSet(TInt64 Key1, TInt64 Key2, TInt64 Key3, TInt64 Key4) -> THashSet< TInt64 >

    Parameters
    ----------
    Key1: TInt64 const &
    Key2: TInt64 const &
    Key3: TInt64 const &
    Key4: TInt64 const &

    GetSet(TInt64 Key1, TInt64 Key2, TInt64 Key3, TInt64 Key4, TInt64 Key5) -> THashSet< TInt64 >

    Parameters
    ----------
    Key1: TInt64 const &
    Key2: TInt64 const &
    Key3: TInt64 const &
    Key4: TInt64 const &
    Key5: TInt64 const &

    GetSet(TInt64 Key1, TInt64 Key2, TInt64 Key3, TInt64 Key4, TInt64 Key5, TInt64 Key6) -> THashSet< TInt64 >

    Parameters
    ----------
    Key1: TInt64 const &
    Key2: TInt64 const &
    Key3: TInt64 const &
    Key4: TInt64 const &
    Key5: TInt64 const &
    Key6: TInt64 const &

    GetSet(TInt64 Key1, TInt64 Key2, TInt64 Key3, TInt64 Key4, TInt64 Key5, TInt64 Key6, TInt64 Key7) -> THashSet< TInt64 >

    Parameters
    ----------
    Key1: TInt64 const &
    Key2: TInt64 const &
    Key3: TInt64 const &
    Key4: TInt64 const &
    Key5: TInt64 const &
    Key6: TInt64 const &
    Key7: TInt64 const &

    GetSet(TInt64 Key1, TInt64 Key2, TInt64 Key3, TInt64 Key4, TInt64 Key5, TInt64 Key6, TInt64 Key7, TInt64 Key8) -> THashSet< TInt64 >

    Parameters
    ----------
    Key1: TInt64 const &
    Key2: TInt64 const &
    Key3: TInt64 const &
    Key4: TInt64 const &
    Key5: TInt64 const &
    Key6: TInt64 const &
    Key7: TInt64 const &
    Key8: TInt64 const &

    TInt64Set_GetSet(TInt64 Key1, TInt64 Key2, TInt64 Key3, TInt64 Key4, TInt64 Key5, TInt64 Key6, TInt64 Key7, TInt64 Key8, TInt64 Key9) -> THashSet< TInt64 >

    Parameters
    ----------
    Key1: TInt64 const &
    Key2: TInt64 const &
    Key3: TInt64 const &
    Key4: TInt64 const &
    Key5: TInt64 const &
    Key6: TInt64 const &
    Key7: TInt64 const &
    Key8: TInt64 const &
    Key9: TInt64 const &

    """
    return _SnapTime.TInt64Set_GetSet(*args)

class TInt64HSI(object):
    """Proxy of C++ THashSetKeyI<(TInt64,int64)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(THashSetKeyI<(TInt64,int64)> self) -> TInt64HSI
        __init__(THashSetKeyI<(TInt64,int64)> self, TInt64HSI _SetKeyI) -> TInt64HSI

        Parameters
        ----------
        _SetKeyI: THashSetKeyI< TInt64,int64 > const &

        __init__(THashSetKeyI<(TInt64,int64)> self, THashSetKeyI< TInt64,long long >::TSetKey const * _KeyI, THashSetKeyI< TInt64,long long >::TSetKey const * _EndI) -> TInt64HSI

        Parameters
        ----------
        _KeyI: THashSetKeyI< TInt64,long long >::TSetKey const *
        _EndI: THashSetKeyI< TInt64,long long >::TSetKey const *

        """
        _SnapTime.TInt64HSI_swiginit(self, _SnapTime.new_TInt64HSI(*args))

    def __eq__(self, SetKeyI):
        """
        __eq__(TInt64HSI self, TInt64HSI SetKeyI) -> bool

        Parameters
        ----------
        SetKeyI: THashSetKeyI< TInt64,int64 > const &

        """
        return _SnapTime.TInt64HSI___eq__(self, SetKeyI)


    def __ne__(self, SetKeyI):
        """
        __ne__(TInt64HSI self, TInt64HSI SetKeyI) -> bool

        Parameters
        ----------
        SetKeyI: THashSetKeyI< TInt64,int64 > const &

        """
        return _SnapTime.TInt64HSI___ne__(self, SetKeyI)


    def __lt__(self, SetKeyI):
        """
        __lt__(TInt64HSI self, TInt64HSI SetKeyI) -> bool

        Parameters
        ----------
        SetKeyI: THashSetKeyI< TInt64,int64 > const &

        """
        return _SnapTime.TInt64HSI___lt__(self, SetKeyI)


    def __ref__(self):
        """
        __ref__(TInt64HSI self) -> TInt64

        Parameters
        ----------
        self: THashSetKeyI< TInt64,int64 > const *

        """
        return _SnapTime.TInt64HSI___ref__(self)


    def __call__(self):
        """
        __call__(TInt64HSI self) -> TInt64

        Parameters
        ----------
        self: THashSetKeyI< TInt64,int64 > const *

        """
        return _SnapTime.TInt64HSI___call__(self)


    def __deref__(self):
        """
        __deref__(TInt64HSI self) -> TInt64

        Parameters
        ----------
        self: THashSetKeyI< TInt64,int64 > const *

        """
        return _SnapTime.TInt64HSI___deref__(self)


    def Next(self):
        """
        Next(TInt64HSI self) -> TInt64HSI

        Parameters
        ----------
        self: THashSetKeyI< TInt64,int64 > *

        """
        return _SnapTime.TInt64HSI_Next(self)


    def IsEmpty(self):
        """
        IsEmpty(TInt64HSI self) -> bool

        Parameters
        ----------
        self: THashSetKeyI< TInt64,int64 > const *

        """
        return _SnapTime.TInt64HSI_IsEmpty(self)


    def IsEnd(self):
        """
        IsEnd(TInt64HSI self) -> bool

        Parameters
        ----------
        self: THashSetKeyI< TInt64,int64 > const *

        """
        return _SnapTime.TInt64HSI_IsEnd(self)


    def GetKey(self):
        """
        GetKey(TInt64HSI self) -> TInt64

        Parameters
        ----------
        self: THashSetKeyI< TInt64,int64 > const *

        """
        return _SnapTime.TInt64HSI_GetKey(self)

    __swig_destroy__ = _SnapTime.delete_TInt64HSI
    Val = _swig_property(_SnapTime.TInt64HSI_Val_get)
    Mn = _swig_property(_SnapTime.TInt64HSI_Mn_get)
    Mx = _swig_property(_SnapTime.TInt64HSI_Mx_get)
    Rnd = _swig_property(_SnapTime.TInt64HSI_Rnd_get)

    def Save(self, SOut):
        """
        Save(TInt64HSI self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TInt64HSI_Save(self, SOut)


    def GetMemUsed(self):
        """
        GetMemUsed(TInt64HSI self) -> int64

        Parameters
        ----------
        self: THashSetKeyI< TInt64,int64 > const *

        """
        return _SnapTime.TInt64HSI_GetMemUsed(self)


    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TInt64HSI self) -> int64

        Parameters
        ----------
        self: THashSetKeyI< TInt64,int64 > const *

        """
        return _SnapTime.TInt64HSI_GetPrimHashCd(self)


    def GetSecHashCd(self):
        """
        GetSecHashCd(TInt64HSI self) -> int64

        Parameters
        ----------
        self: THashSetKeyI< TInt64,int64 > const *

        """
        return _SnapTime.TInt64HSI_GetSecHashCd(self)

TInt64HSI.__eq__ = new_instancemethod(_SnapTime.TInt64HSI___eq__, None, TInt64HSI)
TInt64HSI.__ne__ = new_instancemethod(_SnapTime.TInt64HSI___ne__, None, TInt64HSI)
TInt64HSI.__lt__ = new_instancemethod(_SnapTime.TInt64HSI___lt__, None, TInt64HSI)
TInt64HSI.__ref__ = new_instancemethod(_SnapTime.TInt64HSI___ref__, None, TInt64HSI)
TInt64HSI.__call__ = new_instancemethod(_SnapTime.TInt64HSI___call__, None, TInt64HSI)
TInt64HSI.__deref__ = new_instancemethod(_SnapTime.TInt64HSI___deref__, None, TInt64HSI)
TInt64HSI.Next = new_instancemethod(_SnapTime.TInt64HSI_Next, None, TInt64HSI)
TInt64HSI.IsEmpty = new_instancemethod(_SnapTime.TInt64HSI_IsEmpty, None, TInt64HSI)
TInt64HSI.IsEnd = new_instancemethod(_SnapTime.TInt64HSI_IsEnd, None, TInt64HSI)
TInt64HSI.GetKey = new_instancemethod(_SnapTime.TInt64HSI_GetKey, None, TInt64HSI)
TInt64HSI.Save = new_instancemethod(_SnapTime.TInt64HSI_Save, None, TInt64HSI)
TInt64HSI.GetMemUsed = new_instancemethod(_SnapTime.TInt64HSI_GetMemUsed, None, TInt64HSI)
TInt64HSI.GetPrimHashCd = new_instancemethod(_SnapTime.TInt64HSI_GetPrimHashCd, None, TInt64HSI)
TInt64HSI.GetSecHashCd = new_instancemethod(_SnapTime.TInt64HSI_GetSecHashCd, None, TInt64HSI)
TInt64HSI_swigregister = _SnapTime.TInt64HSI_swigregister
TInt64HSI_swigregister(TInt64HSI)

class TNGraphNodeI(object):
    """Proxy of C++ TNGraphNodeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNGraphNodeI self) -> TNGraphNodeI
        __init__(TNGraphNodeI self, TNGraph::TNodeI const & NodeI) -> TNGraphNodeI

        Parameters
        ----------
        NodeI: TNGraph::TNodeI const &

        """
        _SnapTime.TNGraphNodeI_swiginit(self, _SnapTime.new_TNGraphNodeI(*args))

    def Next(self):
        """
        Next(TNGraphNodeI self) -> TNGraphNodeI

        Parameters
        ----------
        self: TNGraphNodeI *

        """
        return _SnapTime.TNGraphNodeI_Next(self)


    def __lt__(self, NodeI):
        """
        __lt__(TNGraphNodeI self, TNGraphNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TNGraphNodeI const &

        """
        return _SnapTime.TNGraphNodeI___lt__(self, NodeI)


    def __eq__(self, NodeI):
        """
        __eq__(TNGraphNodeI self, TNGraphNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TNGraphNodeI const &

        """
        return _SnapTime.TNGraphNodeI___eq__(self, NodeI)


    def GetNI(self):
        """
        GetNI(TNGraphNodeI self) -> TNGraph::TNodeI

        Parameters
        ----------
        self: TNGraphNodeI const *

        """
        return _SnapTime.TNGraphNodeI_GetNI(self)


    def GetId(self):
        """
        GetId(TNGraphNodeI self) -> int64

        Parameters
        ----------
        self: TNGraphNodeI const *

        """
        return _SnapTime.TNGraphNodeI_GetId(self)


    def GetDeg(self):
        """
        GetDeg(TNGraphNodeI self) -> int64

        Parameters
        ----------
        self: TNGraphNodeI const *

        """
        return _SnapTime.TNGraphNodeI_GetDeg(self)


    def GetInDeg(self):
        """
        GetInDeg(TNGraphNodeI self) -> int64

        Parameters
        ----------
        self: TNGraphNodeI const *

        """
        return _SnapTime.TNGraphNodeI_GetInDeg(self)


    def GetOutDeg(self):
        """
        GetOutDeg(TNGraphNodeI self) -> int64

        Parameters
        ----------
        self: TNGraphNodeI const *

        """
        return _SnapTime.TNGraphNodeI_GetOutDeg(self)


    def GetInNId(self, NodeN):
        """
        GetInNId(TNGraphNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TNGraphNodeI_GetInNId(self, NodeN)


    def GetOutNId(self, NodeN):
        """
        GetOutNId(TNGraphNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TNGraphNodeI_GetOutNId(self, NodeN)


    def GetNbrNId(self, NodeN):
        """
        GetNbrNId(TNGraphNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TNGraphNodeI_GetNbrNId(self, NodeN)


    def IsInNId(self, NId):
        """
        IsInNId(TNGraphNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNGraphNodeI_IsInNId(self, NId)


    def IsOutNId(self, NId):
        """
        IsOutNId(TNGraphNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNGraphNodeI_IsOutNId(self, NId)


    def IsNbrNId(self, NId):
        """
        IsNbrNId(TNGraphNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNGraphNodeI_IsNbrNId(self, NId)

    __swig_destroy__ = _SnapTime.delete_TNGraphNodeI
TNGraphNodeI.Next = new_instancemethod(_SnapTime.TNGraphNodeI_Next, None, TNGraphNodeI)
TNGraphNodeI.__lt__ = new_instancemethod(_SnapTime.TNGraphNodeI___lt__, None, TNGraphNodeI)
TNGraphNodeI.__eq__ = new_instancemethod(_SnapTime.TNGraphNodeI___eq__, None, TNGraphNodeI)
TNGraphNodeI.GetNI = new_instancemethod(_SnapTime.TNGraphNodeI_GetNI, None, TNGraphNodeI)
TNGraphNodeI.GetId = new_instancemethod(_SnapTime.TNGraphNodeI_GetId, None, TNGraphNodeI)
TNGraphNodeI.GetDeg = new_instancemethod(_SnapTime.TNGraphNodeI_GetDeg, None, TNGraphNodeI)
TNGraphNodeI.GetInDeg = new_instancemethod(_SnapTime.TNGraphNodeI_GetInDeg, None, TNGraphNodeI)
TNGraphNodeI.GetOutDeg = new_instancemethod(_SnapTime.TNGraphNodeI_GetOutDeg, None, TNGraphNodeI)
TNGraphNodeI.GetInNId = new_instancemethod(_SnapTime.TNGraphNodeI_GetInNId, None, TNGraphNodeI)
TNGraphNodeI.GetOutNId = new_instancemethod(_SnapTime.TNGraphNodeI_GetOutNId, None, TNGraphNodeI)
TNGraphNodeI.GetNbrNId = new_instancemethod(_SnapTime.TNGraphNodeI_GetNbrNId, None, TNGraphNodeI)
TNGraphNodeI.IsInNId = new_instancemethod(_SnapTime.TNGraphNodeI_IsInNId, None, TNGraphNodeI)
TNGraphNodeI.IsOutNId = new_instancemethod(_SnapTime.TNGraphNodeI_IsOutNId, None, TNGraphNodeI)
TNGraphNodeI.IsNbrNId = new_instancemethod(_SnapTime.TNGraphNodeI_IsNbrNId, None, TNGraphNodeI)
TNGraphNodeI_swigregister = _SnapTime.TNGraphNodeI_swigregister
TNGraphNodeI_swigregister(TNGraphNodeI)

class TDirNetNodeI(object):
    """Proxy of C++ TDirNetNodeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TDirNetNodeI self) -> TDirNetNodeI
        __init__(TDirNetNodeI self, TDirNet::TNodeI const & NodeI) -> TDirNetNodeI

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &

        """
        _SnapTime.TDirNetNodeI_swiginit(self, _SnapTime.new_TDirNetNodeI(*args))

    def Next(self):
        """
        Next(TDirNetNodeI self) -> TDirNetNodeI

        Parameters
        ----------
        self: TDirNetNodeI *

        """
        return _SnapTime.TDirNetNodeI_Next(self)


    def __lt__(self, NodeI):
        """
        __lt__(TDirNetNodeI self, TDirNetNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TDirNetNodeI const &

        """
        return _SnapTime.TDirNetNodeI___lt__(self, NodeI)


    def __eq__(self, NodeI):
        """
        __eq__(TDirNetNodeI self, TDirNetNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TDirNetNodeI const &

        """
        return _SnapTime.TDirNetNodeI___eq__(self, NodeI)


    def GetId(self):
        """
        GetId(TDirNetNodeI self) -> int64

        Parameters
        ----------
        self: TDirNetNodeI const *

        """
        return _SnapTime.TDirNetNodeI_GetId(self)


    def GetDeg(self):
        """
        GetDeg(TDirNetNodeI self) -> int64

        Parameters
        ----------
        self: TDirNetNodeI const *

        """
        return _SnapTime.TDirNetNodeI_GetDeg(self)


    def GetInDeg(self):
        """
        GetInDeg(TDirNetNodeI self) -> int64

        Parameters
        ----------
        self: TDirNetNodeI const *

        """
        return _SnapTime.TDirNetNodeI_GetInDeg(self)


    def GetOutDeg(self):
        """
        GetOutDeg(TDirNetNodeI self) -> int64

        Parameters
        ----------
        self: TDirNetNodeI const *

        """
        return _SnapTime.TDirNetNodeI_GetOutDeg(self)


    def GetInNId(self, NodeN):
        """
        GetInNId(TDirNetNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TDirNetNodeI_GetInNId(self, NodeN)


    def GetOutNId(self, NodeN):
        """
        GetOutNId(TDirNetNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TDirNetNodeI_GetOutNId(self, NodeN)


    def GetNbrNId(self, NodeN):
        """
        GetNbrNId(TDirNetNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TDirNetNodeI_GetNbrNId(self, NodeN)


    def IsInNId(self, NId):
        """
        IsInNId(TDirNetNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TDirNetNodeI_IsInNId(self, NId)


    def IsOutNId(self, NId):
        """
        IsOutNId(TDirNetNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TDirNetNodeI_IsOutNId(self, NId)


    def IsNbrNId(self, NId):
        """
        IsNbrNId(TDirNetNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TDirNetNodeI_IsNbrNId(self, NId)

    __swig_destroy__ = _SnapTime.delete_TDirNetNodeI
TDirNetNodeI.Next = new_instancemethod(_SnapTime.TDirNetNodeI_Next, None, TDirNetNodeI)
TDirNetNodeI.__lt__ = new_instancemethod(_SnapTime.TDirNetNodeI___lt__, None, TDirNetNodeI)
TDirNetNodeI.__eq__ = new_instancemethod(_SnapTime.TDirNetNodeI___eq__, None, TDirNetNodeI)
TDirNetNodeI.GetId = new_instancemethod(_SnapTime.TDirNetNodeI_GetId, None, TDirNetNodeI)
TDirNetNodeI.GetDeg = new_instancemethod(_SnapTime.TDirNetNodeI_GetDeg, None, TDirNetNodeI)
TDirNetNodeI.GetInDeg = new_instancemethod(_SnapTime.TDirNetNodeI_GetInDeg, None, TDirNetNodeI)
TDirNetNodeI.GetOutDeg = new_instancemethod(_SnapTime.TDirNetNodeI_GetOutDeg, None, TDirNetNodeI)
TDirNetNodeI.GetInNId = new_instancemethod(_SnapTime.TDirNetNodeI_GetInNId, None, TDirNetNodeI)
TDirNetNodeI.GetOutNId = new_instancemethod(_SnapTime.TDirNetNodeI_GetOutNId, None, TDirNetNodeI)
TDirNetNodeI.GetNbrNId = new_instancemethod(_SnapTime.TDirNetNodeI_GetNbrNId, None, TDirNetNodeI)
TDirNetNodeI.IsInNId = new_instancemethod(_SnapTime.TDirNetNodeI_IsInNId, None, TDirNetNodeI)
TDirNetNodeI.IsOutNId = new_instancemethod(_SnapTime.TDirNetNodeI_IsOutNId, None, TDirNetNodeI)
TDirNetNodeI.IsNbrNId = new_instancemethod(_SnapTime.TDirNetNodeI_IsNbrNId, None, TDirNetNodeI)
TDirNetNodeI_swigregister = _SnapTime.TDirNetNodeI_swigregister
TDirNetNodeI_swigregister(TDirNetNodeI)

class TNGraphMPNodeI(object):
    """Proxy of C++ TNGraphMPNodeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNGraphMPNodeI self) -> TNGraphMPNodeI
        __init__(TNGraphMPNodeI self, TNGraphMP::TNodeI const & NodeI) -> TNGraphMPNodeI

        Parameters
        ----------
        NodeI: TNGraphMP::TNodeI const &

        """
        _SnapTime.TNGraphMPNodeI_swiginit(self, _SnapTime.new_TNGraphMPNodeI(*args))

    def Next(self):
        """
        Next(TNGraphMPNodeI self) -> TNGraphMPNodeI

        Parameters
        ----------
        self: TNGraphMPNodeI *

        """
        return _SnapTime.TNGraphMPNodeI_Next(self)


    def __lt__(self, NodeI):
        """
        __lt__(TNGraphMPNodeI self, TNGraphMPNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TNGraphMPNodeI const &

        """
        return _SnapTime.TNGraphMPNodeI___lt__(self, NodeI)


    def __eq__(self, NodeI):
        """
        __eq__(TNGraphMPNodeI self, TNGraphMPNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TNGraphMPNodeI const &

        """
        return _SnapTime.TNGraphMPNodeI___eq__(self, NodeI)


    def GetId(self):
        """
        GetId(TNGraphMPNodeI self) -> int64

        Parameters
        ----------
        self: TNGraphMPNodeI const *

        """
        return _SnapTime.TNGraphMPNodeI_GetId(self)


    def GetDeg(self):
        """
        GetDeg(TNGraphMPNodeI self) -> int64

        Parameters
        ----------
        self: TNGraphMPNodeI const *

        """
        return _SnapTime.TNGraphMPNodeI_GetDeg(self)


    def GetInDeg(self):
        """
        GetInDeg(TNGraphMPNodeI self) -> int64

        Parameters
        ----------
        self: TNGraphMPNodeI const *

        """
        return _SnapTime.TNGraphMPNodeI_GetInDeg(self)


    def GetOutDeg(self):
        """
        GetOutDeg(TNGraphMPNodeI self) -> int64

        Parameters
        ----------
        self: TNGraphMPNodeI const *

        """
        return _SnapTime.TNGraphMPNodeI_GetOutDeg(self)


    def GetInNId(self, NodeN):
        """
        GetInNId(TNGraphMPNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TNGraphMPNodeI_GetInNId(self, NodeN)


    def GetOutNId(self, NodeN):
        """
        GetOutNId(TNGraphMPNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TNGraphMPNodeI_GetOutNId(self, NodeN)


    def GetNbrNId(self, NodeN):
        """
        GetNbrNId(TNGraphMPNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TNGraphMPNodeI_GetNbrNId(self, NodeN)


    def IsInNId(self, NId):
        """
        IsInNId(TNGraphMPNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNGraphMPNodeI_IsInNId(self, NId)


    def IsOutNId(self, NId):
        """
        IsOutNId(TNGraphMPNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNGraphMPNodeI_IsOutNId(self, NId)


    def IsNbrNId(self, NId):
        """
        IsNbrNId(TNGraphMPNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNGraphMPNodeI_IsNbrNId(self, NId)

    __swig_destroy__ = _SnapTime.delete_TNGraphMPNodeI
TNGraphMPNodeI.Next = new_instancemethod(_SnapTime.TNGraphMPNodeI_Next, None, TNGraphMPNodeI)
TNGraphMPNodeI.__lt__ = new_instancemethod(_SnapTime.TNGraphMPNodeI___lt__, None, TNGraphMPNodeI)
TNGraphMPNodeI.__eq__ = new_instancemethod(_SnapTime.TNGraphMPNodeI___eq__, None, TNGraphMPNodeI)
TNGraphMPNodeI.GetId = new_instancemethod(_SnapTime.TNGraphMPNodeI_GetId, None, TNGraphMPNodeI)
TNGraphMPNodeI.GetDeg = new_instancemethod(_SnapTime.TNGraphMPNodeI_GetDeg, None, TNGraphMPNodeI)
TNGraphMPNodeI.GetInDeg = new_instancemethod(_SnapTime.TNGraphMPNodeI_GetInDeg, None, TNGraphMPNodeI)
TNGraphMPNodeI.GetOutDeg = new_instancemethod(_SnapTime.TNGraphMPNodeI_GetOutDeg, None, TNGraphMPNodeI)
TNGraphMPNodeI.GetInNId = new_instancemethod(_SnapTime.TNGraphMPNodeI_GetInNId, None, TNGraphMPNodeI)
TNGraphMPNodeI.GetOutNId = new_instancemethod(_SnapTime.TNGraphMPNodeI_GetOutNId, None, TNGraphMPNodeI)
TNGraphMPNodeI.GetNbrNId = new_instancemethod(_SnapTime.TNGraphMPNodeI_GetNbrNId, None, TNGraphMPNodeI)
TNGraphMPNodeI.IsInNId = new_instancemethod(_SnapTime.TNGraphMPNodeI_IsInNId, None, TNGraphMPNodeI)
TNGraphMPNodeI.IsOutNId = new_instancemethod(_SnapTime.TNGraphMPNodeI_IsOutNId, None, TNGraphMPNodeI)
TNGraphMPNodeI.IsNbrNId = new_instancemethod(_SnapTime.TNGraphMPNodeI_IsNbrNId, None, TNGraphMPNodeI)
TNGraphMPNodeI_swigregister = _SnapTime.TNGraphMPNodeI_swigregister
TNGraphMPNodeI_swigregister(TNGraphMPNodeI)

class TNGraphEdgeI(object):
    """Proxy of C++ TNGraphEdgeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNGraphEdgeI self) -> TNGraphEdgeI
        __init__(TNGraphEdgeI self, TNGraph::TEdgeI const & EdgeI) -> TNGraphEdgeI

        Parameters
        ----------
        EdgeI: TNGraph::TEdgeI const &

        """
        _SnapTime.TNGraphEdgeI_swiginit(self, _SnapTime.new_TNGraphEdgeI(*args))

    def Next(self):
        """
        Next(TNGraphEdgeI self) -> TNGraphEdgeI

        Parameters
        ----------
        self: TNGraphEdgeI *

        """
        return _SnapTime.TNGraphEdgeI_Next(self)


    def __lt__(self, EdgeI):
        """
        __lt__(TNGraphEdgeI self, TNGraphEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TNGraphEdgeI const &

        """
        return _SnapTime.TNGraphEdgeI___lt__(self, EdgeI)


    def __eq__(self, EdgeI):
        """
        __eq__(TNGraphEdgeI self, TNGraphEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TNGraphEdgeI const &

        """
        return _SnapTime.TNGraphEdgeI___eq__(self, EdgeI)


    def GetEI(self):
        """
        GetEI(TNGraphEdgeI self) -> TNGraph::TEdgeI

        Parameters
        ----------
        self: TNGraphEdgeI const *

        """
        return _SnapTime.TNGraphEdgeI_GetEI(self)


    def GetId(self):
        """
        GetId(TNGraphEdgeI self) -> int64

        Parameters
        ----------
        self: TNGraphEdgeI const *

        """
        return _SnapTime.TNGraphEdgeI_GetId(self)


    def GetSrcNId(self):
        """
        GetSrcNId(TNGraphEdgeI self) -> int64

        Parameters
        ----------
        self: TNGraphEdgeI const *

        """
        return _SnapTime.TNGraphEdgeI_GetSrcNId(self)


    def GetDstNId(self):
        """
        GetDstNId(TNGraphEdgeI self) -> int64

        Parameters
        ----------
        self: TNGraphEdgeI const *

        """
        return _SnapTime.TNGraphEdgeI_GetDstNId(self)

    __swig_destroy__ = _SnapTime.delete_TNGraphEdgeI
TNGraphEdgeI.Next = new_instancemethod(_SnapTime.TNGraphEdgeI_Next, None, TNGraphEdgeI)
TNGraphEdgeI.__lt__ = new_instancemethod(_SnapTime.TNGraphEdgeI___lt__, None, TNGraphEdgeI)
TNGraphEdgeI.__eq__ = new_instancemethod(_SnapTime.TNGraphEdgeI___eq__, None, TNGraphEdgeI)
TNGraphEdgeI.GetEI = new_instancemethod(_SnapTime.TNGraphEdgeI_GetEI, None, TNGraphEdgeI)
TNGraphEdgeI.GetId = new_instancemethod(_SnapTime.TNGraphEdgeI_GetId, None, TNGraphEdgeI)
TNGraphEdgeI.GetSrcNId = new_instancemethod(_SnapTime.TNGraphEdgeI_GetSrcNId, None, TNGraphEdgeI)
TNGraphEdgeI.GetDstNId = new_instancemethod(_SnapTime.TNGraphEdgeI_GetDstNId, None, TNGraphEdgeI)
TNGraphEdgeI_swigregister = _SnapTime.TNGraphEdgeI_swigregister
TNGraphEdgeI_swigregister(TNGraphEdgeI)

class TDirNetEdgeI(object):
    """Proxy of C++ TDirNetEdgeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TDirNetEdgeI self) -> TDirNetEdgeI
        __init__(TDirNetEdgeI self, TDirNet::TEdgeI const & EdgeI) -> TDirNetEdgeI

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &

        """
        _SnapTime.TDirNetEdgeI_swiginit(self, _SnapTime.new_TDirNetEdgeI(*args))

    def Next(self):
        """
        Next(TDirNetEdgeI self) -> TDirNetEdgeI

        Parameters
        ----------
        self: TDirNetEdgeI *

        """
        return _SnapTime.TDirNetEdgeI_Next(self)


    def __lt__(self, EdgeI):
        """
        __lt__(TDirNetEdgeI self, TDirNetEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TDirNetEdgeI const &

        """
        return _SnapTime.TDirNetEdgeI___lt__(self, EdgeI)


    def __eq__(self, EdgeI):
        """
        __eq__(TDirNetEdgeI self, TDirNetEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TDirNetEdgeI const &

        """
        return _SnapTime.TDirNetEdgeI___eq__(self, EdgeI)


    def GetId(self):
        """
        GetId(TDirNetEdgeI self) -> int64

        Parameters
        ----------
        self: TDirNetEdgeI const *

        """
        return _SnapTime.TDirNetEdgeI_GetId(self)


    def GetSrcNId(self):
        """
        GetSrcNId(TDirNetEdgeI self) -> int64

        Parameters
        ----------
        self: TDirNetEdgeI const *

        """
        return _SnapTime.TDirNetEdgeI_GetSrcNId(self)


    def GetDstNId(self):
        """
        GetDstNId(TDirNetEdgeI self) -> int64

        Parameters
        ----------
        self: TDirNetEdgeI const *

        """
        return _SnapTime.TDirNetEdgeI_GetDstNId(self)

    __swig_destroy__ = _SnapTime.delete_TDirNetEdgeI
TDirNetEdgeI.Next = new_instancemethod(_SnapTime.TDirNetEdgeI_Next, None, TDirNetEdgeI)
TDirNetEdgeI.__lt__ = new_instancemethod(_SnapTime.TDirNetEdgeI___lt__, None, TDirNetEdgeI)
TDirNetEdgeI.__eq__ = new_instancemethod(_SnapTime.TDirNetEdgeI___eq__, None, TDirNetEdgeI)
TDirNetEdgeI.GetId = new_instancemethod(_SnapTime.TDirNetEdgeI_GetId, None, TDirNetEdgeI)
TDirNetEdgeI.GetSrcNId = new_instancemethod(_SnapTime.TDirNetEdgeI_GetSrcNId, None, TDirNetEdgeI)
TDirNetEdgeI.GetDstNId = new_instancemethod(_SnapTime.TDirNetEdgeI_GetDstNId, None, TDirNetEdgeI)
TDirNetEdgeI_swigregister = _SnapTime.TDirNetEdgeI_swigregister
TDirNetEdgeI_swigregister(TDirNetEdgeI)

class TNGraphMPEdgeI(object):
    """Proxy of C++ TNGraphMPEdgeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNGraphMPEdgeI self) -> TNGraphMPEdgeI
        __init__(TNGraphMPEdgeI self, TNGraphMP::TEdgeI const & EdgeI) -> TNGraphMPEdgeI

        Parameters
        ----------
        EdgeI: TNGraphMP::TEdgeI const &

        """
        _SnapTime.TNGraphMPEdgeI_swiginit(self, _SnapTime.new_TNGraphMPEdgeI(*args))

    def Next(self):
        """
        Next(TNGraphMPEdgeI self) -> TNGraphMPEdgeI

        Parameters
        ----------
        self: TNGraphMPEdgeI *

        """
        return _SnapTime.TNGraphMPEdgeI_Next(self)


    def __lt__(self, EdgeI):
        """
        __lt__(TNGraphMPEdgeI self, TNGraphMPEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TNGraphMPEdgeI const &

        """
        return _SnapTime.TNGraphMPEdgeI___lt__(self, EdgeI)


    def __eq__(self, EdgeI):
        """
        __eq__(TNGraphMPEdgeI self, TNGraphMPEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TNGraphMPEdgeI const &

        """
        return _SnapTime.TNGraphMPEdgeI___eq__(self, EdgeI)


    def GetId(self):
        """
        GetId(TNGraphMPEdgeI self) -> int64

        Parameters
        ----------
        self: TNGraphMPEdgeI const *

        """
        return _SnapTime.TNGraphMPEdgeI_GetId(self)


    def GetSrcNId(self):
        """
        GetSrcNId(TNGraphMPEdgeI self) -> int64

        Parameters
        ----------
        self: TNGraphMPEdgeI const *

        """
        return _SnapTime.TNGraphMPEdgeI_GetSrcNId(self)


    def GetDstNId(self):
        """
        GetDstNId(TNGraphMPEdgeI self) -> int64

        Parameters
        ----------
        self: TNGraphMPEdgeI const *

        """
        return _SnapTime.TNGraphMPEdgeI_GetDstNId(self)

    __swig_destroy__ = _SnapTime.delete_TNGraphMPEdgeI
TNGraphMPEdgeI.Next = new_instancemethod(_SnapTime.TNGraphMPEdgeI_Next, None, TNGraphMPEdgeI)
TNGraphMPEdgeI.__lt__ = new_instancemethod(_SnapTime.TNGraphMPEdgeI___lt__, None, TNGraphMPEdgeI)
TNGraphMPEdgeI.__eq__ = new_instancemethod(_SnapTime.TNGraphMPEdgeI___eq__, None, TNGraphMPEdgeI)
TNGraphMPEdgeI.GetId = new_instancemethod(_SnapTime.TNGraphMPEdgeI_GetId, None, TNGraphMPEdgeI)
TNGraphMPEdgeI.GetSrcNId = new_instancemethod(_SnapTime.TNGraphMPEdgeI_GetSrcNId, None, TNGraphMPEdgeI)
TNGraphMPEdgeI.GetDstNId = new_instancemethod(_SnapTime.TNGraphMPEdgeI_GetDstNId, None, TNGraphMPEdgeI)
TNGraphMPEdgeI_swigregister = _SnapTime.TNGraphMPEdgeI_swigregister
TNGraphMPEdgeI_swigregister(TNGraphMPEdgeI)

class TUNGraphNodeI(object):
    """Proxy of C++ TUNGraphNodeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TUNGraphNodeI self) -> TUNGraphNodeI
        __init__(TUNGraphNodeI self, TUNGraph::TNodeI const & NodeI) -> TUNGraphNodeI

        Parameters
        ----------
        NodeI: TUNGraph::TNodeI const &

        """
        _SnapTime.TUNGraphNodeI_swiginit(self, _SnapTime.new_TUNGraphNodeI(*args))

    def Next(self):
        """
        Next(TUNGraphNodeI self) -> TUNGraphNodeI

        Parameters
        ----------
        self: TUNGraphNodeI *

        """
        return _SnapTime.TUNGraphNodeI_Next(self)


    def __lt__(self, NodeI):
        """
        __lt__(TUNGraphNodeI self, TUNGraphNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TUNGraphNodeI const &

        """
        return _SnapTime.TUNGraphNodeI___lt__(self, NodeI)


    def __eq__(self, NodeI):
        """
        __eq__(TUNGraphNodeI self, TUNGraphNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TUNGraphNodeI const &

        """
        return _SnapTime.TUNGraphNodeI___eq__(self, NodeI)


    def GetNI(self):
        """
        GetNI(TUNGraphNodeI self) -> TUNGraph::TNodeI

        Parameters
        ----------
        self: TUNGraphNodeI const *

        """
        return _SnapTime.TUNGraphNodeI_GetNI(self)


    def GetId(self):
        """
        GetId(TUNGraphNodeI self) -> int64

        Parameters
        ----------
        self: TUNGraphNodeI const *

        """
        return _SnapTime.TUNGraphNodeI_GetId(self)


    def GetDeg(self):
        """
        GetDeg(TUNGraphNodeI self) -> int64

        Parameters
        ----------
        self: TUNGraphNodeI const *

        """
        return _SnapTime.TUNGraphNodeI_GetDeg(self)


    def GetInDeg(self):
        """
        GetInDeg(TUNGraphNodeI self) -> int64

        Parameters
        ----------
        self: TUNGraphNodeI const *

        """
        return _SnapTime.TUNGraphNodeI_GetInDeg(self)


    def GetOutDeg(self):
        """
        GetOutDeg(TUNGraphNodeI self) -> int64

        Parameters
        ----------
        self: TUNGraphNodeI const *

        """
        return _SnapTime.TUNGraphNodeI_GetOutDeg(self)


    def GetInNId(self, NodeN):
        """
        GetInNId(TUNGraphNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TUNGraphNodeI_GetInNId(self, NodeN)


    def GetOutNId(self, NodeN):
        """
        GetOutNId(TUNGraphNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TUNGraphNodeI_GetOutNId(self, NodeN)


    def GetNbrNId(self, NodeN):
        """
        GetNbrNId(TUNGraphNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TUNGraphNodeI_GetNbrNId(self, NodeN)


    def IsInNId(self, NId):
        """
        IsInNId(TUNGraphNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TUNGraphNodeI_IsInNId(self, NId)


    def IsOutNId(self, NId):
        """
        IsOutNId(TUNGraphNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TUNGraphNodeI_IsOutNId(self, NId)


    def IsNbrNId(self, NId):
        """
        IsNbrNId(TUNGraphNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TUNGraphNodeI_IsNbrNId(self, NId)

    __swig_destroy__ = _SnapTime.delete_TUNGraphNodeI
TUNGraphNodeI.Next = new_instancemethod(_SnapTime.TUNGraphNodeI_Next, None, TUNGraphNodeI)
TUNGraphNodeI.__lt__ = new_instancemethod(_SnapTime.TUNGraphNodeI___lt__, None, TUNGraphNodeI)
TUNGraphNodeI.__eq__ = new_instancemethod(_SnapTime.TUNGraphNodeI___eq__, None, TUNGraphNodeI)
TUNGraphNodeI.GetNI = new_instancemethod(_SnapTime.TUNGraphNodeI_GetNI, None, TUNGraphNodeI)
TUNGraphNodeI.GetId = new_instancemethod(_SnapTime.TUNGraphNodeI_GetId, None, TUNGraphNodeI)
TUNGraphNodeI.GetDeg = new_instancemethod(_SnapTime.TUNGraphNodeI_GetDeg, None, TUNGraphNodeI)
TUNGraphNodeI.GetInDeg = new_instancemethod(_SnapTime.TUNGraphNodeI_GetInDeg, None, TUNGraphNodeI)
TUNGraphNodeI.GetOutDeg = new_instancemethod(_SnapTime.TUNGraphNodeI_GetOutDeg, None, TUNGraphNodeI)
TUNGraphNodeI.GetInNId = new_instancemethod(_SnapTime.TUNGraphNodeI_GetInNId, None, TUNGraphNodeI)
TUNGraphNodeI.GetOutNId = new_instancemethod(_SnapTime.TUNGraphNodeI_GetOutNId, None, TUNGraphNodeI)
TUNGraphNodeI.GetNbrNId = new_instancemethod(_SnapTime.TUNGraphNodeI_GetNbrNId, None, TUNGraphNodeI)
TUNGraphNodeI.IsInNId = new_instancemethod(_SnapTime.TUNGraphNodeI_IsInNId, None, TUNGraphNodeI)
TUNGraphNodeI.IsOutNId = new_instancemethod(_SnapTime.TUNGraphNodeI_IsOutNId, None, TUNGraphNodeI)
TUNGraphNodeI.IsNbrNId = new_instancemethod(_SnapTime.TUNGraphNodeI_IsNbrNId, None, TUNGraphNodeI)
TUNGraphNodeI_swigregister = _SnapTime.TUNGraphNodeI_swigregister
TUNGraphNodeI_swigregister(TUNGraphNodeI)

class TUndirNetNodeI(object):
    """Proxy of C++ TUndirNetNodeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TUndirNetNodeI self) -> TUndirNetNodeI
        __init__(TUndirNetNodeI self, TUndirNet::TNodeI const & NodeI) -> TUndirNetNodeI

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &

        """
        _SnapTime.TUndirNetNodeI_swiginit(self, _SnapTime.new_TUndirNetNodeI(*args))

    def Next(self):
        """
        Next(TUndirNetNodeI self) -> TUndirNetNodeI

        Parameters
        ----------
        self: TUndirNetNodeI *

        """
        return _SnapTime.TUndirNetNodeI_Next(self)


    def __lt__(self, NodeI):
        """
        __lt__(TUndirNetNodeI self, TUndirNetNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TUndirNetNodeI const &

        """
        return _SnapTime.TUndirNetNodeI___lt__(self, NodeI)


    def __eq__(self, NodeI):
        """
        __eq__(TUndirNetNodeI self, TUndirNetNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TUndirNetNodeI const &

        """
        return _SnapTime.TUndirNetNodeI___eq__(self, NodeI)


    def GetId(self):
        """
        GetId(TUndirNetNodeI self) -> int64

        Parameters
        ----------
        self: TUndirNetNodeI const *

        """
        return _SnapTime.TUndirNetNodeI_GetId(self)


    def GetDeg(self):
        """
        GetDeg(TUndirNetNodeI self) -> int64

        Parameters
        ----------
        self: TUndirNetNodeI const *

        """
        return _SnapTime.TUndirNetNodeI_GetDeg(self)


    def GetInDeg(self):
        """
        GetInDeg(TUndirNetNodeI self) -> int64

        Parameters
        ----------
        self: TUndirNetNodeI const *

        """
        return _SnapTime.TUndirNetNodeI_GetInDeg(self)


    def GetOutDeg(self):
        """
        GetOutDeg(TUndirNetNodeI self) -> int64

        Parameters
        ----------
        self: TUndirNetNodeI const *

        """
        return _SnapTime.TUndirNetNodeI_GetOutDeg(self)


    def GetInNId(self, NodeN):
        """
        GetInNId(TUndirNetNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TUndirNetNodeI_GetInNId(self, NodeN)


    def GetOutNId(self, NodeN):
        """
        GetOutNId(TUndirNetNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TUndirNetNodeI_GetOutNId(self, NodeN)


    def GetNbrNId(self, NodeN):
        """
        GetNbrNId(TUndirNetNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TUndirNetNodeI_GetNbrNId(self, NodeN)


    def IsInNId(self, NId):
        """
        IsInNId(TUndirNetNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TUndirNetNodeI_IsInNId(self, NId)


    def IsOutNId(self, NId):
        """
        IsOutNId(TUndirNetNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TUndirNetNodeI_IsOutNId(self, NId)


    def IsNbrNId(self, NId):
        """
        IsNbrNId(TUndirNetNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TUndirNetNodeI_IsNbrNId(self, NId)

    __swig_destroy__ = _SnapTime.delete_TUndirNetNodeI
TUndirNetNodeI.Next = new_instancemethod(_SnapTime.TUndirNetNodeI_Next, None, TUndirNetNodeI)
TUndirNetNodeI.__lt__ = new_instancemethod(_SnapTime.TUndirNetNodeI___lt__, None, TUndirNetNodeI)
TUndirNetNodeI.__eq__ = new_instancemethod(_SnapTime.TUndirNetNodeI___eq__, None, TUndirNetNodeI)
TUndirNetNodeI.GetId = new_instancemethod(_SnapTime.TUndirNetNodeI_GetId, None, TUndirNetNodeI)
TUndirNetNodeI.GetDeg = new_instancemethod(_SnapTime.TUndirNetNodeI_GetDeg, None, TUndirNetNodeI)
TUndirNetNodeI.GetInDeg = new_instancemethod(_SnapTime.TUndirNetNodeI_GetInDeg, None, TUndirNetNodeI)
TUndirNetNodeI.GetOutDeg = new_instancemethod(_SnapTime.TUndirNetNodeI_GetOutDeg, None, TUndirNetNodeI)
TUndirNetNodeI.GetInNId = new_instancemethod(_SnapTime.TUndirNetNodeI_GetInNId, None, TUndirNetNodeI)
TUndirNetNodeI.GetOutNId = new_instancemethod(_SnapTime.TUndirNetNodeI_GetOutNId, None, TUndirNetNodeI)
TUndirNetNodeI.GetNbrNId = new_instancemethod(_SnapTime.TUndirNetNodeI_GetNbrNId, None, TUndirNetNodeI)
TUndirNetNodeI.IsInNId = new_instancemethod(_SnapTime.TUndirNetNodeI_IsInNId, None, TUndirNetNodeI)
TUndirNetNodeI.IsOutNId = new_instancemethod(_SnapTime.TUndirNetNodeI_IsOutNId, None, TUndirNetNodeI)
TUndirNetNodeI.IsNbrNId = new_instancemethod(_SnapTime.TUndirNetNodeI_IsNbrNId, None, TUndirNetNodeI)
TUndirNetNodeI_swigregister = _SnapTime.TUndirNetNodeI_swigregister
TUndirNetNodeI_swigregister(TUndirNetNodeI)

class TUNGraphEdgeI(object):
    """Proxy of C++ TUNGraphEdgeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TUNGraphEdgeI self) -> TUNGraphEdgeI
        __init__(TUNGraphEdgeI self, TUNGraph::TEdgeI const & EdgeI) -> TUNGraphEdgeI

        Parameters
        ----------
        EdgeI: TUNGraph::TEdgeI const &

        """
        _SnapTime.TUNGraphEdgeI_swiginit(self, _SnapTime.new_TUNGraphEdgeI(*args))

    def Next(self):
        """
        Next(TUNGraphEdgeI self) -> TUNGraphEdgeI

        Parameters
        ----------
        self: TUNGraphEdgeI *

        """
        return _SnapTime.TUNGraphEdgeI_Next(self)


    def __lt__(self, EdgeI):
        """
        __lt__(TUNGraphEdgeI self, TUNGraphEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TUNGraphEdgeI const &

        """
        return _SnapTime.TUNGraphEdgeI___lt__(self, EdgeI)


    def __eq__(self, EdgeI):
        """
        __eq__(TUNGraphEdgeI self, TUNGraphEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TUNGraphEdgeI const &

        """
        return _SnapTime.TUNGraphEdgeI___eq__(self, EdgeI)


    def GetEI(self):
        """
        GetEI(TUNGraphEdgeI self) -> TUNGraph::TEdgeI

        Parameters
        ----------
        self: TUNGraphEdgeI const *

        """
        return _SnapTime.TUNGraphEdgeI_GetEI(self)


    def GetId(self):
        """
        GetId(TUNGraphEdgeI self) -> int64

        Parameters
        ----------
        self: TUNGraphEdgeI const *

        """
        return _SnapTime.TUNGraphEdgeI_GetId(self)


    def GetSrcNId(self):
        """
        GetSrcNId(TUNGraphEdgeI self) -> int64

        Parameters
        ----------
        self: TUNGraphEdgeI const *

        """
        return _SnapTime.TUNGraphEdgeI_GetSrcNId(self)


    def GetDstNId(self):
        """
        GetDstNId(TUNGraphEdgeI self) -> int64

        Parameters
        ----------
        self: TUNGraphEdgeI const *

        """
        return _SnapTime.TUNGraphEdgeI_GetDstNId(self)

    __swig_destroy__ = _SnapTime.delete_TUNGraphEdgeI
TUNGraphEdgeI.Next = new_instancemethod(_SnapTime.TUNGraphEdgeI_Next, None, TUNGraphEdgeI)
TUNGraphEdgeI.__lt__ = new_instancemethod(_SnapTime.TUNGraphEdgeI___lt__, None, TUNGraphEdgeI)
TUNGraphEdgeI.__eq__ = new_instancemethod(_SnapTime.TUNGraphEdgeI___eq__, None, TUNGraphEdgeI)
TUNGraphEdgeI.GetEI = new_instancemethod(_SnapTime.TUNGraphEdgeI_GetEI, None, TUNGraphEdgeI)
TUNGraphEdgeI.GetId = new_instancemethod(_SnapTime.TUNGraphEdgeI_GetId, None, TUNGraphEdgeI)
TUNGraphEdgeI.GetSrcNId = new_instancemethod(_SnapTime.TUNGraphEdgeI_GetSrcNId, None, TUNGraphEdgeI)
TUNGraphEdgeI.GetDstNId = new_instancemethod(_SnapTime.TUNGraphEdgeI_GetDstNId, None, TUNGraphEdgeI)
TUNGraphEdgeI_swigregister = _SnapTime.TUNGraphEdgeI_swigregister
TUNGraphEdgeI_swigregister(TUNGraphEdgeI)

class TUndirNetEdgeI(object):
    """Proxy of C++ TUndirNetEdgeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TUndirNetEdgeI self) -> TUndirNetEdgeI
        __init__(TUndirNetEdgeI self, TUndirNet::TEdgeI const & EdgeI) -> TUndirNetEdgeI

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &

        """
        _SnapTime.TUndirNetEdgeI_swiginit(self, _SnapTime.new_TUndirNetEdgeI(*args))

    def Next(self):
        """
        Next(TUndirNetEdgeI self) -> TUndirNetEdgeI

        Parameters
        ----------
        self: TUndirNetEdgeI *

        """
        return _SnapTime.TUndirNetEdgeI_Next(self)


    def __lt__(self, EdgeI):
        """
        __lt__(TUndirNetEdgeI self, TUndirNetEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TUndirNetEdgeI const &

        """
        return _SnapTime.TUndirNetEdgeI___lt__(self, EdgeI)


    def __eq__(self, EdgeI):
        """
        __eq__(TUndirNetEdgeI self, TUndirNetEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TUndirNetEdgeI const &

        """
        return _SnapTime.TUndirNetEdgeI___eq__(self, EdgeI)


    def GetId(self):
        """
        GetId(TUndirNetEdgeI self) -> int64

        Parameters
        ----------
        self: TUndirNetEdgeI const *

        """
        return _SnapTime.TUndirNetEdgeI_GetId(self)


    def GetSrcNId(self):
        """
        GetSrcNId(TUndirNetEdgeI self) -> int64

        Parameters
        ----------
        self: TUndirNetEdgeI const *

        """
        return _SnapTime.TUndirNetEdgeI_GetSrcNId(self)


    def GetDstNId(self):
        """
        GetDstNId(TUndirNetEdgeI self) -> int64

        Parameters
        ----------
        self: TUndirNetEdgeI const *

        """
        return _SnapTime.TUndirNetEdgeI_GetDstNId(self)

    __swig_destroy__ = _SnapTime.delete_TUndirNetEdgeI
TUndirNetEdgeI.Next = new_instancemethod(_SnapTime.TUndirNetEdgeI_Next, None, TUndirNetEdgeI)
TUndirNetEdgeI.__lt__ = new_instancemethod(_SnapTime.TUndirNetEdgeI___lt__, None, TUndirNetEdgeI)
TUndirNetEdgeI.__eq__ = new_instancemethod(_SnapTime.TUndirNetEdgeI___eq__, None, TUndirNetEdgeI)
TUndirNetEdgeI.GetId = new_instancemethod(_SnapTime.TUndirNetEdgeI_GetId, None, TUndirNetEdgeI)
TUndirNetEdgeI.GetSrcNId = new_instancemethod(_SnapTime.TUndirNetEdgeI_GetSrcNId, None, TUndirNetEdgeI)
TUndirNetEdgeI.GetDstNId = new_instancemethod(_SnapTime.TUndirNetEdgeI_GetDstNId, None, TUndirNetEdgeI)
TUndirNetEdgeI_swigregister = _SnapTime.TUndirNetEdgeI_swigregister
TUndirNetEdgeI_swigregister(TUndirNetEdgeI)

class TNEANetNodeI(object):
    """Proxy of C++ TNEANetNodeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNEANetNodeI self) -> TNEANetNodeI
        __init__(TNEANetNodeI self, TNEANet::TNodeI const & NodeI) -> TNEANetNodeI

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &

        """
        _SnapTime.TNEANetNodeI_swiginit(self, _SnapTime.new_TNEANetNodeI(*args))

    def Next(self):
        """
        Next(TNEANetNodeI self) -> TNEANetNodeI

        Parameters
        ----------
        self: TNEANetNodeI *

        """
        return _SnapTime.TNEANetNodeI_Next(self)


    def __lt__(self, NodeI):
        """
        __lt__(TNEANetNodeI self, TNEANetNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TNEANetNodeI const &

        """
        return _SnapTime.TNEANetNodeI___lt__(self, NodeI)


    def __eq__(self, NodeI):
        """
        __eq__(TNEANetNodeI self, TNEANetNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TNEANetNodeI const &

        """
        return _SnapTime.TNEANetNodeI___eq__(self, NodeI)


    def GetNI(self):
        """
        GetNI(TNEANetNodeI self) -> TNEANet::TNodeI

        Parameters
        ----------
        self: TNEANetNodeI const *

        """
        return _SnapTime.TNEANetNodeI_GetNI(self)


    def GetId(self):
        """
        GetId(TNEANetNodeI self) -> int64

        Parameters
        ----------
        self: TNEANetNodeI const *

        """
        return _SnapTime.TNEANetNodeI_GetId(self)


    def GetDeg(self):
        """
        GetDeg(TNEANetNodeI self) -> int64

        Parameters
        ----------
        self: TNEANetNodeI const *

        """
        return _SnapTime.TNEANetNodeI_GetDeg(self)


    def GetInDeg(self):
        """
        GetInDeg(TNEANetNodeI self) -> int64

        Parameters
        ----------
        self: TNEANetNodeI const *

        """
        return _SnapTime.TNEANetNodeI_GetInDeg(self)


    def GetOutDeg(self):
        """
        GetOutDeg(TNEANetNodeI self) -> int64

        Parameters
        ----------
        self: TNEANetNodeI const *

        """
        return _SnapTime.TNEANetNodeI_GetOutDeg(self)


    def GetInNId(self, NodeN):
        """
        GetInNId(TNEANetNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TNEANetNodeI_GetInNId(self, NodeN)


    def GetOutNId(self, NodeN):
        """
        GetOutNId(TNEANetNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TNEANetNodeI_GetOutNId(self, NodeN)


    def GetNbrNId(self, NodeN):
        """
        GetNbrNId(TNEANetNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TNEANetNodeI_GetNbrNId(self, NodeN)


    def IsInNId(self, NId):
        """
        IsInNId(TNEANetNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNEANetNodeI_IsInNId(self, NId)


    def IsOutNId(self, NId):
        """
        IsOutNId(TNEANetNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNEANetNodeI_IsOutNId(self, NId)


    def IsNbrNId(self, NId):
        """
        IsNbrNId(TNEANetNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNEANetNodeI_IsNbrNId(self, NId)

    __swig_destroy__ = _SnapTime.delete_TNEANetNodeI
TNEANetNodeI.Next = new_instancemethod(_SnapTime.TNEANetNodeI_Next, None, TNEANetNodeI)
TNEANetNodeI.__lt__ = new_instancemethod(_SnapTime.TNEANetNodeI___lt__, None, TNEANetNodeI)
TNEANetNodeI.__eq__ = new_instancemethod(_SnapTime.TNEANetNodeI___eq__, None, TNEANetNodeI)
TNEANetNodeI.GetNI = new_instancemethod(_SnapTime.TNEANetNodeI_GetNI, None, TNEANetNodeI)
TNEANetNodeI.GetId = new_instancemethod(_SnapTime.TNEANetNodeI_GetId, None, TNEANetNodeI)
TNEANetNodeI.GetDeg = new_instancemethod(_SnapTime.TNEANetNodeI_GetDeg, None, TNEANetNodeI)
TNEANetNodeI.GetInDeg = new_instancemethod(_SnapTime.TNEANetNodeI_GetInDeg, None, TNEANetNodeI)
TNEANetNodeI.GetOutDeg = new_instancemethod(_SnapTime.TNEANetNodeI_GetOutDeg, None, TNEANetNodeI)
TNEANetNodeI.GetInNId = new_instancemethod(_SnapTime.TNEANetNodeI_GetInNId, None, TNEANetNodeI)
TNEANetNodeI.GetOutNId = new_instancemethod(_SnapTime.TNEANetNodeI_GetOutNId, None, TNEANetNodeI)
TNEANetNodeI.GetNbrNId = new_instancemethod(_SnapTime.TNEANetNodeI_GetNbrNId, None, TNEANetNodeI)
TNEANetNodeI.IsInNId = new_instancemethod(_SnapTime.TNEANetNodeI_IsInNId, None, TNEANetNodeI)
TNEANetNodeI.IsOutNId = new_instancemethod(_SnapTime.TNEANetNodeI_IsOutNId, None, TNEANetNodeI)
TNEANetNodeI.IsNbrNId = new_instancemethod(_SnapTime.TNEANetNodeI_IsNbrNId, None, TNEANetNodeI)
TNEANetNodeI_swigregister = _SnapTime.TNEANetNodeI_swigregister
TNEANetNodeI_swigregister(TNEANetNodeI)

class TNEANetEdgeI(object):
    """Proxy of C++ TNEANetEdgeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNEANetEdgeI self) -> TNEANetEdgeI
        __init__(TNEANetEdgeI self, TNEANet::TEdgeI const & EdgeI) -> TNEANetEdgeI

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &

        """
        _SnapTime.TNEANetEdgeI_swiginit(self, _SnapTime.new_TNEANetEdgeI(*args))

    def Next(self):
        """
        Next(TNEANetEdgeI self) -> TNEANetEdgeI

        Parameters
        ----------
        self: TNEANetEdgeI *

        """
        return _SnapTime.TNEANetEdgeI_Next(self)


    def __lt__(self, EdgeI):
        """
        __lt__(TNEANetEdgeI self, TNEANetEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TNEANetEdgeI const &

        """
        return _SnapTime.TNEANetEdgeI___lt__(self, EdgeI)


    def __eq__(self, EdgeI):
        """
        __eq__(TNEANetEdgeI self, TNEANetEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TNEANetEdgeI const &

        """
        return _SnapTime.TNEANetEdgeI___eq__(self, EdgeI)


    def GetEI(self):
        """
        GetEI(TNEANetEdgeI self) -> TNEANet::TEdgeI

        Parameters
        ----------
        self: TNEANetEdgeI const *

        """
        return _SnapTime.TNEANetEdgeI_GetEI(self)


    def GetId(self):
        """
        GetId(TNEANetEdgeI self) -> int64

        Parameters
        ----------
        self: TNEANetEdgeI const *

        """
        return _SnapTime.TNEANetEdgeI_GetId(self)


    def GetSrcNId(self):
        """
        GetSrcNId(TNEANetEdgeI self) -> int64

        Parameters
        ----------
        self: TNEANetEdgeI const *

        """
        return _SnapTime.TNEANetEdgeI_GetSrcNId(self)


    def GetDstNId(self):
        """
        GetDstNId(TNEANetEdgeI self) -> int64

        Parameters
        ----------
        self: TNEANetEdgeI const *

        """
        return _SnapTime.TNEANetEdgeI_GetDstNId(self)

    __swig_destroy__ = _SnapTime.delete_TNEANetEdgeI
TNEANetEdgeI.Next = new_instancemethod(_SnapTime.TNEANetEdgeI_Next, None, TNEANetEdgeI)
TNEANetEdgeI.__lt__ = new_instancemethod(_SnapTime.TNEANetEdgeI___lt__, None, TNEANetEdgeI)
TNEANetEdgeI.__eq__ = new_instancemethod(_SnapTime.TNEANetEdgeI___eq__, None, TNEANetEdgeI)
TNEANetEdgeI.GetEI = new_instancemethod(_SnapTime.TNEANetEdgeI_GetEI, None, TNEANetEdgeI)
TNEANetEdgeI.GetId = new_instancemethod(_SnapTime.TNEANetEdgeI_GetId, None, TNEANetEdgeI)
TNEANetEdgeI.GetSrcNId = new_instancemethod(_SnapTime.TNEANetEdgeI_GetSrcNId, None, TNEANetEdgeI)
TNEANetEdgeI.GetDstNId = new_instancemethod(_SnapTime.TNEANetEdgeI_GetDstNId, None, TNEANetEdgeI)
TNEANetEdgeI_swigregister = _SnapTime.TNEANetEdgeI_swigregister
TNEANetEdgeI_swigregister(TNEANetEdgeI)

class TNEANetAIntI(object):
    """Proxy of C++ TNEANetAIntI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNEANetAIntI self) -> TNEANetAIntI
        __init__(TNEANetAIntI self, TInt64 HIter, TStr attribute, bool isEdgeIter, TNEANet GraphPt) -> TNEANetAIntI

        Parameters
        ----------
        HIter: TIntVecIter const &
        attribute: TStr
        isEdgeIter: bool
        GraphPt: TNEANet const *

        __init__(TNEANetAIntI self, TNEANet::TAIntI const & I) -> TNEANetAIntI

        Parameters
        ----------
        I: TNEANet::TAIntI const &

        """
        _SnapTime.TNEANetAIntI_swiginit(self, _SnapTime.new_TNEANetAIntI(*args))

    def Next(self):
        """
        Next(TNEANetAIntI self) -> TNEANetAIntI

        Parameters
        ----------
        self: TNEANetAIntI *

        """
        return _SnapTime.TNEANetAIntI_Next(self)


    def __lt__(self, I):
        """
        __lt__(TNEANetAIntI self, TNEANetAIntI I) -> bool

        Parameters
        ----------
        I: TNEANetAIntI const &

        """
        return _SnapTime.TNEANetAIntI___lt__(self, I)


    def __eq__(self, I):
        """
        __eq__(TNEANetAIntI self, TNEANetAIntI I) -> bool

        Parameters
        ----------
        I: TNEANetAIntI const &

        """
        return _SnapTime.TNEANetAIntI___eq__(self, I)


    def GetDat(self):
        """
        GetDat(TNEANetAIntI self) -> int64 const

        Parameters
        ----------
        self: TNEANetAIntI const *

        """
        return _SnapTime.TNEANetAIntI_GetDat(self)


    def IsDeleted(self):
        """
        IsDeleted(TNEANetAIntI self) -> bool

        Parameters
        ----------
        self: TNEANetAIntI const *

        """
        return _SnapTime.TNEANetAIntI_IsDeleted(self)

    __swig_destroy__ = _SnapTime.delete_TNEANetAIntI
TNEANetAIntI.Next = new_instancemethod(_SnapTime.TNEANetAIntI_Next, None, TNEANetAIntI)
TNEANetAIntI.__lt__ = new_instancemethod(_SnapTime.TNEANetAIntI___lt__, None, TNEANetAIntI)
TNEANetAIntI.__eq__ = new_instancemethod(_SnapTime.TNEANetAIntI___eq__, None, TNEANetAIntI)
TNEANetAIntI.GetDat = new_instancemethod(_SnapTime.TNEANetAIntI_GetDat, None, TNEANetAIntI)
TNEANetAIntI.IsDeleted = new_instancemethod(_SnapTime.TNEANetAIntI_IsDeleted, None, TNEANetAIntI)
TNEANetAIntI_swigregister = _SnapTime.TNEANetAIntI_swigregister
TNEANetAIntI_swigregister(TNEANetAIntI)

class TNEANetAStrI(object):
    """Proxy of C++ TNEANetAStrI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNEANetAStrI self) -> TNEANetAStrI
        __init__(TNEANetAStrI self, TStr HIter, TStr attribute, bool isEdgeIter, TNEANet GraphPt) -> TNEANetAStrI

        Parameters
        ----------
        HIter: TStrVecIter const &
        attribute: TStr
        isEdgeIter: bool
        GraphPt: TNEANet const *

        __init__(TNEANetAStrI self, TNEANet::TAStrI const & I) -> TNEANetAStrI

        Parameters
        ----------
        I: TNEANet::TAStrI const &

        """
        _SnapTime.TNEANetAStrI_swiginit(self, _SnapTime.new_TNEANetAStrI(*args))

    def Next(self):
        """
        Next(TNEANetAStrI self) -> TNEANetAStrI

        Parameters
        ----------
        self: TNEANetAStrI *

        """
        return _SnapTime.TNEANetAStrI_Next(self)


    def __lt__(self, I):
        """
        __lt__(TNEANetAStrI self, TNEANetAStrI I) -> bool

        Parameters
        ----------
        I: TNEANetAStrI const &

        """
        return _SnapTime.TNEANetAStrI___lt__(self, I)


    def __eq__(self, I):
        """
        __eq__(TNEANetAStrI self, TNEANetAStrI I) -> bool

        Parameters
        ----------
        I: TNEANetAStrI const &

        """
        return _SnapTime.TNEANetAStrI___eq__(self, I)


    def GetDat(self):
        """
        GetDat(TNEANetAStrI self) -> char const *

        Parameters
        ----------
        self: TNEANetAStrI const *

        """
        return _SnapTime.TNEANetAStrI_GetDat(self)


    def IsDeleted(self):
        """
        IsDeleted(TNEANetAStrI self) -> bool

        Parameters
        ----------
        self: TNEANetAStrI const *

        """
        return _SnapTime.TNEANetAStrI_IsDeleted(self)

    __swig_destroy__ = _SnapTime.delete_TNEANetAStrI
TNEANetAStrI.Next = new_instancemethod(_SnapTime.TNEANetAStrI_Next, None, TNEANetAStrI)
TNEANetAStrI.__lt__ = new_instancemethod(_SnapTime.TNEANetAStrI___lt__, None, TNEANetAStrI)
TNEANetAStrI.__eq__ = new_instancemethod(_SnapTime.TNEANetAStrI___eq__, None, TNEANetAStrI)
TNEANetAStrI.GetDat = new_instancemethod(_SnapTime.TNEANetAStrI_GetDat, None, TNEANetAStrI)
TNEANetAStrI.IsDeleted = new_instancemethod(_SnapTime.TNEANetAStrI_IsDeleted, None, TNEANetAStrI)
TNEANetAStrI_swigregister = _SnapTime.TNEANetAStrI_swigregister
TNEANetAStrI_swigregister(TNEANetAStrI)

class TNEANetAFltI(object):
    """Proxy of C++ TNEANetAFltI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNEANetAFltI self) -> TNEANetAFltI
        __init__(TNEANetAFltI self, TFlt HIter, TStr attribute, bool isEdgeIter, TNEANet GraphPt) -> TNEANetAFltI

        Parameters
        ----------
        HIter: TFltVecIter const &
        attribute: TStr
        isEdgeIter: bool
        GraphPt: TNEANet const *

        __init__(TNEANetAFltI self, TNEANet::TAFltI const & I) -> TNEANetAFltI

        Parameters
        ----------
        I: TNEANet::TAFltI const &

        """
        _SnapTime.TNEANetAFltI_swiginit(self, _SnapTime.new_TNEANetAFltI(*args))

    def Next(self):
        """
        Next(TNEANetAFltI self) -> TNEANetAFltI

        Parameters
        ----------
        self: TNEANetAFltI *

        """
        return _SnapTime.TNEANetAFltI_Next(self)


    def __lt__(self, I):
        """
        __lt__(TNEANetAFltI self, TNEANetAFltI I) -> bool

        Parameters
        ----------
        I: TNEANetAFltI const &

        """
        return _SnapTime.TNEANetAFltI___lt__(self, I)


    def __eq__(self, I):
        """
        __eq__(TNEANetAFltI self, TNEANetAFltI I) -> bool

        Parameters
        ----------
        I: TNEANetAFltI const &

        """
        return _SnapTime.TNEANetAFltI___eq__(self, I)


    def GetDat(self):
        """
        GetDat(TNEANetAFltI self) -> double const

        Parameters
        ----------
        self: TNEANetAFltI const *

        """
        return _SnapTime.TNEANetAFltI_GetDat(self)


    def IsDeleted(self):
        """
        IsDeleted(TNEANetAFltI self) -> bool

        Parameters
        ----------
        self: TNEANetAFltI const *

        """
        return _SnapTime.TNEANetAFltI_IsDeleted(self)

    __swig_destroy__ = _SnapTime.delete_TNEANetAFltI
TNEANetAFltI.Next = new_instancemethod(_SnapTime.TNEANetAFltI_Next, None, TNEANetAFltI)
TNEANetAFltI.__lt__ = new_instancemethod(_SnapTime.TNEANetAFltI___lt__, None, TNEANetAFltI)
TNEANetAFltI.__eq__ = new_instancemethod(_SnapTime.TNEANetAFltI___eq__, None, TNEANetAFltI)
TNEANetAFltI.GetDat = new_instancemethod(_SnapTime.TNEANetAFltI_GetDat, None, TNEANetAFltI)
TNEANetAFltI.IsDeleted = new_instancemethod(_SnapTime.TNEANetAFltI_IsDeleted, None, TNEANetAFltI)
TNEANetAFltI_swigregister = _SnapTime.TNEANetAFltI_swigregister
TNEANetAFltI_swigregister(TNEANetAFltI)

class TNEANetMPNodeI(object):
    """Proxy of C++ TNEANetMPNodeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNEANetMPNodeI self) -> TNEANetMPNodeI
        __init__(TNEANetMPNodeI self, TNEANetMP::TNodeI const & NodeI) -> TNEANetMPNodeI

        Parameters
        ----------
        NodeI: TNEANetMP::TNodeI const &

        """
        _SnapTime.TNEANetMPNodeI_swiginit(self, _SnapTime.new_TNEANetMPNodeI(*args))

    def Next(self):
        """
        Next(TNEANetMPNodeI self) -> TNEANetMPNodeI

        Parameters
        ----------
        self: TNEANetMPNodeI *

        """
        return _SnapTime.TNEANetMPNodeI_Next(self)


    def __lt__(self, NodeI):
        """
        __lt__(TNEANetMPNodeI self, TNEANetMPNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TNEANetMPNodeI const &

        """
        return _SnapTime.TNEANetMPNodeI___lt__(self, NodeI)


    def __eq__(self, NodeI):
        """
        __eq__(TNEANetMPNodeI self, TNEANetMPNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TNEANetMPNodeI const &

        """
        return _SnapTime.TNEANetMPNodeI___eq__(self, NodeI)


    def GetId(self):
        """
        GetId(TNEANetMPNodeI self) -> int64

        Parameters
        ----------
        self: TNEANetMPNodeI const *

        """
        return _SnapTime.TNEANetMPNodeI_GetId(self)


    def GetDeg(self):
        """
        GetDeg(TNEANetMPNodeI self) -> int64

        Parameters
        ----------
        self: TNEANetMPNodeI const *

        """
        return _SnapTime.TNEANetMPNodeI_GetDeg(self)


    def GetInDeg(self):
        """
        GetInDeg(TNEANetMPNodeI self) -> int64

        Parameters
        ----------
        self: TNEANetMPNodeI const *

        """
        return _SnapTime.TNEANetMPNodeI_GetInDeg(self)


    def GetOutDeg(self):
        """
        GetOutDeg(TNEANetMPNodeI self) -> int64

        Parameters
        ----------
        self: TNEANetMPNodeI const *

        """
        return _SnapTime.TNEANetMPNodeI_GetOutDeg(self)


    def GetInNId(self, NodeN):
        """
        GetInNId(TNEANetMPNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TNEANetMPNodeI_GetInNId(self, NodeN)


    def GetOutNId(self, NodeN):
        """
        GetOutNId(TNEANetMPNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TNEANetMPNodeI_GetOutNId(self, NodeN)


    def GetNbrNId(self, NodeN):
        """
        GetNbrNId(TNEANetMPNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TNEANetMPNodeI_GetNbrNId(self, NodeN)


    def IsInNId(self, NId):
        """
        IsInNId(TNEANetMPNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNEANetMPNodeI_IsInNId(self, NId)


    def IsOutNId(self, NId):
        """
        IsOutNId(TNEANetMPNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNEANetMPNodeI_IsOutNId(self, NId)


    def IsNbrNId(self, NId):
        """
        IsNbrNId(TNEANetMPNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TNEANetMPNodeI_IsNbrNId(self, NId)

    __swig_destroy__ = _SnapTime.delete_TNEANetMPNodeI
TNEANetMPNodeI.Next = new_instancemethod(_SnapTime.TNEANetMPNodeI_Next, None, TNEANetMPNodeI)
TNEANetMPNodeI.__lt__ = new_instancemethod(_SnapTime.TNEANetMPNodeI___lt__, None, TNEANetMPNodeI)
TNEANetMPNodeI.__eq__ = new_instancemethod(_SnapTime.TNEANetMPNodeI___eq__, None, TNEANetMPNodeI)
TNEANetMPNodeI.GetId = new_instancemethod(_SnapTime.TNEANetMPNodeI_GetId, None, TNEANetMPNodeI)
TNEANetMPNodeI.GetDeg = new_instancemethod(_SnapTime.TNEANetMPNodeI_GetDeg, None, TNEANetMPNodeI)
TNEANetMPNodeI.GetInDeg = new_instancemethod(_SnapTime.TNEANetMPNodeI_GetInDeg, None, TNEANetMPNodeI)
TNEANetMPNodeI.GetOutDeg = new_instancemethod(_SnapTime.TNEANetMPNodeI_GetOutDeg, None, TNEANetMPNodeI)
TNEANetMPNodeI.GetInNId = new_instancemethod(_SnapTime.TNEANetMPNodeI_GetInNId, None, TNEANetMPNodeI)
TNEANetMPNodeI.GetOutNId = new_instancemethod(_SnapTime.TNEANetMPNodeI_GetOutNId, None, TNEANetMPNodeI)
TNEANetMPNodeI.GetNbrNId = new_instancemethod(_SnapTime.TNEANetMPNodeI_GetNbrNId, None, TNEANetMPNodeI)
TNEANetMPNodeI.IsInNId = new_instancemethod(_SnapTime.TNEANetMPNodeI_IsInNId, None, TNEANetMPNodeI)
TNEANetMPNodeI.IsOutNId = new_instancemethod(_SnapTime.TNEANetMPNodeI_IsOutNId, None, TNEANetMPNodeI)
TNEANetMPNodeI.IsNbrNId = new_instancemethod(_SnapTime.TNEANetMPNodeI_IsNbrNId, None, TNEANetMPNodeI)
TNEANetMPNodeI_swigregister = _SnapTime.TNEANetMPNodeI_swigregister
TNEANetMPNodeI_swigregister(TNEANetMPNodeI)

class TNEANetMPEdgeI(object):
    """Proxy of C++ TNEANetMPEdgeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TNEANetMPEdgeI self) -> TNEANetMPEdgeI
        __init__(TNEANetMPEdgeI self, TNEANetMP::TEdgeI const & EdgeI) -> TNEANetMPEdgeI

        Parameters
        ----------
        EdgeI: TNEANetMP::TEdgeI const &

        """
        _SnapTime.TNEANetMPEdgeI_swiginit(self, _SnapTime.new_TNEANetMPEdgeI(*args))

    def Next(self):
        """
        Next(TNEANetMPEdgeI self) -> TNEANetMPEdgeI

        Parameters
        ----------
        self: TNEANetMPEdgeI *

        """
        return _SnapTime.TNEANetMPEdgeI_Next(self)


    def __lt__(self, EdgeI):
        """
        __lt__(TNEANetMPEdgeI self, TNEANetMPEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TNEANetMPEdgeI const &

        """
        return _SnapTime.TNEANetMPEdgeI___lt__(self, EdgeI)


    def __eq__(self, EdgeI):
        """
        __eq__(TNEANetMPEdgeI self, TNEANetMPEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TNEANetMPEdgeI const &

        """
        return _SnapTime.TNEANetMPEdgeI___eq__(self, EdgeI)


    def GetId(self):
        """
        GetId(TNEANetMPEdgeI self) -> int64

        Parameters
        ----------
        self: TNEANetMPEdgeI const *

        """
        return _SnapTime.TNEANetMPEdgeI_GetId(self)


    def GetSrcNId(self):
        """
        GetSrcNId(TNEANetMPEdgeI self) -> int64

        Parameters
        ----------
        self: TNEANetMPEdgeI const *

        """
        return _SnapTime.TNEANetMPEdgeI_GetSrcNId(self)


    def GetDstNId(self):
        """
        GetDstNId(TNEANetMPEdgeI self) -> int64

        Parameters
        ----------
        self: TNEANetMPEdgeI const *

        """
        return _SnapTime.TNEANetMPEdgeI_GetDstNId(self)

    __swig_destroy__ = _SnapTime.delete_TNEANetMPEdgeI
TNEANetMPEdgeI.Next = new_instancemethod(_SnapTime.TNEANetMPEdgeI_Next, None, TNEANetMPEdgeI)
TNEANetMPEdgeI.__lt__ = new_instancemethod(_SnapTime.TNEANetMPEdgeI___lt__, None, TNEANetMPEdgeI)
TNEANetMPEdgeI.__eq__ = new_instancemethod(_SnapTime.TNEANetMPEdgeI___eq__, None, TNEANetMPEdgeI)
TNEANetMPEdgeI.GetId = new_instancemethod(_SnapTime.TNEANetMPEdgeI_GetId, None, TNEANetMPEdgeI)
TNEANetMPEdgeI.GetSrcNId = new_instancemethod(_SnapTime.TNEANetMPEdgeI_GetSrcNId, None, TNEANetMPEdgeI)
TNEANetMPEdgeI.GetDstNId = new_instancemethod(_SnapTime.TNEANetMPEdgeI_GetDstNId, None, TNEANetMPEdgeI)
TNEANetMPEdgeI_swigregister = _SnapTime.TNEANetMPEdgeI_swigregister
TNEANetMPEdgeI_swigregister(TNEANetMPEdgeI)

class TModeNetNodeI(object):
    """Proxy of C++ TModeNetNodeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TModeNetNodeI self) -> TModeNetNodeI
        __init__(TModeNetNodeI self, TModeNet::TNodeI const & NodeI) -> TModeNetNodeI

        Parameters
        ----------
        NodeI: TModeNet::TNodeI const &

        """
        _SnapTime.TModeNetNodeI_swiginit(self, _SnapTime.new_TModeNetNodeI(*args))

    def Next(self):
        """
        Next(TModeNetNodeI self) -> TModeNetNodeI

        Parameters
        ----------
        self: TModeNetNodeI *

        """
        return _SnapTime.TModeNetNodeI_Next(self)


    def __lt__(self, NodeI):
        """
        __lt__(TModeNetNodeI self, TModeNetNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TModeNetNodeI const &

        """
        return _SnapTime.TModeNetNodeI___lt__(self, NodeI)


    def __eq__(self, NodeI):
        """
        __eq__(TModeNetNodeI self, TModeNetNodeI NodeI) -> bool

        Parameters
        ----------
        NodeI: TModeNetNodeI const &

        """
        return _SnapTime.TModeNetNodeI___eq__(self, NodeI)


    def GetId(self):
        """
        GetId(TModeNetNodeI self) -> int64

        Parameters
        ----------
        self: TModeNetNodeI const *

        """
        return _SnapTime.TModeNetNodeI_GetId(self)


    def GetDeg(self):
        """
        GetDeg(TModeNetNodeI self) -> int64

        Parameters
        ----------
        self: TModeNetNodeI const *

        """
        return _SnapTime.TModeNetNodeI_GetDeg(self)


    def GetInDeg(self):
        """
        GetInDeg(TModeNetNodeI self) -> int64

        Parameters
        ----------
        self: TModeNetNodeI const *

        """
        return _SnapTime.TModeNetNodeI_GetInDeg(self)


    def GetOutDeg(self):
        """
        GetOutDeg(TModeNetNodeI self) -> int64

        Parameters
        ----------
        self: TModeNetNodeI const *

        """
        return _SnapTime.TModeNetNodeI_GetOutDeg(self)


    def GetInNId(self, NodeN):
        """
        GetInNId(TModeNetNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TModeNetNodeI_GetInNId(self, NodeN)


    def GetOutNId(self, NodeN):
        """
        GetOutNId(TModeNetNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TModeNetNodeI_GetOutNId(self, NodeN)


    def GetNbrNId(self, NodeN):
        """
        GetNbrNId(TModeNetNodeI self, int64 const & NodeN) -> int64

        Parameters
        ----------
        NodeN: int64 const &

        """
        return _SnapTime.TModeNetNodeI_GetNbrNId(self, NodeN)


    def IsInNId(self, NId):
        """
        IsInNId(TModeNetNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TModeNetNodeI_IsInNId(self, NId)


    def IsOutNId(self, NId):
        """
        IsOutNId(TModeNetNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TModeNetNodeI_IsOutNId(self, NId)


    def IsNbrNId(self, NId):
        """
        IsNbrNId(TModeNetNodeI self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.TModeNetNodeI_IsNbrNId(self, NId)

    __swig_destroy__ = _SnapTime.delete_TModeNetNodeI
TModeNetNodeI.Next = new_instancemethod(_SnapTime.TModeNetNodeI_Next, None, TModeNetNodeI)
TModeNetNodeI.__lt__ = new_instancemethod(_SnapTime.TModeNetNodeI___lt__, None, TModeNetNodeI)
TModeNetNodeI.__eq__ = new_instancemethod(_SnapTime.TModeNetNodeI___eq__, None, TModeNetNodeI)
TModeNetNodeI.GetId = new_instancemethod(_SnapTime.TModeNetNodeI_GetId, None, TModeNetNodeI)
TModeNetNodeI.GetDeg = new_instancemethod(_SnapTime.TModeNetNodeI_GetDeg, None, TModeNetNodeI)
TModeNetNodeI.GetInDeg = new_instancemethod(_SnapTime.TModeNetNodeI_GetInDeg, None, TModeNetNodeI)
TModeNetNodeI.GetOutDeg = new_instancemethod(_SnapTime.TModeNetNodeI_GetOutDeg, None, TModeNetNodeI)
TModeNetNodeI.GetInNId = new_instancemethod(_SnapTime.TModeNetNodeI_GetInNId, None, TModeNetNodeI)
TModeNetNodeI.GetOutNId = new_instancemethod(_SnapTime.TModeNetNodeI_GetOutNId, None, TModeNetNodeI)
TModeNetNodeI.GetNbrNId = new_instancemethod(_SnapTime.TModeNetNodeI_GetNbrNId, None, TModeNetNodeI)
TModeNetNodeI.IsInNId = new_instancemethod(_SnapTime.TModeNetNodeI_IsInNId, None, TModeNetNodeI)
TModeNetNodeI.IsOutNId = new_instancemethod(_SnapTime.TModeNetNodeI_IsOutNId, None, TModeNetNodeI)
TModeNetNodeI.IsNbrNId = new_instancemethod(_SnapTime.TModeNetNodeI_IsNbrNId, None, TModeNetNodeI)
TModeNetNodeI_swigregister = _SnapTime.TModeNetNodeI_swigregister
TModeNetNodeI_swigregister(TModeNetNodeI)

class TModeNetEdgeI(object):
    """Proxy of C++ TModeNetEdgeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TModeNetEdgeI self) -> TModeNetEdgeI
        __init__(TModeNetEdgeI self, TNEANet::TEdgeI const & EdgeI) -> TModeNetEdgeI

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &

        """
        _SnapTime.TModeNetEdgeI_swiginit(self, _SnapTime.new_TModeNetEdgeI(*args))

    def Next(self):
        """
        Next(TModeNetEdgeI self) -> TModeNetEdgeI

        Parameters
        ----------
        self: TModeNetEdgeI *

        """
        return _SnapTime.TModeNetEdgeI_Next(self)


    def __lt__(self, EdgeI):
        """
        __lt__(TModeNetEdgeI self, TModeNetEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TModeNetEdgeI const &

        """
        return _SnapTime.TModeNetEdgeI___lt__(self, EdgeI)


    def __eq__(self, EdgeI):
        """
        __eq__(TModeNetEdgeI self, TModeNetEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TModeNetEdgeI const &

        """
        return _SnapTime.TModeNetEdgeI___eq__(self, EdgeI)


    def GetId(self):
        """
        GetId(TModeNetEdgeI self) -> int64

        Parameters
        ----------
        self: TModeNetEdgeI const *

        """
        return _SnapTime.TModeNetEdgeI_GetId(self)


    def GetSrcNId(self):
        """
        GetSrcNId(TModeNetEdgeI self) -> int64

        Parameters
        ----------
        self: TModeNetEdgeI const *

        """
        return _SnapTime.TModeNetEdgeI_GetSrcNId(self)


    def GetDstNId(self):
        """
        GetDstNId(TModeNetEdgeI self) -> int64

        Parameters
        ----------
        self: TModeNetEdgeI const *

        """
        return _SnapTime.TModeNetEdgeI_GetDstNId(self)

    __swig_destroy__ = _SnapTime.delete_TModeNetEdgeI
TModeNetEdgeI.Next = new_instancemethod(_SnapTime.TModeNetEdgeI_Next, None, TModeNetEdgeI)
TModeNetEdgeI.__lt__ = new_instancemethod(_SnapTime.TModeNetEdgeI___lt__, None, TModeNetEdgeI)
TModeNetEdgeI.__eq__ = new_instancemethod(_SnapTime.TModeNetEdgeI___eq__, None, TModeNetEdgeI)
TModeNetEdgeI.GetId = new_instancemethod(_SnapTime.TModeNetEdgeI_GetId, None, TModeNetEdgeI)
TModeNetEdgeI.GetSrcNId = new_instancemethod(_SnapTime.TModeNetEdgeI_GetSrcNId, None, TModeNetEdgeI)
TModeNetEdgeI.GetDstNId = new_instancemethod(_SnapTime.TModeNetEdgeI_GetDstNId, None, TModeNetEdgeI)
TModeNetEdgeI_swigregister = _SnapTime.TModeNetEdgeI_swigregister
TModeNetEdgeI_swigregister(TModeNetEdgeI)

class TCrossNetEdgeI(object):
    """Proxy of C++ TCrossNetEdgeI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TCrossNetEdgeI self) -> TCrossNetEdgeI
        __init__(TCrossNetEdgeI self, TCrossNet::TCrossEdgeI const & EdgeI) -> TCrossNetEdgeI

        Parameters
        ----------
        EdgeI: TCrossNet::TCrossEdgeI const &

        """
        _SnapTime.TCrossNetEdgeI_swiginit(self, _SnapTime.new_TCrossNetEdgeI(*args))

    def Next(self):
        """
        Next(TCrossNetEdgeI self) -> TCrossNetEdgeI

        Parameters
        ----------
        self: TCrossNetEdgeI *

        """
        return _SnapTime.TCrossNetEdgeI_Next(self)


    def __lt__(self, EdgeI):
        """
        __lt__(TCrossNetEdgeI self, TCrossNetEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TCrossNetEdgeI const &

        """
        return _SnapTime.TCrossNetEdgeI___lt__(self, EdgeI)


    def __eq__(self, EdgeI):
        """
        __eq__(TCrossNetEdgeI self, TCrossNetEdgeI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TCrossNetEdgeI const &

        """
        return _SnapTime.TCrossNetEdgeI___eq__(self, EdgeI)


    def GetId(self):
        """
        GetId(TCrossNetEdgeI self) -> int64

        Parameters
        ----------
        self: TCrossNetEdgeI const *

        """
        return _SnapTime.TCrossNetEdgeI_GetId(self)


    def GetSrcNId(self):
        """
        GetSrcNId(TCrossNetEdgeI self) -> int64

        Parameters
        ----------
        self: TCrossNetEdgeI const *

        """
        return _SnapTime.TCrossNetEdgeI_GetSrcNId(self)


    def GetDstNId(self):
        """
        GetDstNId(TCrossNetEdgeI self) -> int64

        Parameters
        ----------
        self: TCrossNetEdgeI const *

        """
        return _SnapTime.TCrossNetEdgeI_GetDstNId(self)

    __swig_destroy__ = _SnapTime.delete_TCrossNetEdgeI
TCrossNetEdgeI.Next = new_instancemethod(_SnapTime.TCrossNetEdgeI_Next, None, TCrossNetEdgeI)
TCrossNetEdgeI.__lt__ = new_instancemethod(_SnapTime.TCrossNetEdgeI___lt__, None, TCrossNetEdgeI)
TCrossNetEdgeI.__eq__ = new_instancemethod(_SnapTime.TCrossNetEdgeI___eq__, None, TCrossNetEdgeI)
TCrossNetEdgeI.GetId = new_instancemethod(_SnapTime.TCrossNetEdgeI_GetId, None, TCrossNetEdgeI)
TCrossNetEdgeI.GetSrcNId = new_instancemethod(_SnapTime.TCrossNetEdgeI_GetSrcNId, None, TCrossNetEdgeI)
TCrossNetEdgeI.GetDstNId = new_instancemethod(_SnapTime.TCrossNetEdgeI_GetDstNId, None, TCrossNetEdgeI)
TCrossNetEdgeI_swigregister = _SnapTime.TCrossNetEdgeI_swigregister
TCrossNetEdgeI_swigregister(TCrossNetEdgeI)

class TCrossNetAIntI(object):
    """Proxy of C++ TCrossNetAIntI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TCrossNetAIntI self) -> TCrossNetAIntI
        __init__(TCrossNetAIntI self, TInt64 HIter, TStr attribute, TCrossNet GraphPt) -> TCrossNetAIntI

        Parameters
        ----------
        HIter: TIntVecIter const &
        attribute: TStr
        GraphPt: TCrossNet const *

        __init__(TCrossNetAIntI self, TCrossNet::TAIntI const & I) -> TCrossNetAIntI

        Parameters
        ----------
        I: TCrossNet::TAIntI const &

        """
        _SnapTime.TCrossNetAIntI_swiginit(self, _SnapTime.new_TCrossNetAIntI(*args))

    def Next(self):
        """
        Next(TCrossNetAIntI self) -> TCrossNetAIntI

        Parameters
        ----------
        self: TCrossNetAIntI *

        """
        return _SnapTime.TCrossNetAIntI_Next(self)


    def __lt__(self, I):
        """
        __lt__(TCrossNetAIntI self, TCrossNetAIntI I) -> bool

        Parameters
        ----------
        I: TCrossNetAIntI const &

        """
        return _SnapTime.TCrossNetAIntI___lt__(self, I)


    def __eq__(self, I):
        """
        __eq__(TCrossNetAIntI self, TCrossNetAIntI I) -> bool

        Parameters
        ----------
        I: TCrossNetAIntI const &

        """
        return _SnapTime.TCrossNetAIntI___eq__(self, I)


    def GetDat(self):
        """
        GetDat(TCrossNetAIntI self) -> int64 const

        Parameters
        ----------
        self: TCrossNetAIntI const *

        """
        return _SnapTime.TCrossNetAIntI_GetDat(self)


    def IsDeleted(self):
        """
        IsDeleted(TCrossNetAIntI self) -> bool

        Parameters
        ----------
        self: TCrossNetAIntI const *

        """
        return _SnapTime.TCrossNetAIntI_IsDeleted(self)

    __swig_destroy__ = _SnapTime.delete_TCrossNetAIntI
TCrossNetAIntI.Next = new_instancemethod(_SnapTime.TCrossNetAIntI_Next, None, TCrossNetAIntI)
TCrossNetAIntI.__lt__ = new_instancemethod(_SnapTime.TCrossNetAIntI___lt__, None, TCrossNetAIntI)
TCrossNetAIntI.__eq__ = new_instancemethod(_SnapTime.TCrossNetAIntI___eq__, None, TCrossNetAIntI)
TCrossNetAIntI.GetDat = new_instancemethod(_SnapTime.TCrossNetAIntI_GetDat, None, TCrossNetAIntI)
TCrossNetAIntI.IsDeleted = new_instancemethod(_SnapTime.TCrossNetAIntI_IsDeleted, None, TCrossNetAIntI)
TCrossNetAIntI_swigregister = _SnapTime.TCrossNetAIntI_swigregister
TCrossNetAIntI_swigregister(TCrossNetAIntI)

class TCrossNetAStrI(object):
    """Proxy of C++ TCrossNetAStrI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TCrossNetAStrI self) -> TCrossNetAStrI
        __init__(TCrossNetAStrI self, TStr HIter, TStr attribute, TCrossNet GraphPt) -> TCrossNetAStrI

        Parameters
        ----------
        HIter: TStrVecIter const &
        attribute: TStr
        GraphPt: TCrossNet const *

        __init__(TCrossNetAStrI self, TCrossNet::TAStrI const & I) -> TCrossNetAStrI

        Parameters
        ----------
        I: TCrossNet::TAStrI const &

        """
        _SnapTime.TCrossNetAStrI_swiginit(self, _SnapTime.new_TCrossNetAStrI(*args))

    def Next(self):
        """
        Next(TCrossNetAStrI self) -> TCrossNetAStrI

        Parameters
        ----------
        self: TCrossNetAStrI *

        """
        return _SnapTime.TCrossNetAStrI_Next(self)


    def __lt__(self, I):
        """
        __lt__(TCrossNetAStrI self, TCrossNetAStrI I) -> bool

        Parameters
        ----------
        I: TCrossNetAStrI const &

        """
        return _SnapTime.TCrossNetAStrI___lt__(self, I)


    def __eq__(self, I):
        """
        __eq__(TCrossNetAStrI self, TCrossNetAStrI I) -> bool

        Parameters
        ----------
        I: TCrossNetAStrI const &

        """
        return _SnapTime.TCrossNetAStrI___eq__(self, I)


    def GetDat(self):
        """
        GetDat(TCrossNetAStrI self) -> char const *

        Parameters
        ----------
        self: TCrossNetAStrI const *

        """
        return _SnapTime.TCrossNetAStrI_GetDat(self)


    def IsDeleted(self):
        """
        IsDeleted(TCrossNetAStrI self) -> bool

        Parameters
        ----------
        self: TCrossNetAStrI const *

        """
        return _SnapTime.TCrossNetAStrI_IsDeleted(self)

    __swig_destroy__ = _SnapTime.delete_TCrossNetAStrI
TCrossNetAStrI.Next = new_instancemethod(_SnapTime.TCrossNetAStrI_Next, None, TCrossNetAStrI)
TCrossNetAStrI.__lt__ = new_instancemethod(_SnapTime.TCrossNetAStrI___lt__, None, TCrossNetAStrI)
TCrossNetAStrI.__eq__ = new_instancemethod(_SnapTime.TCrossNetAStrI___eq__, None, TCrossNetAStrI)
TCrossNetAStrI.GetDat = new_instancemethod(_SnapTime.TCrossNetAStrI_GetDat, None, TCrossNetAStrI)
TCrossNetAStrI.IsDeleted = new_instancemethod(_SnapTime.TCrossNetAStrI_IsDeleted, None, TCrossNetAStrI)
TCrossNetAStrI_swigregister = _SnapTime.TCrossNetAStrI_swigregister
TCrossNetAStrI_swigregister(TCrossNetAStrI)

class TCrossNetAFltI(object):
    """Proxy of C++ TCrossNetAFltI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TCrossNetAFltI self) -> TCrossNetAFltI
        __init__(TCrossNetAFltI self, TFlt HIter, TStr attribute, TCrossNet GraphPt) -> TCrossNetAFltI

        Parameters
        ----------
        HIter: TFltVecIter const &
        attribute: TStr
        GraphPt: TCrossNet const *

        __init__(TCrossNetAFltI self, TCrossNet::TAFltI const & I) -> TCrossNetAFltI

        Parameters
        ----------
        I: TCrossNet::TAFltI const &

        """
        _SnapTime.TCrossNetAFltI_swiginit(self, _SnapTime.new_TCrossNetAFltI(*args))

    def Next(self):
        """
        Next(TCrossNetAFltI self) -> TCrossNetAFltI

        Parameters
        ----------
        self: TCrossNetAFltI *

        """
        return _SnapTime.TCrossNetAFltI_Next(self)


    def __lt__(self, I):
        """
        __lt__(TCrossNetAFltI self, TCrossNetAFltI I) -> bool

        Parameters
        ----------
        I: TCrossNetAFltI const &

        """
        return _SnapTime.TCrossNetAFltI___lt__(self, I)


    def __eq__(self, I):
        """
        __eq__(TCrossNetAFltI self, TCrossNetAFltI I) -> bool

        Parameters
        ----------
        I: TCrossNetAFltI const &

        """
        return _SnapTime.TCrossNetAFltI___eq__(self, I)


    def GetDat(self):
        """
        GetDat(TCrossNetAFltI self) -> double const

        Parameters
        ----------
        self: TCrossNetAFltI const *

        """
        return _SnapTime.TCrossNetAFltI_GetDat(self)


    def IsDeleted(self):
        """
        IsDeleted(TCrossNetAFltI self) -> bool

        Parameters
        ----------
        self: TCrossNetAFltI const *

        """
        return _SnapTime.TCrossNetAFltI_IsDeleted(self)

    __swig_destroy__ = _SnapTime.delete_TCrossNetAFltI
TCrossNetAFltI.Next = new_instancemethod(_SnapTime.TCrossNetAFltI_Next, None, TCrossNetAFltI)
TCrossNetAFltI.__lt__ = new_instancemethod(_SnapTime.TCrossNetAFltI___lt__, None, TCrossNetAFltI)
TCrossNetAFltI.__eq__ = new_instancemethod(_SnapTime.TCrossNetAFltI___eq__, None, TCrossNetAFltI)
TCrossNetAFltI.GetDat = new_instancemethod(_SnapTime.TCrossNetAFltI_GetDat, None, TCrossNetAFltI)
TCrossNetAFltI.IsDeleted = new_instancemethod(_SnapTime.TCrossNetAFltI_IsDeleted, None, TCrossNetAFltI)
TCrossNetAFltI_swigregister = _SnapTime.TCrossNetAFltI_swigregister
TCrossNetAFltI_swigregister(TCrossNetAFltI)

class TMMNetModeNetI(object):
    """Proxy of C++ TMMNetModeNetI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TMMNetModeNetI self) -> TMMNetModeNetI
        __init__(TMMNetModeNetI self, TMMNet::TModeNetI const & NodeI) -> TMMNetModeNetI

        Parameters
        ----------
        NodeI: TMMNet::TModeNetI const &

        """
        _SnapTime.TMMNetModeNetI_swiginit(self, _SnapTime.new_TMMNetModeNetI(*args))

    def Next(self):
        """
        Next(TMMNetModeNetI self) -> TMMNetModeNetI

        Parameters
        ----------
        self: TMMNetModeNetI *

        """
        return _SnapTime.TMMNetModeNetI_Next(self)


    def __lt__(self, NodeI):
        """
        __lt__(TMMNetModeNetI self, TMMNetModeNetI NodeI) -> bool

        Parameters
        ----------
        NodeI: TMMNetModeNetI const &

        """
        return _SnapTime.TMMNetModeNetI___lt__(self, NodeI)


    def __eq__(self, NodeI):
        """
        __eq__(TMMNetModeNetI self, TMMNetModeNetI NodeI) -> bool

        Parameters
        ----------
        NodeI: TMMNetModeNetI const &

        """
        return _SnapTime.TMMNetModeNetI___eq__(self, NodeI)


    def GetModeId(self):
        """
        GetModeId(TMMNetModeNetI self) -> int64

        Parameters
        ----------
        self: TMMNetModeNetI *

        """
        return _SnapTime.TMMNetModeNetI_GetModeId(self)


    def GetModeNet(self):
        """
        GetModeNet(TMMNetModeNetI self) -> TModeNet

        Parameters
        ----------
        self: TMMNetModeNetI *

        """
        return _SnapTime.TMMNetModeNetI_GetModeNet(self)

    __swig_destroy__ = _SnapTime.delete_TMMNetModeNetI
TMMNetModeNetI.Next = new_instancemethod(_SnapTime.TMMNetModeNetI_Next, None, TMMNetModeNetI)
TMMNetModeNetI.__lt__ = new_instancemethod(_SnapTime.TMMNetModeNetI___lt__, None, TMMNetModeNetI)
TMMNetModeNetI.__eq__ = new_instancemethod(_SnapTime.TMMNetModeNetI___eq__, None, TMMNetModeNetI)
TMMNetModeNetI.GetModeId = new_instancemethod(_SnapTime.TMMNetModeNetI_GetModeId, None, TMMNetModeNetI)
TMMNetModeNetI.GetModeNet = new_instancemethod(_SnapTime.TMMNetModeNetI_GetModeNet, None, TMMNetModeNetI)
TMMNetModeNetI_swigregister = _SnapTime.TMMNetModeNetI_swigregister
TMMNetModeNetI_swigregister(TMMNetModeNetI)

class TMMNetCrossNetI(object):
    """Proxy of C++ TMMNetCrossNetI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TMMNetCrossNetI self) -> TMMNetCrossNetI
        __init__(TMMNetCrossNetI self, TMMNet::TCrossNetI const & EdgeI) -> TMMNetCrossNetI

        Parameters
        ----------
        EdgeI: TMMNet::TCrossNetI const &

        """
        _SnapTime.TMMNetCrossNetI_swiginit(self, _SnapTime.new_TMMNetCrossNetI(*args))

    def Next(self):
        """
        Next(TMMNetCrossNetI self) -> TMMNetCrossNetI

        Parameters
        ----------
        self: TMMNetCrossNetI *

        """
        return _SnapTime.TMMNetCrossNetI_Next(self)


    def __lt__(self, EdgeI):
        """
        __lt__(TMMNetCrossNetI self, TMMNetCrossNetI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TMMNetCrossNetI const &

        """
        return _SnapTime.TMMNetCrossNetI___lt__(self, EdgeI)


    def __eq__(self, EdgeI):
        """
        __eq__(TMMNetCrossNetI self, TMMNetCrossNetI EdgeI) -> bool

        Parameters
        ----------
        EdgeI: TMMNetCrossNetI const &

        """
        return _SnapTime.TMMNetCrossNetI___eq__(self, EdgeI)


    def GetCrossId(self):
        """
        GetCrossId(TMMNetCrossNetI self) -> int64

        Parameters
        ----------
        self: TMMNetCrossNetI *

        """
        return _SnapTime.TMMNetCrossNetI_GetCrossId(self)


    def GetCrossNet(self):
        """
        GetCrossNet(TMMNetCrossNetI self) -> TCrossNet

        Parameters
        ----------
        self: TMMNetCrossNetI *

        """
        return _SnapTime.TMMNetCrossNetI_GetCrossNet(self)

    __swig_destroy__ = _SnapTime.delete_TMMNetCrossNetI
TMMNetCrossNetI.Next = new_instancemethod(_SnapTime.TMMNetCrossNetI_Next, None, TMMNetCrossNetI)
TMMNetCrossNetI.__lt__ = new_instancemethod(_SnapTime.TMMNetCrossNetI___lt__, None, TMMNetCrossNetI)
TMMNetCrossNetI.__eq__ = new_instancemethod(_SnapTime.TMMNetCrossNetI___eq__, None, TMMNetCrossNetI)
TMMNetCrossNetI.GetCrossId = new_instancemethod(_SnapTime.TMMNetCrossNetI_GetCrossId, None, TMMNetCrossNetI)
TMMNetCrossNetI.GetCrossNet = new_instancemethod(_SnapTime.TMMNetCrossNetI_GetCrossNet, None, TMMNetCrossNetI)
TMMNetCrossNetI_swigregister = _SnapTime.TMMNetCrossNetI_swigregister
TMMNetCrossNetI_swigregister(TMMNetCrossNetI)


def TPrGraph(G):
    """
    TPrGraph(PUNGraph G) -> TUNGraph

    Parameters
    ----------
    G: PUNGraph

    """
    return _SnapTime.TPrGraph(G)

def LoadModeNetToNet(Graph, Name, Table, NCol, NodeAttrV):
    """
    LoadModeNetToNet(PMMNet Graph, TStr Name, PTable Table, TStr NCol, TStr64V NodeAttrV) -> int64

    Parameters
    ----------
    Graph: PMMNet
    Name: TStr const &
    Table: PTable
    NCol: TStr const &
    NodeAttrV: TStr64V &

    """
    return _SnapTime.LoadModeNetToNet(Graph, Name, Table, NCol, NodeAttrV)

def LoadCrossNetToNet(Graph, Mode1, Mode2, CrossName, Table, SrcCol, DstCol, EdgeAttrV):
    """
    LoadCrossNetToNet(PMMNet Graph, TStr Mode1, TStr Mode2, TStr CrossName, PTable Table, TStr SrcCol, TStr DstCol, TStr64V EdgeAttrV) -> int64

    Parameters
    ----------
    Graph: PMMNet
    Mode1: TStr const &
    Mode2: TStr const &
    CrossName: TStr const &
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    EdgeAttrV: TStr64V &

    """
    return _SnapTime.LoadCrossNetToNet(Graph, Mode1, Mode2, CrossName, Table, SrcCol, DstCol, EdgeAttrV)

def GetRndWalkRestart_PUNGraph(Graph, JumpProb, JumpNId, RwrNIdH):
    """
    GetRndWalkRestart_PUNGraph(PUNGraph Graph, double const & JumpProb, int64 const & JumpNId, TIntFlt64H RwrNIdH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    JumpProb: double const &
    JumpNId: int64 const &
    RwrNIdH: THash< TInt64,TFlt,int64,TDefaultHashFunc< TInt64,int64 > > &

    """
    return _SnapTime.GetRndWalkRestart_PUNGraph(Graph, JumpProb, JumpNId, RwrNIdH)

def GetRndWalkRestart_PNGraph(Graph, JumpProb, JumpNId, RwrNIdH):
    """
    GetRndWalkRestart_PNGraph(PNGraph Graph, double const & JumpProb, int64 const & JumpNId, TIntFlt64H RwrNIdH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    JumpProb: double const &
    JumpNId: int64 const &
    RwrNIdH: THash< TInt64,TFlt,int64,TDefaultHashFunc< TInt64,int64 > > &

    """
    return _SnapTime.GetRndWalkRestart_PNGraph(Graph, JumpProb, JumpNId, RwrNIdH)

def GetRndWalkRestart_PNEANet(Graph, JumpProb, JumpNId, RwrNIdH):
    """
    GetRndWalkRestart_PNEANet(PNEANet Graph, double const & JumpProb, int64 const & JumpNId, TIntFlt64H RwrNIdH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    JumpProb: double const &
    JumpNId: int64 const &
    RwrNIdH: THash< TInt64,TFlt,int64,TDefaultHashFunc< TInt64,int64 > > &

    """
    return _SnapTime.GetRndWalkRestart_PNEANet(Graph, JumpProb, JumpNId, RwrNIdH)


#
# define __getitem__ for [] addressing
#

def getitem_vec(self, i):
    return self.GetVal(i)

def setitem_vec(self, i, val):
    self.SetVal(i, val)

def len_vec(self):
    return self.Len()

def delitem_vec(self,  i):
    self.Del(i)

#
# define iterator for TVec
#

class IterVec:
    def __init__(self, vec):
        self.vec = vec
        self.count = -1

    def __iter__(self):
        return self

    def __next__(self):
        return self.next()

    def next(self):
        if self.count+1 < self.vec.Len():
            self.count += 1
            return self.vec[self.count]

        raise StopIteration

def itervec(self):
    return IterVec(self)

# expand TVec types with methods __iter__ and __getitem__

TIntV.__getitem__ = getitem_vec
TIntV.__setitem__ = setitem_vec
TIntV.__iter__ = itervec
TIntV.__len__ = len_vec
TIntV.__delitem__ = delitem_vec

TInt64V.__getitem__ = getitem_vec
TInt64V.__setitem__ = setitem_vec
TInt64V.__iter__ = itervec
TInt64V.__len__ = len_vec
TInt64V.__delitem__ = delitem_vec

TFltV.__getitem__ = getitem_vec
TFltV.__setitem__ = setitem_vec
TFltV.__iter__ = itervec
TFltV.__len__ = len_vec
TFltV.__delitem__ = delitem_vec

TFlt64V.__getitem__ = getitem_vec
TFlt64V.__setitem__ = setitem_vec
TFlt64V.__iter__ = itervec
TFlt64V.__len__ = len_vec
TFlt64V.__delitem__ = delitem_vec

TIntIntVV.__getitem__ = getitem_vec
TIntIntVV.__setitem__ = setitem_vec
TIntIntVV.__iter__ = itervec
TIntIntVV.__len__ = len_vec
TIntIntVV.__delitem__ = delitem_vec

TIntPrV.__getitem__ = getitem_vec
TIntPrV.__setitem__ = setitem_vec
TIntPrV.__iter__ = itervec
TIntPrV.__len__ = len_vec
TIntPrV.__delitem__ = delitem_vec

TIntPr64V.__getitem__ = getitem_vec
TIntPr64V.__setitem__ = setitem_vec
TIntPr64V.__iter__ = itervec
TIntPr64V.__len__ = len_vec
TIntPr64V.__delitem__ = delitem_vec

TFltPrV.__getitem__ = getitem_vec
TFltPrV.__setitem__ = setitem_vec
TFltPrV.__iter__ = itervec
TFltPrV.__len__ = len_vec
TFltPrV.__delitem__ = delitem_vec

TFltPr64V.__getitem__ = getitem_vec
TFltPr64V.__setitem__ = setitem_vec
TFltPr64V.__iter__ = itervec
TFltPr64V.__len__ = len_vec
TFltPr64V.__delitem__ = delitem_vec

TIntFltKdV.__getitem__ = getitem_vec
TIntFltKdV.__setitem__ = setitem_vec
TIntFltKdV.__iter__ = itervec
TIntFltKdV.__len__ = len_vec
TIntFltKdV.__delitem__ = delitem_vec

TIntFltKd64V.__getitem__ = getitem_vec
TIntFltKd64V.__setitem__ = setitem_vec
TIntFltKd64V.__iter__ = itervec
TIntFltKd64V.__len__ = len_vec
TIntFltKd64V.__delitem__ = delitem_vec

TCnComV.__getitem__ = getitem_vec
TCnComV.__setitem__ = setitem_vec
TCnComV.__iter__ = itervec
TCnComV.__len__ = len_vec
TCnComV.__delitem__ = delitem_vec

TCnCom.__getitem__ = getitem_vec
TCnCom.__setitem__ = setitem_vec
TCnCom.__iter__ = itervec
TCnCom.__len__ = len_vec
TCnCom.__delitem__ = delitem_vec

Schema.__getitem__ = getitem_vec
Schema.__setitem__ = setitem_vec
Schema.__iter__ = itervec
Schema.__len__ = len_vec
Schema.__delitem__ = delitem_vec

PNEANetV.__getitem__ = getitem_vec
PNEANetV.__setitem__ = setitem_vec
PNEANetV.__iter__ = itervec
PNEANetV.__len__ = len_vec
PNEANetV.__delitem__ = delitem_vec



#
# define __getitem__ for [] addressing
#
def getitem_hash(self, i):
    return self.GetDat(i)

def setitem_hash(self, key, value):
    self.AddDat(key, value)

def delitem_hash(self, key):
    self.DelKey(key)

def len_hash(self):
    return self.Len()

#
# define iterator for THash
#

class IterHash:
    def __init__(self, hash):
        self.hash = hash
        self.iter = None

    def __iter__(self):
        return self

    def __next__(self):
        return self.next()

    def next(self):
        if self.hash.Len() == 0:
            raise StopIteration
        if not self.iter:
            self.iter = self.hash.BegI()
            if not self.iter:
                raise StopIteration
            if self.iter:
                return self.iter.GetKey()
            return self.iter

        if self.iter.IsEnd():
            raise StopIteration

        self.iter.Next()

        if self.iter.IsEnd():
            raise StopIteration

        if self.iter:
            return self.iter.GetKey()
        return self.iter

def iterhash(self):
    return IterHash(self)

TIntH.__getitem__ = getitem_hash
TIntH.__setitem__ = setitem_hash
TIntH.__delitem__ = delitem_hash
TIntH.__len__ = len_hash
TIntH.__iter__ = iterhash

TInt64H.__getitem__ = getitem_hash
TInt64H.__setitem__ = setitem_hash
TInt64H.__delitem__ = delitem_hash
TInt64H.__len__ = len_hash
TInt64H.__iter__ = iterhash

TIntIntH.__getitem__ = getitem_hash
TIntIntH.__setitem__ = setitem_hash
TIntIntH.__delitem__ = delitem_hash
TIntIntH.__len__ = len_hash
TIntIntH.__iter__ = iterhash

TIntFltH.__getitem__ = getitem_hash
TIntFltH.__setitem__ = setitem_hash
TIntFltH.__delitem__ = delitem_hash
TIntFltH.__len__ = len_hash
TIntFltH.__iter__ = iterhash

TIntFlt64H.__getitem__ = getitem_hash
TIntFlt64H.__setitem__ = setitem_hash
TIntFlt64H.__delitem__ = delitem_hash
TIntFlt64H.__len__ = len_hash
TIntFlt64H.__iter__ = iterhash

TIntStrH.__getitem__ = getitem_hash
TIntStrH.__setitem__ = setitem_hash
TIntStrH.__delitem__ = delitem_hash
TIntStrH.__len__ = len_hash
TIntStrH.__iter__ = iterhash

TIntStr64H.__getitem__ = getitem_hash
TIntStr64H.__setitem__ = setitem_hash
TIntStr64H.__delitem__ = delitem_hash
TIntStr64H.__len__ = len_hash
TIntStr64H.__iter__ = iterhash

TIntPrFltH.__getitem__ = getitem_hash
TIntPrFltH.__setitem__ = setitem_hash
TIntPrFltH.__delitem__ = delitem_hash
TIntPrFltH.__len__ = len_hash
TIntPrFltH.__iter__ = iterhash

TIntPrFlt64H.__getitem__ = getitem_hash
TIntPrFlt64H.__setitem__ = setitem_hash
TIntPrFlt64H.__delitem__ = delitem_hash
TIntPrFlt64H.__len__ = len_hash
TIntPrFlt64H.__iter__ = iterhash

TStrIntH.__getitem__ = getitem_hash
TStrIntH.__setitem__ = setitem_hash
TStrIntH.__iter__ = iterhash
TStrIntH.__delitem__ = delitem_hash
TStrIntH.__len__ = len_hash

TStrInt64H.__getitem__ = getitem_hash
TStrInt64H.__setitem__ = setitem_hash
TStrInt64H.__iter__ = iterhash
TStrInt64H.__delitem__ = delitem_hash
TStrInt64H.__len__ = len_hash



#
# define __getitem__ for [] addressing
#
def getitem_hashset(self, i):
    return self.GetSetKey(i)

def delitem_hashset(self, i):
    self.DelKey(i)

def contains_hashset(self, key):
    return self.IsKey(key)

#
# define iterator for THashSet
#

class IterHashSet:
    def __init__(self, hash):
        self.hash = hash
        self.iter = None

    def __iter__(self):
        return self

    def __next__(self):
        return self.next()

    def next(self):
        if self.hash.Len() == 0:
            raise StopIteration
        if not self.iter:
            self.iter = self.hash.BegI()
            if not self.iter:
                raise StopIteration
            if self.iter:
                return self.iter.GetKey()
            return self.iter

        if self.iter.IsEnd():
            raise StopIteration

        self.iter.Next()

        if self.iter.IsEnd():
            raise StopIteration

        if self.iter:
            return self.iter.GetKey()
        return self.iter

def iterhashset(self):
    return IterHashSet(self)


TIntSet.__iter__ = iterhashset
TIntSet.__contains__ = contains_hashset
TInt64Set.__iter__ = iterhashset
TInt64Set.__contains__ = contains_hashset



def PrintGraphStatTable_PNEANet(*args):
    """
    PrintGraphStatTable_PNEANet(PNEANet G, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    G: TPt< TNEANet > const &
    OutFNm: TStr
    Desc: TStr

    PrintGraphStatTable_PNEANet(PNEANet G, TStr OutFNm)

    Parameters
    ----------
    G: TPt< TNEANet > const &
    OutFNm: TStr

    """
    return _SnapTime.PrintGraphStatTable_PNEANet(*args)
class PNEANet(object):
    """Proxy of C++ TPt<(TNEANet)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> PNEANet"""
        return _SnapTime.PNEANet_New()

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_PNEANet

    def Save(self, SOut):
        """
        Save(PNEANet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.PNEANet_Save(self, SOut)


    def __deref__(self):
        """
        __deref__(PNEANet self) -> TNEANet

        Parameters
        ----------
        self: TPt< TNEANet > const *

        """
        return _SnapTime.PNEANet___deref__(self)


    def __ref__(self):
        """
        __ref__(PNEANet self) -> TNEANet

        Parameters
        ----------
        self: TPt< TNEANet > const *

        """
        return _SnapTime.PNEANet___ref__(self)


    def __call__(self):
        """
        __call__(PNEANet self) -> TNEANet

        Parameters
        ----------
        self: TPt< TNEANet > const *

        """
        return _SnapTime.PNEANet___call__(self)


    def Empty(self):
        """
        Empty(PNEANet self) -> bool

        Parameters
        ----------
        self: TPt< TNEANet > const *

        """
        return _SnapTime.PNEANet_Empty(self)


    def Clr(self):
        """
        Clr(PNEANet self)

        Parameters
        ----------
        self: TPt< TNEANet > *

        """
        return _SnapTime.PNEANet_Clr(self)


    def GetRefs(self):
        """
        GetRefs(PNEANet self) -> int64

        Parameters
        ----------
        self: TPt< TNEANet > const *

        """
        return _SnapTime.PNEANet_GetRefs(self)

    CRef = _swig_property(_SnapTime.PNEANet_CRef_get)

    def Save_V1(self, SOut):
        """
        Save_V1(PNEANet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.PNEANet_Save_V1(self, SOut)


    def Save_V2(self, SOut):
        """
        Save_V2(PNEANet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.PNEANet_Save_V2(self, SOut)


    def Load(self, SIn):
        """
        Load(PNEANet self, TSIn SIn) -> PNEANet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.PNEANet_Load(self, SIn)


    def Load_V1(self, SIn):
        """
        Load_V1(PNEANet self, TSIn SIn) -> PNEANet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.PNEANet_Load_V1(self, SIn)


    def Load_V2(self, SIn):
        """
        Load_V2(PNEANet self, TSIn SIn) -> PNEANet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.PNEANet_Load_V2(self, SIn)


    def LoadNetworkShM(self, ShMIn):
        """
        LoadNetworkShM(PNEANet self, TShMIn ShMIn)

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.PNEANet_LoadNetworkShM(self, ShMIn)


    def LoadShM(self, ShMIn):
        """
        LoadShM(PNEANet self, TShMIn ShMIn) -> PNEANet

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.PNEANet_LoadShM(self, ShMIn)


    def ConvertToSparse(self):
        """
        ConvertToSparse(PNEANet self)

        Parameters
        ----------
        self: TPt< TNEANet > *

        """
        return _SnapTime.PNEANet_ConvertToSparse(self)


    def HasFlag(self, Flag):
        """
        HasFlag(PNEANet self, TGraphFlag const & Flag) -> bool

        Parameters
        ----------
        Flag: TGraphFlag const &

        """
        return _SnapTime.PNEANet_HasFlag(self, Flag)


    def GetNodes(self):
        """
        GetNodes(PNEANet self) -> int64

        Parameters
        ----------
        self: TPt< TNEANet > const *

        """
        return _SnapTime.PNEANet_GetNodes(self)


    def AddNode(self, *args):
        """
        AddNode(PNEANet self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(PNEANet self) -> int64
        AddNode(PNEANet self, TNEANet::TNodeI const & NodeI) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &

        """
        return _SnapTime.PNEANet_AddNode(self, *args)


    def AddNodeUnchecked(self, NId=-1):
        """
        AddNodeUnchecked(PNEANet self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNodeUnchecked(PNEANet self) -> int64

        Parameters
        ----------
        self: TPt< TNEANet > *

        """
        return _SnapTime.PNEANet_AddNodeUnchecked(self, NId)


    def DelNode(self, *args):
        """
        DelNode(PNEANet self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        DelNode(PNEANet self, TNEANet::TNode const & NodeI)

        Parameters
        ----------
        NodeI: TNEANet::TNode const &

        """
        return _SnapTime.PNEANet_DelNode(self, *args)


    def IsNode(self, NId):
        """
        IsNode(PNEANet self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.PNEANet_IsNode(self, NId)


    def BegNI(self, *args):
        """
        BegNI(PNEANet self) -> TNEANet::TNodeI
        BegNI(PNEANet self) -> TNEANetNodeI

        Parameters
        ----------
        self: TPt< TNEANet > *

        """
        return _SnapTime.PNEANet_BegNI(self, *args)


    def EndNI(self, *args):
        """
        EndNI(PNEANet self) -> TNEANet::TNodeI
        EndNI(PNEANet self) -> TNEANetNodeI

        Parameters
        ----------
        self: TPt< TNEANet > *

        """
        return _SnapTime.PNEANet_EndNI(self, *args)


    def GetNI(self, *args):
        """
        GetNI(PNEANet self, int64 const & NId) -> TNEANet::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetNI(PNEANet self) -> TIterNode< TNEANet >
        GetNI(PNEANet self, int64 const & NId) -> TNEANetNodeI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.PNEANet_GetNI(self, *args)


    def BegNAIntI(self, *args):
        """
        BegNAIntI(PNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters
        ----------
        attr: TStr const &

        BegNAIntI(PNEANet self, TStr Attr) -> TNEANetAIntI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_BegNAIntI(self, *args)


    def EndNAIntI(self, *args):
        """
        EndNAIntI(PNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters
        ----------
        attr: TStr const &

        EndNAIntI(PNEANet self, TStr Attr) -> TNEANetAIntI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_EndNAIntI(self, *args)


    def GetNAIntI(self, attr, NId):
        """
        GetNAIntI(PNEANet self, TStr attr, int64 const & NId) -> TNEANet::TAIntI

        Parameters
        ----------
        attr: TStr const &
        NId: int64 const &

        """
        return _SnapTime.PNEANet_GetNAIntI(self, attr, NId)


    def BegNAIntVI(self, attr):
        """
        BegNAIntVI(PNEANet self, TStr attr) -> TNEANet::TAIntVI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_BegNAIntVI(self, attr)


    def EndNAIntVI(self, attr):
        """
        EndNAIntVI(PNEANet self, TStr attr) -> TNEANet::TAIntVI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_EndNAIntVI(self, attr)


    def GetNAIntVI(self, attr, NId):
        """
        GetNAIntVI(PNEANet self, TStr attr, int64 const & NId) -> TNEANet::TAIntVI

        Parameters
        ----------
        attr: TStr const &
        NId: int64 const &

        """
        return _SnapTime.PNEANet_GetNAIntVI(self, attr, NId)


    def BegNAStrI(self, *args):
        """
        BegNAStrI(PNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters
        ----------
        attr: TStr const &

        BegNAStrI(PNEANet self, TStr Attr) -> TNEANetAStrI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_BegNAStrI(self, *args)


    def EndNAStrI(self, *args):
        """
        EndNAStrI(PNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters
        ----------
        attr: TStr const &

        EndNAStrI(PNEANet self, TStr Attr) -> TNEANetAStrI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_EndNAStrI(self, *args)


    def GetNAStrI(self, attr, NId):
        """
        GetNAStrI(PNEANet self, TStr attr, int64 const & NId) -> TNEANet::TAStrI

        Parameters
        ----------
        attr: TStr const &
        NId: int64 const &

        """
        return _SnapTime.PNEANet_GetNAStrI(self, attr, NId)


    def BegNAFltI(self, *args):
        """
        BegNAFltI(PNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters
        ----------
        attr: TStr const &

        BegNAFltI(PNEANet self, TStr Attr) -> TNEANetAFltI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_BegNAFltI(self, *args)


    def EndNAFltI(self, *args):
        """
        EndNAFltI(PNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters
        ----------
        attr: TStr const &

        EndNAFltI(PNEANet self, TStr Attr) -> TNEANetAFltI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_EndNAFltI(self, *args)


    def GetNAFltI(self, attr, NId):
        """
        GetNAFltI(PNEANet self, TStr attr, int64 const & NId) -> TNEANet::TAFltI

        Parameters
        ----------
        attr: TStr const &
        NId: int64 const &

        """
        return _SnapTime.PNEANet_GetNAFltI(self, attr, NId)


    def AttrNameNI(self, *args):
        """
        AttrNameNI(PNEANet self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        AttrNameNI(PNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANet_AttrNameNI(self, *args)


    def AttrValueNI(self, *args):
        """
        AttrValueNI(PNEANet self, TInt64 NId, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TStr64V &

        AttrValueNI(PNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.PNEANet_AttrValueNI(self, *args)


    def IntAttrNameNI(self, *args):
        """
        IntAttrNameNI(PNEANet self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        IntAttrNameNI(PNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANet_IntAttrNameNI(self, *args)


    def IntAttrValueNI(self, *args):
        """
        IntAttrValueNI(PNEANet self, TInt64 NId, TInt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TInt64V &

        IntAttrValueNI(PNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TInt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TInt64V &

        """
        return _SnapTime.PNEANet_IntAttrValueNI(self, *args)


    def IntVAttrNameNI(self, *args):
        """
        IntVAttrNameNI(PNEANet self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        IntVAttrNameNI(PNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANet_IntVAttrNameNI(self, *args)


    def IntVAttrValueNI(self, *args):
        """
        IntVAttrValueNI(PNEANet self, TInt64 NId, TIntInt64VV Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TVec< TInt64V,int64 > &

        IntVAttrValueNI(PNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TIntInt64VV Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TVec< TInt64V,int64 > &

        """
        return _SnapTime.PNEANet_IntVAttrValueNI(self, *args)


    def StrAttrNameNI(self, *args):
        """
        StrAttrNameNI(PNEANet self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        StrAttrNameNI(PNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANet_StrAttrNameNI(self, *args)


    def StrAttrValueNI(self, *args):
        """
        StrAttrValueNI(PNEANet self, TInt64 NId, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TStr64V &

        StrAttrValueNI(PNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.PNEANet_StrAttrValueNI(self, *args)


    def FltAttrNameNI(self, *args):
        """
        FltAttrNameNI(PNEANet self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        FltAttrNameNI(PNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANet_FltAttrNameNI(self, *args)


    def FltAttrValueNI(self, *args):
        """
        FltAttrValueNI(PNEANet self, TInt64 NId, TFlt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TFlt64V &

        FltAttrValueNI(PNEANet self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TFlt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TFlt64V &

        """
        return _SnapTime.PNEANet_FltAttrValueNI(self, *args)


    def AttrNameEI(self, *args):
        """
        AttrNameEI(PNEANet self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        AttrNameEI(PNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANet_AttrNameEI(self, *args)


    def AttrValueEI(self, *args):
        """
        AttrValueEI(PNEANet self, TInt64 EId, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TStr64V &

        AttrValueEI(PNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.PNEANet_AttrValueEI(self, *args)


    def IntAttrNameEI(self, *args):
        """
        IntAttrNameEI(PNEANet self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        IntAttrNameEI(PNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANet_IntAttrNameEI(self, *args)


    def IntAttrValueEI(self, *args):
        """
        IntAttrValueEI(PNEANet self, TInt64 EId, TInt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TInt64V &

        IntAttrValueEI(PNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TInt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TInt64V &

        """
        return _SnapTime.PNEANet_IntAttrValueEI(self, *args)


    def IntVAttrNameEI(self, *args):
        """
        IntVAttrNameEI(PNEANet self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        IntVAttrNameEI(PNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANet_IntVAttrNameEI(self, *args)


    def IntVAttrValueEI(self, *args):
        """
        IntVAttrValueEI(PNEANet self, TInt64 EId, TIntInt64VV Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TVec< TInt64V,int64 > &

        IntVAttrValueEI(PNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TIntInt64VV Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TVec< TInt64V,int64 > &

        """
        return _SnapTime.PNEANet_IntVAttrValueEI(self, *args)


    def StrAttrNameEI(self, *args):
        """
        StrAttrNameEI(PNEANet self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        StrAttrNameEI(PNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANet_StrAttrNameEI(self, *args)


    def StrAttrValueEI(self, *args):
        """
        StrAttrValueEI(PNEANet self, TInt64 EId, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TStr64V &

        StrAttrValueEI(PNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.PNEANet_StrAttrValueEI(self, *args)


    def FltAttrNameEI(self, *args):
        """
        FltAttrNameEI(PNEANet self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        FltAttrNameEI(PNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANet_FltAttrNameEI(self, *args)


    def FltAttrValueEI(self, *args):
        """
        FltAttrValueEI(PNEANet self, TInt64 EId, TFlt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TFlt64V &

        FltAttrValueEI(PNEANet self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TFlt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TFlt64V &

        """
        return _SnapTime.PNEANet_FltAttrValueEI(self, *args)


    def BegEAIntI(self, *args):
        """
        BegEAIntI(PNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters
        ----------
        attr: TStr const &

        BegEAIntI(PNEANet self, TStr Attr) -> TNEANetAIntI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_BegEAIntI(self, *args)


    def EndEAIntI(self, *args):
        """
        EndEAIntI(PNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters
        ----------
        attr: TStr const &

        EndEAIntI(PNEANet self, TStr Attr) -> TNEANetAIntI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_EndEAIntI(self, *args)


    def GetEAIntI(self, attr, EId):
        """
        GetEAIntI(PNEANet self, TStr attr, int64 const & EId) -> TNEANet::TAIntI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.PNEANet_GetEAIntI(self, attr, EId)


    def BegEAIntVI(self, attr):
        """
        BegEAIntVI(PNEANet self, TStr attr) -> TNEANet::TAIntVI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_BegEAIntVI(self, attr)


    def EndEAIntVI(self, attr):
        """
        EndEAIntVI(PNEANet self, TStr attr) -> TNEANet::TAIntVI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_EndEAIntVI(self, attr)


    def GetEAIntVI(self, attr, EId):
        """
        GetEAIntVI(PNEANet self, TStr attr, int64 const & EId) -> TNEANet::TAIntVI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.PNEANet_GetEAIntVI(self, attr, EId)


    def BegEAStrI(self, *args):
        """
        BegEAStrI(PNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters
        ----------
        attr: TStr const &

        BegEAStrI(PNEANet self, TStr Attr) -> TNEANetAStrI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_BegEAStrI(self, *args)


    def EndEAStrI(self, *args):
        """
        EndEAStrI(PNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters
        ----------
        attr: TStr const &

        EndEAStrI(PNEANet self, TStr Attr) -> TNEANetAStrI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_EndEAStrI(self, *args)


    def GetEAStrI(self, attr, EId):
        """
        GetEAStrI(PNEANet self, TStr attr, int64 const & EId) -> TNEANet::TAStrI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.PNEANet_GetEAStrI(self, attr, EId)


    def BegEAFltI(self, *args):
        """
        BegEAFltI(PNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters
        ----------
        attr: TStr const &

        BegEAFltI(PNEANet self, TStr Attr) -> TNEANetAFltI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_BegEAFltI(self, *args)


    def EndEAFltI(self, *args):
        """
        EndEAFltI(PNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters
        ----------
        attr: TStr const &

        EndEAFltI(PNEANet self, TStr Attr) -> TNEANetAFltI

        Parameters
        ----------
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_EndEAFltI(self, *args)


    def GetEAFltI(self, attr, EId):
        """
        GetEAFltI(PNEANet self, TStr attr, int64 const & EId) -> TNEANet::TAFltI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.PNEANet_GetEAFltI(self, attr, EId)


    def GetMxNId(self):
        """
        GetMxNId(PNEANet self) -> int64

        Parameters
        ----------
        self: TPt< TNEANet > const *

        """
        return _SnapTime.PNEANet_GetMxNId(self)


    def GetMxEId(self):
        """
        GetMxEId(PNEANet self) -> int64

        Parameters
        ----------
        self: TPt< TNEANet > const *

        """
        return _SnapTime.PNEANet_GetMxEId(self)


    def GetEdges(self):
        """
        GetEdges(PNEANet self) -> int64

        Parameters
        ----------
        self: TPt< TNEANet > const *

        """
        return _SnapTime.PNEANet_GetEdges(self)


    def AddEdge(self, *args):
        """
        AddEdge(PNEANet self, int64 const & SrcNId, int64 const & DstNId, int64 EId=-1) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        EId: int64

        AddEdge(PNEANet self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        AddEdge(PNEANet self, TNEANet::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &

        """
        return _SnapTime.PNEANet_AddEdge(self, *args)


    def DelEdge(self, *args):
        """
        DelEdge(PNEANet self, int64 const & EId)

        Parameters
        ----------
        EId: int64 const &

        DelEdge(PNEANet self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        DelEdge(PNEANet self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNEANet_DelEdge(self, *args)


    def IsEdge(self, *args):
        """
        IsEdge(PNEANet self, int64 const & EId) -> bool

        Parameters
        ----------
        EId: int64 const &

        IsEdge(PNEANet self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        IsEdge(PNEANet self, int64 const & SrcNId, int64 const & DstNId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        IsEdge(PNEANet self, int64 const & SrcNId, int64 const & DstNId, int64 & EId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        EId: int64 &
        IsDir: bool const &

        IsEdge(PNEANet self, int64 const & SrcNId, int64 const & DstNId, int64 & EId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        EId: int64 &

        """
        return _SnapTime.PNEANet_IsEdge(self, *args)


    def GetEId(self, SrcNId, DstNId):
        """
        GetEId(PNEANet self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNEANet_GetEId(self, SrcNId, DstNId)


    def BegEI(self, *args):
        """
        BegEI(PNEANet self) -> TNEANet::TEdgeI
        BegEI(PNEANet self) -> TNEANetEdgeI

        Parameters
        ----------
        self: TPt< TNEANet > *

        """
        return _SnapTime.PNEANet_BegEI(self, *args)


    def EndEI(self, *args):
        """
        EndEI(PNEANet self) -> TNEANet::TEdgeI
        EndEI(PNEANet self) -> TNEANetEdgeI

        Parameters
        ----------
        self: TPt< TNEANet > *

        """
        return _SnapTime.PNEANet_EndEI(self, *args)


    def GetEI(self, *args):
        """
        GetEI(PNEANet self, int64 const & SrcNId, int64 const & DstNId) -> TNEANet::TEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        GetEI(PNEANet self) -> TIterEdge< TNEANet >
        GetEI(PNEANet self, int64 const & EId) -> TNEANetEdgeI

        Parameters
        ----------
        EId: int64 const &

        GetEI(PNEANet self, int64 const & SrcNId, int64 const & DstNId) -> TNEANetEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNEANet_GetEI(self, *args)


    def GetRndNId(self, *args):
        """
        GetRndNId(PNEANet self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(PNEANet self) -> int64

        Parameters
        ----------
        self: TPt< TNEANet > *

        """
        return _SnapTime.PNEANet_GetRndNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(PNEANet self, TRnd Rnd) -> TNEANet::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(PNEANet self) -> TNEANet::TNodeI

        Parameters
        ----------
        self: TPt< TNEANet > *

        """
        return _SnapTime.PNEANet_GetRndNI(self, *args)


    def GetRndEId(self, *args):
        """
        GetRndEId(PNEANet self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndEId(PNEANet self) -> int64

        Parameters
        ----------
        self: TPt< TNEANet > *

        """
        return _SnapTime.PNEANet_GetRndEId(self, *args)


    def GetRndEI(self, *args):
        """
        GetRndEI(PNEANet self, TRnd Rnd) -> TNEANet::TEdgeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndEI(PNEANet self) -> TNEANet::TEdgeI

        Parameters
        ----------
        self: TPt< TNEANet > *

        """
        return _SnapTime.PNEANet_GetRndEI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(PNEANet self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.PNEANet_GetNIdV(self, NIdV)


    def GetEIdV(self, EIdV):
        """
        GetEIdV(PNEANet self, TInt64V EIdV)

        Parameters
        ----------
        EIdV: TInt64V &

        """
        return _SnapTime.PNEANet_GetEIdV(self, EIdV)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(PNEANet self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.PNEANet_Reserve(self, Nodes, Edges)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(PNEANet self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(PNEANet self)

        Parameters
        ----------
        self: TPt< TNEANet > *

        """
        return _SnapTime.PNEANet_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(PNEANet self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(PNEANet self) -> bool

        Parameters
        ----------
        self: TPt< TNEANet > const *

        """
        return _SnapTime.PNEANet_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(PNEANet self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(PNEANet self)

        Parameters
        ----------
        self: TPt< TNEANet > const *

        """
        return _SnapTime.PNEANet_Dump(self, *args)


    def IsEulerian(self, StartNId=None):
        """
        IsEulerian(PNEANet self, int64 * StartNId=None) -> bool

        Parameters
        ----------
        StartNId: int64 *

        IsEulerian(PNEANet self) -> bool

        Parameters
        ----------
        self: TPt< TNEANet > *

        """
        return _SnapTime.PNEANet_IsEulerian(self, StartNId)


    def GetEulerPath(self, Path):
        """
        GetEulerPath(PNEANet self, TInt64V Path) -> bool

        Parameters
        ----------
        Path: TInt64V &

        """
        return _SnapTime.PNEANet_GetEulerPath(self, Path)


    def AddIntAttrDatN(self, *args):
        """
        AddIntAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        value: TInt64 const &
        attr: TStr const &

        AddIntAttrDatN(PNEANet self, int64 const & NId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TInt64 const &
        attr: TStr const &

        AddIntAttrDatN(PNEANet self, TNEANetNodeI NI, TInt64 Value, TStr Attr) -> int64

        Parameters
        ----------
        NI: TNEANetNodeI const &
        Value: TInt64 const &
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_AddIntAttrDatN(self, *args)


    def AddStrAttrDatN(self, *args):
        """
        AddStrAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TStr value, TStr attr) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        value: TStr const &
        attr: TStr const &

        AddStrAttrDatN(PNEANet self, int64 const & NId, TStr value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TStr const &
        attr: TStr const &

        AddStrAttrDatN(PNEANet self, TNEANetNodeI NI, TStr Value, TStr Attr) -> int64

        Parameters
        ----------
        NI: TNEANetNodeI const &
        Value: TStr const &
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_AddStrAttrDatN(self, *args)


    def AddFltAttrDatN(self, *args):
        """
        AddFltAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        value: TFlt const &
        attr: TStr const &

        AddFltAttrDatN(PNEANet self, int64 const & NId, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TFlt const &
        attr: TStr const &

        AddFltAttrDatN(PNEANet self, TNEANetNodeI NI, TFlt Value, TStr Attr) -> int64

        Parameters
        ----------
        NI: TNEANetNodeI const &
        Value: TFlt const &
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_AddFltAttrDatN(self, *args)


    def AddIntVAttrDatN(self, *args):
        """
        AddIntVAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TInt64V value, TStr attr) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        value: TInt64V const &
        attr: TStr const &

        AddIntVAttrDatN(PNEANet self, int64 const & NId, TInt64V value, TStr attr, TBool UseDense=True) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TInt64V const &
        attr: TStr const &
        UseDense: TBool

        AddIntVAttrDatN(PNEANet self, int64 const & NId, TInt64V value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TInt64V const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_AddIntVAttrDatN(self, *args)


    def AppendIntVAttrDatN(self, *args):
        """
        AppendIntVAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        value: TInt64 const &
        attr: TStr const &

        AppendIntVAttrDatN(PNEANet self, int64 const & NId, TInt64 value, TStr attr, TBool UseDense=True) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TInt64 const &
        attr: TStr const &
        UseDense: TBool

        AppendIntVAttrDatN(PNEANet self, int64 const & NId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TInt64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_AppendIntVAttrDatN(self, *args)


    def DelFromIntVAttrDatN(self, *args):
        """
        DelFromIntVAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        value: TInt64 const &
        attr: TStr const &

        DelFromIntVAttrDatN(PNEANet self, int64 const & NId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TInt64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_DelFromIntVAttrDatN(self, *args)


    def AddIntAttrDatE(self, *args):
        """
        AddIntAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        value: TInt64 const &
        attr: TStr const &

        AddIntAttrDatE(PNEANet self, int64 const & EId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TInt64 const &
        attr: TStr const &

        AddIntAttrDatE(PNEANet self, TNEANetEdgeI EI, TInt64 Value, TStr Attr) -> int64

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        Value: TInt64 const &
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_AddIntAttrDatE(self, *args)


    def AddStrAttrDatE(self, *args):
        """
        AddStrAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TStr value, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        value: TStr const &
        attr: TStr const &

        AddStrAttrDatE(PNEANet self, int64 const & EId, TStr value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TStr const &
        attr: TStr const &

        AddStrAttrDatE(PNEANet self, TNEANetEdgeI EI, TStr Value, TStr Attr) -> int64

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        Value: TStr const &
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_AddStrAttrDatE(self, *args)


    def AddFltAttrDatE(self, *args):
        """
        AddFltAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        value: TFlt const &
        attr: TStr const &

        AddFltAttrDatE(PNEANet self, int64 const & EId, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TFlt const &
        attr: TStr const &

        AddFltAttrDatE(PNEANet self, TNEANetEdgeI EI, TFlt Value, TStr Attr) -> int64

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        Value: TFlt const &
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_AddFltAttrDatE(self, *args)


    def AddIntVAttrDatE(self, *args):
        """
        AddIntVAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64V value, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        value: TInt64V const &
        attr: TStr const &

        AddIntVAttrDatE(PNEANet self, int64 const & EId, TInt64V value, TStr attr, TBool UseDense=True) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TInt64V const &
        attr: TStr const &
        UseDense: TBool

        AddIntVAttrDatE(PNEANet self, int64 const & EId, TInt64V value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TInt64V const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_AddIntVAttrDatE(self, *args)


    def AppendIntVAttrDatE(self, *args):
        """
        AppendIntVAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        value: TInt64 const &
        attr: TStr const &

        AppendIntVAttrDatE(PNEANet self, int64 const & EId, TInt64 value, TStr attr, TBool UseDense=True) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TInt64 const &
        attr: TStr const &
        UseDense: TBool

        AppendIntVAttrDatE(PNEANet self, int64 const & EId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TInt64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_AppendIntVAttrDatE(self, *args)


    def GetIntAttrDatN(self, *args):
        """
        GetIntAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TStr attr) -> TInt64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        attr: TStr const &

        GetIntAttrDatN(PNEANet self, int64 const & NId, TStr attr) -> TInt64

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        GetIntAttrDatN(PNEANet self, TNEANetNodeI NI, TStr Attr) -> TInt64

        Parameters
        ----------
        NI: TNEANetNodeI const &
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_GetIntAttrDatN(self, *args)


    def GetStrAttrDatN(self, *args):
        """
        GetStrAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TStr attr) -> TStr

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        attr: TStr const &

        GetStrAttrDatN(PNEANet self, int64 const & NId, TStr attr) -> TStr

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        GetStrAttrDatN(PNEANet self, TNEANetNodeI NI, TStr Attr) -> TStr

        Parameters
        ----------
        NI: TNEANetNodeI const &
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_GetStrAttrDatN(self, *args)


    def GetFltAttrDatN(self, *args):
        """
        GetFltAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TStr attr) -> TFlt

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        attr: TStr const &

        GetFltAttrDatN(PNEANet self, int64 const & NId, TStr attr) -> TFlt

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        GetFltAttrDatN(PNEANet self, TNEANetNodeI NI, TStr Attr) -> TFlt

        Parameters
        ----------
        NI: TNEANetNodeI const &
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_GetFltAttrDatN(self, *args)


    def GetIntVAttrDatN(self, *args):
        """
        GetIntVAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TStr attr) -> TInt64V

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        attr: TStr const &

        GetIntVAttrDatN(PNEANet self, int64 const & NId, TStr attr) -> TInt64V

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_GetIntVAttrDatN(self, *args)


    def GetIntAttrIndN(self, attr):
        """
        GetIntAttrIndN(PNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_GetIntAttrIndN(self, attr)


    def GetAttrIndN(self, attr):
        """
        GetAttrIndN(PNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_GetAttrIndN(self, attr)


    def GetIntAttrIndDatN(self, *args):
        """
        GetIntAttrIndDatN(PNEANet self, TNEANet::TNodeI const & NodeI, int64 const & index) -> TInt64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        index: int64 const &

        GetIntAttrIndDatN(PNEANet self, int64 const & NId, int64 const & index) -> TInt64

        Parameters
        ----------
        NId: int64 const &
        index: int64 const &

        GetIntAttrIndDatN(PNEANet self, TNEANetNodeI NI, int64 const & index) -> TInt64

        Parameters
        ----------
        NI: TNEANetNodeI const &
        index: int64 const &

        """
        return _SnapTime.PNEANet_GetIntAttrIndDatN(self, *args)


    def GetStrAttrIndDatN(self, *args):
        """
        GetStrAttrIndDatN(PNEANet self, TNEANet::TNodeI const & NodeI, int64 const & index) -> TStr

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        index: int64 const &

        GetStrAttrIndDatN(PNEANet self, int64 const & NId, int64 const & index) -> TStr

        Parameters
        ----------
        NId: int64 const &
        index: int64 const &

        GetStrAttrIndDatN(PNEANet self, TNEANetNodeI NI, int64 const & index) -> TStr

        Parameters
        ----------
        NI: TNEANetNodeI const &
        index: int64 const &

        """
        return _SnapTime.PNEANet_GetStrAttrIndDatN(self, *args)


    def GetFltAttrIndDatN(self, *args):
        """
        GetFltAttrIndDatN(PNEANet self, TNEANet::TNodeI const & NodeI, int64 const & index) -> TFlt

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        index: int64 const &

        GetFltAttrIndDatN(PNEANet self, int64 const & NId, int64 const & index) -> TFlt

        Parameters
        ----------
        NId: int64 const &
        index: int64 const &

        GetFltAttrIndDatN(PNEANet self, TNEANetNodeI NI, int64 const & index) -> TFlt

        Parameters
        ----------
        NI: TNEANetNodeI const &
        index: int64 const &

        """
        return _SnapTime.PNEANet_GetFltAttrIndDatN(self, *args)


    def GetIntAttrDatE(self, *args):
        """
        GetIntAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TStr attr) -> TInt64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        attr: TStr const &

        GetIntAttrDatE(PNEANet self, int64 const & EId, TStr attr) -> TInt64

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        GetIntAttrDatE(PNEANet self, TNEANetEdgeI EI, TStr Attr) -> TInt64

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_GetIntAttrDatE(self, *args)


    def GetStrAttrDatE(self, *args):
        """
        GetStrAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TStr attr) -> TStr

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        attr: TStr const &

        GetStrAttrDatE(PNEANet self, int64 const & EId, TStr attr) -> TStr

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        GetStrAttrDatE(PNEANet self, TNEANetEdgeI EI, TStr Attr) -> TStr

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_GetStrAttrDatE(self, *args)


    def GetFltAttrDatE(self, *args):
        """
        GetFltAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TStr attr) -> TFlt

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        attr: TStr const &

        GetFltAttrDatE(PNEANet self, int64 const & EId, TStr attr) -> TFlt

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        GetFltAttrDatE(PNEANet self, TNEANetEdgeI EI, TStr Attr) -> TFlt

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_GetFltAttrDatE(self, *args)


    def GetIntVAttrDatE(self, *args):
        """
        GetIntVAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TStr attr) -> TInt64V

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        attr: TStr const &

        GetIntVAttrDatE(PNEANet self, int64 const & EId, TStr attr) -> TInt64V

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_GetIntVAttrDatE(self, *args)


    def GetIntAttrIndE(self, attr):
        """
        GetIntAttrIndE(PNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_GetIntAttrIndE(self, attr)


    def GetAttrIndE(self, attr):
        """
        GetAttrIndE(PNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_GetAttrIndE(self, attr)


    def GetIntAttrIndDatE(self, *args):
        """
        GetIntAttrIndDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, int64 const & index) -> TInt64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        index: int64 const &

        GetIntAttrIndDatE(PNEANet self, int64 const & EId, int64 const & index) -> TInt64

        Parameters
        ----------
        EId: int64 const &
        index: int64 const &

        GetIntAttrIndDatE(PNEANet self, TNEANetEdgeI EI, int64 const & index) -> TInt64

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        index: int64 const &

        """
        return _SnapTime.PNEANet_GetIntAttrIndDatE(self, *args)


    def GetFltAttrIndDatE(self, *args):
        """
        GetFltAttrIndDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, int const & index) -> TFlt

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        index: int const &

        GetFltAttrIndDatE(PNEANet self, int64 const & EId, int64 const & index) -> TFlt

        Parameters
        ----------
        EId: int64 const &
        index: int64 const &

        GetFltAttrIndDatE(PNEANet self, TNEANetEdgeI EI, int64 const & index) -> TFlt

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        index: int64 const &

        """
        return _SnapTime.PNEANet_GetFltAttrIndDatE(self, *args)


    def GetStrAttrIndDatE(self, *args):
        """
        GetStrAttrIndDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, int64 const & index) -> TStr

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        index: int64 const &

        GetStrAttrIndDatE(PNEANet self, int64 const & EId, int64 const & index) -> TStr

        Parameters
        ----------
        EId: int64 const &
        index: int64 const &

        GetStrAttrIndDatE(PNEANet self, TNEANetEdgeI EI, int64 const & index) -> TStr

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        index: int64 const &

        """
        return _SnapTime.PNEANet_GetStrAttrIndDatE(self, *args)


    def DelAttrDatN(self, *args):
        """
        DelAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TStr attr) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        attr: TStr const &

        DelAttrDatN(PNEANet self, int64 const & NId, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        DelAttrDatN(PNEANet self, TNEANetNodeI NI, TStr Attr) -> int64

        Parameters
        ----------
        NI: TNEANetNodeI const &
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_DelAttrDatN(self, *args)


    def DelAttrDatE(self, *args):
        """
        DelAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TStr attr) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        attr: TStr const &

        DelAttrDatE(PNEANet self, int64 const & EId, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        DelAttrDatE(PNEANet self, TNEANetEdgeI EI, TStr Attr) -> int64

        Parameters
        ----------
        EI: TNEANetEdgeI const &
        Attr: TStr const &

        """
        return _SnapTime.PNEANet_DelAttrDatE(self, *args)


    def DelAllAttrDatN(self):
        """
        DelAllAttrDatN(PNEANet self) -> int64

        Parameters
        ----------
        self: TPt< TNEANet > *

        """
        return _SnapTime.PNEANet_DelAllAttrDatN(self)


    def DelAllAttrDatE(self):
        """
        DelAllAttrDatE(PNEANet self) -> int64

        Parameters
        ----------
        self: TPt< TNEANet > *

        """
        return _SnapTime.PNEANet_DelAllAttrDatE(self)


    def AddIntAttrN(self, *args):
        """
        AddIntAttrN(PNEANet self, TStr attr, TInt64 defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TInt64

        AddIntAttrN(PNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_AddIntAttrN(self, *args)


    def AddStrAttrN(self, *args):
        """
        AddStrAttrN(PNEANet self, TStr attr, TStr defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TStr

        AddStrAttrN(PNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_AddStrAttrN(self, *args)


    def AddFltAttrN(self, *args):
        """
        AddFltAttrN(PNEANet self, TStr attr, TFlt defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TFlt

        AddFltAttrN(PNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_AddFltAttrN(self, *args)


    def AddIntVAttrN(self, attr, UseDense=True):
        """
        AddIntVAttrN(PNEANet self, TStr attr, TBool UseDense=True) -> int64

        Parameters
        ----------
        attr: TStr const &
        UseDense: TBool

        AddIntVAttrN(PNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_AddIntVAttrN(self, attr, UseDense)


    def AddIntAttrE(self, *args):
        """
        AddIntAttrE(PNEANet self, TStr attr, TInt64 defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TInt64

        AddIntAttrE(PNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_AddIntAttrE(self, *args)


    def AddStrAttrE(self, *args):
        """
        AddStrAttrE(PNEANet self, TStr attr, TStr defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TStr

        AddStrAttrE(PNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_AddStrAttrE(self, *args)


    def AddFltAttrE(self, *args):
        """
        AddFltAttrE(PNEANet self, TStr attr, TFlt defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TFlt

        AddFltAttrE(PNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_AddFltAttrE(self, *args)


    def AddIntVAttrE(self, attr, UseDense=True):
        """
        AddIntVAttrE(PNEANet self, TStr attr, TBool UseDense=True) -> int64

        Parameters
        ----------
        attr: TStr const &
        UseDense: TBool

        AddIntVAttrE(PNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_AddIntVAttrE(self, attr, UseDense)


    def DelAttrN(self, attr):
        """
        DelAttrN(PNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_DelAttrN(self, attr)


    def DelAttrE(self, attr):
        """
        DelAttrE(PNEANet self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_DelAttrE(self, attr)


    def IsAttrDeletedN(self, NId, attr):
        """
        IsAttrDeletedN(PNEANet self, int64 const & NId, TStr attr) -> bool

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsAttrDeletedN(self, NId, attr)


    def IsIntAttrDeletedN(self, NId, attr):
        """
        IsIntAttrDeletedN(PNEANet self, int64 const & NId, TStr attr) -> bool

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsIntAttrDeletedN(self, NId, attr)


    def IsIntVAttrDeletedN(self, NId, attr):
        """
        IsIntVAttrDeletedN(PNEANet self, int64 const & NId, TStr attr) -> bool

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsIntVAttrDeletedN(self, NId, attr)


    def IsStrAttrDeletedN(self, NId, attr):
        """
        IsStrAttrDeletedN(PNEANet self, int64 const & NId, TStr attr) -> bool

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsStrAttrDeletedN(self, NId, attr)


    def IsFltAttrDeletedN(self, NId, attr):
        """
        IsFltAttrDeletedN(PNEANet self, int64 const & NId, TStr attr) -> bool

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsFltAttrDeletedN(self, NId, attr)


    def NodeAttrIsDeleted(self, NId, NodeHI):
        """
        NodeAttrIsDeleted(PNEANet self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANet_NodeAttrIsDeleted(self, NId, NodeHI)


    def NodeAttrIsIntDeleted(self, NId, NodeHI):
        """
        NodeAttrIsIntDeleted(PNEANet self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANet_NodeAttrIsIntDeleted(self, NId, NodeHI)


    def NodeAttrIsIntVDeleted(self, NId, NodeHI):
        """
        NodeAttrIsIntVDeleted(PNEANet self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANet_NodeAttrIsIntVDeleted(self, NId, NodeHI)


    def NodeAttrIsStrDeleted(self, NId, NodeHI):
        """
        NodeAttrIsStrDeleted(PNEANet self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANet_NodeAttrIsStrDeleted(self, NId, NodeHI)


    def NodeAttrIsFltDeleted(self, NId, NodeHI):
        """
        NodeAttrIsFltDeleted(PNEANet self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANet_NodeAttrIsFltDeleted(self, NId, NodeHI)


    def IsAttrDeletedE(self, EId, attr):
        """
        IsAttrDeletedE(PNEANet self, int64 const & EId, TStr attr) -> bool

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsAttrDeletedE(self, EId, attr)


    def IsIntAttrDeletedE(self, EId, attr):
        """
        IsIntAttrDeletedE(PNEANet self, int64 const & EId, TStr attr) -> bool

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsIntAttrDeletedE(self, EId, attr)


    def IsIntVAttrDeletedE(self, EId, attr):
        """
        IsIntVAttrDeletedE(PNEANet self, int64 const & EId, TStr attr) -> bool

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsIntVAttrDeletedE(self, EId, attr)


    def IsStrAttrDeletedE(self, EId, attr):
        """
        IsStrAttrDeletedE(PNEANet self, int64 const & EId, TStr attr) -> bool

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsStrAttrDeletedE(self, EId, attr)


    def IsFltAttrDeletedE(self, EId, attr):
        """
        IsFltAttrDeletedE(PNEANet self, int64 const & EId, TStr attr) -> bool

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsFltAttrDeletedE(self, EId, attr)


    def EdgeAttrIsDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsDeleted(PNEANet self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANet_EdgeAttrIsDeleted(self, EId, EdgeHI)


    def EdgeAttrIsIntDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsIntDeleted(PNEANet self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANet_EdgeAttrIsIntDeleted(self, EId, EdgeHI)


    def EdgeAttrIsIntVDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsIntVDeleted(PNEANet self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANet_EdgeAttrIsIntVDeleted(self, EId, EdgeHI)


    def EdgeAttrIsStrDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsStrDeleted(PNEANet self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANet_EdgeAttrIsStrDeleted(self, EId, EdgeHI)


    def EdgeAttrIsFltDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsFltDeleted(PNEANet self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANet_EdgeAttrIsFltDeleted(self, EId, EdgeHI)


    def GetNodeAttrValue(self, NId, NodeHI):
        """
        GetNodeAttrValue(PNEANet self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> TStr

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANet_GetNodeAttrValue(self, NId, NodeHI)


    def GetEdgeAttrValue(self, EId, EdgeHI):
        """
        GetEdgeAttrValue(PNEANet self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> TStr

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANet_GetEdgeAttrValue(self, EId, EdgeHI)


    def GetWeightOutEdges(self, NI, attr):
        """
        GetWeightOutEdges(PNEANet self, TNEANet::TNodeI const & NI, TStr attr) -> TFlt

        Parameters
        ----------
        NI: TNEANet::TNodeI const &
        attr: TStr const &

        """
        return _SnapTime.PNEANet_GetWeightOutEdges(self, NI, attr)


    def IsFltAttrN(self, attr):
        """
        IsFltAttrN(PNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsFltAttrN(self, attr)


    def IsIntAttrN(self, attr):
        """
        IsIntAttrN(PNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsIntAttrN(self, attr)


    def IsStrAttrN(self, attr):
        """
        IsStrAttrN(PNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsStrAttrN(self, attr)


    def IsIntVAttrN(self, attr):
        """
        IsIntVAttrN(PNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsIntVAttrN(self, attr)


    def IsFltAttrE(self, attr):
        """
        IsFltAttrE(PNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsFltAttrE(self, attr)


    def IsIntAttrE(self, attr):
        """
        IsIntAttrE(PNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsIntAttrE(self, attr)


    def IsStrAttrE(self, attr):
        """
        IsStrAttrE(PNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsStrAttrE(self, attr)


    def IsIntVAttrE(self, attr):
        """
        IsIntVAttrE(PNEANet self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_IsIntVAttrE(self, attr)


    def GetFltAttrVecE(self, attr):
        """
        GetFltAttrVecE(PNEANet self, TStr attr) -> TFlt64V

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANet_GetFltAttrVecE(self, attr)


    def GetFltKeyIdE(self, EId):
        """
        GetFltKeyIdE(PNEANet self, int64 const & EId) -> int64

        Parameters
        ----------
        EId: int64 const &

        """
        return _SnapTime.PNEANet_GetFltKeyIdE(self, EId)


    def GetWeightOutEdgesV(self, OutWeights, AttrVal):
        """
        GetWeightOutEdgesV(PNEANet self, TFlt64V OutWeights, TFlt64V AttrVal)

        Parameters
        ----------
        OutWeights: TFlt64V &
        AttrVal: TFlt64V const &

        """
        return _SnapTime.PNEANet_GetWeightOutEdgesV(self, OutWeights, AttrVal)


    def GetAttrNNames(self, IntAttrNames, FltAttrNames, StrAttrNames):
        """
        GetAttrNNames(PNEANet self, TStr64V IntAttrNames, TStr64V FltAttrNames, TStr64V StrAttrNames)

        Parameters
        ----------
        IntAttrNames: TStr64V &
        FltAttrNames: TStr64V &
        StrAttrNames: TStr64V &

        """
        return _SnapTime.PNEANet_GetAttrNNames(self, IntAttrNames, FltAttrNames, StrAttrNames)


    def GetIntVAttrNNames(self, IntVAttrNames):
        """
        GetIntVAttrNNames(PNEANet self, TStr64V IntVAttrNames)

        Parameters
        ----------
        IntVAttrNames: TStr64V &

        """
        return _SnapTime.PNEANet_GetIntVAttrNNames(self, IntVAttrNames)


    def GetAttrENames(self, IntAttrNames, FltAttrNames, StrAttrNames):
        """
        GetAttrENames(PNEANet self, TStr64V IntAttrNames, TStr64V FltAttrNames, TStr64V StrAttrNames)

        Parameters
        ----------
        IntAttrNames: TStr64V &
        FltAttrNames: TStr64V &
        StrAttrNames: TStr64V &

        """
        return _SnapTime.PNEANet_GetAttrENames(self, IntAttrNames, FltAttrNames, StrAttrNames)


    def GetIntVAttrENames(self, IntVAttrNames):
        """
        GetIntVAttrENames(PNEANet self, TStr64V IntVAttrNames)

        Parameters
        ----------
        IntVAttrNames: TStr64V &

        """
        return _SnapTime.PNEANet_GetIntVAttrENames(self, IntVAttrNames)


    def AddSAttrDatN(self, *args):
        """
        AddSAttrDatN(PNEANet self, TInt64 NId, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatN(PNEANet self, TInt64 NId, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatN(PNEANet self, TInt64 NId, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatN(PNEANet self, TInt64 NId, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatN(PNEANet self, TInt64 NId, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatN(PNEANet self, TInt64 NId, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TStr const &

        AddSAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrId: TInt64 const &
        Val: TStr const &

        """
        return _SnapTime.PNEANet_AddSAttrDatN(self, *args)


    def GetSAttrDatN(self, *args):
        """
        GetSAttrDatN(PNEANet self, TInt64 NId, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatN(PNEANet self, TInt64 NId, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatN(PNEANet self, TInt64 NId, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatN(PNEANet self, TInt64 NId, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatN(PNEANet self, TInt64 NId, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatN(PNEANet self, TInt64 NId, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TStr &

        GetSAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TStr &

        """
        return _SnapTime.PNEANet_GetSAttrDatN(self, *args)


    def DelSAttrDatN(self, *args):
        """
        DelSAttrDatN(PNEANet self, TInt64 NId, TStr AttrName) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &

        DelSAttrDatN(PNEANet self, TInt64 NId, TInt64 AttrId) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &

        DelSAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TStr AttrName) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrName: TStr const &

        DelSAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeI, TInt64 AttrId) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrId: TInt64 const &

        """
        return _SnapTime.PNEANet_DelSAttrDatN(self, *args)


    def GetSAttrVN(self, *args):
        """
        GetSAttrVN(PNEANet self, TInt64 NId, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        GetSAttrVN(PNEANet self, TNEANet::TNodeI const & NodeI, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        """
        return _SnapTime.PNEANet_GetSAttrVN(self, *args)


    def GetIdVSAttrN(self, *args):
        """
        GetIdVSAttrN(PNEANet self, TStr AttrName, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrName: TStr const &
        IdV: TInt64V &

        GetIdVSAttrN(PNEANet self, TInt64 AttrId, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        IdV: TInt64V &

        """
        return _SnapTime.PNEANet_GetIdVSAttrN(self, *args)


    def AddSAttrN(self, Name, AttrType, AttrId):
        """
        AddSAttrN(PNEANet self, TStr Name, TAttrType const & AttrType, TInt64 AttrId) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrType: TAttrType const &
        AttrId: TInt64 &

        """
        return _SnapTime.PNEANet_AddSAttrN(self, Name, AttrType, AttrId)


    def GetSAttrIdN(self, Name, AttrIdX, AttrTypeX):
        """
        GetSAttrIdN(PNEANet self, TStr Name, TInt64 AttrIdX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrIdX: TInt64 &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.PNEANet_GetSAttrIdN(self, Name, AttrIdX, AttrTypeX)


    def GetSAttrNameN(self, AttrId, NameX, AttrTypeX):
        """
        GetSAttrNameN(PNEANet self, TInt64 AttrId, TStr NameX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        NameX: TStr &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.PNEANet_GetSAttrNameN(self, AttrId, NameX, AttrTypeX)


    def AddSAttrDatE(self, *args):
        """
        AddSAttrDatE(PNEANet self, TInt64 EId, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatE(PNEANet self, TInt64 EId, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatE(PNEANet self, TInt64 EId, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatE(PNEANet self, TInt64 EId, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatE(PNEANet self, TInt64 EId, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatE(PNEANet self, TInt64 EId, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrId: TInt64 const &
        Val: TStr const &

        AddSAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TStr AttrName, TStr Val) -> int

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TStr const &

        """
        return _SnapTime.PNEANet_AddSAttrDatE(self, *args)


    def GetSAttrDatE(self, *args):
        """
        GetSAttrDatE(PNEANet self, TInt64 EId, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatE(PNEANet self, TInt64 EId, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatE(PNEANet self, TInt64 EId, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatE(PNEANet self, TInt64 EId, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatE(PNEANet self, TInt64 EId, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatE(PNEANet self, TInt64 EId, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TStr &

        GetSAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TStr &

        """
        return _SnapTime.PNEANet_GetSAttrDatE(self, *args)


    def DelSAttrDatE(self, *args):
        """
        DelSAttrDatE(PNEANet self, TInt64 EId, TStr AttrName) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrName: TStr const &

        DelSAttrDatE(PNEANet self, TInt64 EId, TInt64 AttrId) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrId: TInt64 const &

        DelSAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TStr AttrName) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrName: TStr const &

        DelSAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TInt64 AttrId) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrId: TInt64 const &

        """
        return _SnapTime.PNEANet_DelSAttrDatE(self, *args)


    def GetSAttrVE(self, *args):
        """
        GetSAttrVE(PNEANet self, TInt64 EId, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        EId: TInt64 const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        GetSAttrVE(PNEANet self, TNEANet::TEdgeI const & EdgeI, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        """
        return _SnapTime.PNEANet_GetSAttrVE(self, *args)


    def GetIdVSAttrE(self, *args):
        """
        GetIdVSAttrE(PNEANet self, TStr AttrName, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrName: TStr const &
        IdV: TInt64V &

        GetIdVSAttrE(PNEANet self, TInt64 AttrId, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        IdV: TInt64V &

        """
        return _SnapTime.PNEANet_GetIdVSAttrE(self, *args)


    def AddSAttrE(self, Name, AttrType, AttrId):
        """
        AddSAttrE(PNEANet self, TStr Name, TAttrType const & AttrType, TInt64 AttrId) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrType: TAttrType const &
        AttrId: TInt64 &

        """
        return _SnapTime.PNEANet_AddSAttrE(self, Name, AttrType, AttrId)


    def GetSAttrIdE(self, Name, AttrIdX, AttrTypeX):
        """
        GetSAttrIdE(PNEANet self, TStr Name, TInt64 AttrIdX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrIdX: TInt64 &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.PNEANet_GetSAttrIdE(self, Name, AttrIdX, AttrTypeX)


    def GetSAttrNameE(self, AttrId, NameX, AttrTypeX):
        """
        GetSAttrNameE(PNEANet self, TInt64 AttrId, TStr NameX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        NameX: TStr &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.PNEANet_GetSAttrNameE(self, AttrId, NameX, AttrTypeX)

PNEANet.Save = new_instancemethod(_SnapTime.PNEANet_Save, None, PNEANet)
PNEANet.__deref__ = new_instancemethod(_SnapTime.PNEANet___deref__, None, PNEANet)
PNEANet.__ref__ = new_instancemethod(_SnapTime.PNEANet___ref__, None, PNEANet)
PNEANet.__call__ = new_instancemethod(_SnapTime.PNEANet___call__, None, PNEANet)
PNEANet.Empty = new_instancemethod(_SnapTime.PNEANet_Empty, None, PNEANet)
PNEANet.Clr = new_instancemethod(_SnapTime.PNEANet_Clr, None, PNEANet)
PNEANet.GetRefs = new_instancemethod(_SnapTime.PNEANet_GetRefs, None, PNEANet)
PNEANet.Save_V1 = new_instancemethod(_SnapTime.PNEANet_Save_V1, None, PNEANet)
PNEANet.Save_V2 = new_instancemethod(_SnapTime.PNEANet_Save_V2, None, PNEANet)
PNEANet.Load = new_instancemethod(_SnapTime.PNEANet_Load, None, PNEANet)
PNEANet.Load_V1 = new_instancemethod(_SnapTime.PNEANet_Load_V1, None, PNEANet)
PNEANet.Load_V2 = new_instancemethod(_SnapTime.PNEANet_Load_V2, None, PNEANet)
PNEANet.LoadNetworkShM = new_instancemethod(_SnapTime.PNEANet_LoadNetworkShM, None, PNEANet)
PNEANet.LoadShM = new_instancemethod(_SnapTime.PNEANet_LoadShM, None, PNEANet)
PNEANet.ConvertToSparse = new_instancemethod(_SnapTime.PNEANet_ConvertToSparse, None, PNEANet)
PNEANet.HasFlag = new_instancemethod(_SnapTime.PNEANet_HasFlag, None, PNEANet)
PNEANet.GetNodes = new_instancemethod(_SnapTime.PNEANet_GetNodes, None, PNEANet)
PNEANet.AddNode = new_instancemethod(_SnapTime.PNEANet_AddNode, None, PNEANet)
PNEANet.AddNodeUnchecked = new_instancemethod(_SnapTime.PNEANet_AddNodeUnchecked, None, PNEANet)
PNEANet.DelNode = new_instancemethod(_SnapTime.PNEANet_DelNode, None, PNEANet)
PNEANet.IsNode = new_instancemethod(_SnapTime.PNEANet_IsNode, None, PNEANet)
PNEANet.BegNI = new_instancemethod(_SnapTime.PNEANet_BegNI, None, PNEANet)
PNEANet.EndNI = new_instancemethod(_SnapTime.PNEANet_EndNI, None, PNEANet)
PNEANet.GetNI = new_instancemethod(_SnapTime.PNEANet_GetNI, None, PNEANet)
PNEANet.BegNAIntI = new_instancemethod(_SnapTime.PNEANet_BegNAIntI, None, PNEANet)
PNEANet.EndNAIntI = new_instancemethod(_SnapTime.PNEANet_EndNAIntI, None, PNEANet)
PNEANet.GetNAIntI = new_instancemethod(_SnapTime.PNEANet_GetNAIntI, None, PNEANet)
PNEANet.BegNAIntVI = new_instancemethod(_SnapTime.PNEANet_BegNAIntVI, None, PNEANet)
PNEANet.EndNAIntVI = new_instancemethod(_SnapTime.PNEANet_EndNAIntVI, None, PNEANet)
PNEANet.GetNAIntVI = new_instancemethod(_SnapTime.PNEANet_GetNAIntVI, None, PNEANet)
PNEANet.BegNAStrI = new_instancemethod(_SnapTime.PNEANet_BegNAStrI, None, PNEANet)
PNEANet.EndNAStrI = new_instancemethod(_SnapTime.PNEANet_EndNAStrI, None, PNEANet)
PNEANet.GetNAStrI = new_instancemethod(_SnapTime.PNEANet_GetNAStrI, None, PNEANet)
PNEANet.BegNAFltI = new_instancemethod(_SnapTime.PNEANet_BegNAFltI, None, PNEANet)
PNEANet.EndNAFltI = new_instancemethod(_SnapTime.PNEANet_EndNAFltI, None, PNEANet)
PNEANet.GetNAFltI = new_instancemethod(_SnapTime.PNEANet_GetNAFltI, None, PNEANet)
PNEANet.AttrNameNI = new_instancemethod(_SnapTime.PNEANet_AttrNameNI, None, PNEANet)
PNEANet.AttrValueNI = new_instancemethod(_SnapTime.PNEANet_AttrValueNI, None, PNEANet)
PNEANet.IntAttrNameNI = new_instancemethod(_SnapTime.PNEANet_IntAttrNameNI, None, PNEANet)
PNEANet.IntAttrValueNI = new_instancemethod(_SnapTime.PNEANet_IntAttrValueNI, None, PNEANet)
PNEANet.IntVAttrNameNI = new_instancemethod(_SnapTime.PNEANet_IntVAttrNameNI, None, PNEANet)
PNEANet.IntVAttrValueNI = new_instancemethod(_SnapTime.PNEANet_IntVAttrValueNI, None, PNEANet)
PNEANet.StrAttrNameNI = new_instancemethod(_SnapTime.PNEANet_StrAttrNameNI, None, PNEANet)
PNEANet.StrAttrValueNI = new_instancemethod(_SnapTime.PNEANet_StrAttrValueNI, None, PNEANet)
PNEANet.FltAttrNameNI = new_instancemethod(_SnapTime.PNEANet_FltAttrNameNI, None, PNEANet)
PNEANet.FltAttrValueNI = new_instancemethod(_SnapTime.PNEANet_FltAttrValueNI, None, PNEANet)
PNEANet.AttrNameEI = new_instancemethod(_SnapTime.PNEANet_AttrNameEI, None, PNEANet)
PNEANet.AttrValueEI = new_instancemethod(_SnapTime.PNEANet_AttrValueEI, None, PNEANet)
PNEANet.IntAttrNameEI = new_instancemethod(_SnapTime.PNEANet_IntAttrNameEI, None, PNEANet)
PNEANet.IntAttrValueEI = new_instancemethod(_SnapTime.PNEANet_IntAttrValueEI, None, PNEANet)
PNEANet.IntVAttrNameEI = new_instancemethod(_SnapTime.PNEANet_IntVAttrNameEI, None, PNEANet)
PNEANet.IntVAttrValueEI = new_instancemethod(_SnapTime.PNEANet_IntVAttrValueEI, None, PNEANet)
PNEANet.StrAttrNameEI = new_instancemethod(_SnapTime.PNEANet_StrAttrNameEI, None, PNEANet)
PNEANet.StrAttrValueEI = new_instancemethod(_SnapTime.PNEANet_StrAttrValueEI, None, PNEANet)
PNEANet.FltAttrNameEI = new_instancemethod(_SnapTime.PNEANet_FltAttrNameEI, None, PNEANet)
PNEANet.FltAttrValueEI = new_instancemethod(_SnapTime.PNEANet_FltAttrValueEI, None, PNEANet)
PNEANet.BegEAIntI = new_instancemethod(_SnapTime.PNEANet_BegEAIntI, None, PNEANet)
PNEANet.EndEAIntI = new_instancemethod(_SnapTime.PNEANet_EndEAIntI, None, PNEANet)
PNEANet.GetEAIntI = new_instancemethod(_SnapTime.PNEANet_GetEAIntI, None, PNEANet)
PNEANet.BegEAIntVI = new_instancemethod(_SnapTime.PNEANet_BegEAIntVI, None, PNEANet)
PNEANet.EndEAIntVI = new_instancemethod(_SnapTime.PNEANet_EndEAIntVI, None, PNEANet)
PNEANet.GetEAIntVI = new_instancemethod(_SnapTime.PNEANet_GetEAIntVI, None, PNEANet)
PNEANet.BegEAStrI = new_instancemethod(_SnapTime.PNEANet_BegEAStrI, None, PNEANet)
PNEANet.EndEAStrI = new_instancemethod(_SnapTime.PNEANet_EndEAStrI, None, PNEANet)
PNEANet.GetEAStrI = new_instancemethod(_SnapTime.PNEANet_GetEAStrI, None, PNEANet)
PNEANet.BegEAFltI = new_instancemethod(_SnapTime.PNEANet_BegEAFltI, None, PNEANet)
PNEANet.EndEAFltI = new_instancemethod(_SnapTime.PNEANet_EndEAFltI, None, PNEANet)
PNEANet.GetEAFltI = new_instancemethod(_SnapTime.PNEANet_GetEAFltI, None, PNEANet)
PNEANet.GetMxNId = new_instancemethod(_SnapTime.PNEANet_GetMxNId, None, PNEANet)
PNEANet.GetMxEId = new_instancemethod(_SnapTime.PNEANet_GetMxEId, None, PNEANet)
PNEANet.GetEdges = new_instancemethod(_SnapTime.PNEANet_GetEdges, None, PNEANet)
PNEANet.AddEdge = new_instancemethod(_SnapTime.PNEANet_AddEdge, None, PNEANet)
PNEANet.DelEdge = new_instancemethod(_SnapTime.PNEANet_DelEdge, None, PNEANet)
PNEANet.IsEdge = new_instancemethod(_SnapTime.PNEANet_IsEdge, None, PNEANet)
PNEANet.GetEId = new_instancemethod(_SnapTime.PNEANet_GetEId, None, PNEANet)
PNEANet.BegEI = new_instancemethod(_SnapTime.PNEANet_BegEI, None, PNEANet)
PNEANet.EndEI = new_instancemethod(_SnapTime.PNEANet_EndEI, None, PNEANet)
PNEANet.GetEI = new_instancemethod(_SnapTime.PNEANet_GetEI, None, PNEANet)
PNEANet.GetRndNId = new_instancemethod(_SnapTime.PNEANet_GetRndNId, None, PNEANet)
PNEANet.GetRndNI = new_instancemethod(_SnapTime.PNEANet_GetRndNI, None, PNEANet)
PNEANet.GetRndEId = new_instancemethod(_SnapTime.PNEANet_GetRndEId, None, PNEANet)
PNEANet.GetRndEI = new_instancemethod(_SnapTime.PNEANet_GetRndEI, None, PNEANet)
PNEANet.GetNIdV = new_instancemethod(_SnapTime.PNEANet_GetNIdV, None, PNEANet)
PNEANet.GetEIdV = new_instancemethod(_SnapTime.PNEANet_GetEIdV, None, PNEANet)
PNEANet.Reserve = new_instancemethod(_SnapTime.PNEANet_Reserve, None, PNEANet)
PNEANet.Defrag = new_instancemethod(_SnapTime.PNEANet_Defrag, None, PNEANet)
PNEANet.IsOk = new_instancemethod(_SnapTime.PNEANet_IsOk, None, PNEANet)
PNEANet.Dump = new_instancemethod(_SnapTime.PNEANet_Dump, None, PNEANet)
PNEANet.IsEulerian = new_instancemethod(_SnapTime.PNEANet_IsEulerian, None, PNEANet)
PNEANet.GetEulerPath = new_instancemethod(_SnapTime.PNEANet_GetEulerPath, None, PNEANet)
PNEANet.AddIntAttrDatN = new_instancemethod(_SnapTime.PNEANet_AddIntAttrDatN, None, PNEANet)
PNEANet.AddStrAttrDatN = new_instancemethod(_SnapTime.PNEANet_AddStrAttrDatN, None, PNEANet)
PNEANet.AddFltAttrDatN = new_instancemethod(_SnapTime.PNEANet_AddFltAttrDatN, None, PNEANet)
PNEANet.AddIntVAttrDatN = new_instancemethod(_SnapTime.PNEANet_AddIntVAttrDatN, None, PNEANet)
PNEANet.AppendIntVAttrDatN = new_instancemethod(_SnapTime.PNEANet_AppendIntVAttrDatN, None, PNEANet)
PNEANet.DelFromIntVAttrDatN = new_instancemethod(_SnapTime.PNEANet_DelFromIntVAttrDatN, None, PNEANet)
PNEANet.AddIntAttrDatE = new_instancemethod(_SnapTime.PNEANet_AddIntAttrDatE, None, PNEANet)
PNEANet.AddStrAttrDatE = new_instancemethod(_SnapTime.PNEANet_AddStrAttrDatE, None, PNEANet)
PNEANet.AddFltAttrDatE = new_instancemethod(_SnapTime.PNEANet_AddFltAttrDatE, None, PNEANet)
PNEANet.AddIntVAttrDatE = new_instancemethod(_SnapTime.PNEANet_AddIntVAttrDatE, None, PNEANet)
PNEANet.AppendIntVAttrDatE = new_instancemethod(_SnapTime.PNEANet_AppendIntVAttrDatE, None, PNEANet)
PNEANet.GetIntAttrDatN = new_instancemethod(_SnapTime.PNEANet_GetIntAttrDatN, None, PNEANet)
PNEANet.GetStrAttrDatN = new_instancemethod(_SnapTime.PNEANet_GetStrAttrDatN, None, PNEANet)
PNEANet.GetFltAttrDatN = new_instancemethod(_SnapTime.PNEANet_GetFltAttrDatN, None, PNEANet)
PNEANet.GetIntVAttrDatN = new_instancemethod(_SnapTime.PNEANet_GetIntVAttrDatN, None, PNEANet)
PNEANet.GetIntAttrIndN = new_instancemethod(_SnapTime.PNEANet_GetIntAttrIndN, None, PNEANet)
PNEANet.GetAttrIndN = new_instancemethod(_SnapTime.PNEANet_GetAttrIndN, None, PNEANet)
PNEANet.GetIntAttrIndDatN = new_instancemethod(_SnapTime.PNEANet_GetIntAttrIndDatN, None, PNEANet)
PNEANet.GetStrAttrIndDatN = new_instancemethod(_SnapTime.PNEANet_GetStrAttrIndDatN, None, PNEANet)
PNEANet.GetFltAttrIndDatN = new_instancemethod(_SnapTime.PNEANet_GetFltAttrIndDatN, None, PNEANet)
PNEANet.GetIntAttrDatE = new_instancemethod(_SnapTime.PNEANet_GetIntAttrDatE, None, PNEANet)
PNEANet.GetStrAttrDatE = new_instancemethod(_SnapTime.PNEANet_GetStrAttrDatE, None, PNEANet)
PNEANet.GetFltAttrDatE = new_instancemethod(_SnapTime.PNEANet_GetFltAttrDatE, None, PNEANet)
PNEANet.GetIntVAttrDatE = new_instancemethod(_SnapTime.PNEANet_GetIntVAttrDatE, None, PNEANet)
PNEANet.GetIntAttrIndE = new_instancemethod(_SnapTime.PNEANet_GetIntAttrIndE, None, PNEANet)
PNEANet.GetAttrIndE = new_instancemethod(_SnapTime.PNEANet_GetAttrIndE, None, PNEANet)
PNEANet.GetIntAttrIndDatE = new_instancemethod(_SnapTime.PNEANet_GetIntAttrIndDatE, None, PNEANet)
PNEANet.GetFltAttrIndDatE = new_instancemethod(_SnapTime.PNEANet_GetFltAttrIndDatE, None, PNEANet)
PNEANet.GetStrAttrIndDatE = new_instancemethod(_SnapTime.PNEANet_GetStrAttrIndDatE, None, PNEANet)
PNEANet.DelAttrDatN = new_instancemethod(_SnapTime.PNEANet_DelAttrDatN, None, PNEANet)
PNEANet.DelAttrDatE = new_instancemethod(_SnapTime.PNEANet_DelAttrDatE, None, PNEANet)
PNEANet.DelAllAttrDatN = new_instancemethod(_SnapTime.PNEANet_DelAllAttrDatN, None, PNEANet)
PNEANet.DelAllAttrDatE = new_instancemethod(_SnapTime.PNEANet_DelAllAttrDatE, None, PNEANet)
PNEANet.AddIntAttrN = new_instancemethod(_SnapTime.PNEANet_AddIntAttrN, None, PNEANet)
PNEANet.AddStrAttrN = new_instancemethod(_SnapTime.PNEANet_AddStrAttrN, None, PNEANet)
PNEANet.AddFltAttrN = new_instancemethod(_SnapTime.PNEANet_AddFltAttrN, None, PNEANet)
PNEANet.AddIntVAttrN = new_instancemethod(_SnapTime.PNEANet_AddIntVAttrN, None, PNEANet)
PNEANet.AddIntAttrE = new_instancemethod(_SnapTime.PNEANet_AddIntAttrE, None, PNEANet)
PNEANet.AddStrAttrE = new_instancemethod(_SnapTime.PNEANet_AddStrAttrE, None, PNEANet)
PNEANet.AddFltAttrE = new_instancemethod(_SnapTime.PNEANet_AddFltAttrE, None, PNEANet)
PNEANet.AddIntVAttrE = new_instancemethod(_SnapTime.PNEANet_AddIntVAttrE, None, PNEANet)
PNEANet.DelAttrN = new_instancemethod(_SnapTime.PNEANet_DelAttrN, None, PNEANet)
PNEANet.DelAttrE = new_instancemethod(_SnapTime.PNEANet_DelAttrE, None, PNEANet)
PNEANet.IsAttrDeletedN = new_instancemethod(_SnapTime.PNEANet_IsAttrDeletedN, None, PNEANet)
PNEANet.IsIntAttrDeletedN = new_instancemethod(_SnapTime.PNEANet_IsIntAttrDeletedN, None, PNEANet)
PNEANet.IsIntVAttrDeletedN = new_instancemethod(_SnapTime.PNEANet_IsIntVAttrDeletedN, None, PNEANet)
PNEANet.IsStrAttrDeletedN = new_instancemethod(_SnapTime.PNEANet_IsStrAttrDeletedN, None, PNEANet)
PNEANet.IsFltAttrDeletedN = new_instancemethod(_SnapTime.PNEANet_IsFltAttrDeletedN, None, PNEANet)
PNEANet.NodeAttrIsDeleted = new_instancemethod(_SnapTime.PNEANet_NodeAttrIsDeleted, None, PNEANet)
PNEANet.NodeAttrIsIntDeleted = new_instancemethod(_SnapTime.PNEANet_NodeAttrIsIntDeleted, None, PNEANet)
PNEANet.NodeAttrIsIntVDeleted = new_instancemethod(_SnapTime.PNEANet_NodeAttrIsIntVDeleted, None, PNEANet)
PNEANet.NodeAttrIsStrDeleted = new_instancemethod(_SnapTime.PNEANet_NodeAttrIsStrDeleted, None, PNEANet)
PNEANet.NodeAttrIsFltDeleted = new_instancemethod(_SnapTime.PNEANet_NodeAttrIsFltDeleted, None, PNEANet)
PNEANet.IsAttrDeletedE = new_instancemethod(_SnapTime.PNEANet_IsAttrDeletedE, None, PNEANet)
PNEANet.IsIntAttrDeletedE = new_instancemethod(_SnapTime.PNEANet_IsIntAttrDeletedE, None, PNEANet)
PNEANet.IsIntVAttrDeletedE = new_instancemethod(_SnapTime.PNEANet_IsIntVAttrDeletedE, None, PNEANet)
PNEANet.IsStrAttrDeletedE = new_instancemethod(_SnapTime.PNEANet_IsStrAttrDeletedE, None, PNEANet)
PNEANet.IsFltAttrDeletedE = new_instancemethod(_SnapTime.PNEANet_IsFltAttrDeletedE, None, PNEANet)
PNEANet.EdgeAttrIsDeleted = new_instancemethod(_SnapTime.PNEANet_EdgeAttrIsDeleted, None, PNEANet)
PNEANet.EdgeAttrIsIntDeleted = new_instancemethod(_SnapTime.PNEANet_EdgeAttrIsIntDeleted, None, PNEANet)
PNEANet.EdgeAttrIsIntVDeleted = new_instancemethod(_SnapTime.PNEANet_EdgeAttrIsIntVDeleted, None, PNEANet)
PNEANet.EdgeAttrIsStrDeleted = new_instancemethod(_SnapTime.PNEANet_EdgeAttrIsStrDeleted, None, PNEANet)
PNEANet.EdgeAttrIsFltDeleted = new_instancemethod(_SnapTime.PNEANet_EdgeAttrIsFltDeleted, None, PNEANet)
PNEANet.GetNodeAttrValue = new_instancemethod(_SnapTime.PNEANet_GetNodeAttrValue, None, PNEANet)
PNEANet.GetEdgeAttrValue = new_instancemethod(_SnapTime.PNEANet_GetEdgeAttrValue, None, PNEANet)
PNEANet.GetWeightOutEdges = new_instancemethod(_SnapTime.PNEANet_GetWeightOutEdges, None, PNEANet)
PNEANet.IsFltAttrN = new_instancemethod(_SnapTime.PNEANet_IsFltAttrN, None, PNEANet)
PNEANet.IsIntAttrN = new_instancemethod(_SnapTime.PNEANet_IsIntAttrN, None, PNEANet)
PNEANet.IsStrAttrN = new_instancemethod(_SnapTime.PNEANet_IsStrAttrN, None, PNEANet)
PNEANet.IsIntVAttrN = new_instancemethod(_SnapTime.PNEANet_IsIntVAttrN, None, PNEANet)
PNEANet.IsFltAttrE = new_instancemethod(_SnapTime.PNEANet_IsFltAttrE, None, PNEANet)
PNEANet.IsIntAttrE = new_instancemethod(_SnapTime.PNEANet_IsIntAttrE, None, PNEANet)
PNEANet.IsStrAttrE = new_instancemethod(_SnapTime.PNEANet_IsStrAttrE, None, PNEANet)
PNEANet.IsIntVAttrE = new_instancemethod(_SnapTime.PNEANet_IsIntVAttrE, None, PNEANet)
PNEANet.GetFltAttrVecE = new_instancemethod(_SnapTime.PNEANet_GetFltAttrVecE, None, PNEANet)
PNEANet.GetFltKeyIdE = new_instancemethod(_SnapTime.PNEANet_GetFltKeyIdE, None, PNEANet)
PNEANet.GetWeightOutEdgesV = new_instancemethod(_SnapTime.PNEANet_GetWeightOutEdgesV, None, PNEANet)
PNEANet.GetAttrNNames = new_instancemethod(_SnapTime.PNEANet_GetAttrNNames, None, PNEANet)
PNEANet.GetIntVAttrNNames = new_instancemethod(_SnapTime.PNEANet_GetIntVAttrNNames, None, PNEANet)
PNEANet.GetAttrENames = new_instancemethod(_SnapTime.PNEANet_GetAttrENames, None, PNEANet)
PNEANet.GetIntVAttrENames = new_instancemethod(_SnapTime.PNEANet_GetIntVAttrENames, None, PNEANet)
PNEANet.AddSAttrDatN = new_instancemethod(_SnapTime.PNEANet_AddSAttrDatN, None, PNEANet)
PNEANet.GetSAttrDatN = new_instancemethod(_SnapTime.PNEANet_GetSAttrDatN, None, PNEANet)
PNEANet.DelSAttrDatN = new_instancemethod(_SnapTime.PNEANet_DelSAttrDatN, None, PNEANet)
PNEANet.GetSAttrVN = new_instancemethod(_SnapTime.PNEANet_GetSAttrVN, None, PNEANet)
PNEANet.GetIdVSAttrN = new_instancemethod(_SnapTime.PNEANet_GetIdVSAttrN, None, PNEANet)
PNEANet.AddSAttrN = new_instancemethod(_SnapTime.PNEANet_AddSAttrN, None, PNEANet)
PNEANet.GetSAttrIdN = new_instancemethod(_SnapTime.PNEANet_GetSAttrIdN, None, PNEANet)
PNEANet.GetSAttrNameN = new_instancemethod(_SnapTime.PNEANet_GetSAttrNameN, None, PNEANet)
PNEANet.AddSAttrDatE = new_instancemethod(_SnapTime.PNEANet_AddSAttrDatE, None, PNEANet)
PNEANet.GetSAttrDatE = new_instancemethod(_SnapTime.PNEANet_GetSAttrDatE, None, PNEANet)
PNEANet.DelSAttrDatE = new_instancemethod(_SnapTime.PNEANet_DelSAttrDatE, None, PNEANet)
PNEANet.GetSAttrVE = new_instancemethod(_SnapTime.PNEANet_GetSAttrVE, None, PNEANet)
PNEANet.GetIdVSAttrE = new_instancemethod(_SnapTime.PNEANet_GetIdVSAttrE, None, PNEANet)
PNEANet.AddSAttrE = new_instancemethod(_SnapTime.PNEANet_AddSAttrE, None, PNEANet)
PNEANet.GetSAttrIdE = new_instancemethod(_SnapTime.PNEANet_GetSAttrIdE, None, PNEANet)
PNEANet.GetSAttrNameE = new_instancemethod(_SnapTime.PNEANet_GetSAttrNameE, None, PNEANet)
PNEANet_swigregister = _SnapTime.PNEANet_swigregister
PNEANet_swigregister(PNEANet)

def PNEANet_New():
    """PNEANet_New() -> PNEANet"""
    return _SnapTime.PNEANet_New()


def PrintInfo_PNEANet(*args):
    """
    PrintInfo_PNEANet(PNEANet Graph, TStr Desc, TStr OutFNm, bool const & Fast=True)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    Desc: TStr const &
    OutFNm: TStr const &
    Fast: bool const &

    PrintInfo_PNEANet(PNEANet Graph, TStr Desc, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    Desc: TStr const &
    OutFNm: TStr const &

    PrintInfo_PNEANet(PNEANet Graph, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    Desc: TStr const &

    PrintInfo_PNEANet(PNEANet Graph)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.PrintInfo_PNEANet(*args)

def GetNodeWcc_PNEANet(Graph, NId, CnCom):
    """
    GetNodeWcc_PNEANet(PNEANet Graph, int64 const & NId, TInt64V CnCom)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId: int64 const &
    CnCom: TInt64V &

    """
    return _SnapTime.GetNodeWcc_PNEANet(Graph, NId, CnCom)

def IsConnected_PNEANet(Graph):
    """
    IsConnected_PNEANet(PNEANet Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.IsConnected_PNEANet(Graph)

def IsWeaklyConn_PNEANet(Graph):
    """
    IsWeaklyConn_PNEANet(PNEANet Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.IsWeaklyConn_PNEANet(Graph)

def GetWccSzCnt_PNEANet(Graph, WccSzCnt):
    """
    GetWccSzCnt_PNEANet(PNEANet Graph, TIntPr64V WccSzCnt)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    WccSzCnt: TIntPr64V &

    """
    return _SnapTime.GetWccSzCnt_PNEANet(Graph, WccSzCnt)

def GetWccs_PNEANet(Graph, CnComV):
    """
    GetWccs_PNEANet(PNEANet Graph, TCnComV CnComV)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    CnComV: TCnComV &

    """
    return _SnapTime.GetWccs_PNEANet(Graph, CnComV)

def GetSccSzCnt_PNEANet(Graph, SccSzCnt):
    """
    GetSccSzCnt_PNEANet(PNEANet Graph, TIntPr64V SccSzCnt)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    SccSzCnt: TIntPr64V &

    """
    return _SnapTime.GetSccSzCnt_PNEANet(Graph, SccSzCnt)

def GetSccs_PNEANet(Graph, CnComV):
    """
    GetSccs_PNEANet(PNEANet Graph, TCnComV CnComV)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    CnComV: TCnComV &

    """
    return _SnapTime.GetSccs_PNEANet(Graph, CnComV)

def GetMxWccSz_PNEANet(Graph):
    """
    GetMxWccSz_PNEANet(PNEANet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.GetMxWccSz_PNEANet(Graph)

def GetMxSccSz_PNEANet(Graph):
    """
    GetMxSccSz_PNEANet(PNEANet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.GetMxSccSz_PNEANet(Graph)

def GetMxWcc_PNEANet(Graph):
    """
    GetMxWcc_PNEANet(PNEANet Graph) -> PNEANet

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.GetMxWcc_PNEANet(Graph)

def GetMxScc_PNEANet(Graph):
    """
    GetMxScc_PNEANet(PNEANet Graph) -> PNEANet

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.GetMxScc_PNEANet(Graph)

def GetMxBiCon_PNEANet(Graph):
    """
    GetMxBiCon_PNEANet(PNEANet Graph) -> PNEANet

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.GetMxBiCon_PNEANet(Graph)

def GetNodeEcc_PNEANet(Graph, NId, IsDir=False):
    """
    GetNodeEcc_PNEANet(PNEANet Graph, int64 const & NId, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId: int64 const &
    IsDir: bool const &

    GetNodeEcc_PNEANet(PNEANet Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId: int64 const &

    """
    return _SnapTime.GetNodeEcc_PNEANet(Graph, NId, IsDir)

def GetPageRank_PNEANet(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRank_PNEANet(PNEANet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRank_PNEANet(PNEANet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRank_PNEANet(PNEANet Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRank_PNEANet(PNEANet Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRank_PNEANet(Graph, PRankH, C, Eps, MaxIter)

def GetPageRank_v1_PNEANet(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRank_v1_PNEANet(PNEANet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRank_v1_PNEANet(PNEANet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRank_v1_PNEANet(PNEANet Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRank_v1_PNEANet(PNEANet Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRank_v1_PNEANet(Graph, PRankH, C, Eps, MaxIter)

def GetHits_PNEANet(Graph, NIdHubH, NIdAuthH, MaxIter=20):
    """
    GetHits_PNEANet(PNEANet Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH, int64 const & MaxIter=20)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &
    MaxIter: int64 const &

    GetHits_PNEANet(PNEANet Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &

    """
    return _SnapTime.GetHits_PNEANet(Graph, NIdHubH, NIdAuthH, MaxIter)

def GetBetweennessCentr_PNEANet(*args):
    """
    GetBetweennessCentr_PNEANet(PNEANet Graph, TIntFlt64H NIdBtwH, double const & NodeFrac=1.0, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdBtwH: TIntFlt64H &
    NodeFrac: double const &
    IsDir: bool const &

    GetBetweennessCentr_PNEANet(PNEANet Graph, TIntFlt64H NIdBtwH, double const & NodeFrac=1.0)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdBtwH: TIntFlt64H &
    NodeFrac: double const &

    GetBetweennessCentr_PNEANet(PNEANet Graph, TIntFlt64H NIdBtwH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdBtwH: TIntFlt64H &

    GetBetweennessCentr_PNEANet(PNEANet Graph, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &
    IsDir: bool const &

    GetBetweennessCentr_PNEANet(PNEANet Graph, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &

    GetBetweennessCentr_PNEANet(PNEANet Graph, TIntPrFlt64H EdgeBtwH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    EdgeBtwH: TIntPrFlt64H &

    GetBetweennessCentr_PNEANet(PNEANet Graph, TIntFlt64H NIdBtwH, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdBtwH: TIntFlt64H &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &
    IsDir: bool const &

    GetBetweennessCentr_PNEANet(PNEANet Graph, TIntFlt64H NIdBtwH, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdBtwH: TIntFlt64H &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &

    GetBetweennessCentr_PNEANet(PNEANet Graph, TIntFlt64H NIdBtwH, TIntPrFlt64H EdgeBtwH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdBtwH: TIntFlt64H &
    EdgeBtwH: TIntPrFlt64H &

    GetBetweennessCentr_PNEANet(PNEANet Graph, TInt64V BtwNIdV, TIntFlt64H NodeBtwH, bool const & DoNodeCent, TIntPrFlt64H EdgeBtwH, bool const & DoEdgeCent, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    BtwNIdV: TInt64V const &
    NodeBtwH: TIntFlt64H &
    DoNodeCent: bool const &
    EdgeBtwH: TIntPrFlt64H &
    DoEdgeCent: bool const &
    IsDir: bool const &

    """
    return _SnapTime.GetBetweennessCentr_PNEANet(*args)

def GetClosenessCentr_PNEANet(Graph, NId, Normalized=True, IsDir=False):
    """
    GetClosenessCentr_PNEANet(PNEANet Graph, int64 const & NId, bool const & Normalized=True, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId: int64 const &
    Normalized: bool const &
    IsDir: bool const &

    GetClosenessCentr_PNEANet(PNEANet Graph, int64 const & NId, bool const & Normalized=True) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId: int64 const &
    Normalized: bool const &

    GetClosenessCentr_PNEANet(PNEANet Graph, int64 const & NId) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId: int64 const &

    """
    return _SnapTime.GetClosenessCentr_PNEANet(Graph, NId, Normalized, IsDir)

def GetFarnessCentr_PNEANet(Graph, NId, Normalized=True, IsDir=False):
    """
    GetFarnessCentr_PNEANet(PNEANet Graph, int64 const & NId, bool const & Normalized=True, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId: int64 const &
    Normalized: bool const &
    IsDir: bool const &

    GetFarnessCentr_PNEANet(PNEANet Graph, int64 const & NId, bool const & Normalized=True) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId: int64 const &
    Normalized: bool const &

    GetFarnessCentr_PNEANet(PNEANet Graph, int64 const & NId) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId: int64 const &

    """
    return _SnapTime.GetFarnessCentr_PNEANet(Graph, NId, Normalized, IsDir)

def GetPageRankMP_PNEANet(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRankMP_PNEANet(PNEANet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRankMP_PNEANet(PNEANet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRankMP_PNEANet(PNEANet Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRankMP_PNEANet(PNEANet Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRankMP_PNEANet(Graph, PRankH, C, Eps, MaxIter)

def GetHitsMP_PNEANet(Graph, NIdHubH, NIdAuthH, MaxIter=20):
    """
    GetHitsMP_PNEANet(PNEANet Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH, int64 const & MaxIter=20)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &
    MaxIter: int64 const &

    GetHitsMP_PNEANet(PNEANet Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &

    """
    return _SnapTime.GetHitsMP_PNEANet(Graph, NIdHubH, NIdAuthH, MaxIter)

def CntInDegNodes_PNEANet(Graph, NodeInDeg):
    """
    CntInDegNodes_PNEANet(PNEANet Graph, int64 const & NodeInDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NodeInDeg: int64 const &

    """
    return _SnapTime.CntInDegNodes_PNEANet(Graph, NodeInDeg)

def CntOutDegNodes_PNEANet(Graph, NodeOutDeg):
    """
    CntOutDegNodes_PNEANet(PNEANet Graph, int64 const & NodeOutDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NodeOutDeg: int64 const &

    """
    return _SnapTime.CntOutDegNodes_PNEANet(Graph, NodeOutDeg)

def CntDegNodes_PNEANet(Graph, NodeDeg):
    """
    CntDegNodes_PNEANet(PNEANet Graph, int64 const & NodeDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NodeDeg: int64 const &

    """
    return _SnapTime.CntDegNodes_PNEANet(Graph, NodeDeg)

def CntNonZNodes_PNEANet(Graph):
    """
    CntNonZNodes_PNEANet(PNEANet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.CntNonZNodes_PNEANet(Graph)

def CntEdgesToSet_PNEANet(Graph, NId, NodeSet):
    """
    CntEdgesToSet_PNEANet(PNEANet Graph, int64 const & NId, TInt64Set NodeSet) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId: int64 const &
    NodeSet: TInt64Set const &

    """
    return _SnapTime.CntEdgesToSet_PNEANet(Graph, NId, NodeSet)

def GetMxDegNId_PNEANet(Graph):
    """
    GetMxDegNId_PNEANet(PNEANet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.GetMxDegNId_PNEANet(Graph)

def GetMxInDegNId_PNEANet(Graph):
    """
    GetMxInDegNId_PNEANet(PNEANet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.GetMxInDegNId_PNEANet(Graph)

def GetMxOutDegNId_PNEANet(Graph):
    """
    GetMxOutDegNId_PNEANet(PNEANet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.GetMxOutDegNId_PNEANet(Graph)

def GetInDegCnt_PNEANet(*args):
    """
    GetInDegCnt_PNEANet(PNEANet Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    DegToCntV: TIntPr64V &

    GetInDegCnt_PNEANet(PNEANet Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetInDegCnt_PNEANet(*args)

def GetOutDegCnt_PNEANet(*args):
    """
    GetOutDegCnt_PNEANet(PNEANet Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    DegToCntV: TIntPr64V &

    GetOutDegCnt_PNEANet(PNEANet Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetOutDegCnt_PNEANet(*args)

def GetDegCnt_PNEANet(*args):
    """
    GetDegCnt_PNEANet(PNEANet Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    DegToCntV: TIntPr64V &

    GetDegCnt_PNEANet(PNEANet Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetDegCnt_PNEANet(*args)

def GetDegSeqV_PNEANet(*args):
    """
    GetDegSeqV_PNEANet(PNEANet Graph, TInt64V DegV)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    DegV: TInt64V &

    GetDegSeqV_PNEANet(PNEANet Graph, TInt64V InDegV, TInt64V OutDegV)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    InDegV: TInt64V &
    OutDegV: TInt64V &

    """
    return _SnapTime.GetDegSeqV_PNEANet(*args)

def GetNodeInDegV_PNEANet(Graph, NIdInDegV):
    """
    GetNodeInDegV_PNEANet(PNEANet Graph, TIntPr64V NIdInDegV)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdInDegV: TIntPr64V &

    """
    return _SnapTime.GetNodeInDegV_PNEANet(Graph, NIdInDegV)

def GetNodeOutDegV_PNEANet(Graph, NIdOutDegV):
    """
    GetNodeOutDegV_PNEANet(PNEANet Graph, TIntPr64V NIdOutDegV)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdOutDegV: TIntPr64V &

    """
    return _SnapTime.GetNodeOutDegV_PNEANet(Graph, NIdOutDegV)

def CntUniqUndirEdges_PNEANet(Graph):
    """
    CntUniqUndirEdges_PNEANet(PNEANet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.CntUniqUndirEdges_PNEANet(Graph)

def CntUniqDirEdges_PNEANet(Graph):
    """
    CntUniqDirEdges_PNEANet(PNEANet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.CntUniqDirEdges_PNEANet(Graph)

def CntUniqBiDirEdges_PNEANet(Graph):
    """
    CntUniqBiDirEdges_PNEANet(PNEANet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.CntUniqBiDirEdges_PNEANet(Graph)

def CntSelfEdges_PNEANet(Graph):
    """
    CntSelfEdges_PNEANet(PNEANet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.CntSelfEdges_PNEANet(Graph)

def GetUnDir_PNEANet(Graph):
    """
    GetUnDir_PNEANet(PNEANet Graph) -> PNEANet

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.GetUnDir_PNEANet(Graph)

def MakeUnDir_PNEANet(Graph):
    """
    MakeUnDir_PNEANet(PNEANet Graph)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.MakeUnDir_PNEANet(Graph)

def AddSelfEdges_PNEANet(Graph):
    """
    AddSelfEdges_PNEANet(PNEANet Graph)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.AddSelfEdges_PNEANet(Graph)

def DelSelfEdges_PNEANet(Graph):
    """
    DelSelfEdges_PNEANet(PNEANet Graph)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.DelSelfEdges_PNEANet(Graph)

def DelNodes_PNEANet(Graph, NIdV):
    """
    DelNodes_PNEANet(PNEANet Graph, TInt64V NIdV)

    Parameters
    ----------
    Graph: TPt< TNEANet > &
    NIdV: TInt64V const &

    """
    return _SnapTime.DelNodes_PNEANet(Graph, NIdV)

def DelZeroDegNodes_PNEANet(Graph):
    """
    DelZeroDegNodes_PNEANet(PNEANet Graph)

    Parameters
    ----------
    Graph: TPt< TNEANet > &

    """
    return _SnapTime.DelZeroDegNodes_PNEANet(Graph)

def DelDegKNodes_PNEANet(Graph, OutDegK, InDegK):
    """
    DelDegKNodes_PNEANet(PNEANet Graph, int64 const & OutDegK, int64 const & InDegK)

    Parameters
    ----------
    Graph: TPt< TNEANet > &
    OutDegK: int64 const &
    InDegK: int64 const &

    """
    return _SnapTime.DelDegKNodes_PNEANet(Graph, OutDegK, InDegK)

def IsTree_PNEANet(Graph):
    """
    IsTree_PNEANet(PNEANet Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.IsTree_PNEANet(Graph)

def GetTreeRootNId_PNEANet(Graph):
    """
    GetTreeRootNId_PNEANet(PNEANet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.GetTreeRootNId_PNEANet(Graph)

def GetTreeSig_PNEANet(*args):
    """
    GetTreeSig_PNEANet(PNEANet Graph, int64 const & RootNId, TInt64V Sig)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    RootNId: int64 const &
    Sig: TInt64V &

    GetTreeSig_PNEANet(PNEANet Graph, int64 const & RootNId, TInt64V Sig, TIntPr64V NodeMap)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    RootNId: int64 const &
    Sig: TInt64V &
    NodeMap: TIntPr64V &

    """
    return _SnapTime.GetTreeSig_PNEANet(*args)

def GetBfsTree_PNEANet(Graph, StartNId, FollowOut, FollowIn):
    """
    GetBfsTree_PNEANet(PNEANet Graph, int64 const & StartNId, bool const & FollowOut, bool const & FollowIn) -> PNGraph

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    StartNId: int64 const &
    FollowOut: bool const &
    FollowIn: bool const &

    """
    return _SnapTime.GetBfsTree_PNEANet(Graph, StartNId, FollowOut, FollowIn)

def GetSubTreeSz_PNEANet(Graph, StartNId, FollowOut, FollowIn):
    """
    GetSubTreeSz_PNEANet(PNEANet Graph, int64 const & StartNId, bool const & FollowOut, bool const & FollowIn) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    StartNId: int64 const &
    FollowOut: bool const &
    FollowIn: bool const &

    """
    return _SnapTime.GetSubTreeSz_PNEANet(Graph, StartNId, FollowOut, FollowIn)

def GetNodesAtHop_PNEANet(Graph, StartNId, Hop, NIdV, IsDir=False):
    """
    GetNodesAtHop_PNEANet(PNEANet Graph, int64 const & StartNId, int64 const & Hop, TInt64V NIdV, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    StartNId: int64 const &
    Hop: int64 const &
    NIdV: TInt64V &
    IsDir: bool const &

    GetNodesAtHop_PNEANet(PNEANet Graph, int64 const & StartNId, int64 const & Hop, TInt64V NIdV) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    StartNId: int64 const &
    Hop: int64 const &
    NIdV: TInt64V &

    """
    return _SnapTime.GetNodesAtHop_PNEANet(Graph, StartNId, Hop, NIdV, IsDir)

def GetNodesAtHops_PNEANet(Graph, StartNId, HopCntV, IsDir=False):
    """
    GetNodesAtHops_PNEANet(PNEANet Graph, int64 const & StartNId, TIntPr64V HopCntV, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    StartNId: int64 const &
    HopCntV: TIntPr64V &
    IsDir: bool const &

    GetNodesAtHops_PNEANet(PNEANet Graph, int64 const & StartNId, TIntPr64V HopCntV) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    StartNId: int64 const &
    HopCntV: TIntPr64V &

    """
    return _SnapTime.GetNodesAtHops_PNEANet(Graph, StartNId, HopCntV, IsDir)

def GetShortPath_PNEANet(*args):
    """
    GetShortPath_PNEANet(PNEANet Graph, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    SrcNId: int64 const &
    DstNId: int64 const &
    IsDir: bool const &

    GetShortPath_PNEANet(PNEANet Graph, int64 const & SrcNId, int64 const & DstNId) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    SrcNId: int64 const &
    DstNId: int64 const &

    GetShortPath_PNEANet(PNEANet Graph, int64 const & SrcNId, TInt64H NIdToDistH, bool const & IsDir=False, int64 const & MaxDist) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &
    IsDir: bool const &
    MaxDist: int64 const &

    GetShortPath_PNEANet(PNEANet Graph, int64 const & SrcNId, TInt64H NIdToDistH, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &
    IsDir: bool const &

    GetShortPath_PNEANet(PNEANet Graph, int64 const & SrcNId, TInt64H NIdToDistH) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &

    """
    return _SnapTime.GetShortPath_PNEANet(*args)

def GetBfsFullDiam_PNEANet(Graph, NTestNodes, IsDir=False):
    """
    GetBfsFullDiam_PNEANet(PNEANet Graph, int64 const & NTestNodes, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsFullDiam_PNEANet(PNEANet Graph, int64 const & NTestNodes) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NTestNodes: int64 const &

    """
    return _SnapTime.GetBfsFullDiam_PNEANet(Graph, NTestNodes, IsDir)

def GetBfsEffDiam_PNEANet(*args):
    """
    GetBfsEffDiam_PNEANet(PNEANet Graph, int64 const & NTestNodes, bool const & IsDir, double & EffDiam, int64 & FullDiam) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NTestNodes: int64 const &
    IsDir: bool const &
    EffDiam: double &
    FullDiam: int64 &

    GetBfsEffDiam_PNEANet(PNEANet Graph, int64 const & NTestNodes, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsEffDiam_PNEANet(PNEANet Graph, int64 const & NTestNodes) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NTestNodes: int64 const &

    GetBfsEffDiam_PNEANet(PNEANet Graph, int64 const & NTestNodes, bool const & IsDir) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsEffDiam_PNEANet(PNEANet Graph, int64 const & NTestNodes, TInt64V SubGraphNIdV, bool const & IsDir) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NTestNodes: int64 const &
    SubGraphNIdV: TInt64V const &
    IsDir: bool const &

    """
    return _SnapTime.GetBfsEffDiam_PNEANet(*args)

def DrawGViz_PNEANet(*args):
    """
    DrawGViz_PNEANet(PNEANet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, bool const & NodeLabels=False, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &
    NIdColorH: TIntStr64H const &

    DrawGViz_PNEANet(PNEANet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, bool const & NodeLabels=False)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &

    DrawGViz_PNEANet(PNEANet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &

    DrawGViz_PNEANet(PNEANet Graph, TGVizLayout const & Layout, TStr PltFNm)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &

    DrawGViz_PNEANet(PNEANet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, TIntStr64H NodeLabelH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabelH: TIntStr64H const &

    """
    return _SnapTime.DrawGViz_PNEANet(*args)

def GenGrid_PNEANet(Rows, Cols, IsDir=True):
    """
    GenGrid_PNEANet(int64 const & Rows, int64 const & Cols, bool const & IsDir=True) -> PNEANet

    Parameters
    ----------
    Rows: int64 const &
    Cols: int64 const &
    IsDir: bool const &

    GenGrid_PNEANet(int64 const & Rows, int64 const & Cols) -> PNEANet

    Parameters
    ----------
    Rows: int64 const &
    Cols: int64 const &

    """
    return _SnapTime.GenGrid_PNEANet(Rows, Cols, IsDir)

def GenStar_PNEANet(Nodes, IsDir=True):
    """
    GenStar_PNEANet(int64 const & Nodes, bool const & IsDir=True) -> PNEANet

    Parameters
    ----------
    Nodes: int64 const &
    IsDir: bool const &

    GenStar_PNEANet(int64 const & Nodes) -> PNEANet

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenStar_PNEANet(Nodes, IsDir)

def GenCircle_PNEANet(Nodes, NodeOutDeg=1, IsDir=True):
    """
    GenCircle_PNEANet(int64 const & Nodes, int64 const & NodeOutDeg=1, bool const & IsDir=True) -> PNEANet

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &
    IsDir: bool const &

    GenCircle_PNEANet(int64 const & Nodes, int64 const & NodeOutDeg=1) -> PNEANet

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &

    GenCircle_PNEANet(int64 const & Nodes) -> PNEANet

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenCircle_PNEANet(Nodes, NodeOutDeg, IsDir)

def GenFull_PNEANet(Nodes):
    """
    GenFull_PNEANet(int64 const & Nodes) -> PNEANet

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenFull_PNEANet(Nodes)

def GenTree_PNEANet(Fanout, Levels, IsDir=True, ChildPointsToParent=True):
    """
    GenTree_PNEANet(int64 const & Fanout, int64 const & Levels, bool const & IsDir=True, bool const & ChildPointsToParent=True) -> PNEANet

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &
    IsDir: bool const &
    ChildPointsToParent: bool const &

    GenTree_PNEANet(int64 const & Fanout, int64 const & Levels, bool const & IsDir=True) -> PNEANet

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &
    IsDir: bool const &

    GenTree_PNEANet(int64 const & Fanout, int64 const & Levels) -> PNEANet

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &

    """
    return _SnapTime.GenTree_PNEANet(Fanout, Levels, IsDir, ChildPointsToParent)

def GenBaraHierar_PNEANet(Levels, IsDir=True):
    """
    GenBaraHierar_PNEANet(int64 const & Levels, bool const & IsDir=True) -> PNEANet

    Parameters
    ----------
    Levels: int64 const &
    IsDir: bool const &

    GenBaraHierar_PNEANet(int64 const & Levels) -> PNEANet

    Parameters
    ----------
    Levels: int64 const &

    """
    return _SnapTime.GenBaraHierar_PNEANet(Levels, IsDir)

def GenRndGnm_PNEANet(*args):
    """
    GenRndGnm_PNEANet(int64 const & Nodes, int64 const & Edges, bool const & IsDir=True, TRnd Rnd) -> PNEANet

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &
    IsDir: bool const &
    Rnd: TRnd &

    GenRndGnm_PNEANet(int64 const & Nodes, int64 const & Edges, bool const & IsDir=True) -> PNEANet

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &
    IsDir: bool const &

    GenRndGnm_PNEANet(int64 const & Nodes, int64 const & Edges) -> PNEANet

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.GenRndGnm_PNEANet(*args)

def LoadEdgeList_PNEANet(*args):
    """
    LoadEdgeList_PNEANet(TStr InFNm, int64 const & SrcColId=0, int64 const & DstColId=1) -> PNEANet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &

    LoadEdgeList_PNEANet(TStr InFNm, int64 const & SrcColId=0) -> PNEANet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &

    LoadEdgeList_PNEANet(TStr InFNm) -> PNEANet

    Parameters
    ----------
    InFNm: TStr const &

    LoadEdgeList_PNEANet(TStr InFNm, int64 const & SrcColId, int64 const & DstColId, char const & Separator) -> PNEANet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &
    Separator: char const &

    """
    return _SnapTime.LoadEdgeList_PNEANet(*args)

def LoadEdgeListStr_PNEANet(*args):
    """
    LoadEdgeListStr_PNEANet(TStr InFNm, int64 const & SrcColId=0, int64 const & DstColId=1) -> PNEANet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &

    LoadEdgeListStr_PNEANet(TStr InFNm, int64 const & SrcColId=0) -> PNEANet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &

    LoadEdgeListStr_PNEANet(TStr InFNm) -> PNEANet

    Parameters
    ----------
    InFNm: TStr const &

    LoadEdgeListStr_PNEANet(TStr InFNm, int64 const & SrcColId, int64 const & DstColId, TStrInt64SH StrToNIdH) -> PNEANet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &
    StrToNIdH: TStrHash< TInt64,TStrPool,int64 > &

    """
    return _SnapTime.LoadEdgeListStr_PNEANet(*args)

def LoadConnList_PNEANet(InFNm):
    """
    LoadConnList_PNEANet(TStr InFNm) -> PNEANet

    Parameters
    ----------
    InFNm: TStr const &

    """
    return _SnapTime.LoadConnList_PNEANet(InFNm)

def LoadConnListStr_PNEANet(InFNm, StrToNIdH):
    """
    LoadConnListStr_PNEANet(TStr InFNm, TStrInt64SH StrToNIdH) -> PNEANet

    Parameters
    ----------
    InFNm: TStr const &
    StrToNIdH: TStrHash< TInt64,TStrPool,int64 > &

    """
    return _SnapTime.LoadConnListStr_PNEANet(InFNm, StrToNIdH)

def LoadPajek_PNEANet(InFNm):
    """
    LoadPajek_PNEANet(TStr InFNm) -> PNEANet

    Parameters
    ----------
    InFNm: TStr const &

    """
    return _SnapTime.LoadPajek_PNEANet(InFNm)

def SaveEdgeList_PNEANet(*args):
    """
    SaveEdgeList_PNEANet(PNEANet Graph, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    OutFNm: TStr const &
    Desc: TStr const &

    SaveEdgeList_PNEANet(PNEANet Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    OutFNm: TStr const &

    """
    return _SnapTime.SaveEdgeList_PNEANet(*args)

def SavePajek_PNEANet(*args):
    """
    SavePajek_PNEANet(PNEANet Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    OutFNm: TStr const &

    SavePajek_PNEANet(PNEANet Graph, TStr OutFNm, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &

    SavePajek_PNEANet(PNEANet Graph, TStr OutFNm, TIntStr64H NIdColorH, TIntStr64H NIdLabelH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &
    NIdLabelH: TIntStr64H const &

    SavePajek_PNEANet(PNEANet Graph, TStr OutFNm, TIntStr64H NIdColorH, TIntStr64H NIdLabelH, TIntStr64H EIdColorH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &
    NIdLabelH: TIntStr64H const &
    EIdColorH: TIntStr64H const &

    """
    return _SnapTime.SavePajek_PNEANet(*args)

def SaveMatlabSparseMtx_PNEANet(Graph, OutFNm):
    """
    SaveMatlabSparseMtx_PNEANet(PNEANet Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    OutFNm: TStr const &

    """
    return _SnapTime.SaveMatlabSparseMtx_PNEANet(Graph, OutFNm)

def SaveGViz_PNEANet(*args):
    """
    SaveGViz_PNEANet(PNEANet Graph, TStr OutFNm, TStr Desc, bool const & NodeLabels=False, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &
    NIdColorH: TIntStr64H const &

    SaveGViz_PNEANet(PNEANet Graph, TStr OutFNm, TStr Desc, bool const & NodeLabels=False)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &

    SaveGViz_PNEANet(PNEANet Graph, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    OutFNm: TStr const &
    Desc: TStr const &

    SaveGViz_PNEANet(PNEANet Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    OutFNm: TStr const &

    SaveGViz_PNEANet(PNEANet Graph, TStr OutFNm, TStr Desc, TIntStr64H NIdLabelH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NIdLabelH: TIntStr64H const &

    """
    return _SnapTime.SaveGViz_PNEANet(*args)

def GetKCore_PNEANet(Graph, K):
    """
    GetKCore_PNEANet(PNEANet Graph, int64 const & K) -> PNEANet

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    K: int64 const &

    """
    return _SnapTime.GetKCore_PNEANet(Graph, K)

def GetKCoreEdges_PNEANet(Graph, CoreIdSzV):
    """
    GetKCoreEdges_PNEANet(PNEANet Graph, TIntPr64V CoreIdSzV) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    CoreIdSzV: TIntPr64V &

    """
    return _SnapTime.GetKCoreEdges_PNEANet(Graph, CoreIdSzV)

def GetKCoreNodes_PNEANet(Graph, CoreIdSzV):
    """
    GetKCoreNodes_PNEANet(PNEANet Graph, TIntPr64V CoreIdSzV) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    CoreIdSzV: TIntPr64V &

    """
    return _SnapTime.GetKCoreNodes_PNEANet(Graph, CoreIdSzV)

def ConvertGraph_PNEANet_PNEANet(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PNEANet_PNEANet(PNEANet InGraph, bool const & RenumberNodes=False) -> PNEANet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    RenumberNodes: bool const &

    ConvertGraph_PNEANet_PNEANet(PNEANet InGraph) -> PNEANet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &

    """
    return _SnapTime.ConvertGraph_PNEANet_PNEANet(InGraph, RenumberNodes)

def ConvertGraph_PNEANet_PNGraph(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PNEANet_PNGraph(PNGraph InGraph, bool const & RenumberNodes=False) -> PNEANet

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &
    RenumberNodes: bool const &

    ConvertGraph_PNEANet_PNGraph(PNGraph InGraph) -> PNEANet

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &

    """
    return _SnapTime.ConvertGraph_PNEANet_PNGraph(InGraph, RenumberNodes)

def ConvertGraph_PNEANet_PUNGraph(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PNEANet_PUNGraph(PUNGraph InGraph, bool const & RenumberNodes=False) -> PNEANet

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &
    RenumberNodes: bool const &

    ConvertGraph_PNEANet_PUNGraph(PUNGraph InGraph) -> PNEANet

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &

    """
    return _SnapTime.ConvertGraph_PNEANet_PUNGraph(InGraph, RenumberNodes)

def ConvertSubGraph_PNEANet_PNEANet(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PNEANet_PNEANet(PNEANet InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PNEANet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PNEANet_PNEANet(PNEANet InGraph, TInt64V NIdV) -> PNEANet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PNEANet_PNEANet(InGraph, NIdV, RenumberNodes)

def ConvertSubGraph_PNEANet_PNGraph(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PNEANet_PNGraph(PNGraph InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PNEANet

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PNEANet_PNGraph(PNGraph InGraph, TInt64V NIdV) -> PNEANet

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PNEANet_PNGraph(InGraph, NIdV, RenumberNodes)

def ConvertSubGraph_PNEANet_PUNGraph(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PNEANet_PUNGraph(PUNGraph InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PNEANet

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PNEANet_PUNGraph(PUNGraph InGraph, TInt64V NIdV) -> PNEANet

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PNEANet_PUNGraph(InGraph, NIdV, RenumberNodes)

def ConvertESubGraph_PNEANet_PNEANet(InGraph, EIdV, RenumberNodes=False):
    """
    ConvertESubGraph_PNEANet_PNEANet(PNEANet InGraph, TInt64V EIdV, bool const & RenumberNodes=False) -> PNEANet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    EIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertESubGraph_PNEANet_PNEANet(PNEANet InGraph, TInt64V EIdV) -> PNEANet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    EIdV: TInt64V const &

    """
    return _SnapTime.ConvertESubGraph_PNEANet_PNEANet(InGraph, EIdV, RenumberNodes)

def GetSubGraph_PNEANet(Graph, NIdV):
    """
    GetSubGraph_PNEANet(PNEANet Graph, TInt64V NIdV) -> PNEANet

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.GetSubGraph_PNEANet(Graph, NIdV)

def GetESubGraph_PNEANet(*args):
    """
    GetESubGraph_PNEANet(PNEANet Graph, TInt64V EIdV) -> PNEANet

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    EIdV: TInt64V const &

    GetESubGraph_PNEANet(PNEANet Graph, TIntPr64V EdgeV) -> PNEANet

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    EdgeV: TIntPr64V const &

    """
    return _SnapTime.GetESubGraph_PNEANet(*args)

def GetRndSubGraph_PNEANet(Graph, NNodes):
    """
    GetRndSubGraph_PNEANet(PNEANet Graph, int64 const & NNodes) -> PNEANet

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NNodes: int64 const &

    """
    return _SnapTime.GetRndSubGraph_PNEANet(Graph, NNodes)

def GetRndESubGraph_PNEANet(Graph, NEdges):
    """
    GetRndESubGraph_PNEANet(PNEANet Graph, int64 const & NEdges) -> PNEANet

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NEdges: int64 const &

    """
    return _SnapTime.GetRndESubGraph_PNEANet(Graph, NEdges)

def GetClustCf_PNEANet(*args):
    """
    GetClustCf_PNEANet(PNEANet Graph, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    SampleNodes: int64

    GetClustCf_PNEANet(PNEANet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    GetClustCf_PNEANet(PNEANet Graph, TFltPr64V DegToCCfV, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    DegToCCfV: TFltPr64V &
    SampleNodes: int64

    GetClustCf_PNEANet(PNEANet Graph, TFltPr64V DegToCCfV) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    DegToCCfV: TFltPr64V &

    GetClustCf_PNEANet(PNEANet Graph, TFltPr64V DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    DegToCCfV: TFltPr64V &
    ClosedTriadsX: int64 &
    OpenTriadsX: int64 &
    SampleNodes: int64

    GetClustCf_PNEANet(PNEANet Graph, TFltPr64V DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    DegToCCfV: TFltPr64V &
    ClosedTriadsX: int64 &
    OpenTriadsX: int64 &

    """
    return _SnapTime.GetClustCf_PNEANet(*args)

def GetNodeClustCf_PNEANet(*args):
    """
    GetNodeClustCf_PNEANet(PNEANet Graph, int64 const & NId) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId: int64 const &

    GetNodeClustCf_PNEANet(PNEANet Graph, TIntFlt64H NIdCCfH)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdCCfH: TIntFlt64H &

    """
    return _SnapTime.GetNodeClustCf_PNEANet(*args)

def GetTriads_PNEANet(*args):
    """
    GetTriads_PNEANet(PNEANet Graph, int64 & ClosedTriads, int64 & OpenTriads, int64 SampleNodes=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    ClosedTriads: int64 &
    OpenTriads: int64 &
    SampleNodes: int64

    GetTriads_PNEANet(PNEANet Graph, int64 & ClosedTriads, int64 & OpenTriads) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    ClosedTriads: int64 &
    OpenTriads: int64 &

    GetTriads_PNEANet(PNEANet Graph, int64 SampleNodes=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    SampleNodes: int64

    GetTriads_PNEANet(PNEANet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    GetTriads_PNEANet(PNEANet Graph, TIntTr64V & NIdCOTriadV, int64 SampleNodes=-1)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdCOTriadV: TIntTr64V &
    SampleNodes: int64

    GetTriads_PNEANet(PNEANet Graph, TIntTr64V & NIdCOTriadV)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdCOTriadV: TIntTr64V &

    """
    return _SnapTime.GetTriads_PNEANet(*args)

def GetTriadEdges_PNEANet(Graph, SampleEdges=-1):
    """
    GetTriadEdges_PNEANet(PNEANet Graph, int64 SampleEdges=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    SampleEdges: int64

    GetTriadEdges_PNEANet(PNEANet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.GetTriadEdges_PNEANet(Graph, SampleEdges)

def GetNodeTriads_PNEANet(*args):
    """
    GetNodeTriads_PNEANet(PNEANet Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId: int64 const &

    GetNodeTriads_PNEANet(PNEANet Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId: int64 const &

    GetNodeTriads_PNEANet(PNEANet Graph, int64 const & NId, TInt64Set GroupSet, int64 & OutGroupEdgesX) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId: int64 const &
    GroupSet: TInt64Set const &
    OutGroupEdgesX: int64 &

    """
    return _SnapTime.GetNodeTriads_PNEANet(*args)

def GetTriadParticip_PNEANet(Graph, TriadCntV):
    """
    GetTriadParticip_PNEANet(PNEANet Graph, TIntPr64V TriadCntV)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    TriadCntV: TIntPr64V &

    """
    return _SnapTime.GetTriadParticip_PNEANet(Graph, TriadCntV)

def GetTriangleCnt_PNEANet(Graph):
    """
    GetTriangleCnt_PNEANet(PNEANet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.GetTriangleCnt_PNEANet(Graph)

def GetCmnNbrs_PNEANet(*args):
    """
    GetCmnNbrs_PNEANet(PNEANet Graph, int64 const & NId1, int64 const & NId2) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId1: int64 const &
    NId2: int64 const &

    GetCmnNbrs_PNEANet(PNEANet Graph, int64 const & NId1, int64 const & NId2, TInt64V NbrV) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NId1: int64 const &
    NId2: int64 const &
    NbrV: TInt64V &

    """
    return _SnapTime.GetCmnNbrs_PNEANet(*args)

def GetModularity_PNEANet(*args):
    """
    GetModularity_PNEANet(PNEANet G, TInt64V NIdV, int64 GEdges=-1) -> double

    Parameters
    ----------
    G: TPt< TNEANet > const &
    NIdV: TInt64V const &
    GEdges: int64

    GetModularity_PNEANet(PNEANet G, TInt64V NIdV) -> double

    Parameters
    ----------
    G: TPt< TNEANet > const &
    NIdV: TInt64V const &

    GetModularity_PNEANet(PNEANet G, TCnComV CmtyV, int64 GEdges=-1) -> double

    Parameters
    ----------
    G: TPt< TNEANet > const &
    CmtyV: TCnComV const &
    GEdges: int64

    GetModularity_PNEANet(PNEANet G, TCnComV CmtyV) -> double

    Parameters
    ----------
    G: TPt< TNEANet > const &
    CmtyV: TCnComV const &

    """
    return _SnapTime.GetModularity_PNEANet(*args)

def GetEdgesInOut_PNEANet(Graph, NIdV):
    """
    GetEdgesInOut_PNEANet(PNEANet Graph, TInt64V NIdV)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.GetEdgesInOut_PNEANet(Graph, NIdV)

def GetAnf_PNEANet(*args):
    """
    GetAnf_PNEANet(PNEANet Graph, int64 const & SrcNId, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir, int64 const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    SrcNId: int64 const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &
    NApprox: int64 const &

    GetAnf_PNEANet(PNEANet Graph, int64 const & SrcNId, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    SrcNId: int64 const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &

    GetAnf_PNEANet(PNEANet Graph, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir, int64 const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &
    NApprox: int64 const &

    GetAnf_PNEANet(PNEANet Graph, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &

    """
    return _SnapTime.GetAnf_PNEANet(*args)

def GetAnfEffDiam_PNEANet(*args):
    """
    GetAnfEffDiam_PNEANet(PNEANet Graph, bool const & IsDir, double const & Percentile, int64 const & NApprox) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    IsDir: bool const &
    Percentile: double const &
    NApprox: int64 const &

    GetAnfEffDiam_PNEANet(PNEANet Graph, int64 const NRuns=1, int64 NApprox=-1) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NRuns: int64 const
    NApprox: int64

    GetAnfEffDiam_PNEANet(PNEANet Graph, int64 const NRuns=1) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    NRuns: int64 const

    GetAnfEffDiam_PNEANet(PNEANet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.GetAnfEffDiam_PNEANet(*args)

def TestAnf_PNEANet():
    """TestAnf_PNEANet()"""
    return _SnapTime.TestAnf_PNEANet()

def PlotKCoreEdges_PNEANet(*args):
    """
    PlotKCoreEdges_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotKCoreEdges_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotKCoreEdges_PNEANet(*args)

def PlotKCoreNodes_PNEANet(*args):
    """
    PlotKCoreNodes_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotKCoreNodes_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotKCoreNodes_PNEANet(*args)

def PlotShortPathDistr_PNEANet(*args):
    """
    PlotShortPathDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr, int TestNodes)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr
    TestNodes: int

    PlotShortPathDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotShortPathDistr_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotShortPathDistr_PNEANet(*args)

def PlotHops_PNEANet(*args):
    """
    PlotHops_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr, bool const & IsDir=False, int const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr
    IsDir: bool const &
    NApprox: int const &

    PlotHops_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr
    IsDir: bool const &

    PlotHops_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotHops_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotHops_PNEANet(*args)

def PlotClustCf_PNEANet(*args):
    """
    PlotClustCf_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotClustCf_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotClustCf_PNEANet(*args)

def PlotSccDistr_PNEANet(*args):
    """
    PlotSccDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotSccDistr_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotSccDistr_PNEANet(*args)

def PlotWccDistr_PNEANet(*args):
    """
    PlotWccDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotWccDistr_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotWccDistr_PNEANet(*args)

def PlotOutDegDistr_PNEANet(*args):
    """
    PlotOutDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &
    PowerFit: bool const &

    PlotOutDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &

    PlotOutDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotOutDegDistr_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotOutDegDistr_PNEANet(*args)

def PlotInDegDistr_PNEANet(*args):
    """
    PlotInDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &
    PowerFit: bool const &

    PlotInDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &

    PlotInDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotInDegDistr_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotInDegDistr_PNEANet(*args)

def PercentDegree_PNEANet(Graph, Threshold=0):
    """
    PercentDegree_PNEANet(PNEANet Graph, int64 const Threshold=0) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    Threshold: int64 const

    PercentDegree_PNEANet(PNEANet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.PercentDegree_PNEANet(Graph, Threshold)

def NodesGTEDegree_PNEANet(Graph, Threshold=0):
    """
    NodesGTEDegree_PNEANet(PNEANet Graph, int64 const Threshold=0) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &
    Threshold: int64 const

    NodesGTEDegree_PNEANet(PNEANet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.NodesGTEDegree_PNEANet(Graph, Threshold)

def MxDegree_PNEANet(Graph):
    """
    MxDegree_PNEANet(PNEANet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.MxDegree_PNEANet(Graph)

def PercentMxWcc_PNEANet(Graph):
    """
    PercentMxWcc_PNEANet(PNEANet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.PercentMxWcc_PNEANet(Graph)

def PercentMxScc_PNEANet(Graph):
    """
    PercentMxScc_PNEANet(PNEANet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNEANet > const &

    """
    return _SnapTime.PercentMxScc_PNEANet(Graph)

def ToNetwork_PNEANet(*args):
    """
    ToNetwork_PNEANet(PTable Table, TStr SrcCol, TStr DstCol, TStr64V EdgeAttrV, TAttrAggr AggrPolicy) -> PNEANet

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    EdgeAttrV: TStr64V &
    AggrPolicy: enum TAttrAggr

    ToNetwork_PNEANet(PTable Table, TStr SrcCol, TStr DstCol, TStr64V SrcAttrs, TStr64V DstAttrs, TStr64V EdgeAttrs, TAttrAggr AggrPolicy) -> PNEANet

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    SrcAttrs: TStr64V &
    DstAttrs: TStr64V &
    EdgeAttrs: TStr64V &
    AggrPolicy: enum TAttrAggr

    ToNetwork_PNEANet(PTable Table, TStr SrcCol, TStr DstCol, TAttrAggr AggrPolicy) -> PNEANet

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    AggrPolicy: enum TAttrAggr

    ToNetwork_PNEANet(PTable Table, TStr SrcCol, TStr DstCol, TStr64V EdgeAttrV, PTable NodeTable, TStr NodeCol, TStr64V NodeAttrV, TAttrAggr AggrPolicy) -> PNEANet

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    EdgeAttrV: TStr64V &
    NodeTable: PTable
    NodeCol: TStr const &
    NodeAttrV: TStr64V &
    AggrPolicy: enum TAttrAggr

    """
    return _SnapTime.ToNetwork_PNEANet(*args)
class PMMNet(object):
    """Proxy of C++ TPt<(TMMNet)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> PMMNet"""
        return _SnapTime.PMMNet_New()

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_PMMNet

    def Save(self, SOut):
        """
        Save(PMMNet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.PMMNet_Save(self, SOut)


    def __deref__(self):
        """
        __deref__(PMMNet self) -> TMMNet

        Parameters
        ----------
        self: TPt< TMMNet > const *

        """
        return _SnapTime.PMMNet___deref__(self)


    def __ref__(self):
        """
        __ref__(PMMNet self) -> TMMNet

        Parameters
        ----------
        self: TPt< TMMNet > const *

        """
        return _SnapTime.PMMNet___ref__(self)


    def __call__(self):
        """
        __call__(PMMNet self) -> TMMNet

        Parameters
        ----------
        self: TPt< TMMNet > const *

        """
        return _SnapTime.PMMNet___call__(self)


    def Empty(self):
        """
        Empty(PMMNet self) -> bool

        Parameters
        ----------
        self: TPt< TMMNet > const *

        """
        return _SnapTime.PMMNet_Empty(self)


    def Clr(self):
        """
        Clr(PMMNet self)

        Parameters
        ----------
        self: TPt< TMMNet > *

        """
        return _SnapTime.PMMNet_Clr(self)


    def GetRefs(self):
        """
        GetRefs(PMMNet self) -> int64

        Parameters
        ----------
        self: TPt< TMMNet > const *

        """
        return _SnapTime.PMMNet_GetRefs(self)

    CRef = _swig_property(_SnapTime.PMMNet_CRef_get)

    def IsModeNet(self, MId):
        """
        IsModeNet(PMMNet self, int64 const & MId) -> bool

        Parameters
        ----------
        MId: int64 const &

        """
        return _SnapTime.PMMNet_IsModeNet(self, MId)


    def AddModeNet(self, ModeName):
        """
        AddModeNet(PMMNet self, TStr ModeName) -> int64

        Parameters
        ----------
        ModeName: TStr const &

        """
        return _SnapTime.PMMNet_AddModeNet(self, ModeName)


    def DelModeNet(self, *args):
        """
        DelModeNet(PMMNet self, TInt64 ModeId) -> int64

        Parameters
        ----------
        ModeId: TInt64 const &

        DelModeNet(PMMNet self, TStr ModeName) -> int64

        Parameters
        ----------
        ModeName: TStr const &

        """
        return _SnapTime.PMMNet_DelModeNet(self, *args)


    def IsCrossNet(self, CNId):
        """
        IsCrossNet(PMMNet self, int64 const & CNId) -> bool

        Parameters
        ----------
        CNId: int64 const &

        """
        return _SnapTime.PMMNet_IsCrossNet(self, CNId)


    def AddCrossNet(self, *args):
        """
        AddCrossNet(PMMNet self, TStr ModeName1, TStr ModeName2, TStr CrossNetName, bool isDir=True) -> int64

        Parameters
        ----------
        ModeName1: TStr const &
        ModeName2: TStr const &
        CrossNetName: TStr const &
        isDir: bool

        AddCrossNet(PMMNet self, TStr ModeName1, TStr ModeName2, TStr CrossNetName) -> int64

        Parameters
        ----------
        ModeName1: TStr const &
        ModeName2: TStr const &
        CrossNetName: TStr const &

        AddCrossNet(PMMNet self, TInt64 ModeId1, TInt64 ModeId2, TStr CrossNetName, bool isDir=True) -> int64

        Parameters
        ----------
        ModeId1: TInt64 const &
        ModeId2: TInt64 const &
        CrossNetName: TStr const &
        isDir: bool

        AddCrossNet(PMMNet self, TInt64 ModeId1, TInt64 ModeId2, TStr CrossNetName) -> int64

        Parameters
        ----------
        ModeId1: TInt64 const &
        ModeId2: TInt64 const &
        CrossNetName: TStr const &

        """
        return _SnapTime.PMMNet_AddCrossNet(self, *args)


    def DelCrossNet(self, *args):
        """
        DelCrossNet(PMMNet self, TInt64 CrossNetId) -> int64

        Parameters
        ----------
        CrossNetId: TInt64 const &

        DelCrossNet(PMMNet self, TStr CrossNet) -> int64

        Parameters
        ----------
        CrossNet: TStr const &

        """
        return _SnapTime.PMMNet_DelCrossNet(self, *args)


    def Load(self, SIn):
        """
        Load(PMMNet self, TSIn SIn) -> PMMNet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.PMMNet_Load(self, SIn)


    def LoadShM(self, ShMIn):
        """
        LoadShM(PMMNet self, TShMIn ShMIn) -> PMMNet

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.PMMNet_LoadShM(self, ShMIn)


    def ConvertToSparse(self):
        """
        ConvertToSparse(PMMNet self)

        Parameters
        ----------
        self: TPt< TMMNet > *

        """
        return _SnapTime.PMMNet_ConvertToSparse(self)


    def GetModeId(self, ModeName):
        """
        GetModeId(PMMNet self, TStr ModeName) -> int64

        Parameters
        ----------
        ModeName: TStr const &

        """
        return _SnapTime.PMMNet_GetModeId(self, ModeName)


    def GetModeName(self, ModeId):
        """
        GetModeName(PMMNet self, TInt64 ModeId) -> TStr

        Parameters
        ----------
        ModeId: TInt64 const &

        """
        return _SnapTime.PMMNet_GetModeName(self, ModeId)


    def GetCrossId(self, CrossName):
        """
        GetCrossId(PMMNet self, TStr CrossName) -> int64

        Parameters
        ----------
        CrossName: TStr const &

        """
        return _SnapTime.PMMNet_GetCrossId(self, CrossName)


    def GetCrossName(self, CrossId):
        """
        GetCrossName(PMMNet self, TInt64 CrossId) -> TStr

        Parameters
        ----------
        CrossId: TInt64 const &

        """
        return _SnapTime.PMMNet_GetCrossName(self, CrossId)


    def GetModeNetByName(self, ModeName):
        """
        GetModeNetByName(PMMNet self, TStr ModeName) -> TModeNet

        Parameters
        ----------
        ModeName: TStr const &

        """
        return _SnapTime.PMMNet_GetModeNetByName(self, ModeName)


    def GetModeNetById(self, ModeId):
        """
        GetModeNetById(PMMNet self, TInt64 ModeId) -> TModeNet

        Parameters
        ----------
        ModeId: TInt64 const &

        """
        return _SnapTime.PMMNet_GetModeNetById(self, ModeId)


    def GetCrossNetByName(self, CrossName):
        """
        GetCrossNetByName(PMMNet self, TStr CrossName) -> TCrossNet

        Parameters
        ----------
        CrossName: TStr const &

        """
        return _SnapTime.PMMNet_GetCrossNetByName(self, CrossName)


    def GetCrossNetById(self, CrossId):
        """
        GetCrossNetById(PMMNet self, TInt64 CrossId) -> TCrossNet

        Parameters
        ----------
        CrossId: TInt64 const &

        """
        return _SnapTime.PMMNet_GetCrossNetById(self, CrossId)


    def GetCrossNetI(self, *args):
        """
        GetCrossNetI(PMMNet self, int64 const & Id) -> TMMNet::TCrossNetI

        Parameters
        ----------
        Id: int64 const &

        GetCrossNetI(PMMNet self, int64 const & CId) -> TMMNetCrossNetI

        Parameters
        ----------
        CId: int64 const &

        """
        return _SnapTime.PMMNet_GetCrossNetI(self, *args)


    def BegCrossNetI(self, *args):
        """
        BegCrossNetI(PMMNet self) -> TMMNet::TCrossNetI
        BegCrossNetI(PMMNet self) -> TMMNetCrossNetI

        Parameters
        ----------
        self: TPt< TMMNet > *

        """
        return _SnapTime.PMMNet_BegCrossNetI(self, *args)


    def EndCrossNetI(self, *args):
        """
        EndCrossNetI(PMMNet self) -> TMMNet::TCrossNetI
        EndCrossNetI(PMMNet self) -> TMMNetCrossNetI

        Parameters
        ----------
        self: TPt< TMMNet > *

        """
        return _SnapTime.PMMNet_EndCrossNetI(self, *args)


    def GetModeNetI(self, *args):
        """
        GetModeNetI(PMMNet self, int64 const & Id) -> TMMNet::TModeNetI

        Parameters
        ----------
        Id: int64 const &

        GetModeNetI(PMMNet self, int64 const & NId) -> TMMNetModeNetI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.PMMNet_GetModeNetI(self, *args)


    def BegModeNetI(self, *args):
        """
        BegModeNetI(PMMNet self) -> TMMNet::TModeNetI
        BegModeNetI(PMMNet self) -> TMMNetModeNetI

        Parameters
        ----------
        self: TPt< TMMNet > *

        """
        return _SnapTime.PMMNet_BegModeNetI(self, *args)


    def EndModeNetI(self, *args):
        """
        EndModeNetI(PMMNet self) -> TMMNet::TModeNetI
        EndModeNetI(PMMNet self) -> TMMNetModeNetI

        Parameters
        ----------
        self: TPt< TMMNet > *

        """
        return _SnapTime.PMMNet_EndModeNetI(self, *args)


    def GetModeIdV(self, ModeIds):
        """
        GetModeIdV(PMMNet self, TInt64V ModeIds)

        Parameters
        ----------
        ModeIds: TInt64V &

        """
        return _SnapTime.PMMNet_GetModeIdV(self, ModeIds)


    def GetCrossIdV(self, CrossIds):
        """
        GetCrossIdV(PMMNet self, TInt64V CrossIds)

        Parameters
        ----------
        CrossIds: TInt64V &

        """
        return _SnapTime.PMMNet_GetCrossIdV(self, CrossIds)


    def GetModeNets(self):
        """
        GetModeNets(PMMNet self) -> int64

        Parameters
        ----------
        self: TPt< TMMNet > const *

        """
        return _SnapTime.PMMNet_GetModeNets(self)


    def GetCrossNets(self):
        """
        GetCrossNets(PMMNet self) -> int64

        Parameters
        ----------
        self: TPt< TMMNet > const *

        """
        return _SnapTime.PMMNet_GetCrossNets(self)


    def GetMxModeId(self):
        """
        GetMxModeId(PMMNet self) -> int64

        Parameters
        ----------
        self: TPt< TMMNet > const *

        """
        return _SnapTime.PMMNet_GetMxModeId(self)


    def GetMxCrossId(self):
        """
        GetMxCrossId(PMMNet self) -> int64

        Parameters
        ----------
        self: TPt< TMMNet > const *

        """
        return _SnapTime.PMMNet_GetMxCrossId(self)


    def SplitCrossNetByStrAttr(self, *args):
        """
        SplitCrossNetByStrAttr(PMMNet self, int64 const & CrossId, TStr AttrName, TStr64V NewCrossNames) -> int64

        Parameters
        ----------
        CrossId: int64 const &
        AttrName: TStr const &
        NewCrossNames: TStr64V &

        SplitCrossNetByStrAttr(PMMNet self, TStr CrossName, TStr AttrName, TStr64V NewCrossNames) -> int64

        Parameters
        ----------
        CrossName: TStr const &
        AttrName: TStr const &
        NewCrossNames: TStr64V &

        """
        return _SnapTime.PMMNet_SplitCrossNetByStrAttr(self, *args)


    def GetSubgraphByCrossNet(self, CrossNetTypes):
        """
        GetSubgraphByCrossNet(PMMNet self, TStr64V CrossNetTypes) -> PMMNet

        Parameters
        ----------
        CrossNetTypes: TStr64V &

        """
        return _SnapTime.PMMNet_GetSubgraphByCrossNet(self, CrossNetTypes)


    def GetSubgraphByModeNet(self, ModeNetTypes):
        """
        GetSubgraphByModeNet(PMMNet self, TStr64V ModeNetTypes) -> PMMNet

        Parameters
        ----------
        ModeNetTypes: TStr64V &

        """
        return _SnapTime.PMMNet_GetSubgraphByModeNet(self, ModeNetTypes)


    def CopyModeWithoutNodes(self, Src, Dst, ModeId):
        """
        CopyModeWithoutNodes(PMMNet self, PMMNet Src, PMMNet Dst, int64 const & ModeId) -> int64

        Parameters
        ----------
        Src: PMMNet const &
        Dst: PMMNet &
        ModeId: int64 const &

        """
        return _SnapTime.PMMNet_CopyModeWithoutNodes(self, Src, Dst, ModeId)


    def CopyCrossNetWithoutEdges(self, Src, Dst, CrossId):
        """
        CopyCrossNetWithoutEdges(PMMNet self, PMMNet Src, PMMNet Dst, int64 const & CrossId) -> int64

        Parameters
        ----------
        Src: PMMNet const &
        Dst: PMMNet &
        CrossId: int64 const &

        """
        return _SnapTime.PMMNet_CopyCrossNetWithoutEdges(self, Src, Dst, CrossId)


    def GetSubgraphByMetapaths(self, StartModeId, StartNodeIds, Metapaths):
        """
        GetSubgraphByMetapaths(PMMNet self, int64 const & StartModeId, TInt64V StartNodeIds, TIntInt64VV Metapaths) -> PMMNet

        Parameters
        ----------
        StartModeId: int64 const &
        StartNodeIds: TInt64V const &
        Metapaths: TVec< TInt64V,int64 > const &

        """
        return _SnapTime.PMMNet_GetSubgraphByMetapaths(self, StartModeId, StartNodeIds, Metapaths)


    def GetSubgraphByMetapath(self, StartModeId, StartNodeIds, Metapath):
        """
        GetSubgraphByMetapath(PMMNet self, int64 const & StartModeId, TInt64V StartNodeIds, TInt64V Metapath) -> PMMNet

        Parameters
        ----------
        StartModeId: int64 const &
        StartNodeIds: TInt64V const &
        Metapath: TInt64V const &

        """
        return _SnapTime.PMMNet_GetSubgraphByMetapath(self, StartModeId, StartNodeIds, Metapath)


    def ToNetwork(self, CrossNetTypes, NodeAttrMap, EdgeAttrMap):
        """
        ToNetwork(PMMNet self, TInt64V CrossNetTypes, TIntStrStrTr64V & NodeAttrMap, TVec< TTriple< TInt64,TStr,TStr >,int64 > & EdgeAttrMap) -> PNEANet

        Parameters
        ----------
        CrossNetTypes: TInt64V &
        NodeAttrMap: TIntStrStrTr64V &
        EdgeAttrMap: TVec< TTriple< TInt64,TStr,TStr >,int64 > &

        """
        return _SnapTime.PMMNet_ToNetwork(self, CrossNetTypes, NodeAttrMap, EdgeAttrMap)


    def ToNetwork2(self, CrossNetTypes, NodeAttrMap, EdgeAttrMap):
        """
        ToNetwork2(PMMNet self, TInt64V CrossNetTypes, TIntStrPr64VH & NodeAttrMap, THash< TInt64,TVec< TPair< TStr,TStr >,int64 >,int64 > & EdgeAttrMap) -> PNEANet

        Parameters
        ----------
        CrossNetTypes: TInt64V &
        NodeAttrMap: TIntStrPr64VH &
        EdgeAttrMap: THash< TInt64,TVec< TPair< TStr,TStr >,int64 >,int64 > &

        """
        return _SnapTime.PMMNet_ToNetwork2(self, CrossNetTypes, NodeAttrMap, EdgeAttrMap)


    def GetMetagraph(self):
        """
        GetMetagraph(PMMNet self) -> PNEANet

        Parameters
        ----------
        self: TPt< TMMNet > const *

        """
        return _SnapTime.PMMNet_GetMetagraph(self)


    def GetMetapaths(self, StartModeId, EndModeId, MaxPathLen, Metapaths):
        """
        GetMetapaths(PMMNet self, int64 const & StartModeId, int64 const & EndModeId, int64 const & MaxPathLen, TIntInt64VV Metapaths)

        Parameters
        ----------
        StartModeId: int64 const &
        EndModeId: int64 const &
        MaxPathLen: int64 const &
        Metapaths: TVec< TInt64V,int64 > &

        """
        return _SnapTime.PMMNet_GetMetapaths(self, StartModeId, EndModeId, MaxPathLen, Metapaths)


    def ToNetworkMP(self, CrossNetNames):
        """
        ToNetworkMP(PMMNet self, TStr64V CrossNetNames) -> PNEANetMP

        Parameters
        ----------
        CrossNetNames: TStr64V &

        """
        return _SnapTime.PMMNet_ToNetworkMP(self, CrossNetNames)

PMMNet.Save = new_instancemethod(_SnapTime.PMMNet_Save, None, PMMNet)
PMMNet.__deref__ = new_instancemethod(_SnapTime.PMMNet___deref__, None, PMMNet)
PMMNet.__ref__ = new_instancemethod(_SnapTime.PMMNet___ref__, None, PMMNet)
PMMNet.__call__ = new_instancemethod(_SnapTime.PMMNet___call__, None, PMMNet)
PMMNet.Empty = new_instancemethod(_SnapTime.PMMNet_Empty, None, PMMNet)
PMMNet.Clr = new_instancemethod(_SnapTime.PMMNet_Clr, None, PMMNet)
PMMNet.GetRefs = new_instancemethod(_SnapTime.PMMNet_GetRefs, None, PMMNet)
PMMNet.IsModeNet = new_instancemethod(_SnapTime.PMMNet_IsModeNet, None, PMMNet)
PMMNet.AddModeNet = new_instancemethod(_SnapTime.PMMNet_AddModeNet, None, PMMNet)
PMMNet.DelModeNet = new_instancemethod(_SnapTime.PMMNet_DelModeNet, None, PMMNet)
PMMNet.IsCrossNet = new_instancemethod(_SnapTime.PMMNet_IsCrossNet, None, PMMNet)
PMMNet.AddCrossNet = new_instancemethod(_SnapTime.PMMNet_AddCrossNet, None, PMMNet)
PMMNet.DelCrossNet = new_instancemethod(_SnapTime.PMMNet_DelCrossNet, None, PMMNet)
PMMNet.Load = new_instancemethod(_SnapTime.PMMNet_Load, None, PMMNet)
PMMNet.LoadShM = new_instancemethod(_SnapTime.PMMNet_LoadShM, None, PMMNet)
PMMNet.ConvertToSparse = new_instancemethod(_SnapTime.PMMNet_ConvertToSparse, None, PMMNet)
PMMNet.GetModeId = new_instancemethod(_SnapTime.PMMNet_GetModeId, None, PMMNet)
PMMNet.GetModeName = new_instancemethod(_SnapTime.PMMNet_GetModeName, None, PMMNet)
PMMNet.GetCrossId = new_instancemethod(_SnapTime.PMMNet_GetCrossId, None, PMMNet)
PMMNet.GetCrossName = new_instancemethod(_SnapTime.PMMNet_GetCrossName, None, PMMNet)
PMMNet.GetModeNetByName = new_instancemethod(_SnapTime.PMMNet_GetModeNetByName, None, PMMNet)
PMMNet.GetModeNetById = new_instancemethod(_SnapTime.PMMNet_GetModeNetById, None, PMMNet)
PMMNet.GetCrossNetByName = new_instancemethod(_SnapTime.PMMNet_GetCrossNetByName, None, PMMNet)
PMMNet.GetCrossNetById = new_instancemethod(_SnapTime.PMMNet_GetCrossNetById, None, PMMNet)
PMMNet.GetCrossNetI = new_instancemethod(_SnapTime.PMMNet_GetCrossNetI, None, PMMNet)
PMMNet.BegCrossNetI = new_instancemethod(_SnapTime.PMMNet_BegCrossNetI, None, PMMNet)
PMMNet.EndCrossNetI = new_instancemethod(_SnapTime.PMMNet_EndCrossNetI, None, PMMNet)
PMMNet.GetModeNetI = new_instancemethod(_SnapTime.PMMNet_GetModeNetI, None, PMMNet)
PMMNet.BegModeNetI = new_instancemethod(_SnapTime.PMMNet_BegModeNetI, None, PMMNet)
PMMNet.EndModeNetI = new_instancemethod(_SnapTime.PMMNet_EndModeNetI, None, PMMNet)
PMMNet.GetModeIdV = new_instancemethod(_SnapTime.PMMNet_GetModeIdV, None, PMMNet)
PMMNet.GetCrossIdV = new_instancemethod(_SnapTime.PMMNet_GetCrossIdV, None, PMMNet)
PMMNet.GetModeNets = new_instancemethod(_SnapTime.PMMNet_GetModeNets, None, PMMNet)
PMMNet.GetCrossNets = new_instancemethod(_SnapTime.PMMNet_GetCrossNets, None, PMMNet)
PMMNet.GetMxModeId = new_instancemethod(_SnapTime.PMMNet_GetMxModeId, None, PMMNet)
PMMNet.GetMxCrossId = new_instancemethod(_SnapTime.PMMNet_GetMxCrossId, None, PMMNet)
PMMNet.SplitCrossNetByStrAttr = new_instancemethod(_SnapTime.PMMNet_SplitCrossNetByStrAttr, None, PMMNet)
PMMNet.GetSubgraphByCrossNet = new_instancemethod(_SnapTime.PMMNet_GetSubgraphByCrossNet, None, PMMNet)
PMMNet.GetSubgraphByModeNet = new_instancemethod(_SnapTime.PMMNet_GetSubgraphByModeNet, None, PMMNet)
PMMNet.CopyModeWithoutNodes = new_instancemethod(_SnapTime.PMMNet_CopyModeWithoutNodes, None, PMMNet)
PMMNet.CopyCrossNetWithoutEdges = new_instancemethod(_SnapTime.PMMNet_CopyCrossNetWithoutEdges, None, PMMNet)
PMMNet.GetSubgraphByMetapaths = new_instancemethod(_SnapTime.PMMNet_GetSubgraphByMetapaths, None, PMMNet)
PMMNet.GetSubgraphByMetapath = new_instancemethod(_SnapTime.PMMNet_GetSubgraphByMetapath, None, PMMNet)
PMMNet.ToNetwork = new_instancemethod(_SnapTime.PMMNet_ToNetwork, None, PMMNet)
PMMNet.ToNetwork2 = new_instancemethod(_SnapTime.PMMNet_ToNetwork2, None, PMMNet)
PMMNet.GetMetagraph = new_instancemethod(_SnapTime.PMMNet_GetMetagraph, None, PMMNet)
PMMNet.GetMetapaths = new_instancemethod(_SnapTime.PMMNet_GetMetapaths, None, PMMNet)
PMMNet.ToNetworkMP = new_instancemethod(_SnapTime.PMMNet_ToNetworkMP, None, PMMNet)
PMMNet_swigregister = _SnapTime.PMMNet_swigregister
PMMNet_swigregister(PMMNet)

def PMMNet_New():
    """PMMNet_New() -> PMMNet"""
    return _SnapTime.PMMNet_New()


# redefine TNGraphEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TNGraphEdgeI.GetId = GetId


def PrintGraphStatTable_PNGraph(*args):
    """
    PrintGraphStatTable_PNGraph(PNGraph G, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    G: TPt< TNGraph > const &
    OutFNm: TStr
    Desc: TStr

    PrintGraphStatTable_PNGraph(PNGraph G, TStr OutFNm)

    Parameters
    ----------
    G: TPt< TNGraph > const &
    OutFNm: TStr

    """
    return _SnapTime.PrintGraphStatTable_PNGraph(*args)
class PNGraph(object):
    """Proxy of C++ TPt<(TNGraph)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> PNGraph"""
        return _SnapTime.PNGraph_New()

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_PNGraph

    def Save(self, SOut):
        """
        Save(PNGraph self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.PNGraph_Save(self, SOut)


    def __deref__(self):
        """
        __deref__(PNGraph self) -> TNGraph

        Parameters
        ----------
        self: TPt< TNGraph > const *

        """
        return _SnapTime.PNGraph___deref__(self)


    def __ref__(self):
        """
        __ref__(PNGraph self) -> TNGraph

        Parameters
        ----------
        self: TPt< TNGraph > const *

        """
        return _SnapTime.PNGraph___ref__(self)


    def __call__(self):
        """
        __call__(PNGraph self) -> TNGraph

        Parameters
        ----------
        self: TPt< TNGraph > const *

        """
        return _SnapTime.PNGraph___call__(self)


    def Empty(self):
        """
        Empty(PNGraph self) -> bool

        Parameters
        ----------
        self: TPt< TNGraph > const *

        """
        return _SnapTime.PNGraph_Empty(self)


    def Clr(self):
        """
        Clr(PNGraph self)

        Parameters
        ----------
        self: TPt< TNGraph > *

        """
        return _SnapTime.PNGraph_Clr(self)


    def GetRefs(self):
        """
        GetRefs(PNGraph self) -> int64

        Parameters
        ----------
        self: TPt< TNGraph > const *

        """
        return _SnapTime.PNGraph_GetRefs(self)


    def Load(self, SIn):
        """
        Load(PNGraph self, TSIn SIn) -> PNGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.PNGraph_Load(self, SIn)


    def LoadShM(self, ShMIn):
        """
        LoadShM(PNGraph self, TShMIn ShMIn) -> PNGraph

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.PNGraph_LoadShM(self, ShMIn)


    def HasFlag(self, Flag):
        """
        HasFlag(PNGraph self, TGraphFlag const & Flag) -> bool

        Parameters
        ----------
        Flag: TGraphFlag const &

        """
        return _SnapTime.PNGraph_HasFlag(self, Flag)


    def GetNodes(self):
        """
        GetNodes(PNGraph self) -> int64

        Parameters
        ----------
        self: TPt< TNGraph > const *

        """
        return _SnapTime.PNGraph_GetNodes(self)


    def AddNode(self, *args):
        """
        AddNode(PNGraph self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(PNGraph self) -> int64
        AddNode(PNGraph self, TNGraph::TNodeI const & NodeId) -> int64

        Parameters
        ----------
        NodeId: TNGraph::TNodeI const &

        AddNode(PNGraph self, int64 const & NId, TInt64V InNIdV, TInt64V OutNIdV) -> int64

        Parameters
        ----------
        NId: int64 const &
        InNIdV: TInt64V const &
        OutNIdV: TInt64V const &

        AddNode(PNGraph self, int64 const & NId, TVecPool< TInt64,int64 > const & Pool, int64 const & SrcVId, int64 const & DstVId) -> int64

        Parameters
        ----------
        NId: int64 const &
        Pool: TVecPool< TInt64,int64 > const &
        SrcVId: int64 const &
        DstVId: int64 const &

        """
        return _SnapTime.PNGraph_AddNode(self, *args)


    def AddNodeUnchecked(self, NId=-1):
        """
        AddNodeUnchecked(PNGraph self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNodeUnchecked(PNGraph self) -> int64

        Parameters
        ----------
        self: TPt< TNGraph > *

        """
        return _SnapTime.PNGraph_AddNodeUnchecked(self, NId)


    def DelNode(self, *args):
        """
        DelNode(PNGraph self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        DelNode(PNGraph self, TNGraph::TNode const & NodeI)

        Parameters
        ----------
        NodeI: TNGraph::TNode const &

        """
        return _SnapTime.PNGraph_DelNode(self, *args)


    def IsNode(self, NId):
        """
        IsNode(PNGraph self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.PNGraph_IsNode(self, NId)


    def BegNI(self, *args):
        """
        BegNI(PNGraph self) -> TNGraph::TNodeI
        BegNI(PNGraph self) -> TNGraphNodeI

        Parameters
        ----------
        self: TPt< TNGraph > *

        """
        return _SnapTime.PNGraph_BegNI(self, *args)


    def EndNI(self, *args):
        """
        EndNI(PNGraph self) -> TNGraph::TNodeI
        EndNI(PNGraph self) -> TNGraphNodeI

        Parameters
        ----------
        self: TPt< TNGraph > *

        """
        return _SnapTime.PNGraph_EndNI(self, *args)


    def GetNI(self, *args):
        """
        GetNI(PNGraph self, int64 const & NId) -> TNGraph::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetNI(PNGraph self) -> TIterNode< TNGraph >
        GetNI(PNGraph self, int64 const & NId) -> TNGraphNodeI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.PNGraph_GetNI(self, *args)


    def GetMxNId(self):
        """
        GetMxNId(PNGraph self) -> int64

        Parameters
        ----------
        self: TPt< TNGraph > const *

        """
        return _SnapTime.PNGraph_GetMxNId(self)


    def GetEdges(self):
        """
        GetEdges(PNGraph self) -> int64

        Parameters
        ----------
        self: TPt< TNGraph > const *

        """
        return _SnapTime.PNGraph_GetEdges(self)


    def AddEdge(self, *args):
        """
        AddEdge(PNGraph self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        AddEdge(PNGraph self, TNGraph::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TNGraph::TEdgeI const &

        """
        return _SnapTime.PNGraph_AddEdge(self, *args)


    def AddEdgeUnchecked(self, SrcNId, DstNId):
        """
        AddEdgeUnchecked(PNGraph self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNGraph_AddEdgeUnchecked(self, SrcNId, DstNId)


    def AddEdge2(self, SrcNId, DstNId):
        """
        AddEdge2(PNGraph self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNGraph_AddEdge2(self, SrcNId, DstNId)


    def DelEdge(self, SrcNId, DstNId, IsDir=True):
        """
        DelEdge(PNGraph self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        DelEdge(PNGraph self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNGraph_DelEdge(self, SrcNId, DstNId, IsDir)


    def IsEdge(self, SrcNId, DstNId, IsDir=True):
        """
        IsEdge(PNGraph self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        IsEdge(PNGraph self, int64 const & SrcNId, int64 const & DstNId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNGraph_IsEdge(self, SrcNId, DstNId, IsDir)


    def BegEI(self, *args):
        """
        BegEI(PNGraph self) -> TNGraph::TEdgeI
        BegEI(PNGraph self) -> TNGraphEdgeI

        Parameters
        ----------
        self: TPt< TNGraph > *

        """
        return _SnapTime.PNGraph_BegEI(self, *args)


    def EndEI(self, *args):
        """
        EndEI(PNGraph self) -> TNGraph::TEdgeI
        EndEI(PNGraph self) -> TNGraphEdgeI

        Parameters
        ----------
        self: TPt< TNGraph > *

        """
        return _SnapTime.PNGraph_EndEI(self, *args)


    def GetEI(self, *args):
        """
        GetEI(PNGraph self, int64 const & SrcNId, int64 const & DstNId) -> TNGraph::TEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        GetEI(PNGraph self) -> TIterEdge< TNGraph >
        GetEI(PNGraph self, int64 const & SrcNId, int64 const & DstNId) -> TNGraphEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNGraph_GetEI(self, *args)


    def GetRndNId(self, *args):
        """
        GetRndNId(PNGraph self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(PNGraph self) -> int64

        Parameters
        ----------
        self: TPt< TNGraph > *

        """
        return _SnapTime.PNGraph_GetRndNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(PNGraph self, TRnd Rnd) -> TNGraph::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(PNGraph self) -> TNGraph::TNodeI

        Parameters
        ----------
        self: TPt< TNGraph > *

        """
        return _SnapTime.PNGraph_GetRndNI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(PNGraph self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.PNGraph_GetNIdV(self, NIdV)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(PNGraph self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.PNGraph_Reserve(self, Nodes, Edges)


    def ReserveNIdInDeg(self, NId, InDeg):
        """
        ReserveNIdInDeg(PNGraph self, int64 const & NId, int64 const & InDeg)

        Parameters
        ----------
        NId: int64 const &
        InDeg: int64 const &

        """
        return _SnapTime.PNGraph_ReserveNIdInDeg(self, NId, InDeg)


    def ReserveNIdOutDeg(self, NId, OutDeg):
        """
        ReserveNIdOutDeg(PNGraph self, int64 const & NId, int64 const & OutDeg)

        Parameters
        ----------
        NId: int64 const &
        OutDeg: int64 const &

        """
        return _SnapTime.PNGraph_ReserveNIdOutDeg(self, NId, OutDeg)


    def SortNodeAdjV(self):
        """
        SortNodeAdjV(PNGraph self)

        Parameters
        ----------
        self: TPt< TNGraph > *

        """
        return _SnapTime.PNGraph_SortNodeAdjV(self)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(PNGraph self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(PNGraph self)

        Parameters
        ----------
        self: TPt< TNGraph > *

        """
        return _SnapTime.PNGraph_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(PNGraph self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(PNGraph self) -> bool

        Parameters
        ----------
        self: TPt< TNGraph > const *

        """
        return _SnapTime.PNGraph_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(PNGraph self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(PNGraph self)

        Parameters
        ----------
        self: TPt< TNGraph > const *

        """
        return _SnapTime.PNGraph_Dump(self, *args)


    def GetSmallGraph(self):
        """
        GetSmallGraph(PNGraph self) -> PNGraph

        Parameters
        ----------
        self: TPt< TNGraph > *

        """
        return _SnapTime.PNGraph_GetSmallGraph(self)

PNGraph.Save = new_instancemethod(_SnapTime.PNGraph_Save, None, PNGraph)
PNGraph.__deref__ = new_instancemethod(_SnapTime.PNGraph___deref__, None, PNGraph)
PNGraph.__ref__ = new_instancemethod(_SnapTime.PNGraph___ref__, None, PNGraph)
PNGraph.__call__ = new_instancemethod(_SnapTime.PNGraph___call__, None, PNGraph)
PNGraph.Empty = new_instancemethod(_SnapTime.PNGraph_Empty, None, PNGraph)
PNGraph.Clr = new_instancemethod(_SnapTime.PNGraph_Clr, None, PNGraph)
PNGraph.GetRefs = new_instancemethod(_SnapTime.PNGraph_GetRefs, None, PNGraph)
PNGraph.Load = new_instancemethod(_SnapTime.PNGraph_Load, None, PNGraph)
PNGraph.LoadShM = new_instancemethod(_SnapTime.PNGraph_LoadShM, None, PNGraph)
PNGraph.HasFlag = new_instancemethod(_SnapTime.PNGraph_HasFlag, None, PNGraph)
PNGraph.GetNodes = new_instancemethod(_SnapTime.PNGraph_GetNodes, None, PNGraph)
PNGraph.AddNode = new_instancemethod(_SnapTime.PNGraph_AddNode, None, PNGraph)
PNGraph.AddNodeUnchecked = new_instancemethod(_SnapTime.PNGraph_AddNodeUnchecked, None, PNGraph)
PNGraph.DelNode = new_instancemethod(_SnapTime.PNGraph_DelNode, None, PNGraph)
PNGraph.IsNode = new_instancemethod(_SnapTime.PNGraph_IsNode, None, PNGraph)
PNGraph.BegNI = new_instancemethod(_SnapTime.PNGraph_BegNI, None, PNGraph)
PNGraph.EndNI = new_instancemethod(_SnapTime.PNGraph_EndNI, None, PNGraph)
PNGraph.GetNI = new_instancemethod(_SnapTime.PNGraph_GetNI, None, PNGraph)
PNGraph.GetMxNId = new_instancemethod(_SnapTime.PNGraph_GetMxNId, None, PNGraph)
PNGraph.GetEdges = new_instancemethod(_SnapTime.PNGraph_GetEdges, None, PNGraph)
PNGraph.AddEdge = new_instancemethod(_SnapTime.PNGraph_AddEdge, None, PNGraph)
PNGraph.AddEdgeUnchecked = new_instancemethod(_SnapTime.PNGraph_AddEdgeUnchecked, None, PNGraph)
PNGraph.AddEdge2 = new_instancemethod(_SnapTime.PNGraph_AddEdge2, None, PNGraph)
PNGraph.DelEdge = new_instancemethod(_SnapTime.PNGraph_DelEdge, None, PNGraph)
PNGraph.IsEdge = new_instancemethod(_SnapTime.PNGraph_IsEdge, None, PNGraph)
PNGraph.BegEI = new_instancemethod(_SnapTime.PNGraph_BegEI, None, PNGraph)
PNGraph.EndEI = new_instancemethod(_SnapTime.PNGraph_EndEI, None, PNGraph)
PNGraph.GetEI = new_instancemethod(_SnapTime.PNGraph_GetEI, None, PNGraph)
PNGraph.GetRndNId = new_instancemethod(_SnapTime.PNGraph_GetRndNId, None, PNGraph)
PNGraph.GetRndNI = new_instancemethod(_SnapTime.PNGraph_GetRndNI, None, PNGraph)
PNGraph.GetNIdV = new_instancemethod(_SnapTime.PNGraph_GetNIdV, None, PNGraph)
PNGraph.Reserve = new_instancemethod(_SnapTime.PNGraph_Reserve, None, PNGraph)
PNGraph.ReserveNIdInDeg = new_instancemethod(_SnapTime.PNGraph_ReserveNIdInDeg, None, PNGraph)
PNGraph.ReserveNIdOutDeg = new_instancemethod(_SnapTime.PNGraph_ReserveNIdOutDeg, None, PNGraph)
PNGraph.SortNodeAdjV = new_instancemethod(_SnapTime.PNGraph_SortNodeAdjV, None, PNGraph)
PNGraph.Defrag = new_instancemethod(_SnapTime.PNGraph_Defrag, None, PNGraph)
PNGraph.IsOk = new_instancemethod(_SnapTime.PNGraph_IsOk, None, PNGraph)
PNGraph.Dump = new_instancemethod(_SnapTime.PNGraph_Dump, None, PNGraph)
PNGraph.GetSmallGraph = new_instancemethod(_SnapTime.PNGraph_GetSmallGraph, None, PNGraph)
PNGraph_swigregister = _SnapTime.PNGraph_swigregister
PNGraph_swigregister(PNGraph)

def PNGraph_New():
    """PNGraph_New() -> PNGraph"""
    return _SnapTime.PNGraph_New()


def PrintInfo_PNGraph(*args):
    """
    PrintInfo_PNGraph(PNGraph Graph, TStr Desc, TStr OutFNm, bool const & Fast=True)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    Desc: TStr const &
    OutFNm: TStr const &
    Fast: bool const &

    PrintInfo_PNGraph(PNGraph Graph, TStr Desc, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    Desc: TStr const &
    OutFNm: TStr const &

    PrintInfo_PNGraph(PNGraph Graph, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    Desc: TStr const &

    PrintInfo_PNGraph(PNGraph Graph)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.PrintInfo_PNGraph(*args)

def GetNodeWcc_PNGraph(Graph, NId, CnCom):
    """
    GetNodeWcc_PNGraph(PNGraph Graph, int64 const & NId, TInt64V CnCom)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId: int64 const &
    CnCom: TInt64V &

    """
    return _SnapTime.GetNodeWcc_PNGraph(Graph, NId, CnCom)

def IsConnected_PNGraph(Graph):
    """
    IsConnected_PNGraph(PNGraph Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.IsConnected_PNGraph(Graph)

def IsWeaklyConn_PNGraph(Graph):
    """
    IsWeaklyConn_PNGraph(PNGraph Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.IsWeaklyConn_PNGraph(Graph)

def GetWccSzCnt_PNGraph(Graph, WccSzCnt):
    """
    GetWccSzCnt_PNGraph(PNGraph Graph, TIntPr64V WccSzCnt)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    WccSzCnt: TIntPr64V &

    """
    return _SnapTime.GetWccSzCnt_PNGraph(Graph, WccSzCnt)

def GetWccs_PNGraph(Graph, CnComV):
    """
    GetWccs_PNGraph(PNGraph Graph, TCnComV CnComV)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    CnComV: TCnComV &

    """
    return _SnapTime.GetWccs_PNGraph(Graph, CnComV)

def GetSccSzCnt_PNGraph(Graph, SccSzCnt):
    """
    GetSccSzCnt_PNGraph(PNGraph Graph, TIntPr64V SccSzCnt)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    SccSzCnt: TIntPr64V &

    """
    return _SnapTime.GetSccSzCnt_PNGraph(Graph, SccSzCnt)

def GetSccs_PNGraph(Graph, CnComV):
    """
    GetSccs_PNGraph(PNGraph Graph, TCnComV CnComV)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    CnComV: TCnComV &

    """
    return _SnapTime.GetSccs_PNGraph(Graph, CnComV)

def GetMxWccSz_PNGraph(Graph):
    """
    GetMxWccSz_PNGraph(PNGraph Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.GetMxWccSz_PNGraph(Graph)

def GetMxSccSz_PNGraph(Graph):
    """
    GetMxSccSz_PNGraph(PNGraph Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.GetMxSccSz_PNGraph(Graph)

def GetMxWcc_PNGraph(Graph):
    """
    GetMxWcc_PNGraph(PNGraph Graph) -> PNGraph

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.GetMxWcc_PNGraph(Graph)

def GetMxScc_PNGraph(Graph):
    """
    GetMxScc_PNGraph(PNGraph Graph) -> PNGraph

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.GetMxScc_PNGraph(Graph)

def GetMxBiCon_PNGraph(Graph):
    """
    GetMxBiCon_PNGraph(PNGraph Graph) -> PNGraph

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.GetMxBiCon_PNGraph(Graph)

def GetNodeEcc_PNGraph(Graph, NId, IsDir=False):
    """
    GetNodeEcc_PNGraph(PNGraph Graph, int64 const & NId, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId: int64 const &
    IsDir: bool const &

    GetNodeEcc_PNGraph(PNGraph Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId: int64 const &

    """
    return _SnapTime.GetNodeEcc_PNGraph(Graph, NId, IsDir)

def GetPageRank_PNGraph(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRank_PNGraph(PNGraph Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRank_PNGraph(PNGraph Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRank_PNGraph(PNGraph Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRank_PNGraph(PNGraph Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRank_PNGraph(Graph, PRankH, C, Eps, MaxIter)

def GetPageRank_v1_PNGraph(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRank_v1_PNGraph(PNGraph Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRank_v1_PNGraph(PNGraph Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRank_v1_PNGraph(PNGraph Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRank_v1_PNGraph(PNGraph Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRank_v1_PNGraph(Graph, PRankH, C, Eps, MaxIter)

def GetHits_PNGraph(Graph, NIdHubH, NIdAuthH, MaxIter=20):
    """
    GetHits_PNGraph(PNGraph Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH, int64 const & MaxIter=20)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &
    MaxIter: int64 const &

    GetHits_PNGraph(PNGraph Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &

    """
    return _SnapTime.GetHits_PNGraph(Graph, NIdHubH, NIdAuthH, MaxIter)

def GetBetweennessCentr_PNGraph(*args):
    """
    GetBetweennessCentr_PNGraph(PNGraph Graph, TIntFlt64H NIdBtwH, double const & NodeFrac=1.0, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdBtwH: TIntFlt64H &
    NodeFrac: double const &
    IsDir: bool const &

    GetBetweennessCentr_PNGraph(PNGraph Graph, TIntFlt64H NIdBtwH, double const & NodeFrac=1.0)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdBtwH: TIntFlt64H &
    NodeFrac: double const &

    GetBetweennessCentr_PNGraph(PNGraph Graph, TIntFlt64H NIdBtwH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdBtwH: TIntFlt64H &

    GetBetweennessCentr_PNGraph(PNGraph Graph, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &
    IsDir: bool const &

    GetBetweennessCentr_PNGraph(PNGraph Graph, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &

    GetBetweennessCentr_PNGraph(PNGraph Graph, TIntPrFlt64H EdgeBtwH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    EdgeBtwH: TIntPrFlt64H &

    GetBetweennessCentr_PNGraph(PNGraph Graph, TIntFlt64H NIdBtwH, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdBtwH: TIntFlt64H &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &
    IsDir: bool const &

    GetBetweennessCentr_PNGraph(PNGraph Graph, TIntFlt64H NIdBtwH, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdBtwH: TIntFlt64H &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &

    GetBetweennessCentr_PNGraph(PNGraph Graph, TIntFlt64H NIdBtwH, TIntPrFlt64H EdgeBtwH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdBtwH: TIntFlt64H &
    EdgeBtwH: TIntPrFlt64H &

    GetBetweennessCentr_PNGraph(PNGraph Graph, TInt64V BtwNIdV, TIntFlt64H NodeBtwH, bool const & DoNodeCent, TIntPrFlt64H EdgeBtwH, bool const & DoEdgeCent, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    BtwNIdV: TInt64V const &
    NodeBtwH: TIntFlt64H &
    DoNodeCent: bool const &
    EdgeBtwH: TIntPrFlt64H &
    DoEdgeCent: bool const &
    IsDir: bool const &

    """
    return _SnapTime.GetBetweennessCentr_PNGraph(*args)

def GetClosenessCentr_PNGraph(Graph, NId, Normalized=True, IsDir=False):
    """
    GetClosenessCentr_PNGraph(PNGraph Graph, int64 const & NId, bool const & Normalized=True, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId: int64 const &
    Normalized: bool const &
    IsDir: bool const &

    GetClosenessCentr_PNGraph(PNGraph Graph, int64 const & NId, bool const & Normalized=True) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId: int64 const &
    Normalized: bool const &

    GetClosenessCentr_PNGraph(PNGraph Graph, int64 const & NId) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId: int64 const &

    """
    return _SnapTime.GetClosenessCentr_PNGraph(Graph, NId, Normalized, IsDir)

def GetFarnessCentr_PNGraph(Graph, NId, Normalized=True, IsDir=False):
    """
    GetFarnessCentr_PNGraph(PNGraph Graph, int64 const & NId, bool const & Normalized=True, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId: int64 const &
    Normalized: bool const &
    IsDir: bool const &

    GetFarnessCentr_PNGraph(PNGraph Graph, int64 const & NId, bool const & Normalized=True) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId: int64 const &
    Normalized: bool const &

    GetFarnessCentr_PNGraph(PNGraph Graph, int64 const & NId) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId: int64 const &

    """
    return _SnapTime.GetFarnessCentr_PNGraph(Graph, NId, Normalized, IsDir)

def GetPageRankMP_PNGraph(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRankMP_PNGraph(PNGraph Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRankMP_PNGraph(PNGraph Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRankMP_PNGraph(PNGraph Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRankMP_PNGraph(PNGraph Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRankMP_PNGraph(Graph, PRankH, C, Eps, MaxIter)

def GetHitsMP_PNGraph(Graph, NIdHubH, NIdAuthH, MaxIter=20):
    """
    GetHitsMP_PNGraph(PNGraph Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH, int64 const & MaxIter=20)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &
    MaxIter: int64 const &

    GetHitsMP_PNGraph(PNGraph Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &

    """
    return _SnapTime.GetHitsMP_PNGraph(Graph, NIdHubH, NIdAuthH, MaxIter)

def CntInDegNodes_PNGraph(Graph, NodeInDeg):
    """
    CntInDegNodes_PNGraph(PNGraph Graph, int64 const & NodeInDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NodeInDeg: int64 const &

    """
    return _SnapTime.CntInDegNodes_PNGraph(Graph, NodeInDeg)

def CntOutDegNodes_PNGraph(Graph, NodeOutDeg):
    """
    CntOutDegNodes_PNGraph(PNGraph Graph, int64 const & NodeOutDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NodeOutDeg: int64 const &

    """
    return _SnapTime.CntOutDegNodes_PNGraph(Graph, NodeOutDeg)

def CntDegNodes_PNGraph(Graph, NodeDeg):
    """
    CntDegNodes_PNGraph(PNGraph Graph, int64 const & NodeDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NodeDeg: int64 const &

    """
    return _SnapTime.CntDegNodes_PNGraph(Graph, NodeDeg)

def CntNonZNodes_PNGraph(Graph):
    """
    CntNonZNodes_PNGraph(PNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.CntNonZNodes_PNGraph(Graph)

def CntEdgesToSet_PNGraph(Graph, NId, NodeSet):
    """
    CntEdgesToSet_PNGraph(PNGraph Graph, int64 const & NId, TInt64Set NodeSet) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId: int64 const &
    NodeSet: TInt64Set const &

    """
    return _SnapTime.CntEdgesToSet_PNGraph(Graph, NId, NodeSet)

def GetMxDegNId_PNGraph(Graph):
    """
    GetMxDegNId_PNGraph(PNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.GetMxDegNId_PNGraph(Graph)

def GetMxInDegNId_PNGraph(Graph):
    """
    GetMxInDegNId_PNGraph(PNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.GetMxInDegNId_PNGraph(Graph)

def GetMxOutDegNId_PNGraph(Graph):
    """
    GetMxOutDegNId_PNGraph(PNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.GetMxOutDegNId_PNGraph(Graph)

def GetInDegCnt_PNGraph(*args):
    """
    GetInDegCnt_PNGraph(PNGraph Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    DegToCntV: TIntPr64V &

    GetInDegCnt_PNGraph(PNGraph Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetInDegCnt_PNGraph(*args)

def GetOutDegCnt_PNGraph(*args):
    """
    GetOutDegCnt_PNGraph(PNGraph Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    DegToCntV: TIntPr64V &

    GetOutDegCnt_PNGraph(PNGraph Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetOutDegCnt_PNGraph(*args)

def GetDegCnt_PNGraph(*args):
    """
    GetDegCnt_PNGraph(PNGraph Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    DegToCntV: TIntPr64V &

    GetDegCnt_PNGraph(PNGraph Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetDegCnt_PNGraph(*args)

def GetDegSeqV_PNGraph(*args):
    """
    GetDegSeqV_PNGraph(PNGraph Graph, TInt64V DegV)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    DegV: TInt64V &

    GetDegSeqV_PNGraph(PNGraph Graph, TInt64V InDegV, TInt64V OutDegV)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    InDegV: TInt64V &
    OutDegV: TInt64V &

    """
    return _SnapTime.GetDegSeqV_PNGraph(*args)

def GetNodeInDegV_PNGraph(Graph, NIdInDegV):
    """
    GetNodeInDegV_PNGraph(PNGraph Graph, TIntPr64V NIdInDegV)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdInDegV: TIntPr64V &

    """
    return _SnapTime.GetNodeInDegV_PNGraph(Graph, NIdInDegV)

def GetNodeOutDegV_PNGraph(Graph, NIdOutDegV):
    """
    GetNodeOutDegV_PNGraph(PNGraph Graph, TIntPr64V NIdOutDegV)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdOutDegV: TIntPr64V &

    """
    return _SnapTime.GetNodeOutDegV_PNGraph(Graph, NIdOutDegV)

def CntUniqUndirEdges_PNGraph(Graph):
    """
    CntUniqUndirEdges_PNGraph(PNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.CntUniqUndirEdges_PNGraph(Graph)

def CntUniqDirEdges_PNGraph(Graph):
    """
    CntUniqDirEdges_PNGraph(PNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.CntUniqDirEdges_PNGraph(Graph)

def CntUniqBiDirEdges_PNGraph(Graph):
    """
    CntUniqBiDirEdges_PNGraph(PNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.CntUniqBiDirEdges_PNGraph(Graph)

def CntSelfEdges_PNGraph(Graph):
    """
    CntSelfEdges_PNGraph(PNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.CntSelfEdges_PNGraph(Graph)

def GetUnDir_PNGraph(Graph):
    """
    GetUnDir_PNGraph(PNGraph Graph) -> PNGraph

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.GetUnDir_PNGraph(Graph)

def MakeUnDir_PNGraph(Graph):
    """
    MakeUnDir_PNGraph(PNGraph Graph)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.MakeUnDir_PNGraph(Graph)

def AddSelfEdges_PNGraph(Graph):
    """
    AddSelfEdges_PNGraph(PNGraph Graph)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.AddSelfEdges_PNGraph(Graph)

def DelSelfEdges_PNGraph(Graph):
    """
    DelSelfEdges_PNGraph(PNGraph Graph)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.DelSelfEdges_PNGraph(Graph)

def DelNodes_PNGraph(Graph, NIdV):
    """
    DelNodes_PNGraph(PNGraph Graph, TInt64V NIdV)

    Parameters
    ----------
    Graph: TPt< TNGraph > &
    NIdV: TInt64V const &

    """
    return _SnapTime.DelNodes_PNGraph(Graph, NIdV)

def DelZeroDegNodes_PNGraph(Graph):
    """
    DelZeroDegNodes_PNGraph(PNGraph Graph)

    Parameters
    ----------
    Graph: TPt< TNGraph > &

    """
    return _SnapTime.DelZeroDegNodes_PNGraph(Graph)

def DelDegKNodes_PNGraph(Graph, OutDegK, InDegK):
    """
    DelDegKNodes_PNGraph(PNGraph Graph, int64 const & OutDegK, int64 const & InDegK)

    Parameters
    ----------
    Graph: TPt< TNGraph > &
    OutDegK: int64 const &
    InDegK: int64 const &

    """
    return _SnapTime.DelDegKNodes_PNGraph(Graph, OutDegK, InDegK)

def IsTree_PNGraph(Graph):
    """
    IsTree_PNGraph(PNGraph Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.IsTree_PNGraph(Graph)

def GetTreeRootNId_PNGraph(Graph):
    """
    GetTreeRootNId_PNGraph(PNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.GetTreeRootNId_PNGraph(Graph)

def GetTreeSig_PNGraph(*args):
    """
    GetTreeSig_PNGraph(PNGraph Graph, int64 const & RootNId, TInt64V Sig)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    RootNId: int64 const &
    Sig: TInt64V &

    GetTreeSig_PNGraph(PNGraph Graph, int64 const & RootNId, TInt64V Sig, TIntPr64V NodeMap)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    RootNId: int64 const &
    Sig: TInt64V &
    NodeMap: TIntPr64V &

    """
    return _SnapTime.GetTreeSig_PNGraph(*args)

def GetBfsTree_PNGraph(Graph, StartNId, FollowOut, FollowIn):
    """
    GetBfsTree_PNGraph(PNGraph Graph, int64 const & StartNId, bool const & FollowOut, bool const & FollowIn) -> PNGraph

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    StartNId: int64 const &
    FollowOut: bool const &
    FollowIn: bool const &

    """
    return _SnapTime.GetBfsTree_PNGraph(Graph, StartNId, FollowOut, FollowIn)

def GetSubTreeSz_PNGraph(Graph, StartNId, FollowOut, FollowIn):
    """
    GetSubTreeSz_PNGraph(PNGraph Graph, int64 const & StartNId, bool const & FollowOut, bool const & FollowIn) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    StartNId: int64 const &
    FollowOut: bool const &
    FollowIn: bool const &

    """
    return _SnapTime.GetSubTreeSz_PNGraph(Graph, StartNId, FollowOut, FollowIn)

def GetNodesAtHop_PNGraph(Graph, StartNId, Hop, NIdV, IsDir=False):
    """
    GetNodesAtHop_PNGraph(PNGraph Graph, int64 const & StartNId, int64 const & Hop, TInt64V NIdV, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    StartNId: int64 const &
    Hop: int64 const &
    NIdV: TInt64V &
    IsDir: bool const &

    GetNodesAtHop_PNGraph(PNGraph Graph, int64 const & StartNId, int64 const & Hop, TInt64V NIdV) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    StartNId: int64 const &
    Hop: int64 const &
    NIdV: TInt64V &

    """
    return _SnapTime.GetNodesAtHop_PNGraph(Graph, StartNId, Hop, NIdV, IsDir)

def GetNodesAtHops_PNGraph(Graph, StartNId, HopCntV, IsDir=False):
    """
    GetNodesAtHops_PNGraph(PNGraph Graph, int64 const & StartNId, TIntPr64V HopCntV, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    StartNId: int64 const &
    HopCntV: TIntPr64V &
    IsDir: bool const &

    GetNodesAtHops_PNGraph(PNGraph Graph, int64 const & StartNId, TIntPr64V HopCntV) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    StartNId: int64 const &
    HopCntV: TIntPr64V &

    """
    return _SnapTime.GetNodesAtHops_PNGraph(Graph, StartNId, HopCntV, IsDir)

def GetShortPath_PNGraph(*args):
    """
    GetShortPath_PNGraph(PNGraph Graph, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    SrcNId: int64 const &
    DstNId: int64 const &
    IsDir: bool const &

    GetShortPath_PNGraph(PNGraph Graph, int64 const & SrcNId, int64 const & DstNId) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    SrcNId: int64 const &
    DstNId: int64 const &

    GetShortPath_PNGraph(PNGraph Graph, int64 const & SrcNId, TInt64H NIdToDistH, bool const & IsDir=False, int64 const & MaxDist) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &
    IsDir: bool const &
    MaxDist: int64 const &

    GetShortPath_PNGraph(PNGraph Graph, int64 const & SrcNId, TInt64H NIdToDistH, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &
    IsDir: bool const &

    GetShortPath_PNGraph(PNGraph Graph, int64 const & SrcNId, TInt64H NIdToDistH) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &

    """
    return _SnapTime.GetShortPath_PNGraph(*args)

def GetBfsFullDiam_PNGraph(Graph, NTestNodes, IsDir=False):
    """
    GetBfsFullDiam_PNGraph(PNGraph Graph, int64 const & NTestNodes, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsFullDiam_PNGraph(PNGraph Graph, int64 const & NTestNodes) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NTestNodes: int64 const &

    """
    return _SnapTime.GetBfsFullDiam_PNGraph(Graph, NTestNodes, IsDir)

def GetBfsEffDiam_PNGraph(*args):
    """
    GetBfsEffDiam_PNGraph(PNGraph Graph, int64 const & NTestNodes, bool const & IsDir, double & EffDiam, int64 & FullDiam) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NTestNodes: int64 const &
    IsDir: bool const &
    EffDiam: double &
    FullDiam: int64 &

    GetBfsEffDiam_PNGraph(PNGraph Graph, int64 const & NTestNodes, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsEffDiam_PNGraph(PNGraph Graph, int64 const & NTestNodes) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NTestNodes: int64 const &

    GetBfsEffDiam_PNGraph(PNGraph Graph, int64 const & NTestNodes, bool const & IsDir) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsEffDiam_PNGraph(PNGraph Graph, int64 const & NTestNodes, TInt64V SubGraphNIdV, bool const & IsDir) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NTestNodes: int64 const &
    SubGraphNIdV: TInt64V const &
    IsDir: bool const &

    """
    return _SnapTime.GetBfsEffDiam_PNGraph(*args)

def DrawGViz_PNGraph(*args):
    """
    DrawGViz_PNGraph(PNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, bool const & NodeLabels=False, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &
    NIdColorH: TIntStr64H const &

    DrawGViz_PNGraph(PNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, bool const & NodeLabels=False)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &

    DrawGViz_PNGraph(PNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &

    DrawGViz_PNGraph(PNGraph Graph, TGVizLayout const & Layout, TStr PltFNm)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &

    DrawGViz_PNGraph(PNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, TIntStr64H NodeLabelH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabelH: TIntStr64H const &

    """
    return _SnapTime.DrawGViz_PNGraph(*args)

def GenGrid_PNGraph(Rows, Cols, IsDir=True):
    """
    GenGrid_PNGraph(int64 const & Rows, int64 const & Cols, bool const & IsDir=True) -> PNGraph

    Parameters
    ----------
    Rows: int64 const &
    Cols: int64 const &
    IsDir: bool const &

    GenGrid_PNGraph(int64 const & Rows, int64 const & Cols) -> PNGraph

    Parameters
    ----------
    Rows: int64 const &
    Cols: int64 const &

    """
    return _SnapTime.GenGrid_PNGraph(Rows, Cols, IsDir)

def GenStar_PNGraph(Nodes, IsDir=True):
    """
    GenStar_PNGraph(int64 const & Nodes, bool const & IsDir=True) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &
    IsDir: bool const &

    GenStar_PNGraph(int64 const & Nodes) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenStar_PNGraph(Nodes, IsDir)

def GenCircle_PNGraph(Nodes, NodeOutDeg=1, IsDir=True):
    """
    GenCircle_PNGraph(int64 const & Nodes, int64 const & NodeOutDeg=1, bool const & IsDir=True) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &
    IsDir: bool const &

    GenCircle_PNGraph(int64 const & Nodes, int64 const & NodeOutDeg=1) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &

    GenCircle_PNGraph(int64 const & Nodes) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenCircle_PNGraph(Nodes, NodeOutDeg, IsDir)

def GenFull_PNGraph(Nodes):
    """
    GenFull_PNGraph(int64 const & Nodes) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenFull_PNGraph(Nodes)

def GenTree_PNGraph(Fanout, Levels, IsDir=True, ChildPointsToParent=True):
    """
    GenTree_PNGraph(int64 const & Fanout, int64 const & Levels, bool const & IsDir=True, bool const & ChildPointsToParent=True) -> PNGraph

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &
    IsDir: bool const &
    ChildPointsToParent: bool const &

    GenTree_PNGraph(int64 const & Fanout, int64 const & Levels, bool const & IsDir=True) -> PNGraph

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &
    IsDir: bool const &

    GenTree_PNGraph(int64 const & Fanout, int64 const & Levels) -> PNGraph

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &

    """
    return _SnapTime.GenTree_PNGraph(Fanout, Levels, IsDir, ChildPointsToParent)

def GenBaraHierar_PNGraph(Levels, IsDir=True):
    """
    GenBaraHierar_PNGraph(int64 const & Levels, bool const & IsDir=True) -> PNGraph

    Parameters
    ----------
    Levels: int64 const &
    IsDir: bool const &

    GenBaraHierar_PNGraph(int64 const & Levels) -> PNGraph

    Parameters
    ----------
    Levels: int64 const &

    """
    return _SnapTime.GenBaraHierar_PNGraph(Levels, IsDir)

def GenRndGnm_PNGraph(*args):
    """
    GenRndGnm_PNGraph(int64 const & Nodes, int64 const & Edges, bool const & IsDir=True, TRnd Rnd) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &
    IsDir: bool const &
    Rnd: TRnd &

    GenRndGnm_PNGraph(int64 const & Nodes, int64 const & Edges, bool const & IsDir=True) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &
    IsDir: bool const &

    GenRndGnm_PNGraph(int64 const & Nodes, int64 const & Edges) -> PNGraph

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.GenRndGnm_PNGraph(*args)

def LoadEdgeList_PNGraph(*args):
    """
    LoadEdgeList_PNGraph(TStr InFNm, int64 const & SrcColId=0, int64 const & DstColId=1) -> PNGraph

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &

    LoadEdgeList_PNGraph(TStr InFNm, int64 const & SrcColId=0) -> PNGraph

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &

    LoadEdgeList_PNGraph(TStr InFNm) -> PNGraph

    Parameters
    ----------
    InFNm: TStr const &

    LoadEdgeList_PNGraph(TStr InFNm, int64 const & SrcColId, int64 const & DstColId, char const & Separator) -> PNGraph

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &
    Separator: char const &

    """
    return _SnapTime.LoadEdgeList_PNGraph(*args)

def LoadEdgeListStr_PNGraph(*args):
    """
    LoadEdgeListStr_PNGraph(TStr InFNm, int64 const & SrcColId=0, int64 const & DstColId=1) -> PNGraph

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &

    LoadEdgeListStr_PNGraph(TStr InFNm, int64 const & SrcColId=0) -> PNGraph

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &

    LoadEdgeListStr_PNGraph(TStr InFNm) -> PNGraph

    Parameters
    ----------
    InFNm: TStr const &

    LoadEdgeListStr_PNGraph(TStr InFNm, int64 const & SrcColId, int64 const & DstColId, TStrInt64SH StrToNIdH) -> PNGraph

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &
    StrToNIdH: TStrHash< TInt64,TStrPool,int64 > &

    """
    return _SnapTime.LoadEdgeListStr_PNGraph(*args)

def LoadConnList_PNGraph(InFNm):
    """
    LoadConnList_PNGraph(TStr InFNm) -> PNGraph

    Parameters
    ----------
    InFNm: TStr const &

    """
    return _SnapTime.LoadConnList_PNGraph(InFNm)

def LoadConnListStr_PNGraph(InFNm, StrToNIdH):
    """
    LoadConnListStr_PNGraph(TStr InFNm, TStrInt64SH StrToNIdH) -> PNGraph

    Parameters
    ----------
    InFNm: TStr const &
    StrToNIdH: TStrHash< TInt64,TStrPool,int64 > &

    """
    return _SnapTime.LoadConnListStr_PNGraph(InFNm, StrToNIdH)

def LoadPajek_PNGraph(InFNm):
    """
    LoadPajek_PNGraph(TStr InFNm) -> PNGraph

    Parameters
    ----------
    InFNm: TStr const &

    """
    return _SnapTime.LoadPajek_PNGraph(InFNm)

def SaveEdgeList_PNGraph(*args):
    """
    SaveEdgeList_PNGraph(PNGraph Graph, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    OutFNm: TStr const &
    Desc: TStr const &

    SaveEdgeList_PNGraph(PNGraph Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    OutFNm: TStr const &

    """
    return _SnapTime.SaveEdgeList_PNGraph(*args)

def SavePajek_PNGraph(*args):
    """
    SavePajek_PNGraph(PNGraph Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    OutFNm: TStr const &

    SavePajek_PNGraph(PNGraph Graph, TStr OutFNm, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &

    SavePajek_PNGraph(PNGraph Graph, TStr OutFNm, TIntStr64H NIdColorH, TIntStr64H NIdLabelH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &
    NIdLabelH: TIntStr64H const &

    SavePajek_PNGraph(PNGraph Graph, TStr OutFNm, TIntStr64H NIdColorH, TIntStr64H NIdLabelH, TIntStr64H EIdColorH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &
    NIdLabelH: TIntStr64H const &
    EIdColorH: TIntStr64H const &

    """
    return _SnapTime.SavePajek_PNGraph(*args)

def SaveMatlabSparseMtx_PNGraph(Graph, OutFNm):
    """
    SaveMatlabSparseMtx_PNGraph(PNGraph Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    OutFNm: TStr const &

    """
    return _SnapTime.SaveMatlabSparseMtx_PNGraph(Graph, OutFNm)

def SaveGViz_PNGraph(*args):
    """
    SaveGViz_PNGraph(PNGraph Graph, TStr OutFNm, TStr Desc, bool const & NodeLabels=False, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &
    NIdColorH: TIntStr64H const &

    SaveGViz_PNGraph(PNGraph Graph, TStr OutFNm, TStr Desc, bool const & NodeLabels=False)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &

    SaveGViz_PNGraph(PNGraph Graph, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    OutFNm: TStr const &
    Desc: TStr const &

    SaveGViz_PNGraph(PNGraph Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    OutFNm: TStr const &

    SaveGViz_PNGraph(PNGraph Graph, TStr OutFNm, TStr Desc, TIntStr64H NIdLabelH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NIdLabelH: TIntStr64H const &

    """
    return _SnapTime.SaveGViz_PNGraph(*args)

def GetKCore_PNGraph(Graph, K):
    """
    GetKCore_PNGraph(PNGraph Graph, int64 const & K) -> PNGraph

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    K: int64 const &

    """
    return _SnapTime.GetKCore_PNGraph(Graph, K)

def GetKCoreEdges_PNGraph(Graph, CoreIdSzV):
    """
    GetKCoreEdges_PNGraph(PNGraph Graph, TIntPr64V CoreIdSzV) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    CoreIdSzV: TIntPr64V &

    """
    return _SnapTime.GetKCoreEdges_PNGraph(Graph, CoreIdSzV)

def GetKCoreNodes_PNGraph(Graph, CoreIdSzV):
    """
    GetKCoreNodes_PNGraph(PNGraph Graph, TIntPr64V CoreIdSzV) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    CoreIdSzV: TIntPr64V &

    """
    return _SnapTime.GetKCoreNodes_PNGraph(Graph, CoreIdSzV)

def ConvertGraph_PNGraph_PUNGraph(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PNGraph_PUNGraph(PUNGraph InGraph, bool const & RenumberNodes=False) -> PNGraph

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &
    RenumberNodes: bool const &

    ConvertGraph_PNGraph_PUNGraph(PUNGraph InGraph) -> PNGraph

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &

    """
    return _SnapTime.ConvertGraph_PNGraph_PUNGraph(InGraph, RenumberNodes)

def ConvertGraph_PNGraph_PNGraph(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PNGraph_PNGraph(PNGraph InGraph, bool const & RenumberNodes=False) -> PNGraph

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &
    RenumberNodes: bool const &

    ConvertGraph_PNGraph_PNGraph(PNGraph InGraph) -> PNGraph

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &

    """
    return _SnapTime.ConvertGraph_PNGraph_PNGraph(InGraph, RenumberNodes)

def ConvertGraph_PNGraph_PNEANet(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PNGraph_PNEANet(PNEANet InGraph, bool const & RenumberNodes=False) -> PNGraph

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    RenumberNodes: bool const &

    ConvertGraph_PNGraph_PNEANet(PNEANet InGraph) -> PNGraph

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &

    """
    return _SnapTime.ConvertGraph_PNGraph_PNEANet(InGraph, RenumberNodes)

def ConvertSubGraph_PNGraph_PUNGraph(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PNGraph_PUNGraph(PUNGraph InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PNGraph

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PNGraph_PUNGraph(PUNGraph InGraph, TInt64V NIdV) -> PNGraph

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PNGraph_PUNGraph(InGraph, NIdV, RenumberNodes)

def ConvertSubGraph_PNGraph_PNGraph(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PNGraph_PNGraph(PNGraph InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PNGraph

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PNGraph_PNGraph(PNGraph InGraph, TInt64V NIdV) -> PNGraph

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PNGraph_PNGraph(InGraph, NIdV, RenumberNodes)

def ConvertSubGraph_PNGraph_PNEANet(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PNGraph_PNEANet(PNEANet InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PNGraph

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PNGraph_PNEANet(PNEANet InGraph, TInt64V NIdV) -> PNGraph

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PNGraph_PNEANet(InGraph, NIdV, RenumberNodes)

def ConvertESubGraph_PNGraph_PNEANet(InGraph, EIdV, RenumberNodes=False):
    """
    ConvertESubGraph_PNGraph_PNEANet(PNEANet InGraph, TInt64V EIdV, bool const & RenumberNodes=False) -> PNGraph

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    EIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertESubGraph_PNGraph_PNEANet(PNEANet InGraph, TInt64V EIdV) -> PNGraph

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    EIdV: TInt64V const &

    """
    return _SnapTime.ConvertESubGraph_PNGraph_PNEANet(InGraph, EIdV, RenumberNodes)

def GetSubGraph_PNGraph(Graph, NIdV):
    """
    GetSubGraph_PNGraph(PNGraph Graph, TInt64V NIdV) -> PNGraph

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.GetSubGraph_PNGraph(Graph, NIdV)

def GetRndSubGraph_PNGraph(Graph, NNodes):
    """
    GetRndSubGraph_PNGraph(PNGraph Graph, int64 const & NNodes) -> PNGraph

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NNodes: int64 const &

    """
    return _SnapTime.GetRndSubGraph_PNGraph(Graph, NNodes)

def GetRndESubGraph_PNGraph(Graph, NEdges):
    """
    GetRndESubGraph_PNGraph(PNGraph Graph, int64 const & NEdges) -> PNGraph

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NEdges: int64 const &

    """
    return _SnapTime.GetRndESubGraph_PNGraph(Graph, NEdges)

def GetClustCf_PNGraph(*args):
    """
    GetClustCf_PNGraph(PNGraph Graph, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    SampleNodes: int64

    GetClustCf_PNGraph(PNGraph Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    GetClustCf_PNGraph(PNGraph Graph, TFltPr64V DegToCCfV, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    DegToCCfV: TFltPr64V &
    SampleNodes: int64

    GetClustCf_PNGraph(PNGraph Graph, TFltPr64V DegToCCfV) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    DegToCCfV: TFltPr64V &

    GetClustCf_PNGraph(PNGraph Graph, TFltPr64V DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    DegToCCfV: TFltPr64V &
    ClosedTriadsX: int64 &
    OpenTriadsX: int64 &
    SampleNodes: int64

    GetClustCf_PNGraph(PNGraph Graph, TFltPr64V DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    DegToCCfV: TFltPr64V &
    ClosedTriadsX: int64 &
    OpenTriadsX: int64 &

    """
    return _SnapTime.GetClustCf_PNGraph(*args)

def GetNodeClustCf_PNGraph(*args):
    """
    GetNodeClustCf_PNGraph(PNGraph Graph, int64 const & NId) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId: int64 const &

    GetNodeClustCf_PNGraph(PNGraph Graph, TIntFlt64H NIdCCfH)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdCCfH: TIntFlt64H &

    """
    return _SnapTime.GetNodeClustCf_PNGraph(*args)

def GetTriads_PNGraph(*args):
    """
    GetTriads_PNGraph(PNGraph Graph, int64 & ClosedTriads, int64 & OpenTriads, int64 SampleNodes=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    ClosedTriads: int64 &
    OpenTriads: int64 &
    SampleNodes: int64

    GetTriads_PNGraph(PNGraph Graph, int64 & ClosedTriads, int64 & OpenTriads) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    ClosedTriads: int64 &
    OpenTriads: int64 &

    GetTriads_PNGraph(PNGraph Graph, int64 SampleNodes=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    SampleNodes: int64

    GetTriads_PNGraph(PNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    GetTriads_PNGraph(PNGraph Graph, TIntTr64V & NIdCOTriadV, int64 SampleNodes=-1)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdCOTriadV: TIntTr64V &
    SampleNodes: int64

    GetTriads_PNGraph(PNGraph Graph, TIntTr64V & NIdCOTriadV)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdCOTriadV: TIntTr64V &

    """
    return _SnapTime.GetTriads_PNGraph(*args)

def GetTriadEdges_PNGraph(Graph, SampleEdges=-1):
    """
    GetTriadEdges_PNGraph(PNGraph Graph, int64 SampleEdges=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    SampleEdges: int64

    GetTriadEdges_PNGraph(PNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.GetTriadEdges_PNGraph(Graph, SampleEdges)

def GetNodeTriads_PNGraph(*args):
    """
    GetNodeTriads_PNGraph(PNGraph Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId: int64 const &

    GetNodeTriads_PNGraph(PNGraph Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId: int64 const &

    GetNodeTriads_PNGraph(PNGraph Graph, int64 const & NId, TInt64Set GroupSet, int64 & OutGroupEdgesX) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId: int64 const &
    GroupSet: TInt64Set const &
    OutGroupEdgesX: int64 &

    """
    return _SnapTime.GetNodeTriads_PNGraph(*args)

def GetTriadParticip_PNGraph(Graph, TriadCntV):
    """
    GetTriadParticip_PNGraph(PNGraph Graph, TIntPr64V TriadCntV)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    TriadCntV: TIntPr64V &

    """
    return _SnapTime.GetTriadParticip_PNGraph(Graph, TriadCntV)

def GetTriangleCnt_PNGraph(Graph):
    """
    GetTriangleCnt_PNGraph(PNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.GetTriangleCnt_PNGraph(Graph)

def GetCmnNbrs_PNGraph(*args):
    """
    GetCmnNbrs_PNGraph(PNGraph Graph, int64 const & NId1, int64 const & NId2) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId1: int64 const &
    NId2: int64 const &

    GetCmnNbrs_PNGraph(PNGraph Graph, int64 const & NId1, int64 const & NId2, TInt64V NbrV) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NId1: int64 const &
    NId2: int64 const &
    NbrV: TInt64V &

    """
    return _SnapTime.GetCmnNbrs_PNGraph(*args)

def GetModularity_PNGraph(*args):
    """
    GetModularity_PNGraph(PNGraph G, TInt64V NIdV, int64 GEdges=-1) -> double

    Parameters
    ----------
    G: TPt< TNGraph > const &
    NIdV: TInt64V const &
    GEdges: int64

    GetModularity_PNGraph(PNGraph G, TInt64V NIdV) -> double

    Parameters
    ----------
    G: TPt< TNGraph > const &
    NIdV: TInt64V const &

    GetModularity_PNGraph(PNGraph G, TCnComV CmtyV, int64 GEdges=-1) -> double

    Parameters
    ----------
    G: TPt< TNGraph > const &
    CmtyV: TCnComV const &
    GEdges: int64

    GetModularity_PNGraph(PNGraph G, TCnComV CmtyV) -> double

    Parameters
    ----------
    G: TPt< TNGraph > const &
    CmtyV: TCnComV const &

    """
    return _SnapTime.GetModularity_PNGraph(*args)

def GetEdgesInOut_PNGraph(Graph, NIdV):
    """
    GetEdgesInOut_PNGraph(PNGraph Graph, TInt64V NIdV)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.GetEdgesInOut_PNGraph(Graph, NIdV)

def GetAnf_PNGraph(*args):
    """
    GetAnf_PNGraph(PNGraph Graph, int64 const & SrcNId, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir, int64 const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    SrcNId: int64 const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &
    NApprox: int64 const &

    GetAnf_PNGraph(PNGraph Graph, int64 const & SrcNId, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    SrcNId: int64 const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &

    GetAnf_PNGraph(PNGraph Graph, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir, int64 const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &
    NApprox: int64 const &

    GetAnf_PNGraph(PNGraph Graph, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &

    """
    return _SnapTime.GetAnf_PNGraph(*args)

def GetAnfEffDiam_PNGraph(*args):
    """
    GetAnfEffDiam_PNGraph(PNGraph Graph, bool const & IsDir, double const & Percentile, int64 const & NApprox) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    IsDir: bool const &
    Percentile: double const &
    NApprox: int64 const &

    GetAnfEffDiam_PNGraph(PNGraph Graph, int64 const NRuns=1, int64 NApprox=-1) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NRuns: int64 const
    NApprox: int64

    GetAnfEffDiam_PNGraph(PNGraph Graph, int64 const NRuns=1) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    NRuns: int64 const

    GetAnfEffDiam_PNGraph(PNGraph Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.GetAnfEffDiam_PNGraph(*args)

def TestAnf_PNGraph():
    """TestAnf_PNGraph()"""
    return _SnapTime.TestAnf_PNGraph()

def PlotKCoreEdges_PNGraph(*args):
    """
    PlotKCoreEdges_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotKCoreEdges_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotKCoreEdges_PNGraph(*args)

def PlotKCoreNodes_PNGraph(*args):
    """
    PlotKCoreNodes_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotKCoreNodes_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotKCoreNodes_PNGraph(*args)

def PlotShortPathDistr_PNGraph(*args):
    """
    PlotShortPathDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr, int TestNodes)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr
    TestNodes: int

    PlotShortPathDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotShortPathDistr_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotShortPathDistr_PNGraph(*args)

def PlotHops_PNGraph(*args):
    """
    PlotHops_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr, bool const & IsDir=False, int const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr
    IsDir: bool const &
    NApprox: int const &

    PlotHops_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr
    IsDir: bool const &

    PlotHops_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotHops_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotHops_PNGraph(*args)

def PlotClustCf_PNGraph(*args):
    """
    PlotClustCf_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotClustCf_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotClustCf_PNGraph(*args)

def PlotSccDistr_PNGraph(*args):
    """
    PlotSccDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotSccDistr_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotSccDistr_PNGraph(*args)

def PlotWccDistr_PNGraph(*args):
    """
    PlotWccDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotWccDistr_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotWccDistr_PNGraph(*args)

def PlotOutDegDistr_PNGraph(*args):
    """
    PlotOutDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &
    PowerFit: bool const &

    PlotOutDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &

    PlotOutDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotOutDegDistr_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotOutDegDistr_PNGraph(*args)

def PlotInDegDistr_PNGraph(*args):
    """
    PlotInDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &
    PowerFit: bool const &

    PlotInDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &

    PlotInDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotInDegDistr_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotInDegDistr_PNGraph(*args)

def PercentDegree_PNGraph(Graph, Threshold=0):
    """
    PercentDegree_PNGraph(PNGraph Graph, int64 const Threshold=0) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    Threshold: int64 const

    PercentDegree_PNGraph(PNGraph Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.PercentDegree_PNGraph(Graph, Threshold)

def NodesGTEDegree_PNGraph(Graph, Threshold=0):
    """
    NodesGTEDegree_PNGraph(PNGraph Graph, int64 const Threshold=0) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &
    Threshold: int64 const

    NodesGTEDegree_PNGraph(PNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.NodesGTEDegree_PNGraph(Graph, Threshold)

def MxDegree_PNGraph(Graph):
    """
    MxDegree_PNGraph(PNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.MxDegree_PNGraph(Graph)

def PercentMxWcc_PNGraph(Graph):
    """
    PercentMxWcc_PNGraph(PNGraph Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.PercentMxWcc_PNGraph(Graph)

def PercentMxScc_PNGraph(Graph):
    """
    PercentMxScc_PNGraph(PNGraph Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNGraph > const &

    """
    return _SnapTime.PercentMxScc_PNGraph(Graph)

def ToGraph_PNGraph(Table, SrcCol, DstCol, AggrPolicy):
    """
    ToGraph_PNGraph(PTable Table, TStr SrcCol, TStr DstCol, TAttrAggr AggrPolicy) -> PNGraph

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    AggrPolicy: enum TAttrAggr

    """
    return _SnapTime.ToGraph_PNGraph(Table, SrcCol, DstCol, AggrPolicy)

# redefine TUNGraphEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TUNGraphEdgeI.GetId = GetId


def PrintGraphStatTable_PUNGraph(*args):
    """
    PrintGraphStatTable_PUNGraph(PUNGraph G, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    G: TPt< TUNGraph > const &
    OutFNm: TStr
    Desc: TStr

    PrintGraphStatTable_PUNGraph(PUNGraph G, TStr OutFNm)

    Parameters
    ----------
    G: TPt< TUNGraph > const &
    OutFNm: TStr

    """
    return _SnapTime.PrintGraphStatTable_PUNGraph(*args)
class PUNGraph(object):
    """Proxy of C++ TPt<(TUNGraph)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> PUNGraph"""
        return _SnapTime.PUNGraph_New()

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_PUNGraph

    def Save(self, SOut):
        """
        Save(PUNGraph self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.PUNGraph_Save(self, SOut)


    def __deref__(self):
        """
        __deref__(PUNGraph self) -> TUNGraph

        Parameters
        ----------
        self: TPt< TUNGraph > const *

        """
        return _SnapTime.PUNGraph___deref__(self)


    def __ref__(self):
        """
        __ref__(PUNGraph self) -> TUNGraph

        Parameters
        ----------
        self: TPt< TUNGraph > const *

        """
        return _SnapTime.PUNGraph___ref__(self)


    def __call__(self):
        """
        __call__(PUNGraph self) -> TUNGraph

        Parameters
        ----------
        self: TPt< TUNGraph > const *

        """
        return _SnapTime.PUNGraph___call__(self)


    def Empty(self):
        """
        Empty(PUNGraph self) -> bool

        Parameters
        ----------
        self: TPt< TUNGraph > const *

        """
        return _SnapTime.PUNGraph_Empty(self)


    def Clr(self):
        """
        Clr(PUNGraph self)

        Parameters
        ----------
        self: TPt< TUNGraph > *

        """
        return _SnapTime.PUNGraph_Clr(self)


    def GetRefs(self):
        """
        GetRefs(PUNGraph self) -> int64

        Parameters
        ----------
        self: TPt< TUNGraph > const *

        """
        return _SnapTime.PUNGraph_GetRefs(self)


    def Load(self, SIn):
        """
        Load(PUNGraph self, TSIn SIn) -> PUNGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.PUNGraph_Load(self, SIn)


    def LoadShM(self, ShMIn):
        """
        LoadShM(PUNGraph self, TShMIn ShMIn) -> PUNGraph

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.PUNGraph_LoadShM(self, ShMIn)


    def HasFlag(self, Flag):
        """
        HasFlag(PUNGraph self, TGraphFlag const & Flag) -> bool

        Parameters
        ----------
        Flag: TGraphFlag const &

        """
        return _SnapTime.PUNGraph_HasFlag(self, Flag)


    def GetNodes(self):
        """
        GetNodes(PUNGraph self) -> int64

        Parameters
        ----------
        self: TPt< TUNGraph > const *

        """
        return _SnapTime.PUNGraph_GetNodes(self)


    def AddNode(self, *args):
        """
        AddNode(PUNGraph self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(PUNGraph self) -> int64
        AddNode(PUNGraph self, TUNGraph::TNodeI const & NodeI) -> int64

        Parameters
        ----------
        NodeI: TUNGraph::TNodeI const &

        AddNode(PUNGraph self, int64 const & NId, TInt64V NbrNIdV) -> int64

        Parameters
        ----------
        NId: int64 const &
        NbrNIdV: TInt64V const &

        AddNode(PUNGraph self, int64 const & NId, TVecPool< TInt64,int64 > const & Pool, int64 const & NIdVId) -> int64

        Parameters
        ----------
        NId: int64 const &
        Pool: TVecPool< TInt64,int64 > const &
        NIdVId: int64 const &

        """
        return _SnapTime.PUNGraph_AddNode(self, *args)


    def AddNodeUnchecked(self, NId=-1):
        """
        AddNodeUnchecked(PUNGraph self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNodeUnchecked(PUNGraph self) -> int64

        Parameters
        ----------
        self: TPt< TUNGraph > *

        """
        return _SnapTime.PUNGraph_AddNodeUnchecked(self, NId)


    def DelNode(self, *args):
        """
        DelNode(PUNGraph self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        DelNode(PUNGraph self, TUNGraph::TNode const & NodeI)

        Parameters
        ----------
        NodeI: TUNGraph::TNode const &

        """
        return _SnapTime.PUNGraph_DelNode(self, *args)


    def IsNode(self, NId):
        """
        IsNode(PUNGraph self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.PUNGraph_IsNode(self, NId)


    def BegNI(self, *args):
        """
        BegNI(PUNGraph self) -> TUNGraph::TNodeI
        BegNI(PUNGraph self) -> TUNGraphNodeI

        Parameters
        ----------
        self: TPt< TUNGraph > *

        """
        return _SnapTime.PUNGraph_BegNI(self, *args)


    def EndNI(self, *args):
        """
        EndNI(PUNGraph self) -> TUNGraph::TNodeI
        EndNI(PUNGraph self) -> TUNGraphNodeI

        Parameters
        ----------
        self: TPt< TUNGraph > *

        """
        return _SnapTime.PUNGraph_EndNI(self, *args)


    def GetNI(self, *args):
        """
        GetNI(PUNGraph self, int64 const & NId) -> TUNGraph::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetNI(PUNGraph self) -> TIterNode< TUNGraph >
        GetNI(PUNGraph self, int64 const & NId) -> TUNGraphNodeI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.PUNGraph_GetNI(self, *args)


    def GetMxNId(self):
        """
        GetMxNId(PUNGraph self) -> int64

        Parameters
        ----------
        self: TPt< TUNGraph > const *

        """
        return _SnapTime.PUNGraph_GetMxNId(self)


    def GetEdges(self):
        """
        GetEdges(PUNGraph self) -> int64

        Parameters
        ----------
        self: TPt< TUNGraph > const *

        """
        return _SnapTime.PUNGraph_GetEdges(self)


    def AddEdge(self, *args):
        """
        AddEdge(PUNGraph self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        AddEdge(PUNGraph self, TUNGraph::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TUNGraph::TEdgeI const &

        """
        return _SnapTime.PUNGraph_AddEdge(self, *args)


    def AddEdgeUnchecked(self, SrcNId, DstNId):
        """
        AddEdgeUnchecked(PUNGraph self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PUNGraph_AddEdgeUnchecked(self, SrcNId, DstNId)


    def AddEdge2(self, SrcNId, DstNId):
        """
        AddEdge2(PUNGraph self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PUNGraph_AddEdge2(self, SrcNId, DstNId)


    def DelEdge(self, SrcNId, DstNId):
        """
        DelEdge(PUNGraph self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PUNGraph_DelEdge(self, SrcNId, DstNId)


    def IsEdge(self, SrcNId, DstNId):
        """
        IsEdge(PUNGraph self, int64 const & SrcNId, int64 const & DstNId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PUNGraph_IsEdge(self, SrcNId, DstNId)


    def BegEI(self, *args):
        """
        BegEI(PUNGraph self) -> TUNGraph::TEdgeI
        BegEI(PUNGraph self) -> TUNGraphEdgeI

        Parameters
        ----------
        self: TPt< TUNGraph > *

        """
        return _SnapTime.PUNGraph_BegEI(self, *args)


    def EndEI(self, *args):
        """
        EndEI(PUNGraph self) -> TUNGraph::TEdgeI
        EndEI(PUNGraph self) -> TUNGraphEdgeI

        Parameters
        ----------
        self: TPt< TUNGraph > *

        """
        return _SnapTime.PUNGraph_EndEI(self, *args)


    def GetEI(self, *args):
        """
        GetEI(PUNGraph self, int64 const & SrcNId, int64 const & DstNId) -> TUNGraph::TEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        GetEI(PUNGraph self) -> TIterEdge< TUNGraph >
        GetEI(PUNGraph self, int64 const & SrcNId, int64 const & DstNId) -> TUNGraphEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PUNGraph_GetEI(self, *args)


    def GetRndNId(self, *args):
        """
        GetRndNId(PUNGraph self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(PUNGraph self) -> int64

        Parameters
        ----------
        self: TPt< TUNGraph > *

        """
        return _SnapTime.PUNGraph_GetRndNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(PUNGraph self, TRnd Rnd) -> TUNGraph::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(PUNGraph self) -> TUNGraph::TNodeI

        Parameters
        ----------
        self: TPt< TUNGraph > *

        """
        return _SnapTime.PUNGraph_GetRndNI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(PUNGraph self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.PUNGraph_GetNIdV(self, NIdV)


    def SortNodeAdjV(self):
        """
        SortNodeAdjV(PUNGraph self)

        Parameters
        ----------
        self: TPt< TUNGraph > *

        """
        return _SnapTime.PUNGraph_SortNodeAdjV(self)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(PUNGraph self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.PUNGraph_Reserve(self, Nodes, Edges)


    def ReserveNIdDeg(self, NId, Deg):
        """
        ReserveNIdDeg(PUNGraph self, int64 const & NId, int64 const & Deg)

        Parameters
        ----------
        NId: int64 const &
        Deg: int64 const &

        """
        return _SnapTime.PUNGraph_ReserveNIdDeg(self, NId, Deg)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(PUNGraph self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(PUNGraph self)

        Parameters
        ----------
        self: TPt< TUNGraph > *

        """
        return _SnapTime.PUNGraph_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(PUNGraph self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(PUNGraph self) -> bool

        Parameters
        ----------
        self: TPt< TUNGraph > const *

        """
        return _SnapTime.PUNGraph_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(PUNGraph self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(PUNGraph self)

        Parameters
        ----------
        self: TPt< TUNGraph > const *

        """
        return _SnapTime.PUNGraph_Dump(self, *args)


    def GetSmallGraph(self):
        """
        GetSmallGraph(PUNGraph self) -> PUNGraph

        Parameters
        ----------
        self: TPt< TUNGraph > *

        """
        return _SnapTime.PUNGraph_GetSmallGraph(self)

PUNGraph.Save = new_instancemethod(_SnapTime.PUNGraph_Save, None, PUNGraph)
PUNGraph.__deref__ = new_instancemethod(_SnapTime.PUNGraph___deref__, None, PUNGraph)
PUNGraph.__ref__ = new_instancemethod(_SnapTime.PUNGraph___ref__, None, PUNGraph)
PUNGraph.__call__ = new_instancemethod(_SnapTime.PUNGraph___call__, None, PUNGraph)
PUNGraph.Empty = new_instancemethod(_SnapTime.PUNGraph_Empty, None, PUNGraph)
PUNGraph.Clr = new_instancemethod(_SnapTime.PUNGraph_Clr, None, PUNGraph)
PUNGraph.GetRefs = new_instancemethod(_SnapTime.PUNGraph_GetRefs, None, PUNGraph)
PUNGraph.Load = new_instancemethod(_SnapTime.PUNGraph_Load, None, PUNGraph)
PUNGraph.LoadShM = new_instancemethod(_SnapTime.PUNGraph_LoadShM, None, PUNGraph)
PUNGraph.HasFlag = new_instancemethod(_SnapTime.PUNGraph_HasFlag, None, PUNGraph)
PUNGraph.GetNodes = new_instancemethod(_SnapTime.PUNGraph_GetNodes, None, PUNGraph)
PUNGraph.AddNode = new_instancemethod(_SnapTime.PUNGraph_AddNode, None, PUNGraph)
PUNGraph.AddNodeUnchecked = new_instancemethod(_SnapTime.PUNGraph_AddNodeUnchecked, None, PUNGraph)
PUNGraph.DelNode = new_instancemethod(_SnapTime.PUNGraph_DelNode, None, PUNGraph)
PUNGraph.IsNode = new_instancemethod(_SnapTime.PUNGraph_IsNode, None, PUNGraph)
PUNGraph.BegNI = new_instancemethod(_SnapTime.PUNGraph_BegNI, None, PUNGraph)
PUNGraph.EndNI = new_instancemethod(_SnapTime.PUNGraph_EndNI, None, PUNGraph)
PUNGraph.GetNI = new_instancemethod(_SnapTime.PUNGraph_GetNI, None, PUNGraph)
PUNGraph.GetMxNId = new_instancemethod(_SnapTime.PUNGraph_GetMxNId, None, PUNGraph)
PUNGraph.GetEdges = new_instancemethod(_SnapTime.PUNGraph_GetEdges, None, PUNGraph)
PUNGraph.AddEdge = new_instancemethod(_SnapTime.PUNGraph_AddEdge, None, PUNGraph)
PUNGraph.AddEdgeUnchecked = new_instancemethod(_SnapTime.PUNGraph_AddEdgeUnchecked, None, PUNGraph)
PUNGraph.AddEdge2 = new_instancemethod(_SnapTime.PUNGraph_AddEdge2, None, PUNGraph)
PUNGraph.DelEdge = new_instancemethod(_SnapTime.PUNGraph_DelEdge, None, PUNGraph)
PUNGraph.IsEdge = new_instancemethod(_SnapTime.PUNGraph_IsEdge, None, PUNGraph)
PUNGraph.BegEI = new_instancemethod(_SnapTime.PUNGraph_BegEI, None, PUNGraph)
PUNGraph.EndEI = new_instancemethod(_SnapTime.PUNGraph_EndEI, None, PUNGraph)
PUNGraph.GetEI = new_instancemethod(_SnapTime.PUNGraph_GetEI, None, PUNGraph)
PUNGraph.GetRndNId = new_instancemethod(_SnapTime.PUNGraph_GetRndNId, None, PUNGraph)
PUNGraph.GetRndNI = new_instancemethod(_SnapTime.PUNGraph_GetRndNI, None, PUNGraph)
PUNGraph.GetNIdV = new_instancemethod(_SnapTime.PUNGraph_GetNIdV, None, PUNGraph)
PUNGraph.SortNodeAdjV = new_instancemethod(_SnapTime.PUNGraph_SortNodeAdjV, None, PUNGraph)
PUNGraph.Reserve = new_instancemethod(_SnapTime.PUNGraph_Reserve, None, PUNGraph)
PUNGraph.ReserveNIdDeg = new_instancemethod(_SnapTime.PUNGraph_ReserveNIdDeg, None, PUNGraph)
PUNGraph.Defrag = new_instancemethod(_SnapTime.PUNGraph_Defrag, None, PUNGraph)
PUNGraph.IsOk = new_instancemethod(_SnapTime.PUNGraph_IsOk, None, PUNGraph)
PUNGraph.Dump = new_instancemethod(_SnapTime.PUNGraph_Dump, None, PUNGraph)
PUNGraph.GetSmallGraph = new_instancemethod(_SnapTime.PUNGraph_GetSmallGraph, None, PUNGraph)
PUNGraph_swigregister = _SnapTime.PUNGraph_swigregister
PUNGraph_swigregister(PUNGraph)

def PUNGraph_New():
    """PUNGraph_New() -> PUNGraph"""
    return _SnapTime.PUNGraph_New()


def PrintInfo_PUNGraph(*args):
    """
    PrintInfo_PUNGraph(PUNGraph Graph, TStr Desc, TStr OutFNm, bool const & Fast=True)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    Desc: TStr const &
    OutFNm: TStr const &
    Fast: bool const &

    PrintInfo_PUNGraph(PUNGraph Graph, TStr Desc, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    Desc: TStr const &
    OutFNm: TStr const &

    PrintInfo_PUNGraph(PUNGraph Graph, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    Desc: TStr const &

    PrintInfo_PUNGraph(PUNGraph Graph)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.PrintInfo_PUNGraph(*args)

def GetNodeWcc_PUNGraph(Graph, NId, CnCom):
    """
    GetNodeWcc_PUNGraph(PUNGraph Graph, int64 const & NId, TInt64V CnCom)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId: int64 const &
    CnCom: TInt64V &

    """
    return _SnapTime.GetNodeWcc_PUNGraph(Graph, NId, CnCom)

def IsConnected_PUNGraph(Graph):
    """
    IsConnected_PUNGraph(PUNGraph Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.IsConnected_PUNGraph(Graph)

def IsWeaklyConn_PUNGraph(Graph):
    """
    IsWeaklyConn_PUNGraph(PUNGraph Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.IsWeaklyConn_PUNGraph(Graph)

def GetWccSzCnt_PUNGraph(Graph, WccSzCnt):
    """
    GetWccSzCnt_PUNGraph(PUNGraph Graph, TIntPr64V WccSzCnt)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    WccSzCnt: TIntPr64V &

    """
    return _SnapTime.GetWccSzCnt_PUNGraph(Graph, WccSzCnt)

def GetWccs_PUNGraph(Graph, CnComV):
    """
    GetWccs_PUNGraph(PUNGraph Graph, TCnComV CnComV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    CnComV: TCnComV &

    """
    return _SnapTime.GetWccs_PUNGraph(Graph, CnComV)

def GetSccSzCnt_PUNGraph(Graph, SccSzCnt):
    """
    GetSccSzCnt_PUNGraph(PUNGraph Graph, TIntPr64V SccSzCnt)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    SccSzCnt: TIntPr64V &

    """
    return _SnapTime.GetSccSzCnt_PUNGraph(Graph, SccSzCnt)

def GetSccs_PUNGraph(Graph, CnComV):
    """
    GetSccs_PUNGraph(PUNGraph Graph, TCnComV CnComV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    CnComV: TCnComV &

    """
    return _SnapTime.GetSccs_PUNGraph(Graph, CnComV)

def GetMxWccSz_PUNGraph(Graph):
    """
    GetMxWccSz_PUNGraph(PUNGraph Graph) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.GetMxWccSz_PUNGraph(Graph)

def GetMxSccSz_PUNGraph(Graph):
    """
    GetMxSccSz_PUNGraph(PUNGraph Graph) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.GetMxSccSz_PUNGraph(Graph)

def GetMxWcc_PUNGraph(Graph):
    """
    GetMxWcc_PUNGraph(PUNGraph Graph) -> PUNGraph

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.GetMxWcc_PUNGraph(Graph)

def GetMxScc_PUNGraph(Graph):
    """
    GetMxScc_PUNGraph(PUNGraph Graph) -> PUNGraph

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.GetMxScc_PUNGraph(Graph)

def GetMxBiCon_PUNGraph(Graph):
    """
    GetMxBiCon_PUNGraph(PUNGraph Graph) -> PUNGraph

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.GetMxBiCon_PUNGraph(Graph)

def GetNodeEcc_PUNGraph(Graph, NId, IsDir=False):
    """
    GetNodeEcc_PUNGraph(PUNGraph Graph, int64 const & NId, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId: int64 const &
    IsDir: bool const &

    GetNodeEcc_PUNGraph(PUNGraph Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId: int64 const &

    """
    return _SnapTime.GetNodeEcc_PUNGraph(Graph, NId, IsDir)

def GetPageRank_PUNGraph(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRank_PUNGraph(PUNGraph Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRank_PUNGraph(PUNGraph Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRank_PUNGraph(PUNGraph Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRank_PUNGraph(PUNGraph Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRank_PUNGraph(Graph, PRankH, C, Eps, MaxIter)

def GetPageRank_v1_PUNGraph(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRank_v1_PUNGraph(PUNGraph Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRank_v1_PUNGraph(PUNGraph Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRank_v1_PUNGraph(PUNGraph Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRank_v1_PUNGraph(PUNGraph Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRank_v1_PUNGraph(Graph, PRankH, C, Eps, MaxIter)

def GetHits_PUNGraph(Graph, NIdHubH, NIdAuthH, MaxIter=20):
    """
    GetHits_PUNGraph(PUNGraph Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH, int64 const & MaxIter=20)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &
    MaxIter: int64 const &

    GetHits_PUNGraph(PUNGraph Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &

    """
    return _SnapTime.GetHits_PUNGraph(Graph, NIdHubH, NIdAuthH, MaxIter)

def GetBetweennessCentr_PUNGraph(*args):
    """
    GetBetweennessCentr_PUNGraph(PUNGraph Graph, TIntFlt64H NIdBtwH, double const & NodeFrac=1.0, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdBtwH: TIntFlt64H &
    NodeFrac: double const &
    IsDir: bool const &

    GetBetweennessCentr_PUNGraph(PUNGraph Graph, TIntFlt64H NIdBtwH, double const & NodeFrac=1.0)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdBtwH: TIntFlt64H &
    NodeFrac: double const &

    GetBetweennessCentr_PUNGraph(PUNGraph Graph, TIntFlt64H NIdBtwH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdBtwH: TIntFlt64H &

    GetBetweennessCentr_PUNGraph(PUNGraph Graph, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &
    IsDir: bool const &

    GetBetweennessCentr_PUNGraph(PUNGraph Graph, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &

    GetBetweennessCentr_PUNGraph(PUNGraph Graph, TIntPrFlt64H EdgeBtwH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    EdgeBtwH: TIntPrFlt64H &

    GetBetweennessCentr_PUNGraph(PUNGraph Graph, TIntFlt64H NIdBtwH, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdBtwH: TIntFlt64H &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &
    IsDir: bool const &

    GetBetweennessCentr_PUNGraph(PUNGraph Graph, TIntFlt64H NIdBtwH, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdBtwH: TIntFlt64H &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &

    GetBetweennessCentr_PUNGraph(PUNGraph Graph, TIntFlt64H NIdBtwH, TIntPrFlt64H EdgeBtwH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdBtwH: TIntFlt64H &
    EdgeBtwH: TIntPrFlt64H &

    GetBetweennessCentr_PUNGraph(PUNGraph Graph, TInt64V BtwNIdV, TIntFlt64H NodeBtwH, bool const & DoNodeCent, TIntPrFlt64H EdgeBtwH, bool const & DoEdgeCent, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    BtwNIdV: TInt64V const &
    NodeBtwH: TIntFlt64H &
    DoNodeCent: bool const &
    EdgeBtwH: TIntPrFlt64H &
    DoEdgeCent: bool const &
    IsDir: bool const &

    """
    return _SnapTime.GetBetweennessCentr_PUNGraph(*args)

def GetClosenessCentr_PUNGraph(Graph, NId, Normalized=True, IsDir=False):
    """
    GetClosenessCentr_PUNGraph(PUNGraph Graph, int64 const & NId, bool const & Normalized=True, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId: int64 const &
    Normalized: bool const &
    IsDir: bool const &

    GetClosenessCentr_PUNGraph(PUNGraph Graph, int64 const & NId, bool const & Normalized=True) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId: int64 const &
    Normalized: bool const &

    GetClosenessCentr_PUNGraph(PUNGraph Graph, int64 const & NId) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId: int64 const &

    """
    return _SnapTime.GetClosenessCentr_PUNGraph(Graph, NId, Normalized, IsDir)

def GetFarnessCentr_PUNGraph(Graph, NId, Normalized=True, IsDir=False):
    """
    GetFarnessCentr_PUNGraph(PUNGraph Graph, int64 const & NId, bool const & Normalized=True, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId: int64 const &
    Normalized: bool const &
    IsDir: bool const &

    GetFarnessCentr_PUNGraph(PUNGraph Graph, int64 const & NId, bool const & Normalized=True) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId: int64 const &
    Normalized: bool const &

    GetFarnessCentr_PUNGraph(PUNGraph Graph, int64 const & NId) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId: int64 const &

    """
    return _SnapTime.GetFarnessCentr_PUNGraph(Graph, NId, Normalized, IsDir)

def GetPageRankMP_PUNGraph(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRankMP_PUNGraph(PUNGraph Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRankMP_PUNGraph(PUNGraph Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRankMP_PUNGraph(PUNGraph Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRankMP_PUNGraph(PUNGraph Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRankMP_PUNGraph(Graph, PRankH, C, Eps, MaxIter)

def GetHitsMP_PUNGraph(Graph, NIdHubH, NIdAuthH, MaxIter=20):
    """
    GetHitsMP_PUNGraph(PUNGraph Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH, int64 const & MaxIter=20)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &
    MaxIter: int64 const &

    GetHitsMP_PUNGraph(PUNGraph Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &

    """
    return _SnapTime.GetHitsMP_PUNGraph(Graph, NIdHubH, NIdAuthH, MaxIter)

def CntInDegNodes_PUNGraph(Graph, NodeInDeg):
    """
    CntInDegNodes_PUNGraph(PUNGraph Graph, int64 const & NodeInDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NodeInDeg: int64 const &

    """
    return _SnapTime.CntInDegNodes_PUNGraph(Graph, NodeInDeg)

def CntOutDegNodes_PUNGraph(Graph, NodeOutDeg):
    """
    CntOutDegNodes_PUNGraph(PUNGraph Graph, int64 const & NodeOutDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NodeOutDeg: int64 const &

    """
    return _SnapTime.CntOutDegNodes_PUNGraph(Graph, NodeOutDeg)

def CntDegNodes_PUNGraph(Graph, NodeDeg):
    """
    CntDegNodes_PUNGraph(PUNGraph Graph, int64 const & NodeDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NodeDeg: int64 const &

    """
    return _SnapTime.CntDegNodes_PUNGraph(Graph, NodeDeg)

def CntNonZNodes_PUNGraph(Graph):
    """
    CntNonZNodes_PUNGraph(PUNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.CntNonZNodes_PUNGraph(Graph)

def CntEdgesToSet_PUNGraph(Graph, NId, NodeSet):
    """
    CntEdgesToSet_PUNGraph(PUNGraph Graph, int64 const & NId, TInt64Set NodeSet) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId: int64 const &
    NodeSet: TInt64Set const &

    """
    return _SnapTime.CntEdgesToSet_PUNGraph(Graph, NId, NodeSet)

def GetMxDegNId_PUNGraph(Graph):
    """
    GetMxDegNId_PUNGraph(PUNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.GetMxDegNId_PUNGraph(Graph)

def GetMxInDegNId_PUNGraph(Graph):
    """
    GetMxInDegNId_PUNGraph(PUNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.GetMxInDegNId_PUNGraph(Graph)

def GetMxOutDegNId_PUNGraph(Graph):
    """
    GetMxOutDegNId_PUNGraph(PUNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.GetMxOutDegNId_PUNGraph(Graph)

def GetInDegCnt_PUNGraph(*args):
    """
    GetInDegCnt_PUNGraph(PUNGraph Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    DegToCntV: TIntPr64V &

    GetInDegCnt_PUNGraph(PUNGraph Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetInDegCnt_PUNGraph(*args)

def GetOutDegCnt_PUNGraph(*args):
    """
    GetOutDegCnt_PUNGraph(PUNGraph Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    DegToCntV: TIntPr64V &

    GetOutDegCnt_PUNGraph(PUNGraph Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetOutDegCnt_PUNGraph(*args)

def GetDegCnt_PUNGraph(*args):
    """
    GetDegCnt_PUNGraph(PUNGraph Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    DegToCntV: TIntPr64V &

    GetDegCnt_PUNGraph(PUNGraph Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetDegCnt_PUNGraph(*args)

def GetDegSeqV_PUNGraph(*args):
    """
    GetDegSeqV_PUNGraph(PUNGraph Graph, TInt64V DegV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    DegV: TInt64V &

    GetDegSeqV_PUNGraph(PUNGraph Graph, TInt64V InDegV, TInt64V OutDegV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    InDegV: TInt64V &
    OutDegV: TInt64V &

    """
    return _SnapTime.GetDegSeqV_PUNGraph(*args)

def GetNodeInDegV_PUNGraph(Graph, NIdInDegV):
    """
    GetNodeInDegV_PUNGraph(PUNGraph Graph, TIntPr64V NIdInDegV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdInDegV: TIntPr64V &

    """
    return _SnapTime.GetNodeInDegV_PUNGraph(Graph, NIdInDegV)

def GetNodeOutDegV_PUNGraph(Graph, NIdOutDegV):
    """
    GetNodeOutDegV_PUNGraph(PUNGraph Graph, TIntPr64V NIdOutDegV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdOutDegV: TIntPr64V &

    """
    return _SnapTime.GetNodeOutDegV_PUNGraph(Graph, NIdOutDegV)

def CntUniqUndirEdges_PUNGraph(Graph):
    """
    CntUniqUndirEdges_PUNGraph(PUNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.CntUniqUndirEdges_PUNGraph(Graph)

def CntUniqDirEdges_PUNGraph(Graph):
    """
    CntUniqDirEdges_PUNGraph(PUNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.CntUniqDirEdges_PUNGraph(Graph)

def CntUniqBiDirEdges_PUNGraph(Graph):
    """
    CntUniqBiDirEdges_PUNGraph(PUNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.CntUniqBiDirEdges_PUNGraph(Graph)

def CntSelfEdges_PUNGraph(Graph):
    """
    CntSelfEdges_PUNGraph(PUNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.CntSelfEdges_PUNGraph(Graph)

def GetUnDir_PUNGraph(Graph):
    """
    GetUnDir_PUNGraph(PUNGraph Graph) -> PUNGraph

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.GetUnDir_PUNGraph(Graph)

def MakeUnDir_PUNGraph(Graph):
    """
    MakeUnDir_PUNGraph(PUNGraph Graph)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.MakeUnDir_PUNGraph(Graph)

def AddSelfEdges_PUNGraph(Graph):
    """
    AddSelfEdges_PUNGraph(PUNGraph Graph)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.AddSelfEdges_PUNGraph(Graph)

def DelSelfEdges_PUNGraph(Graph):
    """
    DelSelfEdges_PUNGraph(PUNGraph Graph)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.DelSelfEdges_PUNGraph(Graph)

def DelNodes_PUNGraph(Graph, NIdV):
    """
    DelNodes_PUNGraph(PUNGraph Graph, TInt64V NIdV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > &
    NIdV: TInt64V const &

    """
    return _SnapTime.DelNodes_PUNGraph(Graph, NIdV)

def DelZeroDegNodes_PUNGraph(Graph):
    """
    DelZeroDegNodes_PUNGraph(PUNGraph Graph)

    Parameters
    ----------
    Graph: TPt< TUNGraph > &

    """
    return _SnapTime.DelZeroDegNodes_PUNGraph(Graph)

def DelDegKNodes_PUNGraph(Graph, OutDegK, InDegK):
    """
    DelDegKNodes_PUNGraph(PUNGraph Graph, int64 const & OutDegK, int64 const & InDegK)

    Parameters
    ----------
    Graph: TPt< TUNGraph > &
    OutDegK: int64 const &
    InDegK: int64 const &

    """
    return _SnapTime.DelDegKNodes_PUNGraph(Graph, OutDegK, InDegK)

def IsTree_PUNGraph(Graph):
    """
    IsTree_PUNGraph(PUNGraph Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.IsTree_PUNGraph(Graph)

def GetTreeRootNId_PUNGraph(Graph):
    """
    GetTreeRootNId_PUNGraph(PUNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.GetTreeRootNId_PUNGraph(Graph)

def GetTreeSig_PUNGraph(*args):
    """
    GetTreeSig_PUNGraph(PUNGraph Graph, int64 const & RootNId, TInt64V Sig)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    RootNId: int64 const &
    Sig: TInt64V &

    GetTreeSig_PUNGraph(PUNGraph Graph, int64 const & RootNId, TInt64V Sig, TIntPr64V NodeMap)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    RootNId: int64 const &
    Sig: TInt64V &
    NodeMap: TIntPr64V &

    """
    return _SnapTime.GetTreeSig_PUNGraph(*args)

def GetBfsTree_PUNGraph(Graph, StartNId, FollowOut, FollowIn):
    """
    GetBfsTree_PUNGraph(PUNGraph Graph, int64 const & StartNId, bool const & FollowOut, bool const & FollowIn) -> PNGraph

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    StartNId: int64 const &
    FollowOut: bool const &
    FollowIn: bool const &

    """
    return _SnapTime.GetBfsTree_PUNGraph(Graph, StartNId, FollowOut, FollowIn)

def GetSubTreeSz_PUNGraph(Graph, StartNId, FollowOut, FollowIn):
    """
    GetSubTreeSz_PUNGraph(PUNGraph Graph, int64 const & StartNId, bool const & FollowOut, bool const & FollowIn) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    StartNId: int64 const &
    FollowOut: bool const &
    FollowIn: bool const &

    """
    return _SnapTime.GetSubTreeSz_PUNGraph(Graph, StartNId, FollowOut, FollowIn)

def GetNodesAtHop_PUNGraph(Graph, StartNId, Hop, NIdV, IsDir=False):
    """
    GetNodesAtHop_PUNGraph(PUNGraph Graph, int64 const & StartNId, int64 const & Hop, TInt64V NIdV, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    StartNId: int64 const &
    Hop: int64 const &
    NIdV: TInt64V &
    IsDir: bool const &

    GetNodesAtHop_PUNGraph(PUNGraph Graph, int64 const & StartNId, int64 const & Hop, TInt64V NIdV) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    StartNId: int64 const &
    Hop: int64 const &
    NIdV: TInt64V &

    """
    return _SnapTime.GetNodesAtHop_PUNGraph(Graph, StartNId, Hop, NIdV, IsDir)

def GetNodesAtHops_PUNGraph(Graph, StartNId, HopCntV, IsDir=False):
    """
    GetNodesAtHops_PUNGraph(PUNGraph Graph, int64 const & StartNId, TIntPr64V HopCntV, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    StartNId: int64 const &
    HopCntV: TIntPr64V &
    IsDir: bool const &

    GetNodesAtHops_PUNGraph(PUNGraph Graph, int64 const & StartNId, TIntPr64V HopCntV) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    StartNId: int64 const &
    HopCntV: TIntPr64V &

    """
    return _SnapTime.GetNodesAtHops_PUNGraph(Graph, StartNId, HopCntV, IsDir)

def GetShortPath_PUNGraph(*args):
    """
    GetShortPath_PUNGraph(PUNGraph Graph, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    SrcNId: int64 const &
    DstNId: int64 const &
    IsDir: bool const &

    GetShortPath_PUNGraph(PUNGraph Graph, int64 const & SrcNId, int64 const & DstNId) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    SrcNId: int64 const &
    DstNId: int64 const &

    GetShortPath_PUNGraph(PUNGraph Graph, int64 const & SrcNId, TInt64H NIdToDistH, bool const & IsDir=False, int64 const & MaxDist) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &
    IsDir: bool const &
    MaxDist: int64 const &

    GetShortPath_PUNGraph(PUNGraph Graph, int64 const & SrcNId, TInt64H NIdToDistH, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &
    IsDir: bool const &

    GetShortPath_PUNGraph(PUNGraph Graph, int64 const & SrcNId, TInt64H NIdToDistH) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &

    """
    return _SnapTime.GetShortPath_PUNGraph(*args)

def GetBfsFullDiam_PUNGraph(Graph, NTestNodes, IsDir=False):
    """
    GetBfsFullDiam_PUNGraph(PUNGraph Graph, int64 const & NTestNodes, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsFullDiam_PUNGraph(PUNGraph Graph, int64 const & NTestNodes) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NTestNodes: int64 const &

    """
    return _SnapTime.GetBfsFullDiam_PUNGraph(Graph, NTestNodes, IsDir)

def GetBfsEffDiam_PUNGraph(*args):
    """
    GetBfsEffDiam_PUNGraph(PUNGraph Graph, int64 const & NTestNodes, bool const & IsDir, double & EffDiam, int64 & FullDiam) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NTestNodes: int64 const &
    IsDir: bool const &
    EffDiam: double &
    FullDiam: int64 &

    GetBfsEffDiam_PUNGraph(PUNGraph Graph, int64 const & NTestNodes, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsEffDiam_PUNGraph(PUNGraph Graph, int64 const & NTestNodes) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NTestNodes: int64 const &

    GetBfsEffDiam_PUNGraph(PUNGraph Graph, int64 const & NTestNodes, bool const & IsDir) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsEffDiam_PUNGraph(PUNGraph Graph, int64 const & NTestNodes, TInt64V SubGraphNIdV, bool const & IsDir) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NTestNodes: int64 const &
    SubGraphNIdV: TInt64V const &
    IsDir: bool const &

    """
    return _SnapTime.GetBfsEffDiam_PUNGraph(*args)

def DrawGViz_PUNGraph(*args):
    """
    DrawGViz_PUNGraph(PUNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, bool const & NodeLabels=False, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &
    NIdColorH: TIntStr64H const &

    DrawGViz_PUNGraph(PUNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, bool const & NodeLabels=False)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &

    DrawGViz_PUNGraph(PUNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &

    DrawGViz_PUNGraph(PUNGraph Graph, TGVizLayout const & Layout, TStr PltFNm)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &

    DrawGViz_PUNGraph(PUNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, TIntStr64H NodeLabelH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabelH: TIntStr64H const &

    """
    return _SnapTime.DrawGViz_PUNGraph(*args)

def GenGrid_PUNGraph(Rows, Cols, IsDir=True):
    """
    GenGrid_PUNGraph(int64 const & Rows, int64 const & Cols, bool const & IsDir=True) -> PUNGraph

    Parameters
    ----------
    Rows: int64 const &
    Cols: int64 const &
    IsDir: bool const &

    GenGrid_PUNGraph(int64 const & Rows, int64 const & Cols) -> PUNGraph

    Parameters
    ----------
    Rows: int64 const &
    Cols: int64 const &

    """
    return _SnapTime.GenGrid_PUNGraph(Rows, Cols, IsDir)

def GenStar_PUNGraph(Nodes, IsDir=True):
    """
    GenStar_PUNGraph(int64 const & Nodes, bool const & IsDir=True) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    IsDir: bool const &

    GenStar_PUNGraph(int64 const & Nodes) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenStar_PUNGraph(Nodes, IsDir)

def GenCircle_PUNGraph(Nodes, NodeOutDeg=1, IsDir=True):
    """
    GenCircle_PUNGraph(int64 const & Nodes, int64 const & NodeOutDeg=1, bool const & IsDir=True) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &
    IsDir: bool const &

    GenCircle_PUNGraph(int64 const & Nodes, int64 const & NodeOutDeg=1) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &

    GenCircle_PUNGraph(int64 const & Nodes) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenCircle_PUNGraph(Nodes, NodeOutDeg, IsDir)

def GenFull_PUNGraph(Nodes):
    """
    GenFull_PUNGraph(int64 const & Nodes) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenFull_PUNGraph(Nodes)

def GenTree_PUNGraph(Fanout, Levels, IsDir=True, ChildPointsToParent=True):
    """
    GenTree_PUNGraph(int64 const & Fanout, int64 const & Levels, bool const & IsDir=True, bool const & ChildPointsToParent=True) -> PUNGraph

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &
    IsDir: bool const &
    ChildPointsToParent: bool const &

    GenTree_PUNGraph(int64 const & Fanout, int64 const & Levels, bool const & IsDir=True) -> PUNGraph

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &
    IsDir: bool const &

    GenTree_PUNGraph(int64 const & Fanout, int64 const & Levels) -> PUNGraph

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &

    """
    return _SnapTime.GenTree_PUNGraph(Fanout, Levels, IsDir, ChildPointsToParent)

def GenBaraHierar_PUNGraph(Levels, IsDir=True):
    """
    GenBaraHierar_PUNGraph(int64 const & Levels, bool const & IsDir=True) -> PUNGraph

    Parameters
    ----------
    Levels: int64 const &
    IsDir: bool const &

    GenBaraHierar_PUNGraph(int64 const & Levels) -> PUNGraph

    Parameters
    ----------
    Levels: int64 const &

    """
    return _SnapTime.GenBaraHierar_PUNGraph(Levels, IsDir)

def GenRndGnm_PUNGraph(*args):
    """
    GenRndGnm_PUNGraph(int64 const & Nodes, int64 const & Edges, bool const & IsDir=True, TRnd Rnd) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &
    IsDir: bool const &
    Rnd: TRnd &

    GenRndGnm_PUNGraph(int64 const & Nodes, int64 const & Edges, bool const & IsDir=True) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &
    IsDir: bool const &

    GenRndGnm_PUNGraph(int64 const & Nodes, int64 const & Edges) -> PUNGraph

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.GenRndGnm_PUNGraph(*args)

def LoadEdgeList_PUNGraph(*args):
    """
    LoadEdgeList_PUNGraph(TStr InFNm, int64 const & SrcColId=0, int64 const & DstColId=1) -> PUNGraph

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &

    LoadEdgeList_PUNGraph(TStr InFNm, int64 const & SrcColId=0) -> PUNGraph

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &

    LoadEdgeList_PUNGraph(TStr InFNm) -> PUNGraph

    Parameters
    ----------
    InFNm: TStr const &

    LoadEdgeList_PUNGraph(TStr InFNm, int64 const & SrcColId, int64 const & DstColId, char const & Separator) -> PUNGraph

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &
    Separator: char const &

    """
    return _SnapTime.LoadEdgeList_PUNGraph(*args)

def LoadEdgeListStr_PUNGraph(*args):
    """
    LoadEdgeListStr_PUNGraph(TStr InFNm, int64 const & SrcColId=0, int64 const & DstColId=1) -> PUNGraph

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &

    LoadEdgeListStr_PUNGraph(TStr InFNm, int64 const & SrcColId=0) -> PUNGraph

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &

    LoadEdgeListStr_PUNGraph(TStr InFNm) -> PUNGraph

    Parameters
    ----------
    InFNm: TStr const &

    LoadEdgeListStr_PUNGraph(TStr InFNm, int64 const & SrcColId, int64 const & DstColId, TStrInt64SH StrToNIdH) -> PUNGraph

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &
    StrToNIdH: TStrHash< TInt64,TStrPool,int64 > &

    """
    return _SnapTime.LoadEdgeListStr_PUNGraph(*args)

def LoadConnList_PUNGraph(InFNm):
    """
    LoadConnList_PUNGraph(TStr InFNm) -> PUNGraph

    Parameters
    ----------
    InFNm: TStr const &

    """
    return _SnapTime.LoadConnList_PUNGraph(InFNm)

def LoadConnListStr_PUNGraph(InFNm, StrToNIdH):
    """
    LoadConnListStr_PUNGraph(TStr InFNm, TStrInt64SH StrToNIdH) -> PUNGraph

    Parameters
    ----------
    InFNm: TStr const &
    StrToNIdH: TStrHash< TInt64,TStrPool,int64 > &

    """
    return _SnapTime.LoadConnListStr_PUNGraph(InFNm, StrToNIdH)

def LoadPajek_PUNGraph(InFNm):
    """
    LoadPajek_PUNGraph(TStr InFNm) -> PUNGraph

    Parameters
    ----------
    InFNm: TStr const &

    """
    return _SnapTime.LoadPajek_PUNGraph(InFNm)

def SaveEdgeList_PUNGraph(*args):
    """
    SaveEdgeList_PUNGraph(PUNGraph Graph, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    OutFNm: TStr const &
    Desc: TStr const &

    SaveEdgeList_PUNGraph(PUNGraph Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    OutFNm: TStr const &

    """
    return _SnapTime.SaveEdgeList_PUNGraph(*args)

def SavePajek_PUNGraph(*args):
    """
    SavePajek_PUNGraph(PUNGraph Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    OutFNm: TStr const &

    SavePajek_PUNGraph(PUNGraph Graph, TStr OutFNm, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &

    SavePajek_PUNGraph(PUNGraph Graph, TStr OutFNm, TIntStr64H NIdColorH, TIntStr64H NIdLabelH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &
    NIdLabelH: TIntStr64H const &

    SavePajek_PUNGraph(PUNGraph Graph, TStr OutFNm, TIntStr64H NIdColorH, TIntStr64H NIdLabelH, TIntStr64H EIdColorH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &
    NIdLabelH: TIntStr64H const &
    EIdColorH: TIntStr64H const &

    """
    return _SnapTime.SavePajek_PUNGraph(*args)

def SaveMatlabSparseMtx_PUNGraph(Graph, OutFNm):
    """
    SaveMatlabSparseMtx_PUNGraph(PUNGraph Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    OutFNm: TStr const &

    """
    return _SnapTime.SaveMatlabSparseMtx_PUNGraph(Graph, OutFNm)

def SaveGViz_PUNGraph(*args):
    """
    SaveGViz_PUNGraph(PUNGraph Graph, TStr OutFNm, TStr Desc, bool const & NodeLabels=False, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &
    NIdColorH: TIntStr64H const &

    SaveGViz_PUNGraph(PUNGraph Graph, TStr OutFNm, TStr Desc, bool const & NodeLabels=False)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &

    SaveGViz_PUNGraph(PUNGraph Graph, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    OutFNm: TStr const &
    Desc: TStr const &

    SaveGViz_PUNGraph(PUNGraph Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    OutFNm: TStr const &

    SaveGViz_PUNGraph(PUNGraph Graph, TStr OutFNm, TStr Desc, TIntStr64H NIdLabelH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NIdLabelH: TIntStr64H const &

    """
    return _SnapTime.SaveGViz_PUNGraph(*args)

def GetKCore_PUNGraph(Graph, K):
    """
    GetKCore_PUNGraph(PUNGraph Graph, int64 const & K) -> PUNGraph

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    K: int64 const &

    """
    return _SnapTime.GetKCore_PUNGraph(Graph, K)

def GetKCoreEdges_PUNGraph(Graph, CoreIdSzV):
    """
    GetKCoreEdges_PUNGraph(PUNGraph Graph, TIntPr64V CoreIdSzV) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    CoreIdSzV: TIntPr64V &

    """
    return _SnapTime.GetKCoreEdges_PUNGraph(Graph, CoreIdSzV)

def GetKCoreNodes_PUNGraph(Graph, CoreIdSzV):
    """
    GetKCoreNodes_PUNGraph(PUNGraph Graph, TIntPr64V CoreIdSzV) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    CoreIdSzV: TIntPr64V &

    """
    return _SnapTime.GetKCoreNodes_PUNGraph(Graph, CoreIdSzV)

def ConvertGraph_PUNGraph_PUNGraph(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PUNGraph_PUNGraph(PUNGraph InGraph, bool const & RenumberNodes=False) -> PUNGraph

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &
    RenumberNodes: bool const &

    ConvertGraph_PUNGraph_PUNGraph(PUNGraph InGraph) -> PUNGraph

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &

    """
    return _SnapTime.ConvertGraph_PUNGraph_PUNGraph(InGraph, RenumberNodes)

def ConvertGraph_PUNGraph_PNGraph(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PUNGraph_PNGraph(PNGraph InGraph, bool const & RenumberNodes=False) -> PUNGraph

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &
    RenumberNodes: bool const &

    ConvertGraph_PUNGraph_PNGraph(PNGraph InGraph) -> PUNGraph

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &

    """
    return _SnapTime.ConvertGraph_PUNGraph_PNGraph(InGraph, RenumberNodes)

def ConvertGraph_PUNGraph_PNEANet(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PUNGraph_PNEANet(PNEANet InGraph, bool const & RenumberNodes=False) -> PUNGraph

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    RenumberNodes: bool const &

    ConvertGraph_PUNGraph_PNEANet(PNEANet InGraph) -> PUNGraph

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &

    """
    return _SnapTime.ConvertGraph_PUNGraph_PNEANet(InGraph, RenumberNodes)

def ConvertSubGraph_PUNGraph_PUNGraph(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PUNGraph_PUNGraph(PUNGraph InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PUNGraph

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PUNGraph_PUNGraph(PUNGraph InGraph, TInt64V NIdV) -> PUNGraph

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PUNGraph_PUNGraph(InGraph, NIdV, RenumberNodes)

def ConvertSubGraph_PUNGraph_PNGraph(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PUNGraph_PNGraph(PNGraph InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PUNGraph

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PUNGraph_PNGraph(PNGraph InGraph, TInt64V NIdV) -> PUNGraph

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PUNGraph_PNGraph(InGraph, NIdV, RenumberNodes)

def ConvertSubGraph_PUNGraph_PNEANet(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PUNGraph_PNEANet(PNEANet InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PUNGraph

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PUNGraph_PNEANet(PNEANet InGraph, TInt64V NIdV) -> PUNGraph

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PUNGraph_PNEANet(InGraph, NIdV, RenumberNodes)

def ConvertESubGraph_PUNGraph_PNEANet(InGraph, EIdV, RenumberNodes=False):
    """
    ConvertESubGraph_PUNGraph_PNEANet(PNEANet InGraph, TInt64V EIdV, bool const & RenumberNodes=False) -> PUNGraph

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    EIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertESubGraph_PUNGraph_PNEANet(PNEANet InGraph, TInt64V EIdV) -> PUNGraph

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    EIdV: TInt64V const &

    """
    return _SnapTime.ConvertESubGraph_PUNGraph_PNEANet(InGraph, EIdV, RenumberNodes)

def GetSubGraph_PUNGraph(Graph, NIdV):
    """
    GetSubGraph_PUNGraph(PUNGraph Graph, TInt64V NIdV) -> PUNGraph

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.GetSubGraph_PUNGraph(Graph, NIdV)

def GetRndSubGraph_PUNGraph(Graph, NNodes):
    """
    GetRndSubGraph_PUNGraph(PUNGraph Graph, int64 const & NNodes) -> PUNGraph

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NNodes: int64 const &

    """
    return _SnapTime.GetRndSubGraph_PUNGraph(Graph, NNodes)

def GetRndESubGraph_PUNGraph(Graph, NEdges):
    """
    GetRndESubGraph_PUNGraph(PUNGraph Graph, int64 const & NEdges) -> PUNGraph

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NEdges: int64 const &

    """
    return _SnapTime.GetRndESubGraph_PUNGraph(Graph, NEdges)

def GetClustCf_PUNGraph(*args):
    """
    GetClustCf_PUNGraph(PUNGraph Graph, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    SampleNodes: int64

    GetClustCf_PUNGraph(PUNGraph Graph) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    GetClustCf_PUNGraph(PUNGraph Graph, TFltPr64V DegToCCfV, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    DegToCCfV: TFltPr64V &
    SampleNodes: int64

    GetClustCf_PUNGraph(PUNGraph Graph, TFltPr64V DegToCCfV) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    DegToCCfV: TFltPr64V &

    GetClustCf_PUNGraph(PUNGraph Graph, TFltPr64V DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    DegToCCfV: TFltPr64V &
    ClosedTriadsX: int64 &
    OpenTriadsX: int64 &
    SampleNodes: int64

    GetClustCf_PUNGraph(PUNGraph Graph, TFltPr64V DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    DegToCCfV: TFltPr64V &
    ClosedTriadsX: int64 &
    OpenTriadsX: int64 &

    """
    return _SnapTime.GetClustCf_PUNGraph(*args)

def GetNodeClustCf_PUNGraph(*args):
    """
    GetNodeClustCf_PUNGraph(PUNGraph Graph, int64 const & NId) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId: int64 const &

    GetNodeClustCf_PUNGraph(PUNGraph Graph, TIntFlt64H NIdCCfH)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdCCfH: TIntFlt64H &

    """
    return _SnapTime.GetNodeClustCf_PUNGraph(*args)

def GetTriads_PUNGraph(*args):
    """
    GetTriads_PUNGraph(PUNGraph Graph, int64 & ClosedTriads, int64 & OpenTriads, int64 SampleNodes=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    ClosedTriads: int64 &
    OpenTriads: int64 &
    SampleNodes: int64

    GetTriads_PUNGraph(PUNGraph Graph, int64 & ClosedTriads, int64 & OpenTriads) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    ClosedTriads: int64 &
    OpenTriads: int64 &

    GetTriads_PUNGraph(PUNGraph Graph, int64 SampleNodes=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    SampleNodes: int64

    GetTriads_PUNGraph(PUNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    GetTriads_PUNGraph(PUNGraph Graph, TIntTr64V & NIdCOTriadV, int64 SampleNodes=-1)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdCOTriadV: TIntTr64V &
    SampleNodes: int64

    GetTriads_PUNGraph(PUNGraph Graph, TIntTr64V & NIdCOTriadV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdCOTriadV: TIntTr64V &

    """
    return _SnapTime.GetTriads_PUNGraph(*args)

def GetTriadEdges_PUNGraph(Graph, SampleEdges=-1):
    """
    GetTriadEdges_PUNGraph(PUNGraph Graph, int64 SampleEdges=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    SampleEdges: int64

    GetTriadEdges_PUNGraph(PUNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.GetTriadEdges_PUNGraph(Graph, SampleEdges)

def GetNodeTriads_PUNGraph(*args):
    """
    GetNodeTriads_PUNGraph(PUNGraph Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId: int64 const &

    GetNodeTriads_PUNGraph(PUNGraph Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId: int64 const &

    GetNodeTriads_PUNGraph(PUNGraph Graph, int64 const & NId, TInt64Set GroupSet, int64 & OutGroupEdgesX) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId: int64 const &
    GroupSet: TInt64Set const &
    OutGroupEdgesX: int64 &

    """
    return _SnapTime.GetNodeTriads_PUNGraph(*args)

def GetTriadParticip_PUNGraph(Graph, TriadCntV):
    """
    GetTriadParticip_PUNGraph(PUNGraph Graph, TIntPr64V TriadCntV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    TriadCntV: TIntPr64V &

    """
    return _SnapTime.GetTriadParticip_PUNGraph(Graph, TriadCntV)

def GetTriangleCnt_PUNGraph(Graph):
    """
    GetTriangleCnt_PUNGraph(PUNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.GetTriangleCnt_PUNGraph(Graph)

def GetCmnNbrs_PUNGraph(*args):
    """
    GetCmnNbrs_PUNGraph(PUNGraph Graph, int64 const & NId1, int64 const & NId2) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId1: int64 const &
    NId2: int64 const &

    GetCmnNbrs_PUNGraph(PUNGraph Graph, int64 const & NId1, int64 const & NId2, TInt64V NbrV) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NId1: int64 const &
    NId2: int64 const &
    NbrV: TInt64V &

    """
    return _SnapTime.GetCmnNbrs_PUNGraph(*args)

def GetModularity_PUNGraph(*args):
    """
    GetModularity_PUNGraph(PUNGraph G, TInt64V NIdV, int64 GEdges=-1) -> double

    Parameters
    ----------
    G: TPt< TUNGraph > const &
    NIdV: TInt64V const &
    GEdges: int64

    GetModularity_PUNGraph(PUNGraph G, TInt64V NIdV) -> double

    Parameters
    ----------
    G: TPt< TUNGraph > const &
    NIdV: TInt64V const &

    GetModularity_PUNGraph(PUNGraph G, TCnComV CmtyV, int64 GEdges=-1) -> double

    Parameters
    ----------
    G: TPt< TUNGraph > const &
    CmtyV: TCnComV const &
    GEdges: int64

    GetModularity_PUNGraph(PUNGraph G, TCnComV CmtyV) -> double

    Parameters
    ----------
    G: TPt< TUNGraph > const &
    CmtyV: TCnComV const &

    """
    return _SnapTime.GetModularity_PUNGraph(*args)

def GetEdgesInOut_PUNGraph(Graph, NIdV):
    """
    GetEdgesInOut_PUNGraph(PUNGraph Graph, TInt64V NIdV)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.GetEdgesInOut_PUNGraph(Graph, NIdV)

def GetAnf_PUNGraph(*args):
    """
    GetAnf_PUNGraph(PUNGraph Graph, int64 const & SrcNId, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir, int64 const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    SrcNId: int64 const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &
    NApprox: int64 const &

    GetAnf_PUNGraph(PUNGraph Graph, int64 const & SrcNId, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    SrcNId: int64 const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &

    GetAnf_PUNGraph(PUNGraph Graph, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir, int64 const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &
    NApprox: int64 const &

    GetAnf_PUNGraph(PUNGraph Graph, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &

    """
    return _SnapTime.GetAnf_PUNGraph(*args)

def GetAnfEffDiam_PUNGraph(*args):
    """
    GetAnfEffDiam_PUNGraph(PUNGraph Graph, bool const & IsDir, double const & Percentile, int64 const & NApprox) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    IsDir: bool const &
    Percentile: double const &
    NApprox: int64 const &

    GetAnfEffDiam_PUNGraph(PUNGraph Graph, int64 const NRuns=1, int64 NApprox=-1) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NRuns: int64 const
    NApprox: int64

    GetAnfEffDiam_PUNGraph(PUNGraph Graph, int64 const NRuns=1) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    NRuns: int64 const

    GetAnfEffDiam_PUNGraph(PUNGraph Graph) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.GetAnfEffDiam_PUNGraph(*args)

def TestAnf_PUNGraph():
    """TestAnf_PUNGraph()"""
    return _SnapTime.TestAnf_PUNGraph()

def PlotKCoreEdges_PUNGraph(*args):
    """
    PlotKCoreEdges_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotKCoreEdges_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotKCoreEdges_PUNGraph(*args)

def PlotKCoreNodes_PUNGraph(*args):
    """
    PlotKCoreNodes_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotKCoreNodes_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotKCoreNodes_PUNGraph(*args)

def PlotShortPathDistr_PUNGraph(*args):
    """
    PlotShortPathDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr, int TestNodes)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr
    TestNodes: int

    PlotShortPathDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotShortPathDistr_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotShortPathDistr_PUNGraph(*args)

def PlotHops_PUNGraph(*args):
    """
    PlotHops_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr, bool const & IsDir=False, int const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr
    IsDir: bool const &
    NApprox: int const &

    PlotHops_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr
    IsDir: bool const &

    PlotHops_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotHops_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotHops_PUNGraph(*args)

def PlotClustCf_PUNGraph(*args):
    """
    PlotClustCf_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotClustCf_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotClustCf_PUNGraph(*args)

def PlotSccDistr_PUNGraph(*args):
    """
    PlotSccDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotSccDistr_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotSccDistr_PUNGraph(*args)

def PlotWccDistr_PUNGraph(*args):
    """
    PlotWccDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotWccDistr_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotWccDistr_PUNGraph(*args)

def PlotOutDegDistr_PUNGraph(*args):
    """
    PlotOutDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &
    PowerFit: bool const &

    PlotOutDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &

    PlotOutDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotOutDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotOutDegDistr_PUNGraph(*args)

def PlotInDegDistr_PUNGraph(*args):
    """
    PlotInDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &
    PowerFit: bool const &

    PlotInDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &

    PlotInDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotInDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotInDegDistr_PUNGraph(*args)

def PercentDegree_PUNGraph(Graph, Threshold=0):
    """
    PercentDegree_PUNGraph(PUNGraph Graph, int64 const Threshold=0) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    Threshold: int64 const

    PercentDegree_PUNGraph(PUNGraph Graph) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.PercentDegree_PUNGraph(Graph, Threshold)

def NodesGTEDegree_PUNGraph(Graph, Threshold=0):
    """
    NodesGTEDegree_PUNGraph(PUNGraph Graph, int64 const Threshold=0) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &
    Threshold: int64 const

    NodesGTEDegree_PUNGraph(PUNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.NodesGTEDegree_PUNGraph(Graph, Threshold)

def MxDegree_PUNGraph(Graph):
    """
    MxDegree_PUNGraph(PUNGraph Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.MxDegree_PUNGraph(Graph)

def PercentMxWcc_PUNGraph(Graph):
    """
    PercentMxWcc_PUNGraph(PUNGraph Graph) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.PercentMxWcc_PUNGraph(Graph)

def PercentMxScc_PUNGraph(Graph):
    """
    PercentMxScc_PUNGraph(PUNGraph Graph) -> double

    Parameters
    ----------
    Graph: TPt< TUNGraph > const &

    """
    return _SnapTime.PercentMxScc_PUNGraph(Graph)

def ToGraph_PUNGraph(Table, SrcCol, DstCol, AggrPolicy):
    """
    ToGraph_PUNGraph(PTable Table, TStr SrcCol, TStr DstCol, TAttrAggr AggrPolicy) -> PUNGraph

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    AggrPolicy: enum TAttrAggr

    """
    return _SnapTime.ToGraph_PUNGraph(Table, SrcCol, DstCol, AggrPolicy)

# redefine TDirNetEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TDirNetEdgeI.GetId = GetId


def PrintGraphStatTable_PDirNet(*args):
    """
    PrintGraphStatTable_PDirNet(PDirNet G, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    G: TPt< TDirNet > const &
    OutFNm: TStr
    Desc: TStr

    PrintGraphStatTable_PDirNet(PDirNet G, TStr OutFNm)

    Parameters
    ----------
    G: TPt< TDirNet > const &
    OutFNm: TStr

    """
    return _SnapTime.PrintGraphStatTable_PDirNet(*args)
class PDirNet(object):
    """Proxy of C++ TPt<(TDirNet)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> PDirNet"""
        return _SnapTime.PDirNet_New()

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_PDirNet

    def Save(self, SOut):
        """
        Save(PDirNet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.PDirNet_Save(self, SOut)


    def __deref__(self):
        """
        __deref__(PDirNet self) -> TDirNet

        Parameters
        ----------
        self: TPt< TDirNet > const *

        """
        return _SnapTime.PDirNet___deref__(self)


    def __ref__(self):
        """
        __ref__(PDirNet self) -> TDirNet

        Parameters
        ----------
        self: TPt< TDirNet > const *

        """
        return _SnapTime.PDirNet___ref__(self)


    def __call__(self):
        """
        __call__(PDirNet self) -> TDirNet

        Parameters
        ----------
        self: TPt< TDirNet > const *

        """
        return _SnapTime.PDirNet___call__(self)


    def Empty(self):
        """
        Empty(PDirNet self) -> bool

        Parameters
        ----------
        self: TPt< TDirNet > const *

        """
        return _SnapTime.PDirNet_Empty(self)


    def Clr(self):
        """
        Clr(PDirNet self)

        Parameters
        ----------
        self: TPt< TDirNet > *

        """
        return _SnapTime.PDirNet_Clr(self)


    def GetRefs(self):
        """
        GetRefs(PDirNet self) -> int64

        Parameters
        ----------
        self: TPt< TDirNet > const *

        """
        return _SnapTime.PDirNet_GetRefs(self)


    def Save_V1(self, SOut):
        """
        Save_V1(PDirNet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.PDirNet_Save_V1(self, SOut)


    def Load(self, SIn):
        """
        Load(PDirNet self, TSIn SIn) -> PDirNet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.PDirNet_Load(self, SIn)


    def Load_V1(self, SIn):
        """
        Load_V1(PDirNet self, TSIn SIn) -> PDirNet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.PDirNet_Load_V1(self, SIn)


    def LoadShM(self, ShMIn):
        """
        LoadShM(PDirNet self, TShMIn ShMIn) -> PDirNet

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.PDirNet_LoadShM(self, ShMIn)


    def HasFlag(self, Flag):
        """
        HasFlag(PDirNet self, TGraphFlag const & Flag) -> bool

        Parameters
        ----------
        Flag: TGraphFlag const &

        """
        return _SnapTime.PDirNet_HasFlag(self, Flag)


    def GetNodes(self):
        """
        GetNodes(PDirNet self) -> int64

        Parameters
        ----------
        self: TPt< TDirNet > const *

        """
        return _SnapTime.PDirNet_GetNodes(self)


    def AddNode(self, *args):
        """
        AddNode(PDirNet self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(PDirNet self) -> int64
        AddNode(PDirNet self, TDirNet::TNodeI const & NodeId) -> int64

        Parameters
        ----------
        NodeId: TDirNet::TNodeI const &

        AddNode(PDirNet self, int64 const & NId, TInt64V InNIdV, TInt64V OutNIdV) -> int64

        Parameters
        ----------
        NId: int64 const &
        InNIdV: TInt64V const &
        OutNIdV: TInt64V const &

        AddNode(PDirNet self, int64 const & NId, TVecPool< TInt64,int64 > const & Pool, int64 const & SrcVId, int64 const & DstVId) -> int64

        Parameters
        ----------
        NId: int64 const &
        Pool: TVecPool< TInt64,int64 > const &
        SrcVId: int64 const &
        DstVId: int64 const &

        """
        return _SnapTime.PDirNet_AddNode(self, *args)


    def AddNodeUnchecked(self, NId=-1):
        """
        AddNodeUnchecked(PDirNet self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNodeUnchecked(PDirNet self) -> int64

        Parameters
        ----------
        self: TPt< TDirNet > *

        """
        return _SnapTime.PDirNet_AddNodeUnchecked(self, NId)


    def DelNode(self, *args):
        """
        DelNode(PDirNet self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        DelNode(PDirNet self, TDirNet::TNode const & NodeI)

        Parameters
        ----------
        NodeI: TDirNet::TNode const &

        """
        return _SnapTime.PDirNet_DelNode(self, *args)


    def IsNode(self, NId):
        """
        IsNode(PDirNet self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.PDirNet_IsNode(self, NId)


    def BegNI(self, *args):
        """
        BegNI(PDirNet self) -> TDirNet::TNodeI
        BegNI(PDirNet self) -> TDirNetNodeI

        Parameters
        ----------
        self: TPt< TDirNet > *

        """
        return _SnapTime.PDirNet_BegNI(self, *args)


    def EndNI(self, *args):
        """
        EndNI(PDirNet self) -> TDirNet::TNodeI
        EndNI(PDirNet self) -> TDirNetNodeI

        Parameters
        ----------
        self: TPt< TDirNet > *

        """
        return _SnapTime.PDirNet_EndNI(self, *args)


    def GetNI(self, *args):
        """
        GetNI(PDirNet self, int64 const & NId) -> TDirNet::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetNI(PDirNet self, int64 const & NId) -> TDirNetNodeI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.PDirNet_GetNI(self, *args)


    def GetMxNId(self):
        """
        GetMxNId(PDirNet self) -> int64

        Parameters
        ----------
        self: TPt< TDirNet > const *

        """
        return _SnapTime.PDirNet_GetMxNId(self)


    def GetEdges(self):
        """
        GetEdges(PDirNet self) -> int64

        Parameters
        ----------
        self: TPt< TDirNet > const *

        """
        return _SnapTime.PDirNet_GetEdges(self)


    def AddEdge(self, *args):
        """
        AddEdge(PDirNet self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        AddEdge(PDirNet self, TDirNet::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &

        """
        return _SnapTime.PDirNet_AddEdge(self, *args)


    def AddEdgeUnchecked(self, SrcNId, DstNId):
        """
        AddEdgeUnchecked(PDirNet self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PDirNet_AddEdgeUnchecked(self, SrcNId, DstNId)


    def DelEdge(self, SrcNId, DstNId, IsDir=True):
        """
        DelEdge(PDirNet self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        DelEdge(PDirNet self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PDirNet_DelEdge(self, SrcNId, DstNId, IsDir)


    def IsEdge(self, SrcNId, DstNId, IsDir=True):
        """
        IsEdge(PDirNet self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        IsEdge(PDirNet self, int64 const & SrcNId, int64 const & DstNId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PDirNet_IsEdge(self, SrcNId, DstNId, IsDir)


    def BegEI(self, *args):
        """
        BegEI(PDirNet self) -> TDirNet::TEdgeI
        BegEI(PDirNet self) -> TDirNetEdgeI

        Parameters
        ----------
        self: TPt< TDirNet > *

        """
        return _SnapTime.PDirNet_BegEI(self, *args)


    def EndEI(self, *args):
        """
        EndEI(PDirNet self) -> TDirNet::TEdgeI
        EndEI(PDirNet self) -> TDirNetEdgeI

        Parameters
        ----------
        self: TPt< TDirNet > *

        """
        return _SnapTime.PDirNet_EndEI(self, *args)


    def GetEI(self, SrcNId, DstNId):
        """
        GetEI(PDirNet self, int64 const & SrcNId, int64 const & DstNId) -> TDirNet::TEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PDirNet_GetEI(self, SrcNId, DstNId)


    def GetRndNId(self, *args):
        """
        GetRndNId(PDirNet self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(PDirNet self) -> int64

        Parameters
        ----------
        self: TPt< TDirNet > *

        """
        return _SnapTime.PDirNet_GetRndNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(PDirNet self, TRnd Rnd) -> TDirNet::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(PDirNet self) -> TDirNet::TNodeI

        Parameters
        ----------
        self: TPt< TDirNet > *

        """
        return _SnapTime.PDirNet_GetRndNI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(PDirNet self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.PDirNet_GetNIdV(self, NIdV)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(PDirNet self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.PDirNet_Reserve(self, Nodes, Edges)


    def ReserveNIdInDeg(self, NId, InDeg):
        """
        ReserveNIdInDeg(PDirNet self, int64 const & NId, int64 const & InDeg)

        Parameters
        ----------
        NId: int64 const &
        InDeg: int64 const &

        """
        return _SnapTime.PDirNet_ReserveNIdInDeg(self, NId, InDeg)


    def ReserveNIdOutDeg(self, NId, OutDeg):
        """
        ReserveNIdOutDeg(PDirNet self, int64 const & NId, int64 const & OutDeg)

        Parameters
        ----------
        NId: int64 const &
        OutDeg: int64 const &

        """
        return _SnapTime.PDirNet_ReserveNIdOutDeg(self, NId, OutDeg)


    def SortNodeAdjV(self):
        """
        SortNodeAdjV(PDirNet self)

        Parameters
        ----------
        self: TPt< TDirNet > *

        """
        return _SnapTime.PDirNet_SortNodeAdjV(self)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(PDirNet self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(PDirNet self)

        Parameters
        ----------
        self: TPt< TDirNet > *

        """
        return _SnapTime.PDirNet_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(PDirNet self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(PDirNet self) -> bool

        Parameters
        ----------
        self: TPt< TDirNet > const *

        """
        return _SnapTime.PDirNet_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(PDirNet self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(PDirNet self)

        Parameters
        ----------
        self: TPt< TDirNet > const *

        """
        return _SnapTime.PDirNet_Dump(self, *args)


    def GetSmallGraph(self):
        """
        GetSmallGraph(PDirNet self) -> PDirNet

        Parameters
        ----------
        self: TPt< TDirNet > *

        """
        return _SnapTime.PDirNet_GetSmallGraph(self)


    def AddSAttrDatN(self, *args):
        """
        AddSAttrDatN(PDirNet self, TInt64 NId, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatN(PDirNet self, TInt64 NId, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatN(PDirNet self, TDirNet::TNodeI const & NodeI, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatN(PDirNet self, TDirNet::TNodeI const & NodeI, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatN(PDirNet self, TInt64 NId, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatN(PDirNet self, TInt64 NId, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatN(PDirNet self, TDirNet::TNodeI const & NodeI, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatN(PDirNet self, TDirNet::TNodeI const & NodeI, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatN(PDirNet self, TInt64 NId, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatN(PDirNet self, TInt64 NId, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TStr const &

        AddSAttrDatN(PDirNet self, TDirNet::TNodeI const & NodeI, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatN(PDirNet self, TDirNet::TNodeI const & NodeI, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrId: TInt64 const &
        Val: TStr const &

        """
        return _SnapTime.PDirNet_AddSAttrDatN(self, *args)


    def GetSAttrDatN(self, *args):
        """
        GetSAttrDatN(PDirNet self, TInt64 NId, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatN(PDirNet self, TInt64 NId, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatN(PDirNet self, TDirNet::TNodeI const & NodeI, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatN(PDirNet self, TDirNet::TNodeI const & NodeI, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatN(PDirNet self, TInt64 NId, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatN(PDirNet self, TInt64 NId, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatN(PDirNet self, TDirNet::TNodeI const & NodeI, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatN(PDirNet self, TDirNet::TNodeI const & NodeI, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatN(PDirNet self, TInt64 NId, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatN(PDirNet self, TInt64 NId, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TStr &

        GetSAttrDatN(PDirNet self, TDirNet::TNodeI const & NodeI, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatN(PDirNet self, TDirNet::TNodeI const & NodeI, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TStr &

        """
        return _SnapTime.PDirNet_GetSAttrDatN(self, *args)


    def DelSAttrDatN(self, *args):
        """
        DelSAttrDatN(PDirNet self, TInt64 NId, TStr AttrName) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &

        DelSAttrDatN(PDirNet self, TInt64 NId, TInt64 AttrId) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &

        DelSAttrDatN(PDirNet self, TDirNet::TNodeI const & NodeI, TStr AttrName) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrName: TStr const &

        DelSAttrDatN(PDirNet self, TDirNet::TNodeI const & NodeI, TInt64 AttrId) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrId: TInt64 const &

        """
        return _SnapTime.PDirNet_DelSAttrDatN(self, *args)


    def GetSAttrVN(self, *args):
        """
        GetSAttrVN(PDirNet self, TInt64 NId, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        GetSAttrVN(PDirNet self, TDirNet::TNodeI const & NodeI, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        """
        return _SnapTime.PDirNet_GetSAttrVN(self, *args)


    def GetIdVSAttrN(self, *args):
        """
        GetIdVSAttrN(PDirNet self, TStr AttrName, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrName: TStr const &
        IdV: TInt64V &

        GetIdVSAttrN(PDirNet self, TInt64 AttrId, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        IdV: TInt64V &

        """
        return _SnapTime.PDirNet_GetIdVSAttrN(self, *args)


    def AddSAttrN(self, Name, AttrType, AttrId):
        """
        AddSAttrN(PDirNet self, TStr Name, TAttrType const & AttrType, TInt64 AttrId) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrType: TAttrType const &
        AttrId: TInt64 &

        """
        return _SnapTime.PDirNet_AddSAttrN(self, Name, AttrType, AttrId)


    def GetSAttrIdN(self, Name, AttrIdX, AttrTypeX):
        """
        GetSAttrIdN(PDirNet self, TStr Name, TInt64 AttrIdX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrIdX: TInt64 &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.PDirNet_GetSAttrIdN(self, Name, AttrIdX, AttrTypeX)


    def GetSAttrNameN(self, AttrId, NameX, AttrTypeX):
        """
        GetSAttrNameN(PDirNet self, TInt64 AttrId, TStr NameX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        NameX: TStr &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.PDirNet_GetSAttrNameN(self, AttrId, NameX, AttrTypeX)


    def AddSAttrDatE(self, *args):
        """
        AddSAttrDatE(PDirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatE(PDirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatE(PDirNet self, TDirNet::TEdgeI const & EdgeI, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatE(PDirNet self, TDirNet::TEdgeI const & EdgeI, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatE(PDirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatE(PDirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatE(PDirNet self, TDirNet::TEdgeI const & EdgeI, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatE(PDirNet self, TDirNet::TEdgeI const & EdgeI, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatE(PDirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatE(PDirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        Val: TStr const &

        AddSAttrDatE(PDirNet self, TDirNet::TEdgeI const & EdgeI, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatE(PDirNet self, TDirNet::TEdgeI const & EdgeI, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TStr const &

        """
        return _SnapTime.PDirNet_AddSAttrDatE(self, *args)


    def GetSAttrDatE(self, *args):
        """
        GetSAttrDatE(PDirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatE(PDirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatE(PDirNet self, TDirNet::TEdgeI const & EdgeI, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatE(PDirNet self, TDirNet::TEdgeI const & EdgeI, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatE(PDirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatE(PDirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatE(PDirNet self, TDirNet::TEdgeI const & EdgeI, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatE(PDirNet self, TDirNet::TEdgeI const & EdgeI, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatE(PDirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatE(PDirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        ValX: TStr &

        GetSAttrDatE(PDirNet self, TDirNet::TEdgeI const & EdgeI, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatE(PDirNet self, TDirNet::TEdgeI const & EdgeI, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TStr &

        """
        return _SnapTime.PDirNet_GetSAttrDatE(self, *args)


    def DelSAttrDatE(self, *args):
        """
        DelSAttrDatE(PDirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &

        DelSAttrDatE(PDirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &

        DelSAttrDatE(PDirNet self, TDirNet::TEdgeI const & EdgeI, TStr AttrName) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrName: TStr const &

        DelSAttrDatE(PDirNet self, TDirNet::TEdgeI const & EdgeI, TInt64 AttrId) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrId: TInt64 const &

        """
        return _SnapTime.PDirNet_DelSAttrDatE(self, *args)


    def GetSAttrVE(self, *args):
        """
        GetSAttrVE(PDirNet self, int64 const & SrcNId, int64 const & DstNId, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        GetSAttrVE(PDirNet self, TDirNet::TEdgeI const & EdgeI, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        """
        return _SnapTime.PDirNet_GetSAttrVE(self, *args)


    def GetIdVSAttrE(self, *args):
        """
        GetIdVSAttrE(PDirNet self, TStr AttrName, TIntPr64V IdV) -> int64

        Parameters
        ----------
        AttrName: TStr const &
        IdV: TIntPr64V &

        GetIdVSAttrE(PDirNet self, TInt64 AttrId, TIntPr64V IdV) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        IdV: TIntPr64V &

        """
        return _SnapTime.PDirNet_GetIdVSAttrE(self, *args)


    def AddSAttrE(self, Name, AttrType, AttrId):
        """
        AddSAttrE(PDirNet self, TStr Name, TAttrType const & AttrType, TInt64 AttrId) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrType: TAttrType const &
        AttrId: TInt64 &

        """
        return _SnapTime.PDirNet_AddSAttrE(self, Name, AttrType, AttrId)


    def GetSAttrIdE(self, Name, AttrIdX, AttrTypeX):
        """
        GetSAttrIdE(PDirNet self, TStr Name, TInt64 AttrIdX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrIdX: TInt64 &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.PDirNet_GetSAttrIdE(self, Name, AttrIdX, AttrTypeX)


    def GetSAttrNameE(self, AttrId, NameX, AttrTypeX):
        """
        GetSAttrNameE(PDirNet self, TInt64 AttrId, TStr NameX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        NameX: TStr &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.PDirNet_GetSAttrNameE(self, AttrId, NameX, AttrTypeX)

PDirNet.Save = new_instancemethod(_SnapTime.PDirNet_Save, None, PDirNet)
PDirNet.__deref__ = new_instancemethod(_SnapTime.PDirNet___deref__, None, PDirNet)
PDirNet.__ref__ = new_instancemethod(_SnapTime.PDirNet___ref__, None, PDirNet)
PDirNet.__call__ = new_instancemethod(_SnapTime.PDirNet___call__, None, PDirNet)
PDirNet.Empty = new_instancemethod(_SnapTime.PDirNet_Empty, None, PDirNet)
PDirNet.Clr = new_instancemethod(_SnapTime.PDirNet_Clr, None, PDirNet)
PDirNet.GetRefs = new_instancemethod(_SnapTime.PDirNet_GetRefs, None, PDirNet)
PDirNet.Save_V1 = new_instancemethod(_SnapTime.PDirNet_Save_V1, None, PDirNet)
PDirNet.Load = new_instancemethod(_SnapTime.PDirNet_Load, None, PDirNet)
PDirNet.Load_V1 = new_instancemethod(_SnapTime.PDirNet_Load_V1, None, PDirNet)
PDirNet.LoadShM = new_instancemethod(_SnapTime.PDirNet_LoadShM, None, PDirNet)
PDirNet.HasFlag = new_instancemethod(_SnapTime.PDirNet_HasFlag, None, PDirNet)
PDirNet.GetNodes = new_instancemethod(_SnapTime.PDirNet_GetNodes, None, PDirNet)
PDirNet.AddNode = new_instancemethod(_SnapTime.PDirNet_AddNode, None, PDirNet)
PDirNet.AddNodeUnchecked = new_instancemethod(_SnapTime.PDirNet_AddNodeUnchecked, None, PDirNet)
PDirNet.DelNode = new_instancemethod(_SnapTime.PDirNet_DelNode, None, PDirNet)
PDirNet.IsNode = new_instancemethod(_SnapTime.PDirNet_IsNode, None, PDirNet)
PDirNet.BegNI = new_instancemethod(_SnapTime.PDirNet_BegNI, None, PDirNet)
PDirNet.EndNI = new_instancemethod(_SnapTime.PDirNet_EndNI, None, PDirNet)
PDirNet.GetNI = new_instancemethod(_SnapTime.PDirNet_GetNI, None, PDirNet)
PDirNet.GetMxNId = new_instancemethod(_SnapTime.PDirNet_GetMxNId, None, PDirNet)
PDirNet.GetEdges = new_instancemethod(_SnapTime.PDirNet_GetEdges, None, PDirNet)
PDirNet.AddEdge = new_instancemethod(_SnapTime.PDirNet_AddEdge, None, PDirNet)
PDirNet.AddEdgeUnchecked = new_instancemethod(_SnapTime.PDirNet_AddEdgeUnchecked, None, PDirNet)
PDirNet.DelEdge = new_instancemethod(_SnapTime.PDirNet_DelEdge, None, PDirNet)
PDirNet.IsEdge = new_instancemethod(_SnapTime.PDirNet_IsEdge, None, PDirNet)
PDirNet.BegEI = new_instancemethod(_SnapTime.PDirNet_BegEI, None, PDirNet)
PDirNet.EndEI = new_instancemethod(_SnapTime.PDirNet_EndEI, None, PDirNet)
PDirNet.GetEI = new_instancemethod(_SnapTime.PDirNet_GetEI, None, PDirNet)
PDirNet.GetRndNId = new_instancemethod(_SnapTime.PDirNet_GetRndNId, None, PDirNet)
PDirNet.GetRndNI = new_instancemethod(_SnapTime.PDirNet_GetRndNI, None, PDirNet)
PDirNet.GetNIdV = new_instancemethod(_SnapTime.PDirNet_GetNIdV, None, PDirNet)
PDirNet.Reserve = new_instancemethod(_SnapTime.PDirNet_Reserve, None, PDirNet)
PDirNet.ReserveNIdInDeg = new_instancemethod(_SnapTime.PDirNet_ReserveNIdInDeg, None, PDirNet)
PDirNet.ReserveNIdOutDeg = new_instancemethod(_SnapTime.PDirNet_ReserveNIdOutDeg, None, PDirNet)
PDirNet.SortNodeAdjV = new_instancemethod(_SnapTime.PDirNet_SortNodeAdjV, None, PDirNet)
PDirNet.Defrag = new_instancemethod(_SnapTime.PDirNet_Defrag, None, PDirNet)
PDirNet.IsOk = new_instancemethod(_SnapTime.PDirNet_IsOk, None, PDirNet)
PDirNet.Dump = new_instancemethod(_SnapTime.PDirNet_Dump, None, PDirNet)
PDirNet.GetSmallGraph = new_instancemethod(_SnapTime.PDirNet_GetSmallGraph, None, PDirNet)
PDirNet.AddSAttrDatN = new_instancemethod(_SnapTime.PDirNet_AddSAttrDatN, None, PDirNet)
PDirNet.GetSAttrDatN = new_instancemethod(_SnapTime.PDirNet_GetSAttrDatN, None, PDirNet)
PDirNet.DelSAttrDatN = new_instancemethod(_SnapTime.PDirNet_DelSAttrDatN, None, PDirNet)
PDirNet.GetSAttrVN = new_instancemethod(_SnapTime.PDirNet_GetSAttrVN, None, PDirNet)
PDirNet.GetIdVSAttrN = new_instancemethod(_SnapTime.PDirNet_GetIdVSAttrN, None, PDirNet)
PDirNet.AddSAttrN = new_instancemethod(_SnapTime.PDirNet_AddSAttrN, None, PDirNet)
PDirNet.GetSAttrIdN = new_instancemethod(_SnapTime.PDirNet_GetSAttrIdN, None, PDirNet)
PDirNet.GetSAttrNameN = new_instancemethod(_SnapTime.PDirNet_GetSAttrNameN, None, PDirNet)
PDirNet.AddSAttrDatE = new_instancemethod(_SnapTime.PDirNet_AddSAttrDatE, None, PDirNet)
PDirNet.GetSAttrDatE = new_instancemethod(_SnapTime.PDirNet_GetSAttrDatE, None, PDirNet)
PDirNet.DelSAttrDatE = new_instancemethod(_SnapTime.PDirNet_DelSAttrDatE, None, PDirNet)
PDirNet.GetSAttrVE = new_instancemethod(_SnapTime.PDirNet_GetSAttrVE, None, PDirNet)
PDirNet.GetIdVSAttrE = new_instancemethod(_SnapTime.PDirNet_GetIdVSAttrE, None, PDirNet)
PDirNet.AddSAttrE = new_instancemethod(_SnapTime.PDirNet_AddSAttrE, None, PDirNet)
PDirNet.GetSAttrIdE = new_instancemethod(_SnapTime.PDirNet_GetSAttrIdE, None, PDirNet)
PDirNet.GetSAttrNameE = new_instancemethod(_SnapTime.PDirNet_GetSAttrNameE, None, PDirNet)
PDirNet_swigregister = _SnapTime.PDirNet_swigregister
PDirNet_swigregister(PDirNet)

def PDirNet_New():
    """PDirNet_New() -> PDirNet"""
    return _SnapTime.PDirNet_New()


def PrintInfo_PDirNet(*args):
    """
    PrintInfo_PDirNet(PDirNet Graph, TStr Desc, TStr OutFNm, bool const & Fast=True)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    Desc: TStr const &
    OutFNm: TStr const &
    Fast: bool const &

    PrintInfo_PDirNet(PDirNet Graph, TStr Desc, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    Desc: TStr const &
    OutFNm: TStr const &

    PrintInfo_PDirNet(PDirNet Graph, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    Desc: TStr const &

    PrintInfo_PDirNet(PDirNet Graph)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.PrintInfo_PDirNet(*args)

def GetNodeWcc_PDirNet(Graph, NId, CnCom):
    """
    GetNodeWcc_PDirNet(PDirNet Graph, int64 const & NId, TInt64V CnCom)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NId: int64 const &
    CnCom: TInt64V &

    """
    return _SnapTime.GetNodeWcc_PDirNet(Graph, NId, CnCom)

def IsConnected_PDirNet(Graph):
    """
    IsConnected_PDirNet(PDirNet Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.IsConnected_PDirNet(Graph)

def IsWeaklyConn_PDirNet(Graph):
    """
    IsWeaklyConn_PDirNet(PDirNet Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.IsWeaklyConn_PDirNet(Graph)

def GetWccSzCnt_PDirNet(Graph, WccSzCnt):
    """
    GetWccSzCnt_PDirNet(PDirNet Graph, TIntPr64V WccSzCnt)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    WccSzCnt: TIntPr64V &

    """
    return _SnapTime.GetWccSzCnt_PDirNet(Graph, WccSzCnt)

def GetWccs_PDirNet(Graph, CnComV):
    """
    GetWccs_PDirNet(PDirNet Graph, TCnComV CnComV)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    CnComV: TCnComV &

    """
    return _SnapTime.GetWccs_PDirNet(Graph, CnComV)

def GetSccSzCnt_PDirNet(Graph, SccSzCnt):
    """
    GetSccSzCnt_PDirNet(PDirNet Graph, TIntPr64V SccSzCnt)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    SccSzCnt: TIntPr64V &

    """
    return _SnapTime.GetSccSzCnt_PDirNet(Graph, SccSzCnt)

def GetSccs_PDirNet(Graph, CnComV):
    """
    GetSccs_PDirNet(PDirNet Graph, TCnComV CnComV)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    CnComV: TCnComV &

    """
    return _SnapTime.GetSccs_PDirNet(Graph, CnComV)

def GetMxWccSz_PDirNet(Graph):
    """
    GetMxWccSz_PDirNet(PDirNet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.GetMxWccSz_PDirNet(Graph)

def GetMxSccSz_PDirNet(Graph):
    """
    GetMxSccSz_PDirNet(PDirNet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.GetMxSccSz_PDirNet(Graph)

def GetMxWcc_PDirNet(Graph):
    """
    GetMxWcc_PDirNet(PDirNet Graph) -> PDirNet

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.GetMxWcc_PDirNet(Graph)

def GetMxScc_PDirNet(Graph):
    """
    GetMxScc_PDirNet(PDirNet Graph) -> PDirNet

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.GetMxScc_PDirNet(Graph)

def GetMxBiCon_PDirNet(Graph):
    """
    GetMxBiCon_PDirNet(PDirNet Graph) -> PDirNet

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.GetMxBiCon_PDirNet(Graph)

def GetNodeEcc_PDirNet(Graph, NId, IsDir=False):
    """
    GetNodeEcc_PDirNet(PDirNet Graph, int64 const & NId, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NId: int64 const &
    IsDir: bool const &

    GetNodeEcc_PDirNet(PDirNet Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NId: int64 const &

    """
    return _SnapTime.GetNodeEcc_PDirNet(Graph, NId, IsDir)

def GetPageRank_PDirNet(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRank_PDirNet(PDirNet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRank_PDirNet(PDirNet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRank_PDirNet(PDirNet Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRank_PDirNet(PDirNet Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRank_PDirNet(Graph, PRankH, C, Eps, MaxIter)

def GetPageRank_v1_PDirNet(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRank_v1_PDirNet(PDirNet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRank_v1_PDirNet(PDirNet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRank_v1_PDirNet(PDirNet Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRank_v1_PDirNet(PDirNet Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRank_v1_PDirNet(Graph, PRankH, C, Eps, MaxIter)

def GetHits_PDirNet(Graph, NIdHubH, NIdAuthH, MaxIter=20):
    """
    GetHits_PDirNet(PDirNet Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH, int64 const & MaxIter=20)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &
    MaxIter: int64 const &

    GetHits_PDirNet(PDirNet Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &

    """
    return _SnapTime.GetHits_PDirNet(Graph, NIdHubH, NIdAuthH, MaxIter)

def GetPageRankMP_PDirNet(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRankMP_PDirNet(PDirNet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRankMP_PDirNet(PDirNet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRankMP_PDirNet(PDirNet Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRankMP_PDirNet(PDirNet Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRankMP_PDirNet(Graph, PRankH, C, Eps, MaxIter)

def GetHitsMP_PDirNet(Graph, NIdHubH, NIdAuthH, MaxIter=20):
    """
    GetHitsMP_PDirNet(PDirNet Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH, int64 const & MaxIter=20)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &
    MaxIter: int64 const &

    GetHitsMP_PDirNet(PDirNet Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &

    """
    return _SnapTime.GetHitsMP_PDirNet(Graph, NIdHubH, NIdAuthH, MaxIter)

def CntInDegNodes_PDirNet(Graph, NodeInDeg):
    """
    CntInDegNodes_PDirNet(PDirNet Graph, int64 const & NodeInDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NodeInDeg: int64 const &

    """
    return _SnapTime.CntInDegNodes_PDirNet(Graph, NodeInDeg)

def CntOutDegNodes_PDirNet(Graph, NodeOutDeg):
    """
    CntOutDegNodes_PDirNet(PDirNet Graph, int64 const & NodeOutDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NodeOutDeg: int64 const &

    """
    return _SnapTime.CntOutDegNodes_PDirNet(Graph, NodeOutDeg)

def CntDegNodes_PDirNet(Graph, NodeDeg):
    """
    CntDegNodes_PDirNet(PDirNet Graph, int64 const & NodeDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NodeDeg: int64 const &

    """
    return _SnapTime.CntDegNodes_PDirNet(Graph, NodeDeg)

def CntNonZNodes_PDirNet(Graph):
    """
    CntNonZNodes_PDirNet(PDirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.CntNonZNodes_PDirNet(Graph)

def CntEdgesToSet_PDirNet(Graph, NId, NodeSet):
    """
    CntEdgesToSet_PDirNet(PDirNet Graph, int64 const & NId, TInt64Set NodeSet) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NId: int64 const &
    NodeSet: TInt64Set const &

    """
    return _SnapTime.CntEdgesToSet_PDirNet(Graph, NId, NodeSet)

def GetMxDegNId_PDirNet(Graph):
    """
    GetMxDegNId_PDirNet(PDirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.GetMxDegNId_PDirNet(Graph)

def GetMxInDegNId_PDirNet(Graph):
    """
    GetMxInDegNId_PDirNet(PDirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.GetMxInDegNId_PDirNet(Graph)

def GetMxOutDegNId_PDirNet(Graph):
    """
    GetMxOutDegNId_PDirNet(PDirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.GetMxOutDegNId_PDirNet(Graph)

def GetInDegCnt_PDirNet(*args):
    """
    GetInDegCnt_PDirNet(PDirNet Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    DegToCntV: TIntPr64V &

    GetInDegCnt_PDirNet(PDirNet Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetInDegCnt_PDirNet(*args)

def GetOutDegCnt_PDirNet(*args):
    """
    GetOutDegCnt_PDirNet(PDirNet Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    DegToCntV: TIntPr64V &

    GetOutDegCnt_PDirNet(PDirNet Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetOutDegCnt_PDirNet(*args)

def GetDegCnt_PDirNet(*args):
    """
    GetDegCnt_PDirNet(PDirNet Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    DegToCntV: TIntPr64V &

    GetDegCnt_PDirNet(PDirNet Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetDegCnt_PDirNet(*args)

def GetDegSeqV_PDirNet(*args):
    """
    GetDegSeqV_PDirNet(PDirNet Graph, TInt64V DegV)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    DegV: TInt64V &

    GetDegSeqV_PDirNet(PDirNet Graph, TInt64V InDegV, TInt64V OutDegV)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    InDegV: TInt64V &
    OutDegV: TInt64V &

    """
    return _SnapTime.GetDegSeqV_PDirNet(*args)

def GetNodeInDegV_PDirNet(Graph, NIdInDegV):
    """
    GetNodeInDegV_PDirNet(PDirNet Graph, TIntPr64V NIdInDegV)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NIdInDegV: TIntPr64V &

    """
    return _SnapTime.GetNodeInDegV_PDirNet(Graph, NIdInDegV)

def GetNodeOutDegV_PDirNet(Graph, NIdOutDegV):
    """
    GetNodeOutDegV_PDirNet(PDirNet Graph, TIntPr64V NIdOutDegV)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NIdOutDegV: TIntPr64V &

    """
    return _SnapTime.GetNodeOutDegV_PDirNet(Graph, NIdOutDegV)

def CntUniqUndirEdges_PDirNet(Graph):
    """
    CntUniqUndirEdges_PDirNet(PDirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.CntUniqUndirEdges_PDirNet(Graph)

def CntUniqDirEdges_PDirNet(Graph):
    """
    CntUniqDirEdges_PDirNet(PDirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.CntUniqDirEdges_PDirNet(Graph)

def CntUniqBiDirEdges_PDirNet(Graph):
    """
    CntUniqBiDirEdges_PDirNet(PDirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.CntUniqBiDirEdges_PDirNet(Graph)

def CntSelfEdges_PDirNet(Graph):
    """
    CntSelfEdges_PDirNet(PDirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.CntSelfEdges_PDirNet(Graph)

def GetUnDir_PDirNet(Graph):
    """
    GetUnDir_PDirNet(PDirNet Graph) -> PDirNet

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.GetUnDir_PDirNet(Graph)

def MakeUnDir_PDirNet(Graph):
    """
    MakeUnDir_PDirNet(PDirNet Graph)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.MakeUnDir_PDirNet(Graph)

def AddSelfEdges_PDirNet(Graph):
    """
    AddSelfEdges_PDirNet(PDirNet Graph)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.AddSelfEdges_PDirNet(Graph)

def DelSelfEdges_PDirNet(Graph):
    """
    DelSelfEdges_PDirNet(PDirNet Graph)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.DelSelfEdges_PDirNet(Graph)

def DelNodes_PDirNet(Graph, NIdV):
    """
    DelNodes_PDirNet(PDirNet Graph, TInt64V NIdV)

    Parameters
    ----------
    Graph: TPt< TDirNet > &
    NIdV: TInt64V const &

    """
    return _SnapTime.DelNodes_PDirNet(Graph, NIdV)

def DelZeroDegNodes_PDirNet(Graph):
    """
    DelZeroDegNodes_PDirNet(PDirNet Graph)

    Parameters
    ----------
    Graph: TPt< TDirNet > &

    """
    return _SnapTime.DelZeroDegNodes_PDirNet(Graph)

def DelDegKNodes_PDirNet(Graph, OutDegK, InDegK):
    """
    DelDegKNodes_PDirNet(PDirNet Graph, int64 const & OutDegK, int64 const & InDegK)

    Parameters
    ----------
    Graph: TPt< TDirNet > &
    OutDegK: int64 const &
    InDegK: int64 const &

    """
    return _SnapTime.DelDegKNodes_PDirNet(Graph, OutDegK, InDegK)

def IsTree_PDirNet(Graph):
    """
    IsTree_PDirNet(PDirNet Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.IsTree_PDirNet(Graph)

def GetTreeRootNId_PDirNet(Graph):
    """
    GetTreeRootNId_PDirNet(PDirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.GetTreeRootNId_PDirNet(Graph)

def GetTreeSig_PDirNet(*args):
    """
    GetTreeSig_PDirNet(PDirNet Graph, int64 const & RootNId, TInt64V Sig)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    RootNId: int64 const &
    Sig: TInt64V &

    GetTreeSig_PDirNet(PDirNet Graph, int64 const & RootNId, TInt64V Sig, TIntPr64V NodeMap)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    RootNId: int64 const &
    Sig: TInt64V &
    NodeMap: TIntPr64V &

    """
    return _SnapTime.GetTreeSig_PDirNet(*args)

def GetBfsTree_PDirNet(Graph, StartNId, FollowOut, FollowIn):
    """
    GetBfsTree_PDirNet(PDirNet Graph, int64 const & StartNId, bool const & FollowOut, bool const & FollowIn) -> PNGraph

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    StartNId: int64 const &
    FollowOut: bool const &
    FollowIn: bool const &

    """
    return _SnapTime.GetBfsTree_PDirNet(Graph, StartNId, FollowOut, FollowIn)

def GetSubTreeSz_PDirNet(Graph, StartNId, FollowOut, FollowIn):
    """
    GetSubTreeSz_PDirNet(PDirNet Graph, int64 const & StartNId, bool const & FollowOut, bool const & FollowIn) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    StartNId: int64 const &
    FollowOut: bool const &
    FollowIn: bool const &

    """
    return _SnapTime.GetSubTreeSz_PDirNet(Graph, StartNId, FollowOut, FollowIn)

def GetNodesAtHop_PDirNet(Graph, StartNId, Hop, NIdV, IsDir=False):
    """
    GetNodesAtHop_PDirNet(PDirNet Graph, int64 const & StartNId, int64 const & Hop, TInt64V NIdV, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    StartNId: int64 const &
    Hop: int64 const &
    NIdV: TInt64V &
    IsDir: bool const &

    GetNodesAtHop_PDirNet(PDirNet Graph, int64 const & StartNId, int64 const & Hop, TInt64V NIdV) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    StartNId: int64 const &
    Hop: int64 const &
    NIdV: TInt64V &

    """
    return _SnapTime.GetNodesAtHop_PDirNet(Graph, StartNId, Hop, NIdV, IsDir)

def GetNodesAtHops_PDirNet(Graph, StartNId, HopCntV, IsDir=False):
    """
    GetNodesAtHops_PDirNet(PDirNet Graph, int64 const & StartNId, TIntPr64V HopCntV, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    StartNId: int64 const &
    HopCntV: TIntPr64V &
    IsDir: bool const &

    GetNodesAtHops_PDirNet(PDirNet Graph, int64 const & StartNId, TIntPr64V HopCntV) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    StartNId: int64 const &
    HopCntV: TIntPr64V &

    """
    return _SnapTime.GetNodesAtHops_PDirNet(Graph, StartNId, HopCntV, IsDir)

def GetShortPath_PDirNet(*args):
    """
    GetShortPath_PDirNet(PDirNet Graph, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    SrcNId: int64 const &
    DstNId: int64 const &
    IsDir: bool const &

    GetShortPath_PDirNet(PDirNet Graph, int64 const & SrcNId, int64 const & DstNId) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    SrcNId: int64 const &
    DstNId: int64 const &

    GetShortPath_PDirNet(PDirNet Graph, int64 const & SrcNId, TInt64H NIdToDistH, bool const & IsDir=False, int64 const & MaxDist) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &
    IsDir: bool const &
    MaxDist: int64 const &

    GetShortPath_PDirNet(PDirNet Graph, int64 const & SrcNId, TInt64H NIdToDistH, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &
    IsDir: bool const &

    GetShortPath_PDirNet(PDirNet Graph, int64 const & SrcNId, TInt64H NIdToDistH) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &

    """
    return _SnapTime.GetShortPath_PDirNet(*args)

def GetBfsFullDiam_PDirNet(Graph, NTestNodes, IsDir=False):
    """
    GetBfsFullDiam_PDirNet(PDirNet Graph, int64 const & NTestNodes, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsFullDiam_PDirNet(PDirNet Graph, int64 const & NTestNodes) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NTestNodes: int64 const &

    """
    return _SnapTime.GetBfsFullDiam_PDirNet(Graph, NTestNodes, IsDir)

def GetBfsEffDiam_PDirNet(*args):
    """
    GetBfsEffDiam_PDirNet(PDirNet Graph, int64 const & NTestNodes, bool const & IsDir, double & EffDiam, int64 & FullDiam) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NTestNodes: int64 const &
    IsDir: bool const &
    EffDiam: double &
    FullDiam: int64 &

    GetBfsEffDiam_PDirNet(PDirNet Graph, int64 const & NTestNodes, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsEffDiam_PDirNet(PDirNet Graph, int64 const & NTestNodes) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NTestNodes: int64 const &

    GetBfsEffDiam_PDirNet(PDirNet Graph, int64 const & NTestNodes, bool const & IsDir) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsEffDiam_PDirNet(PDirNet Graph, int64 const & NTestNodes, TInt64V SubGraphNIdV, bool const & IsDir) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NTestNodes: int64 const &
    SubGraphNIdV: TInt64V const &
    IsDir: bool const &

    """
    return _SnapTime.GetBfsEffDiam_PDirNet(*args)

def DrawGViz_PDirNet(*args):
    """
    DrawGViz_PDirNet(PDirNet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, bool const & NodeLabels=False, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &
    NIdColorH: TIntStr64H const &

    DrawGViz_PDirNet(PDirNet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, bool const & NodeLabels=False)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &

    DrawGViz_PDirNet(PDirNet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &

    DrawGViz_PDirNet(PDirNet Graph, TGVizLayout const & Layout, TStr PltFNm)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &

    DrawGViz_PDirNet(PDirNet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, TIntStr64H NodeLabelH)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabelH: TIntStr64H const &

    """
    return _SnapTime.DrawGViz_PDirNet(*args)

def GenGrid_PDirNet(Rows, Cols, IsDir=True):
    """
    GenGrid_PDirNet(int64 const & Rows, int64 const & Cols, bool const & IsDir=True) -> PDirNet

    Parameters
    ----------
    Rows: int64 const &
    Cols: int64 const &
    IsDir: bool const &

    GenGrid_PDirNet(int64 const & Rows, int64 const & Cols) -> PDirNet

    Parameters
    ----------
    Rows: int64 const &
    Cols: int64 const &

    """
    return _SnapTime.GenGrid_PDirNet(Rows, Cols, IsDir)

def GenStar_PDirNet(Nodes, IsDir=True):
    """
    GenStar_PDirNet(int64 const & Nodes, bool const & IsDir=True) -> PDirNet

    Parameters
    ----------
    Nodes: int64 const &
    IsDir: bool const &

    GenStar_PDirNet(int64 const & Nodes) -> PDirNet

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenStar_PDirNet(Nodes, IsDir)

def GenCircle_PDirNet(Nodes, NodeOutDeg=1, IsDir=True):
    """
    GenCircle_PDirNet(int64 const & Nodes, int64 const & NodeOutDeg=1, bool const & IsDir=True) -> PDirNet

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &
    IsDir: bool const &

    GenCircle_PDirNet(int64 const & Nodes, int64 const & NodeOutDeg=1) -> PDirNet

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &

    GenCircle_PDirNet(int64 const & Nodes) -> PDirNet

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenCircle_PDirNet(Nodes, NodeOutDeg, IsDir)

def GenFull_PDirNet(Nodes):
    """
    GenFull_PDirNet(int64 const & Nodes) -> PDirNet

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenFull_PDirNet(Nodes)

def GenTree_PDirNet(Fanout, Levels, IsDir=True, ChildPointsToParent=True):
    """
    GenTree_PDirNet(int64 const & Fanout, int64 const & Levels, bool const & IsDir=True, bool const & ChildPointsToParent=True) -> PDirNet

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &
    IsDir: bool const &
    ChildPointsToParent: bool const &

    GenTree_PDirNet(int64 const & Fanout, int64 const & Levels, bool const & IsDir=True) -> PDirNet

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &
    IsDir: bool const &

    GenTree_PDirNet(int64 const & Fanout, int64 const & Levels) -> PDirNet

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &

    """
    return _SnapTime.GenTree_PDirNet(Fanout, Levels, IsDir, ChildPointsToParent)

def GenBaraHierar_PDirNet(Levels, IsDir=True):
    """
    GenBaraHierar_PDirNet(int64 const & Levels, bool const & IsDir=True) -> PDirNet

    Parameters
    ----------
    Levels: int64 const &
    IsDir: bool const &

    GenBaraHierar_PDirNet(int64 const & Levels) -> PDirNet

    Parameters
    ----------
    Levels: int64 const &

    """
    return _SnapTime.GenBaraHierar_PDirNet(Levels, IsDir)

def GenRndGnm_PDirNet(*args):
    """
    GenRndGnm_PDirNet(int64 const & Nodes, int64 const & Edges, bool const & IsDir=True, TRnd Rnd) -> PDirNet

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &
    IsDir: bool const &
    Rnd: TRnd &

    GenRndGnm_PDirNet(int64 const & Nodes, int64 const & Edges, bool const & IsDir=True) -> PDirNet

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &
    IsDir: bool const &

    GenRndGnm_PDirNet(int64 const & Nodes, int64 const & Edges) -> PDirNet

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.GenRndGnm_PDirNet(*args)

def LoadEdgeList_PDirNet(*args):
    """
    LoadEdgeList_PDirNet(TStr InFNm, int64 const & SrcColId=0, int64 const & DstColId=1) -> PDirNet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &

    LoadEdgeList_PDirNet(TStr InFNm, int64 const & SrcColId=0) -> PDirNet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &

    LoadEdgeList_PDirNet(TStr InFNm) -> PDirNet

    Parameters
    ----------
    InFNm: TStr const &

    LoadEdgeList_PDirNet(TStr InFNm, int64 const & SrcColId, int64 const & DstColId, char const & Separator) -> PDirNet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &
    Separator: char const &

    """
    return _SnapTime.LoadEdgeList_PDirNet(*args)

def LoadEdgeListStr_PDirNet(*args):
    """
    LoadEdgeListStr_PDirNet(TStr InFNm, int64 const & SrcColId=0, int64 const & DstColId=1) -> PDirNet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &

    LoadEdgeListStr_PDirNet(TStr InFNm, int64 const & SrcColId=0) -> PDirNet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &

    LoadEdgeListStr_PDirNet(TStr InFNm) -> PDirNet

    Parameters
    ----------
    InFNm: TStr const &

    LoadEdgeListStr_PDirNet(TStr InFNm, int64 const & SrcColId, int64 const & DstColId, TStrInt64SH StrToNIdH) -> PDirNet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &
    StrToNIdH: TStrHash< TInt64,TStrPool,int64 > &

    """
    return _SnapTime.LoadEdgeListStr_PDirNet(*args)

def LoadConnList_PDirNet(InFNm):
    """
    LoadConnList_PDirNet(TStr InFNm) -> PDirNet

    Parameters
    ----------
    InFNm: TStr const &

    """
    return _SnapTime.LoadConnList_PDirNet(InFNm)

def LoadConnListStr_PDirNet(InFNm, StrToNIdH):
    """
    LoadConnListStr_PDirNet(TStr InFNm, TStrInt64SH StrToNIdH) -> PDirNet

    Parameters
    ----------
    InFNm: TStr const &
    StrToNIdH: TStrHash< TInt64,TStrPool,int64 > &

    """
    return _SnapTime.LoadConnListStr_PDirNet(InFNm, StrToNIdH)

def LoadPajek_PDirNet(InFNm):
    """
    LoadPajek_PDirNet(TStr InFNm) -> PDirNet

    Parameters
    ----------
    InFNm: TStr const &

    """
    return _SnapTime.LoadPajek_PDirNet(InFNm)

def SaveEdgeList_PDirNet(*args):
    """
    SaveEdgeList_PDirNet(PDirNet Graph, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    OutFNm: TStr const &
    Desc: TStr const &

    SaveEdgeList_PDirNet(PDirNet Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    OutFNm: TStr const &

    """
    return _SnapTime.SaveEdgeList_PDirNet(*args)

def SavePajek_PDirNet(*args):
    """
    SavePajek_PDirNet(PDirNet Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    OutFNm: TStr const &

    SavePajek_PDirNet(PDirNet Graph, TStr OutFNm, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &

    SavePajek_PDirNet(PDirNet Graph, TStr OutFNm, TIntStr64H NIdColorH, TIntStr64H NIdLabelH)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &
    NIdLabelH: TIntStr64H const &

    SavePajek_PDirNet(PDirNet Graph, TStr OutFNm, TIntStr64H NIdColorH, TIntStr64H NIdLabelH, TIntStr64H EIdColorH)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &
    NIdLabelH: TIntStr64H const &
    EIdColorH: TIntStr64H const &

    """
    return _SnapTime.SavePajek_PDirNet(*args)

def SaveMatlabSparseMtx_PDirNet(Graph, OutFNm):
    """
    SaveMatlabSparseMtx_PDirNet(PDirNet Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    OutFNm: TStr const &

    """
    return _SnapTime.SaveMatlabSparseMtx_PDirNet(Graph, OutFNm)

def SaveGViz_PDirNet(*args):
    """
    SaveGViz_PDirNet(PDirNet Graph, TStr OutFNm, TStr Desc, bool const & NodeLabels=False, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &
    NIdColorH: TIntStr64H const &

    SaveGViz_PDirNet(PDirNet Graph, TStr OutFNm, TStr Desc, bool const & NodeLabels=False)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &

    SaveGViz_PDirNet(PDirNet Graph, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    OutFNm: TStr const &
    Desc: TStr const &

    SaveGViz_PDirNet(PDirNet Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    OutFNm: TStr const &

    SaveGViz_PDirNet(PDirNet Graph, TStr OutFNm, TStr Desc, TIntStr64H NIdLabelH)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NIdLabelH: TIntStr64H const &

    """
    return _SnapTime.SaveGViz_PDirNet(*args)

def GetKCore_PDirNet(Graph, K):
    """
    GetKCore_PDirNet(PDirNet Graph, int64 const & K) -> PDirNet

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    K: int64 const &

    """
    return _SnapTime.GetKCore_PDirNet(Graph, K)

def GetKCoreEdges_PDirNet(Graph, CoreIdSzV):
    """
    GetKCoreEdges_PDirNet(PDirNet Graph, TIntPr64V CoreIdSzV) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    CoreIdSzV: TIntPr64V &

    """
    return _SnapTime.GetKCoreEdges_PDirNet(Graph, CoreIdSzV)

def GetKCoreNodes_PDirNet(Graph, CoreIdSzV):
    """
    GetKCoreNodes_PDirNet(PDirNet Graph, TIntPr64V CoreIdSzV) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    CoreIdSzV: TIntPr64V &

    """
    return _SnapTime.GetKCoreNodes_PDirNet(Graph, CoreIdSzV)

def ConvertGraph_PDirNet_PUNGraph(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PDirNet_PUNGraph(PUNGraph InGraph, bool const & RenumberNodes=False) -> PDirNet

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &
    RenumberNodes: bool const &

    ConvertGraph_PDirNet_PUNGraph(PUNGraph InGraph) -> PDirNet

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &

    """
    return _SnapTime.ConvertGraph_PDirNet_PUNGraph(InGraph, RenumberNodes)

def ConvertGraph_PDirNet_PDirNet(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PDirNet_PDirNet(PDirNet InGraph, bool const & RenumberNodes=False) -> PDirNet

    Parameters
    ----------
    InGraph: TPt< TDirNet > const &
    RenumberNodes: bool const &

    ConvertGraph_PDirNet_PDirNet(PDirNet InGraph) -> PDirNet

    Parameters
    ----------
    InGraph: TPt< TDirNet > const &

    """
    return _SnapTime.ConvertGraph_PDirNet_PDirNet(InGraph, RenumberNodes)

def ConvertGraph_PDirNet_PNEANet(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PDirNet_PNEANet(PNEANet InGraph, bool const & RenumberNodes=False) -> PDirNet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    RenumberNodes: bool const &

    ConvertGraph_PDirNet_PNEANet(PNEANet InGraph) -> PDirNet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &

    """
    return _SnapTime.ConvertGraph_PDirNet_PNEANet(InGraph, RenumberNodes)

def ConvertSubGraph_PDirNet_PUNGraph(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PDirNet_PUNGraph(PUNGraph InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PDirNet

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PDirNet_PUNGraph(PUNGraph InGraph, TInt64V NIdV) -> PDirNet

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PDirNet_PUNGraph(InGraph, NIdV, RenumberNodes)

def ConvertSubGraph_PDirNet_PDirNet(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PDirNet_PDirNet(PDirNet InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PDirNet

    Parameters
    ----------
    InGraph: TPt< TDirNet > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PDirNet_PDirNet(PDirNet InGraph, TInt64V NIdV) -> PDirNet

    Parameters
    ----------
    InGraph: TPt< TDirNet > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PDirNet_PDirNet(InGraph, NIdV, RenumberNodes)

def ConvertSubGraph_PDirNet_PNEANet(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PDirNet_PNEANet(PNEANet InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PDirNet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PDirNet_PNEANet(PNEANet InGraph, TInt64V NIdV) -> PDirNet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PDirNet_PNEANet(InGraph, NIdV, RenumberNodes)

def ConvertESubGraph_PDirNet_PNEANet(InGraph, EIdV, RenumberNodes=False):
    """
    ConvertESubGraph_PDirNet_PNEANet(PNEANet InGraph, TInt64V EIdV, bool const & RenumberNodes=False) -> PDirNet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    EIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertESubGraph_PDirNet_PNEANet(PNEANet InGraph, TInt64V EIdV) -> PDirNet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    EIdV: TInt64V const &

    """
    return _SnapTime.ConvertESubGraph_PDirNet_PNEANet(InGraph, EIdV, RenumberNodes)

def GetSubGraph_PDirNet(Graph, NIdV):
    """
    GetSubGraph_PDirNet(PDirNet Graph, TInt64V NIdV) -> PDirNet

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.GetSubGraph_PDirNet(Graph, NIdV)

def GetRndSubGraph_PDirNet(Graph, NNodes):
    """
    GetRndSubGraph_PDirNet(PDirNet Graph, int64 const & NNodes) -> PDirNet

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NNodes: int64 const &

    """
    return _SnapTime.GetRndSubGraph_PDirNet(Graph, NNodes)

def GetRndESubGraph_PDirNet(Graph, NEdges):
    """
    GetRndESubGraph_PDirNet(PDirNet Graph, int64 const & NEdges) -> PDirNet

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NEdges: int64 const &

    """
    return _SnapTime.GetRndESubGraph_PDirNet(Graph, NEdges)

def GetClustCf_PDirNet(*args):
    """
    GetClustCf_PDirNet(PDirNet Graph, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    SampleNodes: int64

    GetClustCf_PDirNet(PDirNet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    GetClustCf_PDirNet(PDirNet Graph, TFltPr64V DegToCCfV, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    DegToCCfV: TFltPr64V &
    SampleNodes: int64

    GetClustCf_PDirNet(PDirNet Graph, TFltPr64V DegToCCfV) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    DegToCCfV: TFltPr64V &

    GetClustCf_PDirNet(PDirNet Graph, TFltPr64V DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    DegToCCfV: TFltPr64V &
    ClosedTriadsX: int64 &
    OpenTriadsX: int64 &
    SampleNodes: int64

    GetClustCf_PDirNet(PDirNet Graph, TFltPr64V DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    DegToCCfV: TFltPr64V &
    ClosedTriadsX: int64 &
    OpenTriadsX: int64 &

    """
    return _SnapTime.GetClustCf_PDirNet(*args)

def GetNodeClustCf_PDirNet(*args):
    """
    GetNodeClustCf_PDirNet(PDirNet Graph, int64 const & NId) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NId: int64 const &

    GetNodeClustCf_PDirNet(PDirNet Graph, TIntFlt64H NIdCCfH)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NIdCCfH: TIntFlt64H &

    """
    return _SnapTime.GetNodeClustCf_PDirNet(*args)

def GetTriads_PDirNet(*args):
    """
    GetTriads_PDirNet(PDirNet Graph, int64 & ClosedTriads, int64 & OpenTriads, int64 SampleNodes=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    ClosedTriads: int64 &
    OpenTriads: int64 &
    SampleNodes: int64

    GetTriads_PDirNet(PDirNet Graph, int64 & ClosedTriads, int64 & OpenTriads) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    ClosedTriads: int64 &
    OpenTriads: int64 &

    GetTriads_PDirNet(PDirNet Graph, int64 SampleNodes=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    SampleNodes: int64

    GetTriads_PDirNet(PDirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    GetTriads_PDirNet(PDirNet Graph, TIntTr64V & NIdCOTriadV, int64 SampleNodes=-1)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NIdCOTriadV: TIntTr64V &
    SampleNodes: int64

    GetTriads_PDirNet(PDirNet Graph, TIntTr64V & NIdCOTriadV)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NIdCOTriadV: TIntTr64V &

    """
    return _SnapTime.GetTriads_PDirNet(*args)

def GetTriadEdges_PDirNet(Graph, SampleEdges=-1):
    """
    GetTriadEdges_PDirNet(PDirNet Graph, int64 SampleEdges=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    SampleEdges: int64

    GetTriadEdges_PDirNet(PDirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.GetTriadEdges_PDirNet(Graph, SampleEdges)

def GetNodeTriads_PDirNet(*args):
    """
    GetNodeTriads_PDirNet(PDirNet Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NId: int64 const &

    GetNodeTriads_PDirNet(PDirNet Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NId: int64 const &

    GetNodeTriads_PDirNet(PDirNet Graph, int64 const & NId, TInt64Set GroupSet, int64 & OutGroupEdgesX) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NId: int64 const &
    GroupSet: TInt64Set const &
    OutGroupEdgesX: int64 &

    """
    return _SnapTime.GetNodeTriads_PDirNet(*args)

def GetTriadParticip_PDirNet(Graph, TriadCntV):
    """
    GetTriadParticip_PDirNet(PDirNet Graph, TIntPr64V TriadCntV)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    TriadCntV: TIntPr64V &

    """
    return _SnapTime.GetTriadParticip_PDirNet(Graph, TriadCntV)

def GetTriangleCnt_PDirNet(Graph):
    """
    GetTriangleCnt_PDirNet(PDirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.GetTriangleCnt_PDirNet(Graph)

def GetCmnNbrs_PDirNet(*args):
    """
    GetCmnNbrs_PDirNet(PDirNet Graph, int64 const & NId1, int64 const & NId2) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NId1: int64 const &
    NId2: int64 const &

    GetCmnNbrs_PDirNet(PDirNet Graph, int64 const & NId1, int64 const & NId2, TInt64V NbrV) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NId1: int64 const &
    NId2: int64 const &
    NbrV: TInt64V &

    """
    return _SnapTime.GetCmnNbrs_PDirNet(*args)

def GetModularity_PDirNet(*args):
    """
    GetModularity_PDirNet(PDirNet G, TInt64V NIdV, int64 GEdges=-1) -> double

    Parameters
    ----------
    G: TPt< TDirNet > const &
    NIdV: TInt64V const &
    GEdges: int64

    GetModularity_PDirNet(PDirNet G, TInt64V NIdV) -> double

    Parameters
    ----------
    G: TPt< TDirNet > const &
    NIdV: TInt64V const &

    GetModularity_PDirNet(PDirNet G, TCnComV CmtyV, int64 GEdges=-1) -> double

    Parameters
    ----------
    G: TPt< TDirNet > const &
    CmtyV: TCnComV const &
    GEdges: int64

    GetModularity_PDirNet(PDirNet G, TCnComV CmtyV) -> double

    Parameters
    ----------
    G: TPt< TDirNet > const &
    CmtyV: TCnComV const &

    """
    return _SnapTime.GetModularity_PDirNet(*args)

def GetEdgesInOut_PDirNet(Graph, NIdV):
    """
    GetEdgesInOut_PDirNet(PDirNet Graph, TInt64V NIdV)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.GetEdgesInOut_PDirNet(Graph, NIdV)

def GetAnf_PDirNet(*args):
    """
    GetAnf_PDirNet(PDirNet Graph, int64 const & SrcNId, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir, int64 const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    SrcNId: int64 const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &
    NApprox: int64 const &

    GetAnf_PDirNet(PDirNet Graph, int64 const & SrcNId, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    SrcNId: int64 const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &

    GetAnf_PDirNet(PDirNet Graph, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir, int64 const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &
    NApprox: int64 const &

    GetAnf_PDirNet(PDirNet Graph, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &

    """
    return _SnapTime.GetAnf_PDirNet(*args)

def GetAnfEffDiam_PDirNet(*args):
    """
    GetAnfEffDiam_PDirNet(PDirNet Graph, bool const & IsDir, double const & Percentile, int64 const & NApprox) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    IsDir: bool const &
    Percentile: double const &
    NApprox: int64 const &

    GetAnfEffDiam_PDirNet(PDirNet Graph, int64 const NRuns=1, int64 NApprox=-1) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NRuns: int64 const
    NApprox: int64

    GetAnfEffDiam_PDirNet(PDirNet Graph, int64 const NRuns=1) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    NRuns: int64 const

    GetAnfEffDiam_PDirNet(PDirNet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.GetAnfEffDiam_PDirNet(*args)

def TestAnf_PDirNet():
    """TestAnf_PDirNet()"""
    return _SnapTime.TestAnf_PDirNet()

def PlotKCoreEdges_PDirNet(*args):
    """
    PlotKCoreEdges_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotKCoreEdges_PDirNet(PDirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotKCoreEdges_PDirNet(*args)

def PlotKCoreNodes_PDirNet(*args):
    """
    PlotKCoreNodes_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotKCoreNodes_PDirNet(PDirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotKCoreNodes_PDirNet(*args)

def PlotShortPathDistr_PDirNet(*args):
    """
    PlotShortPathDistr_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr, int TestNodes)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr
    TestNodes: int

    PlotShortPathDistr_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotShortPathDistr_PDirNet(PDirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotShortPathDistr_PDirNet(*args)

def PlotHops_PDirNet(*args):
    """
    PlotHops_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr, bool const & IsDir=False, int const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr
    IsDir: bool const &
    NApprox: int const &

    PlotHops_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr
    IsDir: bool const &

    PlotHops_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotHops_PDirNet(PDirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotHops_PDirNet(*args)

def PlotClustCf_PDirNet(*args):
    """
    PlotClustCf_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotClustCf_PDirNet(PDirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotClustCf_PDirNet(*args)

def PlotSccDistr_PDirNet(*args):
    """
    PlotSccDistr_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotSccDistr_PDirNet(PDirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotSccDistr_PDirNet(*args)

def PlotWccDistr_PDirNet(*args):
    """
    PlotWccDistr_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotWccDistr_PDirNet(PDirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotWccDistr_PDirNet(*args)

def PlotOutDegDistr_PDirNet(*args):
    """
    PlotOutDegDistr_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &
    PowerFit: bool const &

    PlotOutDegDistr_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &

    PlotOutDegDistr_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotOutDegDistr_PDirNet(PDirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotOutDegDistr_PDirNet(*args)

def PlotInDegDistr_PDirNet(*args):
    """
    PlotInDegDistr_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &
    PowerFit: bool const &

    PlotInDegDistr_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &

    PlotInDegDistr_PDirNet(PDirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotInDegDistr_PDirNet(PDirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotInDegDistr_PDirNet(*args)

def PercentDegree_PDirNet(Graph, Threshold=0):
    """
    PercentDegree_PDirNet(PDirNet Graph, int64 const Threshold=0) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    Threshold: int64 const

    PercentDegree_PDirNet(PDirNet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.PercentDegree_PDirNet(Graph, Threshold)

def NodesGTEDegree_PDirNet(Graph, Threshold=0):
    """
    NodesGTEDegree_PDirNet(PDirNet Graph, int64 const Threshold=0) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &
    Threshold: int64 const

    NodesGTEDegree_PDirNet(PDirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.NodesGTEDegree_PDirNet(Graph, Threshold)

def MxDegree_PDirNet(Graph):
    """
    MxDegree_PDirNet(PDirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.MxDegree_PDirNet(Graph)

def PercentMxWcc_PDirNet(Graph):
    """
    PercentMxWcc_PDirNet(PDirNet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.PercentMxWcc_PDirNet(Graph)

def PercentMxScc_PDirNet(Graph):
    """
    PercentMxScc_PDirNet(PDirNet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TDirNet > const &

    """
    return _SnapTime.PercentMxScc_PDirNet(Graph)

def ToGraph_PDirNet(Table, SrcCol, DstCol, AggrPolicy):
    """
    ToGraph_PDirNet(PTable Table, TStr SrcCol, TStr DstCol, TAttrAggr AggrPolicy) -> PDirNet

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    AggrPolicy: enum TAttrAggr

    """
    return _SnapTime.ToGraph_PDirNet(Table, SrcCol, DstCol, AggrPolicy)

# redefine TUndirNetEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TUndirNetEdgeI.GetId = GetId


def PrintGraphStatTable_PUndirNet(*args):
    """
    PrintGraphStatTable_PUndirNet(PUndirNet G, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    G: TPt< TUndirNet > const &
    OutFNm: TStr
    Desc: TStr

    PrintGraphStatTable_PUndirNet(PUndirNet G, TStr OutFNm)

    Parameters
    ----------
    G: TPt< TUndirNet > const &
    OutFNm: TStr

    """
    return _SnapTime.PrintGraphStatTable_PUndirNet(*args)
class PUndirNet(object):
    """Proxy of C++ TPt<(TUndirNet)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> PUndirNet"""
        return _SnapTime.PUndirNet_New()

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_PUndirNet

    def Save(self, SOut):
        """
        Save(PUndirNet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.PUndirNet_Save(self, SOut)


    def __deref__(self):
        """
        __deref__(PUndirNet self) -> TUndirNet

        Parameters
        ----------
        self: TPt< TUndirNet > const *

        """
        return _SnapTime.PUndirNet___deref__(self)


    def __ref__(self):
        """
        __ref__(PUndirNet self) -> TUndirNet

        Parameters
        ----------
        self: TPt< TUndirNet > const *

        """
        return _SnapTime.PUndirNet___ref__(self)


    def __call__(self):
        """
        __call__(PUndirNet self) -> TUndirNet

        Parameters
        ----------
        self: TPt< TUndirNet > const *

        """
        return _SnapTime.PUndirNet___call__(self)


    def Empty(self):
        """
        Empty(PUndirNet self) -> bool

        Parameters
        ----------
        self: TPt< TUndirNet > const *

        """
        return _SnapTime.PUndirNet_Empty(self)


    def Clr(self):
        """
        Clr(PUndirNet self)

        Parameters
        ----------
        self: TPt< TUndirNet > *

        """
        return _SnapTime.PUndirNet_Clr(self)


    def GetRefs(self):
        """
        GetRefs(PUndirNet self) -> int64

        Parameters
        ----------
        self: TPt< TUndirNet > const *

        """
        return _SnapTime.PUndirNet_GetRefs(self)


    def Save_V1(self, SOut):
        """
        Save_V1(PUndirNet self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.PUndirNet_Save_V1(self, SOut)


    def Load(self, SIn):
        """
        Load(PUndirNet self, TSIn SIn) -> PUndirNet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.PUndirNet_Load(self, SIn)


    def Load_V1(self, SIn):
        """
        Load_V1(PUndirNet self, TSIn SIn) -> PUndirNet

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.PUndirNet_Load_V1(self, SIn)


    def LoadShM(self, ShMIn):
        """
        LoadShM(PUndirNet self, TShMIn ShMIn) -> PUndirNet

        Parameters
        ----------
        ShMIn: TShMIn &

        """
        return _SnapTime.PUndirNet_LoadShM(self, ShMIn)


    def HasFlag(self, Flag):
        """
        HasFlag(PUndirNet self, TGraphFlag const & Flag) -> bool

        Parameters
        ----------
        Flag: TGraphFlag const &

        """
        return _SnapTime.PUndirNet_HasFlag(self, Flag)


    def GetNodes(self):
        """
        GetNodes(PUndirNet self) -> int64

        Parameters
        ----------
        self: TPt< TUndirNet > const *

        """
        return _SnapTime.PUndirNet_GetNodes(self)


    def AddNode(self, *args):
        """
        AddNode(PUndirNet self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(PUndirNet self) -> int64
        AddNode(PUndirNet self, TUndirNet::TNodeI const & NodeI) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &

        AddNode(PUndirNet self, int64 const & NId, TInt64V NbrNIdV) -> int64

        Parameters
        ----------
        NId: int64 const &
        NbrNIdV: TInt64V const &

        AddNode(PUndirNet self, int64 const & NId, TVecPool< TInt64,int64 > const & Pool, int64 const & NIdVId) -> int64

        Parameters
        ----------
        NId: int64 const &
        Pool: TVecPool< TInt64,int64 > const &
        NIdVId: int64 const &

        """
        return _SnapTime.PUndirNet_AddNode(self, *args)


    def AddNodeUnchecked(self, NId=-1):
        """
        AddNodeUnchecked(PUndirNet self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNodeUnchecked(PUndirNet self) -> int64

        Parameters
        ----------
        self: TPt< TUndirNet > *

        """
        return _SnapTime.PUndirNet_AddNodeUnchecked(self, NId)


    def DelNode(self, *args):
        """
        DelNode(PUndirNet self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        DelNode(PUndirNet self, TUndirNet::TNode const & NodeI)

        Parameters
        ----------
        NodeI: TUndirNet::TNode const &

        """
        return _SnapTime.PUndirNet_DelNode(self, *args)


    def IsNode(self, NId):
        """
        IsNode(PUndirNet self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.PUndirNet_IsNode(self, NId)


    def BegNI(self, *args):
        """
        BegNI(PUndirNet self) -> TUndirNet::TNodeI
        BegNI(PUndirNet self) -> TUndirNetNodeI

        Parameters
        ----------
        self: TPt< TUndirNet > *

        """
        return _SnapTime.PUndirNet_BegNI(self, *args)


    def EndNI(self, *args):
        """
        EndNI(PUndirNet self) -> TUndirNet::TNodeI
        EndNI(PUndirNet self) -> TUndirNetNodeI

        Parameters
        ----------
        self: TPt< TUndirNet > *

        """
        return _SnapTime.PUndirNet_EndNI(self, *args)


    def GetNI(self, *args):
        """
        GetNI(PUndirNet self, int64 const & NId) -> TUndirNet::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetNI(PUndirNet self, int64 const & NId) -> TUndirNetNodeI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.PUndirNet_GetNI(self, *args)


    def GetMxNId(self):
        """
        GetMxNId(PUndirNet self) -> int64

        Parameters
        ----------
        self: TPt< TUndirNet > const *

        """
        return _SnapTime.PUndirNet_GetMxNId(self)


    def GetEdges(self):
        """
        GetEdges(PUndirNet self) -> int64

        Parameters
        ----------
        self: TPt< TUndirNet > const *

        """
        return _SnapTime.PUndirNet_GetEdges(self)


    def AddEdge(self, *args):
        """
        AddEdge(PUndirNet self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        AddEdge(PUndirNet self, TUndirNet::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &

        """
        return _SnapTime.PUndirNet_AddEdge(self, *args)


    def AddEdgeUnchecked(self, SrcNId, DstNId):
        """
        AddEdgeUnchecked(PUndirNet self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PUndirNet_AddEdgeUnchecked(self, SrcNId, DstNId)


    def DelEdge(self, SrcNId, DstNId):
        """
        DelEdge(PUndirNet self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PUndirNet_DelEdge(self, SrcNId, DstNId)


    def IsEdge(self, SrcNId, DstNId):
        """
        IsEdge(PUndirNet self, int64 const & SrcNId, int64 const & DstNId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PUndirNet_IsEdge(self, SrcNId, DstNId)


    def BegEI(self, *args):
        """
        BegEI(PUndirNet self) -> TUndirNet::TEdgeI
        BegEI(PUndirNet self) -> TUndirNetEdgeI

        Parameters
        ----------
        self: TPt< TUndirNet > *

        """
        return _SnapTime.PUndirNet_BegEI(self, *args)


    def EndEI(self, *args):
        """
        EndEI(PUndirNet self) -> TUndirNet::TEdgeI
        EndEI(PUndirNet self) -> TUndirNetEdgeI

        Parameters
        ----------
        self: TPt< TUndirNet > *

        """
        return _SnapTime.PUndirNet_EndEI(self, *args)


    def GetEI(self, SrcNId, DstNId):
        """
        GetEI(PUndirNet self, int64 const & SrcNId, int64 const & DstNId) -> TUndirNet::TEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PUndirNet_GetEI(self, SrcNId, DstNId)


    def GetRndNId(self, *args):
        """
        GetRndNId(PUndirNet self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(PUndirNet self) -> int64

        Parameters
        ----------
        self: TPt< TUndirNet > *

        """
        return _SnapTime.PUndirNet_GetRndNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(PUndirNet self, TRnd Rnd) -> TUndirNet::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(PUndirNet self) -> TUndirNet::TNodeI

        Parameters
        ----------
        self: TPt< TUndirNet > *

        """
        return _SnapTime.PUndirNet_GetRndNI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(PUndirNet self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.PUndirNet_GetNIdV(self, NIdV)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(PUndirNet self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.PUndirNet_Reserve(self, Nodes, Edges)


    def ReserveNIdDeg(self, NId, Deg):
        """
        ReserveNIdDeg(PUndirNet self, int64 const & NId, int64 const & Deg)

        Parameters
        ----------
        NId: int64 const &
        Deg: int64 const &

        """
        return _SnapTime.PUndirNet_ReserveNIdDeg(self, NId, Deg)


    def SortNodeAdjV(self):
        """
        SortNodeAdjV(PUndirNet self)

        Parameters
        ----------
        self: TPt< TUndirNet > *

        """
        return _SnapTime.PUndirNet_SortNodeAdjV(self)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(PUndirNet self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(PUndirNet self)

        Parameters
        ----------
        self: TPt< TUndirNet > *

        """
        return _SnapTime.PUndirNet_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(PUndirNet self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(PUndirNet self) -> bool

        Parameters
        ----------
        self: TPt< TUndirNet > const *

        """
        return _SnapTime.PUndirNet_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(PUndirNet self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(PUndirNet self)

        Parameters
        ----------
        self: TPt< TUndirNet > const *

        """
        return _SnapTime.PUndirNet_Dump(self, *args)


    def GetSmallGraph(self):
        """
        GetSmallGraph(PUndirNet self) -> PUndirNet

        Parameters
        ----------
        self: TPt< TUndirNet > *

        """
        return _SnapTime.PUndirNet_GetSmallGraph(self)


    def AddSAttrDatN(self, *args):
        """
        AddSAttrDatN(PUndirNet self, TInt64 NId, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatN(PUndirNet self, TInt64 NId, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatN(PUndirNet self, TUndirNet::TNodeI const & NodeI, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatN(PUndirNet self, TUndirNet::TNodeI const & NodeI, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatN(PUndirNet self, TInt64 NId, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatN(PUndirNet self, TInt64 NId, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatN(PUndirNet self, TUndirNet::TNodeI const & NodeI, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatN(PUndirNet self, TUndirNet::TNodeI const & NodeI, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatN(PUndirNet self, TInt64 NId, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatN(PUndirNet self, TInt64 NId, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        Val: TStr const &

        AddSAttrDatN(PUndirNet self, TUndirNet::TNodeI const & NodeI, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatN(PUndirNet self, TUndirNet::TNodeI const & NodeI, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrId: TInt64 const &
        Val: TStr const &

        """
        return _SnapTime.PUndirNet_AddSAttrDatN(self, *args)


    def GetSAttrDatN(self, *args):
        """
        GetSAttrDatN(PUndirNet self, TInt64 NId, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatN(PUndirNet self, TInt64 NId, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatN(PUndirNet self, TUndirNet::TNodeI const & NodeI, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatN(PUndirNet self, TUndirNet::TNodeI const & NodeI, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatN(PUndirNet self, TInt64 NId, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatN(PUndirNet self, TInt64 NId, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatN(PUndirNet self, TUndirNet::TNodeI const & NodeI, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatN(PUndirNet self, TUndirNet::TNodeI const & NodeI, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatN(PUndirNet self, TInt64 NId, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatN(PUndirNet self, TInt64 NId, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &
        ValX: TStr &

        GetSAttrDatN(PUndirNet self, TUndirNet::TNodeI const & NodeI, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatN(PUndirNet self, TUndirNet::TNodeI const & NodeI, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrId: TInt64 const &
        ValX: TStr &

        """
        return _SnapTime.PUndirNet_GetSAttrDatN(self, *args)


    def DelSAttrDatN(self, *args):
        """
        DelSAttrDatN(PUndirNet self, TInt64 NId, TStr AttrName) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrName: TStr const &

        DelSAttrDatN(PUndirNet self, TInt64 NId, TInt64 AttrId) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrId: TInt64 const &

        DelSAttrDatN(PUndirNet self, TUndirNet::TNodeI const & NodeI, TStr AttrName) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrName: TStr const &

        DelSAttrDatN(PUndirNet self, TUndirNet::TNodeI const & NodeI, TInt64 AttrId) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrId: TInt64 const &

        """
        return _SnapTime.PUndirNet_DelSAttrDatN(self, *args)


    def GetSAttrVN(self, *args):
        """
        GetSAttrVN(PUndirNet self, TInt64 NId, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        NId: TInt64 const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        GetSAttrVN(PUndirNet self, TUndirNet::TNodeI const & NodeI, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        """
        return _SnapTime.PUndirNet_GetSAttrVN(self, *args)


    def GetIdVSAttrN(self, *args):
        """
        GetIdVSAttrN(PUndirNet self, TStr AttrName, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrName: TStr const &
        IdV: TInt64V &

        GetIdVSAttrN(PUndirNet self, TInt64 AttrId, TInt64V IdV) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        IdV: TInt64V &

        """
        return _SnapTime.PUndirNet_GetIdVSAttrN(self, *args)


    def AddSAttrN(self, Name, AttrType, AttrId):
        """
        AddSAttrN(PUndirNet self, TStr Name, TAttrType const & AttrType, TInt64 AttrId) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrType: TAttrType const &
        AttrId: TInt64 &

        """
        return _SnapTime.PUndirNet_AddSAttrN(self, Name, AttrType, AttrId)


    def GetSAttrIdN(self, Name, AttrIdX, AttrTypeX):
        """
        GetSAttrIdN(PUndirNet self, TStr Name, TInt64 AttrIdX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrIdX: TInt64 &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.PUndirNet_GetSAttrIdN(self, Name, AttrIdX, AttrTypeX)


    def GetSAttrNameN(self, AttrId, NameX, AttrTypeX):
        """
        GetSAttrNameN(PUndirNet self, TInt64 AttrId, TStr NameX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        NameX: TStr &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.PUndirNet_GetSAttrNameN(self, AttrId, NameX, AttrTypeX)


    def AddSAttrDatE(self, *args):
        """
        AddSAttrDatE(PUndirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatE(PUndirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatE(PUndirNet self, TUndirNet::TEdgeI const & EdgeI, TStr AttrName, TInt64 Val) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrName: TStr const &
        Val: TInt64 const &

        AddSAttrDatE(PUndirNet self, TUndirNet::TEdgeI const & EdgeI, TInt64 AttrId, TInt64 Val) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TInt64 const &

        AddSAttrDatE(PUndirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatE(PUndirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatE(PUndirNet self, TUndirNet::TEdgeI const & EdgeI, TStr AttrName, TFlt Val) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrName: TStr const &
        Val: TFlt const &

        AddSAttrDatE(PUndirNet self, TUndirNet::TEdgeI const & EdgeI, TInt64 AttrId, TFlt Val) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TFlt const &

        AddSAttrDatE(PUndirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatE(PUndirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        Val: TStr const &

        AddSAttrDatE(PUndirNet self, TUndirNet::TEdgeI const & EdgeI, TStr AttrName, TStr Val) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrName: TStr const &
        Val: TStr const &

        AddSAttrDatE(PUndirNet self, TUndirNet::TEdgeI const & EdgeI, TInt64 AttrId, TStr Val) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrId: TInt64 const &
        Val: TStr const &

        """
        return _SnapTime.PUndirNet_AddSAttrDatE(self, *args)


    def GetSAttrDatE(self, *args):
        """
        GetSAttrDatE(PUndirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatE(PUndirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatE(PUndirNet self, TUndirNet::TEdgeI const & EdgeI, TStr AttrName, TInt64 ValX) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrName: TStr const &
        ValX: TInt64 &

        GetSAttrDatE(PUndirNet self, TUndirNet::TEdgeI const & EdgeI, TInt64 AttrId, TInt64 ValX) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TInt64 &

        GetSAttrDatE(PUndirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatE(PUndirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatE(PUndirNet self, TUndirNet::TEdgeI const & EdgeI, TStr AttrName, TFlt ValX) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrName: TStr const &
        ValX: TFlt &

        GetSAttrDatE(PUndirNet self, TUndirNet::TEdgeI const & EdgeI, TInt64 AttrId, TFlt ValX) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TFlt &

        GetSAttrDatE(PUndirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatE(PUndirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &
        ValX: TStr &

        GetSAttrDatE(PUndirNet self, TUndirNet::TEdgeI const & EdgeI, TStr AttrName, TStr ValX) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrName: TStr const &
        ValX: TStr &

        GetSAttrDatE(PUndirNet self, TUndirNet::TEdgeI const & EdgeI, TInt64 AttrId, TStr ValX) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrId: TInt64 const &
        ValX: TStr &

        """
        return _SnapTime.PUndirNet_GetSAttrDatE(self, *args)


    def DelSAttrDatE(self, *args):
        """
        DelSAttrDatE(PUndirNet self, int64 const & SrcNId, int64 const & DstNId, TStr AttrName) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrName: TStr const &

        DelSAttrDatE(PUndirNet self, int64 const & SrcNId, int64 const & DstNId, TInt64 AttrId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrId: TInt64 const &

        DelSAttrDatE(PUndirNet self, TUndirNet::TEdgeI const & EdgeI, TStr AttrName) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrName: TStr const &

        DelSAttrDatE(PUndirNet self, TUndirNet::TEdgeI const & EdgeI, TInt64 AttrId) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrId: TInt64 const &

        """
        return _SnapTime.PUndirNet_DelSAttrDatE(self, *args)


    def GetSAttrVE(self, *args):
        """
        GetSAttrVE(PUndirNet self, int64 const & SrcNId, int64 const & DstNId, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        GetSAttrVE(PUndirNet self, TUndirNet::TEdgeI const & EdgeI, TAttrType const AttrType, Schema AttrV) -> int64

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &
        AttrType: enum TAttrType const
        AttrV: TAttrPrV &

        """
        return _SnapTime.PUndirNet_GetSAttrVE(self, *args)


    def GetIdVSAttrE(self, *args):
        """
        GetIdVSAttrE(PUndirNet self, TStr AttrName, TIntPr64V IdV) -> int64

        Parameters
        ----------
        AttrName: TStr const &
        IdV: TIntPr64V &

        GetIdVSAttrE(PUndirNet self, TInt64 AttrId, TIntPr64V IdV) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        IdV: TIntPr64V &

        """
        return _SnapTime.PUndirNet_GetIdVSAttrE(self, *args)


    def AddSAttrE(self, Name, AttrType, AttrId):
        """
        AddSAttrE(PUndirNet self, TStr Name, TAttrType const & AttrType, TInt64 AttrId) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrType: TAttrType const &
        AttrId: TInt64 &

        """
        return _SnapTime.PUndirNet_AddSAttrE(self, Name, AttrType, AttrId)


    def GetSAttrIdE(self, Name, AttrIdX, AttrTypeX):
        """
        GetSAttrIdE(PUndirNet self, TStr Name, TInt64 AttrIdX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        Name: TStr const &
        AttrIdX: TInt64 &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.PUndirNet_GetSAttrIdE(self, Name, AttrIdX, AttrTypeX)


    def GetSAttrNameE(self, AttrId, NameX, AttrTypeX):
        """
        GetSAttrNameE(PUndirNet self, TInt64 AttrId, TStr NameX, TAttrType & AttrTypeX) -> int64

        Parameters
        ----------
        AttrId: TInt64 const &
        NameX: TStr &
        AttrTypeX: TAttrType &

        """
        return _SnapTime.PUndirNet_GetSAttrNameE(self, AttrId, NameX, AttrTypeX)

PUndirNet.Save = new_instancemethod(_SnapTime.PUndirNet_Save, None, PUndirNet)
PUndirNet.__deref__ = new_instancemethod(_SnapTime.PUndirNet___deref__, None, PUndirNet)
PUndirNet.__ref__ = new_instancemethod(_SnapTime.PUndirNet___ref__, None, PUndirNet)
PUndirNet.__call__ = new_instancemethod(_SnapTime.PUndirNet___call__, None, PUndirNet)
PUndirNet.Empty = new_instancemethod(_SnapTime.PUndirNet_Empty, None, PUndirNet)
PUndirNet.Clr = new_instancemethod(_SnapTime.PUndirNet_Clr, None, PUndirNet)
PUndirNet.GetRefs = new_instancemethod(_SnapTime.PUndirNet_GetRefs, None, PUndirNet)
PUndirNet.Save_V1 = new_instancemethod(_SnapTime.PUndirNet_Save_V1, None, PUndirNet)
PUndirNet.Load = new_instancemethod(_SnapTime.PUndirNet_Load, None, PUndirNet)
PUndirNet.Load_V1 = new_instancemethod(_SnapTime.PUndirNet_Load_V1, None, PUndirNet)
PUndirNet.LoadShM = new_instancemethod(_SnapTime.PUndirNet_LoadShM, None, PUndirNet)
PUndirNet.HasFlag = new_instancemethod(_SnapTime.PUndirNet_HasFlag, None, PUndirNet)
PUndirNet.GetNodes = new_instancemethod(_SnapTime.PUndirNet_GetNodes, None, PUndirNet)
PUndirNet.AddNode = new_instancemethod(_SnapTime.PUndirNet_AddNode, None, PUndirNet)
PUndirNet.AddNodeUnchecked = new_instancemethod(_SnapTime.PUndirNet_AddNodeUnchecked, None, PUndirNet)
PUndirNet.DelNode = new_instancemethod(_SnapTime.PUndirNet_DelNode, None, PUndirNet)
PUndirNet.IsNode = new_instancemethod(_SnapTime.PUndirNet_IsNode, None, PUndirNet)
PUndirNet.BegNI = new_instancemethod(_SnapTime.PUndirNet_BegNI, None, PUndirNet)
PUndirNet.EndNI = new_instancemethod(_SnapTime.PUndirNet_EndNI, None, PUndirNet)
PUndirNet.GetNI = new_instancemethod(_SnapTime.PUndirNet_GetNI, None, PUndirNet)
PUndirNet.GetMxNId = new_instancemethod(_SnapTime.PUndirNet_GetMxNId, None, PUndirNet)
PUndirNet.GetEdges = new_instancemethod(_SnapTime.PUndirNet_GetEdges, None, PUndirNet)
PUndirNet.AddEdge = new_instancemethod(_SnapTime.PUndirNet_AddEdge, None, PUndirNet)
PUndirNet.AddEdgeUnchecked = new_instancemethod(_SnapTime.PUndirNet_AddEdgeUnchecked, None, PUndirNet)
PUndirNet.DelEdge = new_instancemethod(_SnapTime.PUndirNet_DelEdge, None, PUndirNet)
PUndirNet.IsEdge = new_instancemethod(_SnapTime.PUndirNet_IsEdge, None, PUndirNet)
PUndirNet.BegEI = new_instancemethod(_SnapTime.PUndirNet_BegEI, None, PUndirNet)
PUndirNet.EndEI = new_instancemethod(_SnapTime.PUndirNet_EndEI, None, PUndirNet)
PUndirNet.GetEI = new_instancemethod(_SnapTime.PUndirNet_GetEI, None, PUndirNet)
PUndirNet.GetRndNId = new_instancemethod(_SnapTime.PUndirNet_GetRndNId, None, PUndirNet)
PUndirNet.GetRndNI = new_instancemethod(_SnapTime.PUndirNet_GetRndNI, None, PUndirNet)
PUndirNet.GetNIdV = new_instancemethod(_SnapTime.PUndirNet_GetNIdV, None, PUndirNet)
PUndirNet.Reserve = new_instancemethod(_SnapTime.PUndirNet_Reserve, None, PUndirNet)
PUndirNet.ReserveNIdDeg = new_instancemethod(_SnapTime.PUndirNet_ReserveNIdDeg, None, PUndirNet)
PUndirNet.SortNodeAdjV = new_instancemethod(_SnapTime.PUndirNet_SortNodeAdjV, None, PUndirNet)
PUndirNet.Defrag = new_instancemethod(_SnapTime.PUndirNet_Defrag, None, PUndirNet)
PUndirNet.IsOk = new_instancemethod(_SnapTime.PUndirNet_IsOk, None, PUndirNet)
PUndirNet.Dump = new_instancemethod(_SnapTime.PUndirNet_Dump, None, PUndirNet)
PUndirNet.GetSmallGraph = new_instancemethod(_SnapTime.PUndirNet_GetSmallGraph, None, PUndirNet)
PUndirNet.AddSAttrDatN = new_instancemethod(_SnapTime.PUndirNet_AddSAttrDatN, None, PUndirNet)
PUndirNet.GetSAttrDatN = new_instancemethod(_SnapTime.PUndirNet_GetSAttrDatN, None, PUndirNet)
PUndirNet.DelSAttrDatN = new_instancemethod(_SnapTime.PUndirNet_DelSAttrDatN, None, PUndirNet)
PUndirNet.GetSAttrVN = new_instancemethod(_SnapTime.PUndirNet_GetSAttrVN, None, PUndirNet)
PUndirNet.GetIdVSAttrN = new_instancemethod(_SnapTime.PUndirNet_GetIdVSAttrN, None, PUndirNet)
PUndirNet.AddSAttrN = new_instancemethod(_SnapTime.PUndirNet_AddSAttrN, None, PUndirNet)
PUndirNet.GetSAttrIdN = new_instancemethod(_SnapTime.PUndirNet_GetSAttrIdN, None, PUndirNet)
PUndirNet.GetSAttrNameN = new_instancemethod(_SnapTime.PUndirNet_GetSAttrNameN, None, PUndirNet)
PUndirNet.AddSAttrDatE = new_instancemethod(_SnapTime.PUndirNet_AddSAttrDatE, None, PUndirNet)
PUndirNet.GetSAttrDatE = new_instancemethod(_SnapTime.PUndirNet_GetSAttrDatE, None, PUndirNet)
PUndirNet.DelSAttrDatE = new_instancemethod(_SnapTime.PUndirNet_DelSAttrDatE, None, PUndirNet)
PUndirNet.GetSAttrVE = new_instancemethod(_SnapTime.PUndirNet_GetSAttrVE, None, PUndirNet)
PUndirNet.GetIdVSAttrE = new_instancemethod(_SnapTime.PUndirNet_GetIdVSAttrE, None, PUndirNet)
PUndirNet.AddSAttrE = new_instancemethod(_SnapTime.PUndirNet_AddSAttrE, None, PUndirNet)
PUndirNet.GetSAttrIdE = new_instancemethod(_SnapTime.PUndirNet_GetSAttrIdE, None, PUndirNet)
PUndirNet.GetSAttrNameE = new_instancemethod(_SnapTime.PUndirNet_GetSAttrNameE, None, PUndirNet)
PUndirNet_swigregister = _SnapTime.PUndirNet_swigregister
PUndirNet_swigregister(PUndirNet)

def PUndirNet_New():
    """PUndirNet_New() -> PUndirNet"""
    return _SnapTime.PUndirNet_New()


def PrintInfo_PUndirNet(*args):
    """
    PrintInfo_PUndirNet(PUndirNet Graph, TStr Desc, TStr OutFNm, bool const & Fast=True)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    Desc: TStr const &
    OutFNm: TStr const &
    Fast: bool const &

    PrintInfo_PUndirNet(PUndirNet Graph, TStr Desc, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    Desc: TStr const &
    OutFNm: TStr const &

    PrintInfo_PUndirNet(PUndirNet Graph, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    Desc: TStr const &

    PrintInfo_PUndirNet(PUndirNet Graph)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.PrintInfo_PUndirNet(*args)

def GetNodeWcc_PUndirNet(Graph, NId, CnCom):
    """
    GetNodeWcc_PUndirNet(PUndirNet Graph, int64 const & NId, TInt64V CnCom)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NId: int64 const &
    CnCom: TInt64V &

    """
    return _SnapTime.GetNodeWcc_PUndirNet(Graph, NId, CnCom)

def IsConnected_PUndirNet(Graph):
    """
    IsConnected_PUndirNet(PUndirNet Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.IsConnected_PUndirNet(Graph)

def IsWeaklyConn_PUndirNet(Graph):
    """
    IsWeaklyConn_PUndirNet(PUndirNet Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.IsWeaklyConn_PUndirNet(Graph)

def GetWccSzCnt_PUndirNet(Graph, WccSzCnt):
    """
    GetWccSzCnt_PUndirNet(PUndirNet Graph, TIntPr64V WccSzCnt)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    WccSzCnt: TIntPr64V &

    """
    return _SnapTime.GetWccSzCnt_PUndirNet(Graph, WccSzCnt)

def GetWccs_PUndirNet(Graph, CnComV):
    """
    GetWccs_PUndirNet(PUndirNet Graph, TCnComV CnComV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    CnComV: TCnComV &

    """
    return _SnapTime.GetWccs_PUndirNet(Graph, CnComV)

def GetSccSzCnt_PUndirNet(Graph, SccSzCnt):
    """
    GetSccSzCnt_PUndirNet(PUndirNet Graph, TIntPr64V SccSzCnt)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    SccSzCnt: TIntPr64V &

    """
    return _SnapTime.GetSccSzCnt_PUndirNet(Graph, SccSzCnt)

def GetSccs_PUndirNet(Graph, CnComV):
    """
    GetSccs_PUndirNet(PUndirNet Graph, TCnComV CnComV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    CnComV: TCnComV &

    """
    return _SnapTime.GetSccs_PUndirNet(Graph, CnComV)

def GetMxWccSz_PUndirNet(Graph):
    """
    GetMxWccSz_PUndirNet(PUndirNet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.GetMxWccSz_PUndirNet(Graph)

def GetMxSccSz_PUndirNet(Graph):
    """
    GetMxSccSz_PUndirNet(PUndirNet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.GetMxSccSz_PUndirNet(Graph)

def GetMxWcc_PUndirNet(Graph):
    """
    GetMxWcc_PUndirNet(PUndirNet Graph) -> PUndirNet

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.GetMxWcc_PUndirNet(Graph)

def GetMxScc_PUndirNet(Graph):
    """
    GetMxScc_PUndirNet(PUndirNet Graph) -> PUndirNet

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.GetMxScc_PUndirNet(Graph)

def GetMxBiCon_PUndirNet(Graph):
    """
    GetMxBiCon_PUndirNet(PUndirNet Graph) -> PUndirNet

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.GetMxBiCon_PUndirNet(Graph)

def GetNodeEcc_PUndirNet(Graph, NId, IsDir=False):
    """
    GetNodeEcc_PUndirNet(PUndirNet Graph, int64 const & NId, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NId: int64 const &
    IsDir: bool const &

    GetNodeEcc_PUndirNet(PUndirNet Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NId: int64 const &

    """
    return _SnapTime.GetNodeEcc_PUndirNet(Graph, NId, IsDir)

def GetPageRank_PUndirNet(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRank_PUndirNet(PUndirNet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRank_PUndirNet(PUndirNet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRank_PUndirNet(PUndirNet Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRank_PUndirNet(PUndirNet Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRank_PUndirNet(Graph, PRankH, C, Eps, MaxIter)

def GetPageRank_v1_PUndirNet(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRank_v1_PUndirNet(PUndirNet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRank_v1_PUndirNet(PUndirNet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRank_v1_PUndirNet(PUndirNet Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRank_v1_PUndirNet(PUndirNet Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRank_v1_PUndirNet(Graph, PRankH, C, Eps, MaxIter)

def GetHits_PUndirNet(Graph, NIdHubH, NIdAuthH, MaxIter=20):
    """
    GetHits_PUndirNet(PUndirNet Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH, int64 const & MaxIter=20)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &
    MaxIter: int64 const &

    GetHits_PUndirNet(PUndirNet Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &

    """
    return _SnapTime.GetHits_PUndirNet(Graph, NIdHubH, NIdAuthH, MaxIter)

def GetPageRankMP_PUndirNet(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRankMP_PUndirNet(PUndirNet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRankMP_PUndirNet(PUndirNet Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRankMP_PUndirNet(PUndirNet Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRankMP_PUndirNet(PUndirNet Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRankMP_PUndirNet(Graph, PRankH, C, Eps, MaxIter)

def GetHitsMP_PUndirNet(Graph, NIdHubH, NIdAuthH, MaxIter=20):
    """
    GetHitsMP_PUndirNet(PUndirNet Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH, int64 const & MaxIter=20)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &
    MaxIter: int64 const &

    GetHitsMP_PUndirNet(PUndirNet Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &

    """
    return _SnapTime.GetHitsMP_PUndirNet(Graph, NIdHubH, NIdAuthH, MaxIter)

def CntInDegNodes_PUndirNet(Graph, NodeInDeg):
    """
    CntInDegNodes_PUndirNet(PUndirNet Graph, int64 const & NodeInDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NodeInDeg: int64 const &

    """
    return _SnapTime.CntInDegNodes_PUndirNet(Graph, NodeInDeg)

def CntOutDegNodes_PUndirNet(Graph, NodeOutDeg):
    """
    CntOutDegNodes_PUndirNet(PUndirNet Graph, int64 const & NodeOutDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NodeOutDeg: int64 const &

    """
    return _SnapTime.CntOutDegNodes_PUndirNet(Graph, NodeOutDeg)

def CntDegNodes_PUndirNet(Graph, NodeDeg):
    """
    CntDegNodes_PUndirNet(PUndirNet Graph, int64 const & NodeDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NodeDeg: int64 const &

    """
    return _SnapTime.CntDegNodes_PUndirNet(Graph, NodeDeg)

def CntNonZNodes_PUndirNet(Graph):
    """
    CntNonZNodes_PUndirNet(PUndirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.CntNonZNodes_PUndirNet(Graph)

def CntEdgesToSet_PUndirNet(Graph, NId, NodeSet):
    """
    CntEdgesToSet_PUndirNet(PUndirNet Graph, int64 const & NId, TInt64Set NodeSet) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NId: int64 const &
    NodeSet: TInt64Set const &

    """
    return _SnapTime.CntEdgesToSet_PUndirNet(Graph, NId, NodeSet)

def GetMxDegNId_PUndirNet(Graph):
    """
    GetMxDegNId_PUndirNet(PUndirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.GetMxDegNId_PUndirNet(Graph)

def GetMxInDegNId_PUndirNet(Graph):
    """
    GetMxInDegNId_PUndirNet(PUndirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.GetMxInDegNId_PUndirNet(Graph)

def GetMxOutDegNId_PUndirNet(Graph):
    """
    GetMxOutDegNId_PUndirNet(PUndirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.GetMxOutDegNId_PUndirNet(Graph)

def GetInDegCnt_PUndirNet(*args):
    """
    GetInDegCnt_PUndirNet(PUndirNet Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    DegToCntV: TIntPr64V &

    GetInDegCnt_PUndirNet(PUndirNet Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetInDegCnt_PUndirNet(*args)

def GetOutDegCnt_PUndirNet(*args):
    """
    GetOutDegCnt_PUndirNet(PUndirNet Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    DegToCntV: TIntPr64V &

    GetOutDegCnt_PUndirNet(PUndirNet Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetOutDegCnt_PUndirNet(*args)

def GetDegCnt_PUndirNet(*args):
    """
    GetDegCnt_PUndirNet(PUndirNet Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    DegToCntV: TIntPr64V &

    GetDegCnt_PUndirNet(PUndirNet Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetDegCnt_PUndirNet(*args)

def GetDegSeqV_PUndirNet(*args):
    """
    GetDegSeqV_PUndirNet(PUndirNet Graph, TInt64V DegV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    DegV: TInt64V &

    GetDegSeqV_PUndirNet(PUndirNet Graph, TInt64V InDegV, TInt64V OutDegV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    InDegV: TInt64V &
    OutDegV: TInt64V &

    """
    return _SnapTime.GetDegSeqV_PUndirNet(*args)

def GetNodeInDegV_PUndirNet(Graph, NIdInDegV):
    """
    GetNodeInDegV_PUndirNet(PUndirNet Graph, TIntPr64V NIdInDegV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NIdInDegV: TIntPr64V &

    """
    return _SnapTime.GetNodeInDegV_PUndirNet(Graph, NIdInDegV)

def GetNodeOutDegV_PUndirNet(Graph, NIdOutDegV):
    """
    GetNodeOutDegV_PUndirNet(PUndirNet Graph, TIntPr64V NIdOutDegV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NIdOutDegV: TIntPr64V &

    """
    return _SnapTime.GetNodeOutDegV_PUndirNet(Graph, NIdOutDegV)

def CntUniqUndirEdges_PUndirNet(Graph):
    """
    CntUniqUndirEdges_PUndirNet(PUndirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.CntUniqUndirEdges_PUndirNet(Graph)

def CntUniqDirEdges_PUndirNet(Graph):
    """
    CntUniqDirEdges_PUndirNet(PUndirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.CntUniqDirEdges_PUndirNet(Graph)

def CntUniqBiDirEdges_PUndirNet(Graph):
    """
    CntUniqBiDirEdges_PUndirNet(PUndirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.CntUniqBiDirEdges_PUndirNet(Graph)

def CntSelfEdges_PUndirNet(Graph):
    """
    CntSelfEdges_PUndirNet(PUndirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.CntSelfEdges_PUndirNet(Graph)

def GetUnDir_PUndirNet(Graph):
    """
    GetUnDir_PUndirNet(PUndirNet Graph) -> PUndirNet

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.GetUnDir_PUndirNet(Graph)

def MakeUnDir_PUndirNet(Graph):
    """
    MakeUnDir_PUndirNet(PUndirNet Graph)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.MakeUnDir_PUndirNet(Graph)

def AddSelfEdges_PUndirNet(Graph):
    """
    AddSelfEdges_PUndirNet(PUndirNet Graph)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.AddSelfEdges_PUndirNet(Graph)

def DelSelfEdges_PUndirNet(Graph):
    """
    DelSelfEdges_PUndirNet(PUndirNet Graph)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.DelSelfEdges_PUndirNet(Graph)

def DelNodes_PUndirNet(Graph, NIdV):
    """
    DelNodes_PUndirNet(PUndirNet Graph, TInt64V NIdV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > &
    NIdV: TInt64V const &

    """
    return _SnapTime.DelNodes_PUndirNet(Graph, NIdV)

def DelZeroDegNodes_PUndirNet(Graph):
    """
    DelZeroDegNodes_PUndirNet(PUndirNet Graph)

    Parameters
    ----------
    Graph: TPt< TUndirNet > &

    """
    return _SnapTime.DelZeroDegNodes_PUndirNet(Graph)

def DelDegKNodes_PUndirNet(Graph, OutDegK, InDegK):
    """
    DelDegKNodes_PUndirNet(PUndirNet Graph, int64 const & OutDegK, int64 const & InDegK)

    Parameters
    ----------
    Graph: TPt< TUndirNet > &
    OutDegK: int64 const &
    InDegK: int64 const &

    """
    return _SnapTime.DelDegKNodes_PUndirNet(Graph, OutDegK, InDegK)

def IsTree_PUndirNet(Graph):
    """
    IsTree_PUndirNet(PUndirNet Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.IsTree_PUndirNet(Graph)

def GetTreeRootNId_PUndirNet(Graph):
    """
    GetTreeRootNId_PUndirNet(PUndirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.GetTreeRootNId_PUndirNet(Graph)

def GetTreeSig_PUndirNet(*args):
    """
    GetTreeSig_PUndirNet(PUndirNet Graph, int64 const & RootNId, TInt64V Sig)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    RootNId: int64 const &
    Sig: TInt64V &

    GetTreeSig_PUndirNet(PUndirNet Graph, int64 const & RootNId, TInt64V Sig, TIntPr64V NodeMap)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    RootNId: int64 const &
    Sig: TInt64V &
    NodeMap: TIntPr64V &

    """
    return _SnapTime.GetTreeSig_PUndirNet(*args)

def GetBfsTree_PUndirNet(Graph, StartNId, FollowOut, FollowIn):
    """
    GetBfsTree_PUndirNet(PUndirNet Graph, int64 const & StartNId, bool const & FollowOut, bool const & FollowIn) -> PNGraph

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    StartNId: int64 const &
    FollowOut: bool const &
    FollowIn: bool const &

    """
    return _SnapTime.GetBfsTree_PUndirNet(Graph, StartNId, FollowOut, FollowIn)

def GetSubTreeSz_PUndirNet(Graph, StartNId, FollowOut, FollowIn):
    """
    GetSubTreeSz_PUndirNet(PUndirNet Graph, int64 const & StartNId, bool const & FollowOut, bool const & FollowIn) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    StartNId: int64 const &
    FollowOut: bool const &
    FollowIn: bool const &

    """
    return _SnapTime.GetSubTreeSz_PUndirNet(Graph, StartNId, FollowOut, FollowIn)

def GetNodesAtHop_PUndirNet(Graph, StartNId, Hop, NIdV, IsDir=False):
    """
    GetNodesAtHop_PUndirNet(PUndirNet Graph, int64 const & StartNId, int64 const & Hop, TInt64V NIdV, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    StartNId: int64 const &
    Hop: int64 const &
    NIdV: TInt64V &
    IsDir: bool const &

    GetNodesAtHop_PUndirNet(PUndirNet Graph, int64 const & StartNId, int64 const & Hop, TInt64V NIdV) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    StartNId: int64 const &
    Hop: int64 const &
    NIdV: TInt64V &

    """
    return _SnapTime.GetNodesAtHop_PUndirNet(Graph, StartNId, Hop, NIdV, IsDir)

def GetNodesAtHops_PUndirNet(Graph, StartNId, HopCntV, IsDir=False):
    """
    GetNodesAtHops_PUndirNet(PUndirNet Graph, int64 const & StartNId, TIntPr64V HopCntV, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    StartNId: int64 const &
    HopCntV: TIntPr64V &
    IsDir: bool const &

    GetNodesAtHops_PUndirNet(PUndirNet Graph, int64 const & StartNId, TIntPr64V HopCntV) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    StartNId: int64 const &
    HopCntV: TIntPr64V &

    """
    return _SnapTime.GetNodesAtHops_PUndirNet(Graph, StartNId, HopCntV, IsDir)

def GetShortPath_PUndirNet(*args):
    """
    GetShortPath_PUndirNet(PUndirNet Graph, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    SrcNId: int64 const &
    DstNId: int64 const &
    IsDir: bool const &

    GetShortPath_PUndirNet(PUndirNet Graph, int64 const & SrcNId, int64 const & DstNId) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    SrcNId: int64 const &
    DstNId: int64 const &

    GetShortPath_PUndirNet(PUndirNet Graph, int64 const & SrcNId, TInt64H NIdToDistH, bool const & IsDir=False, int64 const & MaxDist) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &
    IsDir: bool const &
    MaxDist: int64 const &

    GetShortPath_PUndirNet(PUndirNet Graph, int64 const & SrcNId, TInt64H NIdToDistH, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &
    IsDir: bool const &

    GetShortPath_PUndirNet(PUndirNet Graph, int64 const & SrcNId, TInt64H NIdToDistH) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &

    """
    return _SnapTime.GetShortPath_PUndirNet(*args)

def GetBfsFullDiam_PUndirNet(Graph, NTestNodes, IsDir=False):
    """
    GetBfsFullDiam_PUndirNet(PUndirNet Graph, int64 const & NTestNodes, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsFullDiam_PUndirNet(PUndirNet Graph, int64 const & NTestNodes) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NTestNodes: int64 const &

    """
    return _SnapTime.GetBfsFullDiam_PUndirNet(Graph, NTestNodes, IsDir)

def GetBfsEffDiam_PUndirNet(*args):
    """
    GetBfsEffDiam_PUndirNet(PUndirNet Graph, int64 const & NTestNodes, bool const & IsDir, double & EffDiam, int64 & FullDiam) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NTestNodes: int64 const &
    IsDir: bool const &
    EffDiam: double &
    FullDiam: int64 &

    GetBfsEffDiam_PUndirNet(PUndirNet Graph, int64 const & NTestNodes, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsEffDiam_PUndirNet(PUndirNet Graph, int64 const & NTestNodes) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NTestNodes: int64 const &

    GetBfsEffDiam_PUndirNet(PUndirNet Graph, int64 const & NTestNodes, bool const & IsDir) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsEffDiam_PUndirNet(PUndirNet Graph, int64 const & NTestNodes, TInt64V SubGraphNIdV, bool const & IsDir) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NTestNodes: int64 const &
    SubGraphNIdV: TInt64V const &
    IsDir: bool const &

    """
    return _SnapTime.GetBfsEffDiam_PUndirNet(*args)

def DrawGViz_PUndirNet(*args):
    """
    DrawGViz_PUndirNet(PUndirNet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, bool const & NodeLabels=False, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &
    NIdColorH: TIntStr64H const &

    DrawGViz_PUndirNet(PUndirNet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, bool const & NodeLabels=False)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &

    DrawGViz_PUndirNet(PUndirNet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &

    DrawGViz_PUndirNet(PUndirNet Graph, TGVizLayout const & Layout, TStr PltFNm)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &

    DrawGViz_PUndirNet(PUndirNet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, TIntStr64H NodeLabelH)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabelH: TIntStr64H const &

    """
    return _SnapTime.DrawGViz_PUndirNet(*args)

def GenGrid_PUndirNet(Rows, Cols, IsDir=True):
    """
    GenGrid_PUndirNet(int64 const & Rows, int64 const & Cols, bool const & IsDir=True) -> PUndirNet

    Parameters
    ----------
    Rows: int64 const &
    Cols: int64 const &
    IsDir: bool const &

    GenGrid_PUndirNet(int64 const & Rows, int64 const & Cols) -> PUndirNet

    Parameters
    ----------
    Rows: int64 const &
    Cols: int64 const &

    """
    return _SnapTime.GenGrid_PUndirNet(Rows, Cols, IsDir)

def GenStar_PUndirNet(Nodes, IsDir=True):
    """
    GenStar_PUndirNet(int64 const & Nodes, bool const & IsDir=True) -> PUndirNet

    Parameters
    ----------
    Nodes: int64 const &
    IsDir: bool const &

    GenStar_PUndirNet(int64 const & Nodes) -> PUndirNet

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenStar_PUndirNet(Nodes, IsDir)

def GenCircle_PUndirNet(Nodes, NodeOutDeg=1, IsDir=True):
    """
    GenCircle_PUndirNet(int64 const & Nodes, int64 const & NodeOutDeg=1, bool const & IsDir=True) -> PUndirNet

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &
    IsDir: bool const &

    GenCircle_PUndirNet(int64 const & Nodes, int64 const & NodeOutDeg=1) -> PUndirNet

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &

    GenCircle_PUndirNet(int64 const & Nodes) -> PUndirNet

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenCircle_PUndirNet(Nodes, NodeOutDeg, IsDir)

def GenFull_PUndirNet(Nodes):
    """
    GenFull_PUndirNet(int64 const & Nodes) -> PUndirNet

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenFull_PUndirNet(Nodes)

def GenTree_PUndirNet(Fanout, Levels, IsDir=True, ChildPointsToParent=True):
    """
    GenTree_PUndirNet(int64 const & Fanout, int64 const & Levels, bool const & IsDir=True, bool const & ChildPointsToParent=True) -> PUndirNet

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &
    IsDir: bool const &
    ChildPointsToParent: bool const &

    GenTree_PUndirNet(int64 const & Fanout, int64 const & Levels, bool const & IsDir=True) -> PUndirNet

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &
    IsDir: bool const &

    GenTree_PUndirNet(int64 const & Fanout, int64 const & Levels) -> PUndirNet

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &

    """
    return _SnapTime.GenTree_PUndirNet(Fanout, Levels, IsDir, ChildPointsToParent)

def GenBaraHierar_PUndirNet(Levels, IsDir=True):
    """
    GenBaraHierar_PUndirNet(int64 const & Levels, bool const & IsDir=True) -> PUndirNet

    Parameters
    ----------
    Levels: int64 const &
    IsDir: bool const &

    GenBaraHierar_PUndirNet(int64 const & Levels) -> PUndirNet

    Parameters
    ----------
    Levels: int64 const &

    """
    return _SnapTime.GenBaraHierar_PUndirNet(Levels, IsDir)

def GenRndGnm_PUndirNet(*args):
    """
    GenRndGnm_PUndirNet(int64 const & Nodes, int64 const & Edges, bool const & IsDir=True, TRnd Rnd) -> PUndirNet

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &
    IsDir: bool const &
    Rnd: TRnd &

    GenRndGnm_PUndirNet(int64 const & Nodes, int64 const & Edges, bool const & IsDir=True) -> PUndirNet

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &
    IsDir: bool const &

    GenRndGnm_PUndirNet(int64 const & Nodes, int64 const & Edges) -> PUndirNet

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.GenRndGnm_PUndirNet(*args)

def LoadEdgeList_PUndirNet(*args):
    """
    LoadEdgeList_PUndirNet(TStr InFNm, int64 const & SrcColId=0, int64 const & DstColId=1) -> PUndirNet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &

    LoadEdgeList_PUndirNet(TStr InFNm, int64 const & SrcColId=0) -> PUndirNet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &

    LoadEdgeList_PUndirNet(TStr InFNm) -> PUndirNet

    Parameters
    ----------
    InFNm: TStr const &

    LoadEdgeList_PUndirNet(TStr InFNm, int64 const & SrcColId, int64 const & DstColId, char const & Separator) -> PUndirNet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &
    Separator: char const &

    """
    return _SnapTime.LoadEdgeList_PUndirNet(*args)

def LoadEdgeListStr_PUndirNet(*args):
    """
    LoadEdgeListStr_PUndirNet(TStr InFNm, int64 const & SrcColId=0, int64 const & DstColId=1) -> PUndirNet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &

    LoadEdgeListStr_PUndirNet(TStr InFNm, int64 const & SrcColId=0) -> PUndirNet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &

    LoadEdgeListStr_PUndirNet(TStr InFNm) -> PUndirNet

    Parameters
    ----------
    InFNm: TStr const &

    LoadEdgeListStr_PUndirNet(TStr InFNm, int64 const & SrcColId, int64 const & DstColId, TStrInt64SH StrToNIdH) -> PUndirNet

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &
    StrToNIdH: TStrHash< TInt64,TStrPool,int64 > &

    """
    return _SnapTime.LoadEdgeListStr_PUndirNet(*args)

def LoadConnList_PUndirNet(InFNm):
    """
    LoadConnList_PUndirNet(TStr InFNm) -> PUndirNet

    Parameters
    ----------
    InFNm: TStr const &

    """
    return _SnapTime.LoadConnList_PUndirNet(InFNm)

def LoadConnListStr_PUndirNet(InFNm, StrToNIdH):
    """
    LoadConnListStr_PUndirNet(TStr InFNm, TStrInt64SH StrToNIdH) -> PUndirNet

    Parameters
    ----------
    InFNm: TStr const &
    StrToNIdH: TStrHash< TInt64,TStrPool,int64 > &

    """
    return _SnapTime.LoadConnListStr_PUndirNet(InFNm, StrToNIdH)

def LoadPajek_PUndirNet(InFNm):
    """
    LoadPajek_PUndirNet(TStr InFNm) -> PUndirNet

    Parameters
    ----------
    InFNm: TStr const &

    """
    return _SnapTime.LoadPajek_PUndirNet(InFNm)

def SaveEdgeList_PUndirNet(*args):
    """
    SaveEdgeList_PUndirNet(PUndirNet Graph, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    OutFNm: TStr const &
    Desc: TStr const &

    SaveEdgeList_PUndirNet(PUndirNet Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    OutFNm: TStr const &

    """
    return _SnapTime.SaveEdgeList_PUndirNet(*args)

def SavePajek_PUndirNet(*args):
    """
    SavePajek_PUndirNet(PUndirNet Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    OutFNm: TStr const &

    SavePajek_PUndirNet(PUndirNet Graph, TStr OutFNm, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &

    SavePajek_PUndirNet(PUndirNet Graph, TStr OutFNm, TIntStr64H NIdColorH, TIntStr64H NIdLabelH)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &
    NIdLabelH: TIntStr64H const &

    SavePajek_PUndirNet(PUndirNet Graph, TStr OutFNm, TIntStr64H NIdColorH, TIntStr64H NIdLabelH, TIntStr64H EIdColorH)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &
    NIdLabelH: TIntStr64H const &
    EIdColorH: TIntStr64H const &

    """
    return _SnapTime.SavePajek_PUndirNet(*args)

def SaveMatlabSparseMtx_PUndirNet(Graph, OutFNm):
    """
    SaveMatlabSparseMtx_PUndirNet(PUndirNet Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    OutFNm: TStr const &

    """
    return _SnapTime.SaveMatlabSparseMtx_PUndirNet(Graph, OutFNm)

def SaveGViz_PUndirNet(*args):
    """
    SaveGViz_PUndirNet(PUndirNet Graph, TStr OutFNm, TStr Desc, bool const & NodeLabels=False, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &
    NIdColorH: TIntStr64H const &

    SaveGViz_PUndirNet(PUndirNet Graph, TStr OutFNm, TStr Desc, bool const & NodeLabels=False)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &

    SaveGViz_PUndirNet(PUndirNet Graph, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    OutFNm: TStr const &
    Desc: TStr const &

    SaveGViz_PUndirNet(PUndirNet Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    OutFNm: TStr const &

    SaveGViz_PUndirNet(PUndirNet Graph, TStr OutFNm, TStr Desc, TIntStr64H NIdLabelH)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NIdLabelH: TIntStr64H const &

    """
    return _SnapTime.SaveGViz_PUndirNet(*args)

def GetKCore_PUndirNet(Graph, K):
    """
    GetKCore_PUndirNet(PUndirNet Graph, int64 const & K) -> PUndirNet

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    K: int64 const &

    """
    return _SnapTime.GetKCore_PUndirNet(Graph, K)

def GetKCoreEdges_PUndirNet(Graph, CoreIdSzV):
    """
    GetKCoreEdges_PUndirNet(PUndirNet Graph, TIntPr64V CoreIdSzV) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    CoreIdSzV: TIntPr64V &

    """
    return _SnapTime.GetKCoreEdges_PUndirNet(Graph, CoreIdSzV)

def GetKCoreNodes_PUndirNet(Graph, CoreIdSzV):
    """
    GetKCoreNodes_PUndirNet(PUndirNet Graph, TIntPr64V CoreIdSzV) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    CoreIdSzV: TIntPr64V &

    """
    return _SnapTime.GetKCoreNodes_PUndirNet(Graph, CoreIdSzV)

def ConvertGraph_PUndirNet_PUndirNet(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PUndirNet_PUndirNet(PUndirNet InGraph, bool const & RenumberNodes=False) -> PUndirNet

    Parameters
    ----------
    InGraph: TPt< TUndirNet > const &
    RenumberNodes: bool const &

    ConvertGraph_PUndirNet_PUndirNet(PUndirNet InGraph) -> PUndirNet

    Parameters
    ----------
    InGraph: TPt< TUndirNet > const &

    """
    return _SnapTime.ConvertGraph_PUndirNet_PUndirNet(InGraph, RenumberNodes)

def ConvertGraph_PUndirNet_PNGraph(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PUndirNet_PNGraph(PNGraph InGraph, bool const & RenumberNodes=False) -> PUndirNet

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &
    RenumberNodes: bool const &

    ConvertGraph_PUndirNet_PNGraph(PNGraph InGraph) -> PUndirNet

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &

    """
    return _SnapTime.ConvertGraph_PUndirNet_PNGraph(InGraph, RenumberNodes)

def ConvertGraph_PUndirNet_PNEANet(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PUndirNet_PNEANet(PNEANet InGraph, bool const & RenumberNodes=False) -> PUndirNet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    RenumberNodes: bool const &

    ConvertGraph_PUndirNet_PNEANet(PNEANet InGraph) -> PUndirNet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &

    """
    return _SnapTime.ConvertGraph_PUndirNet_PNEANet(InGraph, RenumberNodes)

def ConvertSubGraph_PUndirNet_PUndirNet(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PUndirNet_PUndirNet(PUndirNet InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PUndirNet

    Parameters
    ----------
    InGraph: TPt< TUndirNet > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PUndirNet_PUndirNet(PUndirNet InGraph, TInt64V NIdV) -> PUndirNet

    Parameters
    ----------
    InGraph: TPt< TUndirNet > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PUndirNet_PUndirNet(InGraph, NIdV, RenumberNodes)

def ConvertSubGraph_PUndirNet_PNGraph(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PUndirNet_PNGraph(PNGraph InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PUndirNet

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PUndirNet_PNGraph(PNGraph InGraph, TInt64V NIdV) -> PUndirNet

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PUndirNet_PNGraph(InGraph, NIdV, RenumberNodes)

def ConvertSubGraph_PUndirNet_PNEANet(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PUndirNet_PNEANet(PNEANet InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PUndirNet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PUndirNet_PNEANet(PNEANet InGraph, TInt64V NIdV) -> PUndirNet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PUndirNet_PNEANet(InGraph, NIdV, RenumberNodes)

def ConvertESubGraph_PUndirNet_PNEANet(InGraph, EIdV, RenumberNodes=False):
    """
    ConvertESubGraph_PUndirNet_PNEANet(PNEANet InGraph, TInt64V EIdV, bool const & RenumberNodes=False) -> PUndirNet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    EIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertESubGraph_PUndirNet_PNEANet(PNEANet InGraph, TInt64V EIdV) -> PUndirNet

    Parameters
    ----------
    InGraph: TPt< TNEANet > const &
    EIdV: TInt64V const &

    """
    return _SnapTime.ConvertESubGraph_PUndirNet_PNEANet(InGraph, EIdV, RenumberNodes)

def GetSubGraph_PUndirNet(Graph, NIdV):
    """
    GetSubGraph_PUndirNet(PUndirNet Graph, TInt64V NIdV) -> PUndirNet

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.GetSubGraph_PUndirNet(Graph, NIdV)

def GetRndSubGraph_PUndirNet(Graph, NNodes):
    """
    GetRndSubGraph_PUndirNet(PUndirNet Graph, int64 const & NNodes) -> PUndirNet

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NNodes: int64 const &

    """
    return _SnapTime.GetRndSubGraph_PUndirNet(Graph, NNodes)

def GetRndESubGraph_PUndirNet(Graph, NEdges):
    """
    GetRndESubGraph_PUndirNet(PUndirNet Graph, int64 const & NEdges) -> PUndirNet

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NEdges: int64 const &

    """
    return _SnapTime.GetRndESubGraph_PUndirNet(Graph, NEdges)

def GetClustCf_PUndirNet(*args):
    """
    GetClustCf_PUndirNet(PUndirNet Graph, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    SampleNodes: int64

    GetClustCf_PUndirNet(PUndirNet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    GetClustCf_PUndirNet(PUndirNet Graph, TFltPr64V DegToCCfV, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    DegToCCfV: TFltPr64V &
    SampleNodes: int64

    GetClustCf_PUndirNet(PUndirNet Graph, TFltPr64V DegToCCfV) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    DegToCCfV: TFltPr64V &

    GetClustCf_PUndirNet(PUndirNet Graph, TFltPr64V DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    DegToCCfV: TFltPr64V &
    ClosedTriadsX: int64 &
    OpenTriadsX: int64 &
    SampleNodes: int64

    GetClustCf_PUndirNet(PUndirNet Graph, TFltPr64V DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    DegToCCfV: TFltPr64V &
    ClosedTriadsX: int64 &
    OpenTriadsX: int64 &

    """
    return _SnapTime.GetClustCf_PUndirNet(*args)

def GetNodeClustCf_PUndirNet(*args):
    """
    GetNodeClustCf_PUndirNet(PUndirNet Graph, int64 const & NId) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NId: int64 const &

    GetNodeClustCf_PUndirNet(PUndirNet Graph, TIntFlt64H NIdCCfH)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NIdCCfH: TIntFlt64H &

    """
    return _SnapTime.GetNodeClustCf_PUndirNet(*args)

def GetTriads_PUndirNet(*args):
    """
    GetTriads_PUndirNet(PUndirNet Graph, int64 & ClosedTriads, int64 & OpenTriads, int64 SampleNodes=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    ClosedTriads: int64 &
    OpenTriads: int64 &
    SampleNodes: int64

    GetTriads_PUndirNet(PUndirNet Graph, int64 & ClosedTriads, int64 & OpenTriads) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    ClosedTriads: int64 &
    OpenTriads: int64 &

    GetTriads_PUndirNet(PUndirNet Graph, int64 SampleNodes=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    SampleNodes: int64

    GetTriads_PUndirNet(PUndirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    GetTriads_PUndirNet(PUndirNet Graph, TIntTr64V & NIdCOTriadV, int64 SampleNodes=-1)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NIdCOTriadV: TIntTr64V &
    SampleNodes: int64

    GetTriads_PUndirNet(PUndirNet Graph, TIntTr64V & NIdCOTriadV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NIdCOTriadV: TIntTr64V &

    """
    return _SnapTime.GetTriads_PUndirNet(*args)

def GetTriadEdges_PUndirNet(Graph, SampleEdges=-1):
    """
    GetTriadEdges_PUndirNet(PUndirNet Graph, int64 SampleEdges=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    SampleEdges: int64

    GetTriadEdges_PUndirNet(PUndirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.GetTriadEdges_PUndirNet(Graph, SampleEdges)

def GetNodeTriads_PUndirNet(*args):
    """
    GetNodeTriads_PUndirNet(PUndirNet Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NId: int64 const &

    GetNodeTriads_PUndirNet(PUndirNet Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NId: int64 const &

    GetNodeTriads_PUndirNet(PUndirNet Graph, int64 const & NId, TInt64Set GroupSet, int64 & OutGroupEdgesX) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NId: int64 const &
    GroupSet: TInt64Set const &
    OutGroupEdgesX: int64 &

    """
    return _SnapTime.GetNodeTriads_PUndirNet(*args)

def GetTriadParticip_PUndirNet(Graph, TriadCntV):
    """
    GetTriadParticip_PUndirNet(PUndirNet Graph, TIntPr64V TriadCntV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    TriadCntV: TIntPr64V &

    """
    return _SnapTime.GetTriadParticip_PUndirNet(Graph, TriadCntV)

def GetTriangleCnt_PUndirNet(Graph):
    """
    GetTriangleCnt_PUndirNet(PUndirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.GetTriangleCnt_PUndirNet(Graph)

def GetCmnNbrs_PUndirNet(*args):
    """
    GetCmnNbrs_PUndirNet(PUndirNet Graph, int64 const & NId1, int64 const & NId2) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NId1: int64 const &
    NId2: int64 const &

    GetCmnNbrs_PUndirNet(PUndirNet Graph, int64 const & NId1, int64 const & NId2, TInt64V NbrV) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NId1: int64 const &
    NId2: int64 const &
    NbrV: TInt64V &

    """
    return _SnapTime.GetCmnNbrs_PUndirNet(*args)

def GetModularity_PUndirNet(*args):
    """
    GetModularity_PUndirNet(PUndirNet G, TInt64V NIdV, int64 GEdges=-1) -> double

    Parameters
    ----------
    G: TPt< TUndirNet > const &
    NIdV: TInt64V const &
    GEdges: int64

    GetModularity_PUndirNet(PUndirNet G, TInt64V NIdV) -> double

    Parameters
    ----------
    G: TPt< TUndirNet > const &
    NIdV: TInt64V const &

    GetModularity_PUndirNet(PUndirNet G, TCnComV CmtyV, int64 GEdges=-1) -> double

    Parameters
    ----------
    G: TPt< TUndirNet > const &
    CmtyV: TCnComV const &
    GEdges: int64

    GetModularity_PUndirNet(PUndirNet G, TCnComV CmtyV) -> double

    Parameters
    ----------
    G: TPt< TUndirNet > const &
    CmtyV: TCnComV const &

    """
    return _SnapTime.GetModularity_PUndirNet(*args)

def GetEdgesInOut_PUndirNet(Graph, NIdV):
    """
    GetEdgesInOut_PUndirNet(PUndirNet Graph, TInt64V NIdV)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.GetEdgesInOut_PUndirNet(Graph, NIdV)

def GetAnf_PUndirNet(*args):
    """
    GetAnf_PUndirNet(PUndirNet Graph, int64 const & SrcNId, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir, int64 const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    SrcNId: int64 const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &
    NApprox: int64 const &

    GetAnf_PUndirNet(PUndirNet Graph, int64 const & SrcNId, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    SrcNId: int64 const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &

    GetAnf_PUndirNet(PUndirNet Graph, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir, int64 const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &
    NApprox: int64 const &

    GetAnf_PUndirNet(PUndirNet Graph, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &

    """
    return _SnapTime.GetAnf_PUndirNet(*args)

def GetAnfEffDiam_PUndirNet(*args):
    """
    GetAnfEffDiam_PUndirNet(PUndirNet Graph, bool const & IsDir, double const & Percentile, int64 const & NApprox) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    IsDir: bool const &
    Percentile: double const &
    NApprox: int64 const &

    GetAnfEffDiam_PUndirNet(PUndirNet Graph, int64 const NRuns=1, int64 NApprox=-1) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NRuns: int64 const
    NApprox: int64

    GetAnfEffDiam_PUndirNet(PUndirNet Graph, int64 const NRuns=1) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    NRuns: int64 const

    GetAnfEffDiam_PUndirNet(PUndirNet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.GetAnfEffDiam_PUndirNet(*args)

def TestAnf_PUndirNet():
    """TestAnf_PUndirNet()"""
    return _SnapTime.TestAnf_PUndirNet()

def PlotKCoreEdges_PUndirNet(*args):
    """
    PlotKCoreEdges_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotKCoreEdges_PUndirNet(PUndirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotKCoreEdges_PUndirNet(*args)

def PlotKCoreNodes_PUndirNet(*args):
    """
    PlotKCoreNodes_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotKCoreNodes_PUndirNet(PUndirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotKCoreNodes_PUndirNet(*args)

def PlotShortPathDistr_PUndirNet(*args):
    """
    PlotShortPathDistr_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr, int TestNodes)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr
    TestNodes: int

    PlotShortPathDistr_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotShortPathDistr_PUndirNet(PUndirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotShortPathDistr_PUndirNet(*args)

def PlotHops_PUndirNet(*args):
    """
    PlotHops_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr, bool const & IsDir=False, int const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr
    IsDir: bool const &
    NApprox: int const &

    PlotHops_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr
    IsDir: bool const &

    PlotHops_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotHops_PUndirNet(PUndirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotHops_PUndirNet(*args)

def PlotClustCf_PUndirNet(*args):
    """
    PlotClustCf_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotClustCf_PUndirNet(PUndirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotClustCf_PUndirNet(*args)

def PlotSccDistr_PUndirNet(*args):
    """
    PlotSccDistr_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotSccDistr_PUndirNet(PUndirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotSccDistr_PUndirNet(*args)

def PlotWccDistr_PUndirNet(*args):
    """
    PlotWccDistr_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotWccDistr_PUndirNet(PUndirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotWccDistr_PUndirNet(*args)

def PlotOutDegDistr_PUndirNet(*args):
    """
    PlotOutDegDistr_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &
    PowerFit: bool const &

    PlotOutDegDistr_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &

    PlotOutDegDistr_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotOutDegDistr_PUndirNet(PUndirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotOutDegDistr_PUndirNet(*args)

def PlotInDegDistr_PUndirNet(*args):
    """
    PlotInDegDistr_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &
    PowerFit: bool const &

    PlotInDegDistr_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &

    PlotInDegDistr_PUndirNet(PUndirNet Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotInDegDistr_PUndirNet(PUndirNet Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotInDegDistr_PUndirNet(*args)

def PercentDegree_PUndirNet(Graph, Threshold=0):
    """
    PercentDegree_PUndirNet(PUndirNet Graph, int64 const Threshold=0) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    Threshold: int64 const

    PercentDegree_PUndirNet(PUndirNet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.PercentDegree_PUndirNet(Graph, Threshold)

def NodesGTEDegree_PUndirNet(Graph, Threshold=0):
    """
    NodesGTEDegree_PUndirNet(PUndirNet Graph, int64 const Threshold=0) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &
    Threshold: int64 const

    NodesGTEDegree_PUndirNet(PUndirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.NodesGTEDegree_PUndirNet(Graph, Threshold)

def MxDegree_PUndirNet(Graph):
    """
    MxDegree_PUndirNet(PUndirNet Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.MxDegree_PUndirNet(Graph)

def PercentMxWcc_PUndirNet(Graph):
    """
    PercentMxWcc_PUndirNet(PUndirNet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.PercentMxWcc_PUndirNet(Graph)

def PercentMxScc_PUndirNet(Graph):
    """
    PercentMxScc_PUndirNet(PUndirNet Graph) -> double

    Parameters
    ----------
    Graph: TPt< TUndirNet > const &

    """
    return _SnapTime.PercentMxScc_PUndirNet(Graph)

def ToGraph_PUndirNet(Table, SrcCol, DstCol, AggrPolicy):
    """
    ToGraph_PUndirNet(PTable Table, TStr SrcCol, TStr DstCol, TAttrAggr AggrPolicy) -> PUndirNet

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    AggrPolicy: enum TAttrAggr

    """
    return _SnapTime.ToGraph_PUndirNet(Table, SrcCol, DstCol, AggrPolicy)

# redefine TNGraphMPEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TNGraphMPEdgeI.GetId = GetId


def PrintGraphStatTable_PNGraphMP(*args):
    """
    PrintGraphStatTable_PNGraphMP(PNGraphMP G, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    G: TPt< TNGraphMP > const &
    OutFNm: TStr
    Desc: TStr

    PrintGraphStatTable_PNGraphMP(PNGraphMP G, TStr OutFNm)

    Parameters
    ----------
    G: TPt< TNGraphMP > const &
    OutFNm: TStr

    """
    return _SnapTime.PrintGraphStatTable_PNGraphMP(*args)
class PNGraphMP(object):
    """Proxy of C++ TPt<(TNGraphMP)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> PNGraphMP"""
        return _SnapTime.PNGraphMP_New()

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_PNGraphMP

    def Save(self, SOut):
        """
        Save(PNGraphMP self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.PNGraphMP_Save(self, SOut)


    def __deref__(self):
        """
        __deref__(PNGraphMP self) -> TNGraphMP

        Parameters
        ----------
        self: TPt< TNGraphMP > const *

        """
        return _SnapTime.PNGraphMP___deref__(self)


    def __ref__(self):
        """
        __ref__(PNGraphMP self) -> TNGraphMP

        Parameters
        ----------
        self: TPt< TNGraphMP > const *

        """
        return _SnapTime.PNGraphMP___ref__(self)


    def __call__(self):
        """
        __call__(PNGraphMP self) -> TNGraphMP

        Parameters
        ----------
        self: TPt< TNGraphMP > const *

        """
        return _SnapTime.PNGraphMP___call__(self)


    def Empty(self):
        """
        Empty(PNGraphMP self) -> bool

        Parameters
        ----------
        self: TPt< TNGraphMP > const *

        """
        return _SnapTime.PNGraphMP_Empty(self)


    def Clr(self):
        """
        Clr(PNGraphMP self)

        Parameters
        ----------
        self: TPt< TNGraphMP > *

        """
        return _SnapTime.PNGraphMP_Clr(self)


    def GetRefs(self):
        """
        GetRefs(PNGraphMP self) -> int64

        Parameters
        ----------
        self: TPt< TNGraphMP > const *

        """
        return _SnapTime.PNGraphMP_GetRefs(self)


    def Load(self, SIn):
        """
        Load(PNGraphMP self, TSIn SIn) -> PNGraphMP

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.PNGraphMP_Load(self, SIn)


    def HasFlag(self, Flag):
        """
        HasFlag(PNGraphMP self, TGraphFlag const & Flag) -> bool

        Parameters
        ----------
        Flag: TGraphFlag const &

        """
        return _SnapTime.PNGraphMP_HasFlag(self, Flag)


    def GetNodes(self):
        """
        GetNodes(PNGraphMP self) -> int64

        Parameters
        ----------
        self: TPt< TNGraphMP > const *

        """
        return _SnapTime.PNGraphMP_GetNodes(self)


    def SetNodes(self, Length):
        """
        SetNodes(PNGraphMP self, int64 const & Length)

        Parameters
        ----------
        Length: int64 const &

        """
        return _SnapTime.PNGraphMP_SetNodes(self, Length)


    def AddNode(self, *args):
        """
        AddNode(PNGraphMP self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(PNGraphMP self) -> int64
        AddNode(PNGraphMP self, TNGraphMP::TNodeI const & NodeId) -> int64

        Parameters
        ----------
        NodeId: TNGraphMP::TNodeI const &

        AddNode(PNGraphMP self, int64 const & NId, TInt64V InNIdV, TInt64V OutNIdV) -> int64

        Parameters
        ----------
        NId: int64 const &
        InNIdV: TInt64V const &
        OutNIdV: TInt64V const &

        AddNode(PNGraphMP self, int64 const & NId, TVecPool< TInt64,int64 > const & Pool, int64 const & SrcVId, int64 const & DstVId) -> int64

        Parameters
        ----------
        NId: int64 const &
        Pool: TVecPool< TInt64,int64 > const &
        SrcVId: int64 const &
        DstVId: int64 const &

        """
        return _SnapTime.PNGraphMP_AddNode(self, *args)


    def AddNodeUnchecked(self, NId=-1):
        """
        AddNodeUnchecked(PNGraphMP self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNodeUnchecked(PNGraphMP self) -> int64

        Parameters
        ----------
        self: TPt< TNGraphMP > *

        """
        return _SnapTime.PNGraphMP_AddNodeUnchecked(self, NId)


    def DelNode(self, *args):
        """
        DelNode(PNGraphMP self, int64 const & NId)

        Parameters
        ----------
        NId: int64 const &

        DelNode(PNGraphMP self, TNGraphMP::TNode const & NodeI)

        Parameters
        ----------
        NodeI: TNGraphMP::TNode const &

        """
        return _SnapTime.PNGraphMP_DelNode(self, *args)


    def IsNode(self, NId):
        """
        IsNode(PNGraphMP self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.PNGraphMP_IsNode(self, NId)


    def BegNI(self, *args):
        """
        BegNI(PNGraphMP self) -> TNGraphMP::TNodeI
        BegNI(PNGraphMP self) -> TNGraphMPNodeI

        Parameters
        ----------
        self: TPt< TNGraphMP > *

        """
        return _SnapTime.PNGraphMP_BegNI(self, *args)


    def EndNI(self, *args):
        """
        EndNI(PNGraphMP self) -> TNGraphMP::TNodeI
        EndNI(PNGraphMP self) -> TNGraphMPNodeI

        Parameters
        ----------
        self: TPt< TNGraphMP > *

        """
        return _SnapTime.PNGraphMP_EndNI(self, *args)


    def GetNI(self, *args):
        """
        GetNI(PNGraphMP self, int64 const & NId) -> TNGraphMP::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetNI(PNGraphMP self, int64 const & NId) -> TNGraphMPNodeI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.PNGraphMP_GetNI(self, *args)


    def GetMxNId(self):
        """
        GetMxNId(PNGraphMP self) -> int64

        Parameters
        ----------
        self: TPt< TNGraphMP > const *

        """
        return _SnapTime.PNGraphMP_GetMxNId(self)


    def Reserved(self):
        """
        Reserved(PNGraphMP self) -> int64

        Parameters
        ----------
        self: TPt< TNGraphMP > const *

        """
        return _SnapTime.PNGraphMP_Reserved(self)


    def GetEdges(self):
        """
        GetEdges(PNGraphMP self) -> int64

        Parameters
        ----------
        self: TPt< TNGraphMP > const *

        """
        return _SnapTime.PNGraphMP_GetEdges(self)


    def AddEdge(self, *args):
        """
        AddEdge(PNGraphMP self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        AddEdge(PNGraphMP self, TNGraphMP::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TNGraphMP::TEdgeI const &

        """
        return _SnapTime.PNGraphMP_AddEdge(self, *args)


    def AddEdgeUnchecked(self, SrcNId, DstNId):
        """
        AddEdgeUnchecked(PNGraphMP self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNGraphMP_AddEdgeUnchecked(self, SrcNId, DstNId)


    def AddOutEdge1(self, SrcIdx, SrcNId, DstNId):
        """
        AddOutEdge1(PNGraphMP self, int64 & SrcIdx, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcIdx: int64 &
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNGraphMP_AddOutEdge1(self, SrcIdx, SrcNId, DstNId)


    def AddInEdge1(self, DstIdx, SrcNId, DstNId):
        """
        AddInEdge1(PNGraphMP self, int64 & DstIdx, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        DstIdx: int64 &
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNGraphMP_AddInEdge1(self, DstIdx, SrcNId, DstNId)


    def AddOutEdge2(self, SrcNId, DstNId):
        """
        AddOutEdge2(PNGraphMP self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNGraphMP_AddOutEdge2(self, SrcNId, DstNId)


    def AddInEdge2(self, SrcNId, DstNId):
        """
        AddInEdge2(PNGraphMP self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNGraphMP_AddInEdge2(self, SrcNId, DstNId)


    def AddNodeWithEdges(self, NId, InNIdV, OutNIdV):
        """
        AddNodeWithEdges(PNGraphMP self, TInt64 NId, TInt64V InNIdV, TInt64V OutNIdV)

        Parameters
        ----------
        NId: TInt64 const &
        InNIdV: TInt64V &
        OutNIdV: TInt64V &

        """
        return _SnapTime.PNGraphMP_AddNodeWithEdges(self, NId, InNIdV, OutNIdV)


    def DelEdge(self, SrcNId, DstNId, IsDir=True):
        """
        DelEdge(PNGraphMP self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        DelEdge(PNGraphMP self, int64 const & SrcNId, int64 const & DstNId)

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNGraphMP_DelEdge(self, SrcNId, DstNId, IsDir)


    def IsEdge(self, SrcNId, DstNId, IsDir=True):
        """
        IsEdge(PNGraphMP self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        IsEdge(PNGraphMP self, int64 const & SrcNId, int64 const & DstNId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNGraphMP_IsEdge(self, SrcNId, DstNId, IsDir)


    def BegEI(self, *args):
        """
        BegEI(PNGraphMP self) -> TNGraphMP::TEdgeI
        BegEI(PNGraphMP self) -> TNGraphMPEdgeI

        Parameters
        ----------
        self: TPt< TNGraphMP > *

        """
        return _SnapTime.PNGraphMP_BegEI(self, *args)


    def EndEI(self, *args):
        """
        EndEI(PNGraphMP self) -> TNGraphMP::TEdgeI
        EndEI(PNGraphMP self) -> TNGraphMPEdgeI

        Parameters
        ----------
        self: TPt< TNGraphMP > *

        """
        return _SnapTime.PNGraphMP_EndEI(self, *args)


    def GetEI(self, SrcNId, DstNId):
        """
        GetEI(PNGraphMP self, int64 const & SrcNId, int64 const & DstNId) -> TNGraphMP::TEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNGraphMP_GetEI(self, SrcNId, DstNId)


    def GetRndNId(self, *args):
        """
        GetRndNId(PNGraphMP self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(PNGraphMP self) -> int64

        Parameters
        ----------
        self: TPt< TNGraphMP > *

        """
        return _SnapTime.PNGraphMP_GetRndNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(PNGraphMP self, TRnd Rnd) -> TNGraphMP::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(PNGraphMP self) -> TNGraphMP::TNodeI

        Parameters
        ----------
        self: TPt< TNGraphMP > *

        """
        return _SnapTime.PNGraphMP_GetRndNI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(PNGraphMP self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.PNGraphMP_GetNIdV(self, NIdV)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(PNGraphMP self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.PNGraphMP_Reserve(self, Nodes, Edges)


    def ReserveNodeDegs(self, Idx, InDeg, OutDeg):
        """
        ReserveNodeDegs(PNGraphMP self, int64 const & Idx, int64 const & InDeg, int64 const & OutDeg)

        Parameters
        ----------
        Idx: int64 const &
        InDeg: int64 const &
        OutDeg: int64 const &

        """
        return _SnapTime.PNGraphMP_ReserveNodeDegs(self, Idx, InDeg, OutDeg)


    def ReserveNIdInDeg(self, NId, InDeg):
        """
        ReserveNIdInDeg(PNGraphMP self, int64 const & NId, int64 const & InDeg)

        Parameters
        ----------
        NId: int64 const &
        InDeg: int64 const &

        """
        return _SnapTime.PNGraphMP_ReserveNIdInDeg(self, NId, InDeg)


    def ReserveNIdOutDeg(self, NId, OutDeg):
        """
        ReserveNIdOutDeg(PNGraphMP self, int64 const & NId, int64 const & OutDeg)

        Parameters
        ----------
        NId: int64 const &
        OutDeg: int64 const &

        """
        return _SnapTime.PNGraphMP_ReserveNIdOutDeg(self, NId, OutDeg)


    def SortEdges(self, Idx, InDeg, OutDeg):
        """
        SortEdges(PNGraphMP self, int64 const & Idx, int64 const & InDeg, int64 const & OutDeg)

        Parameters
        ----------
        Idx: int64 const &
        InDeg: int64 const &
        OutDeg: int64 const &

        """
        return _SnapTime.PNGraphMP_SortEdges(self, Idx, InDeg, OutDeg)


    def SortNodeAdjV(self):
        """
        SortNodeAdjV(PNGraphMP self)

        Parameters
        ----------
        self: TPt< TNGraphMP > *

        """
        return _SnapTime.PNGraphMP_SortNodeAdjV(self)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(PNGraphMP self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(PNGraphMP self)

        Parameters
        ----------
        self: TPt< TNGraphMP > *

        """
        return _SnapTime.PNGraphMP_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(PNGraphMP self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(PNGraphMP self) -> bool

        Parameters
        ----------
        self: TPt< TNGraphMP > const *

        """
        return _SnapTime.PNGraphMP_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(PNGraphMP self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(PNGraphMP self)

        Parameters
        ----------
        self: TPt< TNGraphMP > const *

        """
        return _SnapTime.PNGraphMP_Dump(self, *args)


    def GetSmallGraph(self):
        """
        GetSmallGraph(PNGraphMP self) -> PNGraphMP

        Parameters
        ----------
        self: TPt< TNGraphMP > *

        """
        return _SnapTime.PNGraphMP_GetSmallGraph(self)

PNGraphMP.Save = new_instancemethod(_SnapTime.PNGraphMP_Save, None, PNGraphMP)
PNGraphMP.__deref__ = new_instancemethod(_SnapTime.PNGraphMP___deref__, None, PNGraphMP)
PNGraphMP.__ref__ = new_instancemethod(_SnapTime.PNGraphMP___ref__, None, PNGraphMP)
PNGraphMP.__call__ = new_instancemethod(_SnapTime.PNGraphMP___call__, None, PNGraphMP)
PNGraphMP.Empty = new_instancemethod(_SnapTime.PNGraphMP_Empty, None, PNGraphMP)
PNGraphMP.Clr = new_instancemethod(_SnapTime.PNGraphMP_Clr, None, PNGraphMP)
PNGraphMP.GetRefs = new_instancemethod(_SnapTime.PNGraphMP_GetRefs, None, PNGraphMP)
PNGraphMP.Load = new_instancemethod(_SnapTime.PNGraphMP_Load, None, PNGraphMP)
PNGraphMP.HasFlag = new_instancemethod(_SnapTime.PNGraphMP_HasFlag, None, PNGraphMP)
PNGraphMP.GetNodes = new_instancemethod(_SnapTime.PNGraphMP_GetNodes, None, PNGraphMP)
PNGraphMP.SetNodes = new_instancemethod(_SnapTime.PNGraphMP_SetNodes, None, PNGraphMP)
PNGraphMP.AddNode = new_instancemethod(_SnapTime.PNGraphMP_AddNode, None, PNGraphMP)
PNGraphMP.AddNodeUnchecked = new_instancemethod(_SnapTime.PNGraphMP_AddNodeUnchecked, None, PNGraphMP)
PNGraphMP.DelNode = new_instancemethod(_SnapTime.PNGraphMP_DelNode, None, PNGraphMP)
PNGraphMP.IsNode = new_instancemethod(_SnapTime.PNGraphMP_IsNode, None, PNGraphMP)
PNGraphMP.BegNI = new_instancemethod(_SnapTime.PNGraphMP_BegNI, None, PNGraphMP)
PNGraphMP.EndNI = new_instancemethod(_SnapTime.PNGraphMP_EndNI, None, PNGraphMP)
PNGraphMP.GetNI = new_instancemethod(_SnapTime.PNGraphMP_GetNI, None, PNGraphMP)
PNGraphMP.GetMxNId = new_instancemethod(_SnapTime.PNGraphMP_GetMxNId, None, PNGraphMP)
PNGraphMP.Reserved = new_instancemethod(_SnapTime.PNGraphMP_Reserved, None, PNGraphMP)
PNGraphMP.GetEdges = new_instancemethod(_SnapTime.PNGraphMP_GetEdges, None, PNGraphMP)
PNGraphMP.AddEdge = new_instancemethod(_SnapTime.PNGraphMP_AddEdge, None, PNGraphMP)
PNGraphMP.AddEdgeUnchecked = new_instancemethod(_SnapTime.PNGraphMP_AddEdgeUnchecked, None, PNGraphMP)
PNGraphMP.AddOutEdge1 = new_instancemethod(_SnapTime.PNGraphMP_AddOutEdge1, None, PNGraphMP)
PNGraphMP.AddInEdge1 = new_instancemethod(_SnapTime.PNGraphMP_AddInEdge1, None, PNGraphMP)
PNGraphMP.AddOutEdge2 = new_instancemethod(_SnapTime.PNGraphMP_AddOutEdge2, None, PNGraphMP)
PNGraphMP.AddInEdge2 = new_instancemethod(_SnapTime.PNGraphMP_AddInEdge2, None, PNGraphMP)
PNGraphMP.AddNodeWithEdges = new_instancemethod(_SnapTime.PNGraphMP_AddNodeWithEdges, None, PNGraphMP)
PNGraphMP.DelEdge = new_instancemethod(_SnapTime.PNGraphMP_DelEdge, None, PNGraphMP)
PNGraphMP.IsEdge = new_instancemethod(_SnapTime.PNGraphMP_IsEdge, None, PNGraphMP)
PNGraphMP.BegEI = new_instancemethod(_SnapTime.PNGraphMP_BegEI, None, PNGraphMP)
PNGraphMP.EndEI = new_instancemethod(_SnapTime.PNGraphMP_EndEI, None, PNGraphMP)
PNGraphMP.GetEI = new_instancemethod(_SnapTime.PNGraphMP_GetEI, None, PNGraphMP)
PNGraphMP.GetRndNId = new_instancemethod(_SnapTime.PNGraphMP_GetRndNId, None, PNGraphMP)
PNGraphMP.GetRndNI = new_instancemethod(_SnapTime.PNGraphMP_GetRndNI, None, PNGraphMP)
PNGraphMP.GetNIdV = new_instancemethod(_SnapTime.PNGraphMP_GetNIdV, None, PNGraphMP)
PNGraphMP.Reserve = new_instancemethod(_SnapTime.PNGraphMP_Reserve, None, PNGraphMP)
PNGraphMP.ReserveNodeDegs = new_instancemethod(_SnapTime.PNGraphMP_ReserveNodeDegs, None, PNGraphMP)
PNGraphMP.ReserveNIdInDeg = new_instancemethod(_SnapTime.PNGraphMP_ReserveNIdInDeg, None, PNGraphMP)
PNGraphMP.ReserveNIdOutDeg = new_instancemethod(_SnapTime.PNGraphMP_ReserveNIdOutDeg, None, PNGraphMP)
PNGraphMP.SortEdges = new_instancemethod(_SnapTime.PNGraphMP_SortEdges, None, PNGraphMP)
PNGraphMP.SortNodeAdjV = new_instancemethod(_SnapTime.PNGraphMP_SortNodeAdjV, None, PNGraphMP)
PNGraphMP.Defrag = new_instancemethod(_SnapTime.PNGraphMP_Defrag, None, PNGraphMP)
PNGraphMP.IsOk = new_instancemethod(_SnapTime.PNGraphMP_IsOk, None, PNGraphMP)
PNGraphMP.Dump = new_instancemethod(_SnapTime.PNGraphMP_Dump, None, PNGraphMP)
PNGraphMP.GetSmallGraph = new_instancemethod(_SnapTime.PNGraphMP_GetSmallGraph, None, PNGraphMP)
PNGraphMP_swigregister = _SnapTime.PNGraphMP_swigregister
PNGraphMP_swigregister(PNGraphMP)

def PNGraphMP_New():
    """PNGraphMP_New() -> PNGraphMP"""
    return _SnapTime.PNGraphMP_New()


def ToGraphMP_PNGraphMP(Table, SrcCol, DstCol):
    """
    ToGraphMP_PNGraphMP(PTable Table, TStr SrcCol, TStr DstCol) -> PNGraphMP

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &

    """
    return _SnapTime.ToGraphMP_PNGraphMP(Table, SrcCol, DstCol)

def ToGraphMP3_PNGraphMP(Table, SrcCol, DstCol):
    """
    ToGraphMP3_PNGraphMP(PTable Table, TStr SrcCol, TStr DstCol) -> PNGraphMP

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &

    """
    return _SnapTime.ToGraphMP3_PNGraphMP(Table, SrcCol, DstCol)

# redefine TNEANetMPEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TNEANetMPEdgeI.GetId = GetId


def PrintGraphStatTable_PNEANetMP(*args):
    """
    PrintGraphStatTable_PNEANetMP(PNEANetMP G, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    G: TPt< TNEANetMP > const &
    OutFNm: TStr
    Desc: TStr

    PrintGraphStatTable_PNEANetMP(PNEANetMP G, TStr OutFNm)

    Parameters
    ----------
    G: TPt< TNEANetMP > const &
    OutFNm: TStr

    """
    return _SnapTime.PrintGraphStatTable_PNEANetMP(*args)
class PNEANetMP(object):
    """Proxy of C++ TPt<(TNEANetMP)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> PNEANetMP"""
        return _SnapTime.PNEANetMP_New()

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_PNEANetMP

    def Save(self, SOut):
        """
        Save(PNEANetMP self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.PNEANetMP_Save(self, SOut)


    def __deref__(self):
        """
        __deref__(PNEANetMP self) -> TNEANetMP

        Parameters
        ----------
        self: TPt< TNEANetMP > const *

        """
        return _SnapTime.PNEANetMP___deref__(self)


    def __ref__(self):
        """
        __ref__(PNEANetMP self) -> TNEANetMP

        Parameters
        ----------
        self: TPt< TNEANetMP > const *

        """
        return _SnapTime.PNEANetMP___ref__(self)


    def __call__(self):
        """
        __call__(PNEANetMP self) -> TNEANetMP

        Parameters
        ----------
        self: TPt< TNEANetMP > const *

        """
        return _SnapTime.PNEANetMP___call__(self)


    def Empty(self):
        """
        Empty(PNEANetMP self) -> bool

        Parameters
        ----------
        self: TPt< TNEANetMP > const *

        """
        return _SnapTime.PNEANetMP_Empty(self)


    def Clr(self):
        """
        Clr(PNEANetMP self)

        Parameters
        ----------
        self: TPt< TNEANetMP > *

        """
        return _SnapTime.PNEANetMP_Clr(self)


    def GetRefs(self):
        """
        GetRefs(PNEANetMP self) -> int64

        Parameters
        ----------
        self: TPt< TNEANetMP > const *

        """
        return _SnapTime.PNEANetMP_GetRefs(self)


    def Load(self, SIn):
        """
        Load(PNEANetMP self, TSIn SIn) -> PNEANetMP

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.PNEANetMP_Load(self, SIn)


    def HasFlag(self, Flag):
        """
        HasFlag(PNEANetMP self, TGraphFlag const & Flag) -> bool

        Parameters
        ----------
        Flag: TGraphFlag const &

        """
        return _SnapTime.PNEANetMP_HasFlag(self, Flag)


    def GetNodes(self):
        """
        GetNodes(PNEANetMP self) -> int64

        Parameters
        ----------
        self: TPt< TNEANetMP > const *

        """
        return _SnapTime.PNEANetMP_GetNodes(self)


    def SetNodes(self, Length):
        """
        SetNodes(PNEANetMP self, int64 const & Length)

        Parameters
        ----------
        Length: int64 const &

        """
        return _SnapTime.PNEANetMP_SetNodes(self, Length)


    def AddNode(self, *args):
        """
        AddNode(PNEANetMP self, int64 NId=-1) -> int64

        Parameters
        ----------
        NId: int64

        AddNode(PNEANetMP self) -> int64
        AddNode(PNEANetMP self, TNEANetMP::TNodeI const & NodeId) -> int64

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &

        """
        return _SnapTime.PNEANetMP_AddNode(self, *args)


    def AddNodeWithEdges(self, NId, InEIdV, OutEIdV):
        """
        AddNodeWithEdges(PNEANetMP self, TInt64 NId, TInt64V InEIdV, TInt64V OutEIdV)

        Parameters
        ----------
        NId: TInt64 const &
        InEIdV: TInt64V &
        OutEIdV: TInt64V &

        """
        return _SnapTime.PNEANetMP_AddNodeWithEdges(self, NId, InEIdV, OutEIdV)


    def IsNode(self, NId):
        """
        IsNode(PNEANetMP self, int64 const & NId) -> bool

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.PNEANetMP_IsNode(self, NId)


    def BegNI(self, *args):
        """
        BegNI(PNEANetMP self) -> TNEANetMP::TNodeI
        BegNI(PNEANetMP self) -> TNEANetMPNodeI

        Parameters
        ----------
        self: TPt< TNEANetMP > *

        """
        return _SnapTime.PNEANetMP_BegNI(self, *args)


    def EndNI(self, *args):
        """
        EndNI(PNEANetMP self) -> TNEANetMP::TNodeI
        EndNI(PNEANetMP self) -> TNEANetMPNodeI

        Parameters
        ----------
        self: TPt< TNEANetMP > *

        """
        return _SnapTime.PNEANetMP_EndNI(self, *args)


    def GetNI(self, *args):
        """
        GetNI(PNEANetMP self, int64 const & NId) -> TNEANetMP::TNodeI

        Parameters
        ----------
        NId: int64 const &

        GetNI(PNEANetMP self, int64 const & NId) -> TNEANetMPNodeI

        Parameters
        ----------
        NId: int64 const &

        """
        return _SnapTime.PNEANetMP_GetNI(self, *args)


    def BegNAIntI(self, attr):
        """
        BegNAIntI(PNEANetMP self, TStr attr) -> TNEANetMP::TAIntI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_BegNAIntI(self, attr)


    def EndNAIntI(self, attr):
        """
        EndNAIntI(PNEANetMP self, TStr attr) -> TNEANetMP::TAIntI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_EndNAIntI(self, attr)


    def GetNAIntI(self, attr, NId):
        """
        GetNAIntI(PNEANetMP self, TStr attr, int64 const & NId) -> TNEANetMP::TAIntI

        Parameters
        ----------
        attr: TStr const &
        NId: int64 const &

        """
        return _SnapTime.PNEANetMP_GetNAIntI(self, attr, NId)


    def BegNAStrI(self, attr):
        """
        BegNAStrI(PNEANetMP self, TStr attr) -> TNEANetMP::TAStrI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_BegNAStrI(self, attr)


    def EndNAStrI(self, attr):
        """
        EndNAStrI(PNEANetMP self, TStr attr) -> TNEANetMP::TAStrI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_EndNAStrI(self, attr)


    def GetNAStrI(self, attr, NId):
        """
        GetNAStrI(PNEANetMP self, TStr attr, int64 const & NId) -> TNEANetMP::TAStrI

        Parameters
        ----------
        attr: TStr const &
        NId: int64 const &

        """
        return _SnapTime.PNEANetMP_GetNAStrI(self, attr, NId)


    def BegNAFltI(self, attr):
        """
        BegNAFltI(PNEANetMP self, TStr attr) -> TNEANetMP::TAFltI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_BegNAFltI(self, attr)


    def EndNAFltI(self, attr):
        """
        EndNAFltI(PNEANetMP self, TStr attr) -> TNEANetMP::TAFltI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_EndNAFltI(self, attr)


    def GetNAFltI(self, attr, NId):
        """
        GetNAFltI(PNEANetMP self, TStr attr, int64 const & NId) -> TNEANetMP::TAFltI

        Parameters
        ----------
        attr: TStr const &
        NId: int64 const &

        """
        return _SnapTime.PNEANetMP_GetNAFltI(self, attr, NId)


    def AttrNameNI(self, *args):
        """
        AttrNameNI(PNEANetMP self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        AttrNameNI(PNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANetMP_AttrNameNI(self, *args)


    def AttrValueNI(self, *args):
        """
        AttrValueNI(PNEANetMP self, TInt64 NId, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TStr64V &

        AttrValueNI(PNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.PNEANetMP_AttrValueNI(self, *args)


    def IntAttrNameNI(self, *args):
        """
        IntAttrNameNI(PNEANetMP self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        IntAttrNameNI(PNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANetMP_IntAttrNameNI(self, *args)


    def IntAttrValueNI(self, *args):
        """
        IntAttrValueNI(PNEANetMP self, TInt64 NId, TInt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TInt64V &

        IntAttrValueNI(PNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TInt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TInt64V &

        """
        return _SnapTime.PNEANetMP_IntAttrValueNI(self, *args)


    def StrAttrNameNI(self, *args):
        """
        StrAttrNameNI(PNEANetMP self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        StrAttrNameNI(PNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANetMP_StrAttrNameNI(self, *args)


    def StrAttrValueNI(self, *args):
        """
        StrAttrValueNI(PNEANetMP self, TInt64 NId, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TStr64V &

        StrAttrValueNI(PNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.PNEANetMP_StrAttrValueNI(self, *args)


    def FltAttrNameNI(self, *args):
        """
        FltAttrNameNI(PNEANetMP self, TInt64 NId, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        Names: TStr64V &

        FltAttrNameNI(PNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TStr64V Names)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANetMP_FltAttrNameNI(self, *args)


    def FltAttrValueNI(self, *args):
        """
        FltAttrValueNI(PNEANetMP self, TInt64 NId, TFlt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        Values: TFlt64V &

        FltAttrValueNI(PNEANetMP self, TInt64 NId, TStrIntPr64H::TIter NodeHI, TFlt64V Values)

        Parameters
        ----------
        NId: TInt64 const &
        NodeHI: TStrIntPr64H::TIter
        Values: TFlt64V &

        """
        return _SnapTime.PNEANetMP_FltAttrValueNI(self, *args)


    def AttrNameEI(self, *args):
        """
        AttrNameEI(PNEANetMP self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        AttrNameEI(PNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANetMP_AttrNameEI(self, *args)


    def AttrValueEI(self, *args):
        """
        AttrValueEI(PNEANetMP self, TInt64 EId, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TStr64V &

        AttrValueEI(PNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.PNEANetMP_AttrValueEI(self, *args)


    def IntAttrNameEI(self, *args):
        """
        IntAttrNameEI(PNEANetMP self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        IntAttrNameEI(PNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANetMP_IntAttrNameEI(self, *args)


    def IntAttrValueEI(self, *args):
        """
        IntAttrValueEI(PNEANetMP self, TInt64 EId, TInt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TInt64V &

        IntAttrValueEI(PNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TInt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TInt64V &

        """
        return _SnapTime.PNEANetMP_IntAttrValueEI(self, *args)


    def StrAttrNameEI(self, *args):
        """
        StrAttrNameEI(PNEANetMP self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        StrAttrNameEI(PNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANetMP_StrAttrNameEI(self, *args)


    def StrAttrValueEI(self, *args):
        """
        StrAttrValueEI(PNEANetMP self, TInt64 EId, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TStr64V &

        StrAttrValueEI(PNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TStr64V &

        """
        return _SnapTime.PNEANetMP_StrAttrValueEI(self, *args)


    def FltAttrNameEI(self, *args):
        """
        FltAttrNameEI(PNEANetMP self, TInt64 EId, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        Names: TStr64V &

        FltAttrNameEI(PNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TStr64V Names)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Names: TStr64V &

        """
        return _SnapTime.PNEANetMP_FltAttrNameEI(self, *args)


    def FltAttrValueEI(self, *args):
        """
        FltAttrValueEI(PNEANetMP self, TInt64 EId, TFlt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        Values: TFlt64V &

        FltAttrValueEI(PNEANetMP self, TInt64 EId, TStrIntPr64H::TIter EdgeHI, TFlt64V Values)

        Parameters
        ----------
        EId: TInt64 const &
        EdgeHI: TStrIntPr64H::TIter
        Values: TFlt64V &

        """
        return _SnapTime.PNEANetMP_FltAttrValueEI(self, *args)


    def BegEAIntI(self, attr):
        """
        BegEAIntI(PNEANetMP self, TStr attr) -> TNEANetMP::TAIntI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_BegEAIntI(self, attr)


    def EndEAIntI(self, attr):
        """
        EndEAIntI(PNEANetMP self, TStr attr) -> TNEANetMP::TAIntI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_EndEAIntI(self, attr)


    def GetEAIntI(self, attr, EId):
        """
        GetEAIntI(PNEANetMP self, TStr attr, int64 const & EId) -> TNEANetMP::TAIntI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.PNEANetMP_GetEAIntI(self, attr, EId)


    def BegEAStrI(self, attr):
        """
        BegEAStrI(PNEANetMP self, TStr attr) -> TNEANetMP::TAStrI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_BegEAStrI(self, attr)


    def EndEAStrI(self, attr):
        """
        EndEAStrI(PNEANetMP self, TStr attr) -> TNEANetMP::TAStrI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_EndEAStrI(self, attr)


    def GetEAStrI(self, attr, EId):
        """
        GetEAStrI(PNEANetMP self, TStr attr, int64 const & EId) -> TNEANetMP::TAStrI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.PNEANetMP_GetEAStrI(self, attr, EId)


    def BegEAFltI(self, attr):
        """
        BegEAFltI(PNEANetMP self, TStr attr) -> TNEANetMP::TAFltI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_BegEAFltI(self, attr)


    def EndEAFltI(self, attr):
        """
        EndEAFltI(PNEANetMP self, TStr attr) -> TNEANetMP::TAFltI

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_EndEAFltI(self, attr)


    def GetEAFltI(self, attr, EId):
        """
        GetEAFltI(PNEANetMP self, TStr attr, int64 const & EId) -> TNEANetMP::TAFltI

        Parameters
        ----------
        attr: TStr const &
        EId: int64 const &

        """
        return _SnapTime.PNEANetMP_GetEAFltI(self, attr, EId)


    def GetMxNId(self):
        """
        GetMxNId(PNEANetMP self) -> int64

        Parameters
        ----------
        self: TPt< TNEANetMP > const *

        """
        return _SnapTime.PNEANetMP_GetMxNId(self)


    def GetMxEId(self):
        """
        GetMxEId(PNEANetMP self) -> int64

        Parameters
        ----------
        self: TPt< TNEANetMP > const *

        """
        return _SnapTime.PNEANetMP_GetMxEId(self)


    def Reserved(self):
        """
        Reserved(PNEANetMP self) -> int64

        Parameters
        ----------
        self: TPt< TNEANetMP > const *

        """
        return _SnapTime.PNEANetMP_Reserved(self)


    def ReservedE(self):
        """
        ReservedE(PNEANetMP self) -> int64

        Parameters
        ----------
        self: TPt< TNEANetMP > const *

        """
        return _SnapTime.PNEANetMP_ReservedE(self)


    def GetEdges(self):
        """
        GetEdges(PNEANetMP self) -> int64

        Parameters
        ----------
        self: TPt< TNEANetMP > const *

        """
        return _SnapTime.PNEANetMP_GetEdges(self)


    def SetEdges(self, Length):
        """
        SetEdges(PNEANetMP self, int64 const & Length)

        Parameters
        ----------
        Length: int64 const &

        """
        return _SnapTime.PNEANetMP_SetEdges(self, Length)


    def SetMxEId(self, Id):
        """
        SetMxEId(PNEANetMP self, TInt64 Id)

        Parameters
        ----------
        Id: TInt64 const &

        """
        return _SnapTime.PNEANetMP_SetMxEId(self, Id)


    def AddEdge(self, *args):
        """
        AddEdge(PNEANetMP self, int64 const & SrcNId, int64 const & DstNId, int64 EId=-1) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        EId: int64

        AddEdge(PNEANetMP self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        AddEdge(PNEANetMP self, TNEANetMP::TEdgeI const & EdgeI) -> int64

        Parameters
        ----------
        EdgeI: TNEANetMP::TEdgeI const &

        """
        return _SnapTime.PNEANetMP_AddEdge(self, *args)


    def AddEdgeUnchecked(self, EId, SrcNId, DstNId):
        """
        AddEdgeUnchecked(PNEANetMP self, TInt64 EId, int64 const SrcNId, int64 const DstNId)

        Parameters
        ----------
        EId: TInt64 const &
        SrcNId: int64 const
        DstNId: int64 const

        """
        return _SnapTime.PNEANetMP_AddEdgeUnchecked(self, EId, SrcNId, DstNId)


    def IsEdge(self, *args):
        """
        IsEdge(PNEANetMP self, int64 const & EId) -> bool

        Parameters
        ----------
        EId: int64 const &

        IsEdge(PNEANetMP self, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        IsDir: bool const &

        IsEdge(PNEANetMP self, int64 const & SrcNId, int64 const & DstNId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        IsEdge(PNEANetMP self, int64 const & SrcNId, int64 const & DstNId, int64 & EId, bool const & IsDir=True) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        EId: int64 &
        IsDir: bool const &

        IsEdge(PNEANetMP self, int64 const & SrcNId, int64 const & DstNId, int64 & EId) -> bool

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &
        EId: int64 &

        """
        return _SnapTime.PNEANetMP_IsEdge(self, *args)


    def GetEId(self, SrcNId, DstNId):
        """
        GetEId(PNEANetMP self, int64 const & SrcNId, int64 const & DstNId) -> int64

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNEANetMP_GetEId(self, SrcNId, DstNId)


    def BegEI(self, *args):
        """
        BegEI(PNEANetMP self) -> TNEANetMP::TEdgeI
        BegEI(PNEANetMP self) -> TNEANetMPEdgeI

        Parameters
        ----------
        self: TPt< TNEANetMP > *

        """
        return _SnapTime.PNEANetMP_BegEI(self, *args)


    def EndEI(self, *args):
        """
        EndEI(PNEANetMP self) -> TNEANetMP::TEdgeI
        EndEI(PNEANetMP self) -> TNEANetMPEdgeI

        Parameters
        ----------
        self: TPt< TNEANetMP > *

        """
        return _SnapTime.PNEANetMP_EndEI(self, *args)


    def GetEI(self, *args):
        """
        GetEI(PNEANetMP self, int64 const & EId) -> TNEANetMP::TEdgeI

        Parameters
        ----------
        EId: int64 const &

        GetEI(PNEANetMP self, int64 const & SrcNId, int64 const & DstNId) -> TNEANetMP::TEdgeI

        Parameters
        ----------
        SrcNId: int64 const &
        DstNId: int64 const &

        """
        return _SnapTime.PNEANetMP_GetEI(self, *args)


    def GetRndNId(self, *args):
        """
        GetRndNId(PNEANetMP self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNId(PNEANetMP self) -> int64

        Parameters
        ----------
        self: TPt< TNEANetMP > *

        """
        return _SnapTime.PNEANetMP_GetRndNId(self, *args)


    def GetRndNI(self, *args):
        """
        GetRndNI(PNEANetMP self, TRnd Rnd) -> TNEANetMP::TNodeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndNI(PNEANetMP self) -> TNEANetMP::TNodeI

        Parameters
        ----------
        self: TPt< TNEANetMP > *

        """
        return _SnapTime.PNEANetMP_GetRndNI(self, *args)


    def GetRndEId(self, *args):
        """
        GetRndEId(PNEANetMP self, TRnd Rnd) -> int64

        Parameters
        ----------
        Rnd: TRnd &

        GetRndEId(PNEANetMP self) -> int64

        Parameters
        ----------
        self: TPt< TNEANetMP > *

        """
        return _SnapTime.PNEANetMP_GetRndEId(self, *args)


    def GetRndEI(self, *args):
        """
        GetRndEI(PNEANetMP self, TRnd Rnd) -> TNEANetMP::TEdgeI

        Parameters
        ----------
        Rnd: TRnd &

        GetRndEI(PNEANetMP self) -> TNEANetMP::TEdgeI

        Parameters
        ----------
        self: TPt< TNEANetMP > *

        """
        return _SnapTime.PNEANetMP_GetRndEI(self, *args)


    def GetNIdV(self, NIdV):
        """
        GetNIdV(PNEANetMP self, TInt64V NIdV)

        Parameters
        ----------
        NIdV: TInt64V &

        """
        return _SnapTime.PNEANetMP_GetNIdV(self, NIdV)


    def GetEIdV(self, EIdV):
        """
        GetEIdV(PNEANetMP self, TInt64V EIdV)

        Parameters
        ----------
        EIdV: TInt64V &

        """
        return _SnapTime.PNEANetMP_GetEIdV(self, EIdV)


    def Reserve(self, Nodes, Edges):
        """
        Reserve(PNEANetMP self, int64 const & Nodes, int64 const & Edges)

        Parameters
        ----------
        Nodes: int64 const &
        Edges: int64 const &

        """
        return _SnapTime.PNEANetMP_Reserve(self, Nodes, Edges)


    def ReserveAttr(self, NIntAttr, NFltAttr, NStrAttr, EIntAttr, EFltAttr, EStrAttr):
        """
        ReserveAttr(PNEANetMP self, int64 const & NIntAttr, int64 const & NFltAttr, int64 const & NStrAttr, int64 const & EIntAttr, int64 const & EFltAttr, int64 const & EStrAttr)

        Parameters
        ----------
        NIntAttr: int64 const &
        NFltAttr: int64 const &
        NStrAttr: int64 const &
        EIntAttr: int64 const &
        EFltAttr: int64 const &
        EStrAttr: int64 const &

        """
        return _SnapTime.PNEANetMP_ReserveAttr(self, NIntAttr, NFltAttr, NStrAttr, EIntAttr, EFltAttr, EStrAttr)


    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(PNEANetMP self, bool const & OnlyNodeLinks=False)

        Parameters
        ----------
        OnlyNodeLinks: bool const &

        Defrag(PNEANetMP self)

        Parameters
        ----------
        self: TPt< TNEANetMP > *

        """
        return _SnapTime.PNEANetMP_Defrag(self, OnlyNodeLinks)


    def IsOk(self, ThrowExcept=True):
        """
        IsOk(PNEANetMP self, bool const & ThrowExcept=True) -> bool

        Parameters
        ----------
        ThrowExcept: bool const &

        IsOk(PNEANetMP self) -> bool

        Parameters
        ----------
        self: TPt< TNEANetMP > const *

        """
        return _SnapTime.PNEANetMP_IsOk(self, ThrowExcept)


    def Dump(self, *args):
        """
        Dump(PNEANetMP self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(PNEANetMP self)

        Parameters
        ----------
        self: TPt< TNEANetMP > const *

        """
        return _SnapTime.PNEANetMP_Dump(self, *args)


    def AddIntAttrDatN(self, *args):
        """
        AddIntAttrDatN(PNEANetMP self, TNEANetMP::TNodeI const & NodeId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        value: TInt64 const &
        attr: TStr const &

        AddIntAttrDatN(PNEANetMP self, int64 const & NId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TInt64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_AddIntAttrDatN(self, *args)


    def AddStrAttrDatN(self, *args):
        """
        AddStrAttrDatN(PNEANetMP self, TNEANetMP::TNodeI const & NodeId, TStr value, TStr attr) -> int64

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        value: TStr const &
        attr: TStr const &

        AddStrAttrDatN(PNEANetMP self, int64 const & NId, TStr value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TStr const &
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_AddStrAttrDatN(self, *args)


    def AddFltAttrDatN(self, *args):
        """
        AddFltAttrDatN(PNEANetMP self, TNEANetMP::TNodeI const & NodeId, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        value: TFlt const &
        attr: TStr const &

        AddFltAttrDatN(PNEANetMP self, int64 const & NId, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        value: TFlt const &
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_AddFltAttrDatN(self, *args)


    def AddIntAttrDatE(self, *args):
        """
        AddIntAttrDatE(PNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        value: TInt64 const &
        attr: TStr const &

        AddIntAttrDatE(PNEANetMP self, int64 const & EId, TInt64 value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TInt64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_AddIntAttrDatE(self, *args)


    def AddStrAttrDatE(self, *args):
        """
        AddStrAttrDatE(PNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, TStr value, TStr attr) -> int64

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        value: TStr const &
        attr: TStr const &

        AddStrAttrDatE(PNEANetMP self, int64 const & EId, TStr value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TStr const &
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_AddStrAttrDatE(self, *args)


    def AddFltAttrDatE(self, *args):
        """
        AddFltAttrDatE(PNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        value: TFlt const &
        attr: TStr const &

        AddFltAttrDatE(PNEANetMP self, int64 const & EId, TFlt value, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        value: TFlt const &
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_AddFltAttrDatE(self, *args)


    def GetIntAttrDatN(self, *args):
        """
        GetIntAttrDatN(PNEANetMP self, TNEANetMP::TNodeI const & NodeId, TStr attr) -> TInt64

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        attr: TStr const &

        GetIntAttrDatN(PNEANetMP self, int64 const & NId, TStr attr) -> TInt64

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_GetIntAttrDatN(self, *args)


    def GetStrAttrDatN(self, *args):
        """
        GetStrAttrDatN(PNEANetMP self, TNEANetMP::TNodeI const & NodeId, TStr attr) -> TStr

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        attr: TStr const &

        GetStrAttrDatN(PNEANetMP self, int64 const & NId, TStr attr) -> TStr

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_GetStrAttrDatN(self, *args)


    def GetFltAttrDatN(self, *args):
        """
        GetFltAttrDatN(PNEANetMP self, TNEANetMP::TNodeI const & NodeId, TStr attr) -> TFlt

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        attr: TStr const &

        GetFltAttrDatN(PNEANetMP self, int64 const & NId, TStr attr) -> TFlt

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_GetFltAttrDatN(self, *args)


    def GetIntAttrIndN(self, attr):
        """
        GetIntAttrIndN(PNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_GetIntAttrIndN(self, attr)


    def GetIntAttrIndDatN(self, *args):
        """
        GetIntAttrIndDatN(PNEANetMP self, TNEANetMP::TNodeI const & NodeId, int64 const & index) -> TInt64

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        index: int64 const &

        GetIntAttrIndDatN(PNEANetMP self, int64 const & NId, int64 const & index) -> TInt64

        Parameters
        ----------
        NId: int64 const &
        index: int64 const &

        """
        return _SnapTime.PNEANetMP_GetIntAttrIndDatN(self, *args)


    def GetIntAttrDatE(self, *args):
        """
        GetIntAttrDatE(PNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, TStr attr) -> TInt64

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        attr: TStr const &

        GetIntAttrDatE(PNEANetMP self, int64 const & EId, TStr attr) -> TInt64

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_GetIntAttrDatE(self, *args)


    def GetStrAttrDatE(self, *args):
        """
        GetStrAttrDatE(PNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, TStr attr) -> TStr

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        attr: TStr const &

        GetStrAttrDatE(PNEANetMP self, int64 const & EId, TStr attr) -> TStr

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_GetStrAttrDatE(self, *args)


    def GetFltAttrDatE(self, *args):
        """
        GetFltAttrDatE(PNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, TStr attr) -> TFlt

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        attr: TStr const &

        GetFltAttrDatE(PNEANetMP self, int64 const & EId, TStr attr) -> TFlt

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_GetFltAttrDatE(self, *args)


    def GetIntAttrIndE(self, attr):
        """
        GetIntAttrIndE(PNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_GetIntAttrIndE(self, attr)


    def GetIntAttrIndDatE(self, *args):
        """
        GetIntAttrIndDatE(PNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, int64 const & index) -> TInt64

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        index: int64 const &

        GetIntAttrIndDatE(PNEANetMP self, int64 const & EId, int64 const & index) -> TInt64

        Parameters
        ----------
        EId: int64 const &
        index: int64 const &

        """
        return _SnapTime.PNEANetMP_GetIntAttrIndDatE(self, *args)


    def DelAttrDatN(self, *args):
        """
        DelAttrDatN(PNEANetMP self, TNEANetMP::TNodeI const & NodeId, TStr attr) -> int64

        Parameters
        ----------
        NodeId: TNEANetMP::TNodeI const &
        attr: TStr const &

        DelAttrDatN(PNEANetMP self, int64 const & NId, TStr attr) -> int64

        Parameters
        ----------
        NId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_DelAttrDatN(self, *args)


    def DelAttrDatE(self, *args):
        """
        DelAttrDatE(PNEANetMP self, TNEANetMP::TEdgeI const & EdgeId, TStr attr) -> int64

        Parameters
        ----------
        EdgeId: TNEANetMP::TEdgeI const &
        attr: TStr const &

        DelAttrDatE(PNEANetMP self, int64 const & EId, TStr attr) -> int64

        Parameters
        ----------
        EId: int64 const &
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_DelAttrDatE(self, *args)


    def AddIntAttrN(self, *args):
        """
        AddIntAttrN(PNEANetMP self, TStr attr, TInt64 defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TInt64

        AddIntAttrN(PNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_AddIntAttrN(self, *args)


    def AddStrAttrN(self, *args):
        """
        AddStrAttrN(PNEANetMP self, TStr attr, TStr defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TStr

        AddStrAttrN(PNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_AddStrAttrN(self, *args)


    def AddFltAttrN(self, *args):
        """
        AddFltAttrN(PNEANetMP self, TStr attr, TFlt defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TFlt

        AddFltAttrN(PNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_AddFltAttrN(self, *args)


    def AddIntAttrE(self, *args):
        """
        AddIntAttrE(PNEANetMP self, TStr attr, TInt64 defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TInt64

        AddIntAttrE(PNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_AddIntAttrE(self, *args)


    def AddStrAttrE(self, *args):
        """
        AddStrAttrE(PNEANetMP self, TStr attr, TStr defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TStr

        AddStrAttrE(PNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_AddStrAttrE(self, *args)


    def AddFltAttrE(self, *args):
        """
        AddFltAttrE(PNEANetMP self, TStr attr, TFlt defaultValue) -> int64

        Parameters
        ----------
        attr: TStr const &
        defaultValue: TFlt

        AddFltAttrE(PNEANetMP self, TStr attr) -> int64

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_AddFltAttrE(self, *args)


    def NodeAttrIsDeleted(self, NId, NodeHI):
        """
        NodeAttrIsDeleted(PNEANetMP self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANetMP_NodeAttrIsDeleted(self, NId, NodeHI)


    def NodeAttrIsIntDeleted(self, NId, NodeHI):
        """
        NodeAttrIsIntDeleted(PNEANetMP self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANetMP_NodeAttrIsIntDeleted(self, NId, NodeHI)


    def NodeAttrIsStrDeleted(self, NId, NodeHI):
        """
        NodeAttrIsStrDeleted(PNEANetMP self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANetMP_NodeAttrIsStrDeleted(self, NId, NodeHI)


    def NodeAttrIsFltDeleted(self, NId, NodeHI):
        """
        NodeAttrIsFltDeleted(PNEANetMP self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> bool

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANetMP_NodeAttrIsFltDeleted(self, NId, NodeHI)


    def EdgeAttrIsDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsDeleted(PNEANetMP self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANetMP_EdgeAttrIsDeleted(self, EId, EdgeHI)


    def EdgeAttrIsIntDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsIntDeleted(PNEANetMP self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANetMP_EdgeAttrIsIntDeleted(self, EId, EdgeHI)


    def EdgeAttrIsStrDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsStrDeleted(PNEANetMP self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANetMP_EdgeAttrIsStrDeleted(self, EId, EdgeHI)


    def EdgeAttrIsFltDeleted(self, EId, EdgeHI):
        """
        EdgeAttrIsFltDeleted(PNEANetMP self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> bool

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANetMP_EdgeAttrIsFltDeleted(self, EId, EdgeHI)


    def GetNodeAttrValue(self, NId, NodeHI):
        """
        GetNodeAttrValue(PNEANetMP self, int64 const & NId, TStrIntPr64H::TIter const & NodeHI) -> TStr

        Parameters
        ----------
        NId: int64 const &
        NodeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANetMP_GetNodeAttrValue(self, NId, NodeHI)


    def GetEdgeAttrValue(self, EId, EdgeHI):
        """
        GetEdgeAttrValue(PNEANetMP self, int64 const & EId, TStrIntPr64H::TIter const & EdgeHI) -> TStr

        Parameters
        ----------
        EId: int64 const &
        EdgeHI: TStrIntPr64H::TIter const &

        """
        return _SnapTime.PNEANetMP_GetEdgeAttrValue(self, EId, EdgeHI)


    def GetWeightOutEdges(self, NI, attr):
        """
        GetWeightOutEdges(PNEANetMP self, TNEANetMP::TNodeI const & NI, TStr attr) -> TFlt

        Parameters
        ----------
        NI: TNEANetMP::TNodeI const &
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_GetWeightOutEdges(self, NI, attr)


    def IsFltAttrE(self, attr):
        """
        IsFltAttrE(PNEANetMP self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_IsFltAttrE(self, attr)


    def IsIntAttrE(self, attr):
        """
        IsIntAttrE(PNEANetMP self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_IsIntAttrE(self, attr)


    def IsStrAttrE(self, attr):
        """
        IsStrAttrE(PNEANetMP self, TStr attr) -> bool

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_IsStrAttrE(self, attr)


    def GetFltAttrVecE(self, attr):
        """
        GetFltAttrVecE(PNEANetMP self, TStr attr) -> TFlt64V

        Parameters
        ----------
        attr: TStr const &

        """
        return _SnapTime.PNEANetMP_GetFltAttrVecE(self, attr)


    def GetFltKeyIdE(self, EId):
        """
        GetFltKeyIdE(PNEANetMP self, int64 const & EId) -> int64

        Parameters
        ----------
        EId: int64 const &

        """
        return _SnapTime.PNEANetMP_GetFltKeyIdE(self, EId)


    def GetWeightOutEdgesV(self, OutWeights, AttrVal):
        """
        GetWeightOutEdgesV(PNEANetMP self, TFlt64V OutWeights, TFlt64V AttrVal)

        Parameters
        ----------
        OutWeights: TFlt64V &
        AttrVal: TFlt64V const &

        """
        return _SnapTime.PNEANetMP_GetWeightOutEdgesV(self, OutWeights, AttrVal)

PNEANetMP.Save = new_instancemethod(_SnapTime.PNEANetMP_Save, None, PNEANetMP)
PNEANetMP.__deref__ = new_instancemethod(_SnapTime.PNEANetMP___deref__, None, PNEANetMP)
PNEANetMP.__ref__ = new_instancemethod(_SnapTime.PNEANetMP___ref__, None, PNEANetMP)
PNEANetMP.__call__ = new_instancemethod(_SnapTime.PNEANetMP___call__, None, PNEANetMP)
PNEANetMP.Empty = new_instancemethod(_SnapTime.PNEANetMP_Empty, None, PNEANetMP)
PNEANetMP.Clr = new_instancemethod(_SnapTime.PNEANetMP_Clr, None, PNEANetMP)
PNEANetMP.GetRefs = new_instancemethod(_SnapTime.PNEANetMP_GetRefs, None, PNEANetMP)
PNEANetMP.Load = new_instancemethod(_SnapTime.PNEANetMP_Load, None, PNEANetMP)
PNEANetMP.HasFlag = new_instancemethod(_SnapTime.PNEANetMP_HasFlag, None, PNEANetMP)
PNEANetMP.GetNodes = new_instancemethod(_SnapTime.PNEANetMP_GetNodes, None, PNEANetMP)
PNEANetMP.SetNodes = new_instancemethod(_SnapTime.PNEANetMP_SetNodes, None, PNEANetMP)
PNEANetMP.AddNode = new_instancemethod(_SnapTime.PNEANetMP_AddNode, None, PNEANetMP)
PNEANetMP.AddNodeWithEdges = new_instancemethod(_SnapTime.PNEANetMP_AddNodeWithEdges, None, PNEANetMP)
PNEANetMP.IsNode = new_instancemethod(_SnapTime.PNEANetMP_IsNode, None, PNEANetMP)
PNEANetMP.BegNI = new_instancemethod(_SnapTime.PNEANetMP_BegNI, None, PNEANetMP)
PNEANetMP.EndNI = new_instancemethod(_SnapTime.PNEANetMP_EndNI, None, PNEANetMP)
PNEANetMP.GetNI = new_instancemethod(_SnapTime.PNEANetMP_GetNI, None, PNEANetMP)
PNEANetMP.BegNAIntI = new_instancemethod(_SnapTime.PNEANetMP_BegNAIntI, None, PNEANetMP)
PNEANetMP.EndNAIntI = new_instancemethod(_SnapTime.PNEANetMP_EndNAIntI, None, PNEANetMP)
PNEANetMP.GetNAIntI = new_instancemethod(_SnapTime.PNEANetMP_GetNAIntI, None, PNEANetMP)
PNEANetMP.BegNAStrI = new_instancemethod(_SnapTime.PNEANetMP_BegNAStrI, None, PNEANetMP)
PNEANetMP.EndNAStrI = new_instancemethod(_SnapTime.PNEANetMP_EndNAStrI, None, PNEANetMP)
PNEANetMP.GetNAStrI = new_instancemethod(_SnapTime.PNEANetMP_GetNAStrI, None, PNEANetMP)
PNEANetMP.BegNAFltI = new_instancemethod(_SnapTime.PNEANetMP_BegNAFltI, None, PNEANetMP)
PNEANetMP.EndNAFltI = new_instancemethod(_SnapTime.PNEANetMP_EndNAFltI, None, PNEANetMP)
PNEANetMP.GetNAFltI = new_instancemethod(_SnapTime.PNEANetMP_GetNAFltI, None, PNEANetMP)
PNEANetMP.AttrNameNI = new_instancemethod(_SnapTime.PNEANetMP_AttrNameNI, None, PNEANetMP)
PNEANetMP.AttrValueNI = new_instancemethod(_SnapTime.PNEANetMP_AttrValueNI, None, PNEANetMP)
PNEANetMP.IntAttrNameNI = new_instancemethod(_SnapTime.PNEANetMP_IntAttrNameNI, None, PNEANetMP)
PNEANetMP.IntAttrValueNI = new_instancemethod(_SnapTime.PNEANetMP_IntAttrValueNI, None, PNEANetMP)
PNEANetMP.StrAttrNameNI = new_instancemethod(_SnapTime.PNEANetMP_StrAttrNameNI, None, PNEANetMP)
PNEANetMP.StrAttrValueNI = new_instancemethod(_SnapTime.PNEANetMP_StrAttrValueNI, None, PNEANetMP)
PNEANetMP.FltAttrNameNI = new_instancemethod(_SnapTime.PNEANetMP_FltAttrNameNI, None, PNEANetMP)
PNEANetMP.FltAttrValueNI = new_instancemethod(_SnapTime.PNEANetMP_FltAttrValueNI, None, PNEANetMP)
PNEANetMP.AttrNameEI = new_instancemethod(_SnapTime.PNEANetMP_AttrNameEI, None, PNEANetMP)
PNEANetMP.AttrValueEI = new_instancemethod(_SnapTime.PNEANetMP_AttrValueEI, None, PNEANetMP)
PNEANetMP.IntAttrNameEI = new_instancemethod(_SnapTime.PNEANetMP_IntAttrNameEI, None, PNEANetMP)
PNEANetMP.IntAttrValueEI = new_instancemethod(_SnapTime.PNEANetMP_IntAttrValueEI, None, PNEANetMP)
PNEANetMP.StrAttrNameEI = new_instancemethod(_SnapTime.PNEANetMP_StrAttrNameEI, None, PNEANetMP)
PNEANetMP.StrAttrValueEI = new_instancemethod(_SnapTime.PNEANetMP_StrAttrValueEI, None, PNEANetMP)
PNEANetMP.FltAttrNameEI = new_instancemethod(_SnapTime.PNEANetMP_FltAttrNameEI, None, PNEANetMP)
PNEANetMP.FltAttrValueEI = new_instancemethod(_SnapTime.PNEANetMP_FltAttrValueEI, None, PNEANetMP)
PNEANetMP.BegEAIntI = new_instancemethod(_SnapTime.PNEANetMP_BegEAIntI, None, PNEANetMP)
PNEANetMP.EndEAIntI = new_instancemethod(_SnapTime.PNEANetMP_EndEAIntI, None, PNEANetMP)
PNEANetMP.GetEAIntI = new_instancemethod(_SnapTime.PNEANetMP_GetEAIntI, None, PNEANetMP)
PNEANetMP.BegEAStrI = new_instancemethod(_SnapTime.PNEANetMP_BegEAStrI, None, PNEANetMP)
PNEANetMP.EndEAStrI = new_instancemethod(_SnapTime.PNEANetMP_EndEAStrI, None, PNEANetMP)
PNEANetMP.GetEAStrI = new_instancemethod(_SnapTime.PNEANetMP_GetEAStrI, None, PNEANetMP)
PNEANetMP.BegEAFltI = new_instancemethod(_SnapTime.PNEANetMP_BegEAFltI, None, PNEANetMP)
PNEANetMP.EndEAFltI = new_instancemethod(_SnapTime.PNEANetMP_EndEAFltI, None, PNEANetMP)
PNEANetMP.GetEAFltI = new_instancemethod(_SnapTime.PNEANetMP_GetEAFltI, None, PNEANetMP)
PNEANetMP.GetMxNId = new_instancemethod(_SnapTime.PNEANetMP_GetMxNId, None, PNEANetMP)
PNEANetMP.GetMxEId = new_instancemethod(_SnapTime.PNEANetMP_GetMxEId, None, PNEANetMP)
PNEANetMP.Reserved = new_instancemethod(_SnapTime.PNEANetMP_Reserved, None, PNEANetMP)
PNEANetMP.ReservedE = new_instancemethod(_SnapTime.PNEANetMP_ReservedE, None, PNEANetMP)
PNEANetMP.GetEdges = new_instancemethod(_SnapTime.PNEANetMP_GetEdges, None, PNEANetMP)
PNEANetMP.SetEdges = new_instancemethod(_SnapTime.PNEANetMP_SetEdges, None, PNEANetMP)
PNEANetMP.SetMxEId = new_instancemethod(_SnapTime.PNEANetMP_SetMxEId, None, PNEANetMP)
PNEANetMP.AddEdge = new_instancemethod(_SnapTime.PNEANetMP_AddEdge, None, PNEANetMP)
PNEANetMP.AddEdgeUnchecked = new_instancemethod(_SnapTime.PNEANetMP_AddEdgeUnchecked, None, PNEANetMP)
PNEANetMP.IsEdge = new_instancemethod(_SnapTime.PNEANetMP_IsEdge, None, PNEANetMP)
PNEANetMP.GetEId = new_instancemethod(_SnapTime.PNEANetMP_GetEId, None, PNEANetMP)
PNEANetMP.BegEI = new_instancemethod(_SnapTime.PNEANetMP_BegEI, None, PNEANetMP)
PNEANetMP.EndEI = new_instancemethod(_SnapTime.PNEANetMP_EndEI, None, PNEANetMP)
PNEANetMP.GetEI = new_instancemethod(_SnapTime.PNEANetMP_GetEI, None, PNEANetMP)
PNEANetMP.GetRndNId = new_instancemethod(_SnapTime.PNEANetMP_GetRndNId, None, PNEANetMP)
PNEANetMP.GetRndNI = new_instancemethod(_SnapTime.PNEANetMP_GetRndNI, None, PNEANetMP)
PNEANetMP.GetRndEId = new_instancemethod(_SnapTime.PNEANetMP_GetRndEId, None, PNEANetMP)
PNEANetMP.GetRndEI = new_instancemethod(_SnapTime.PNEANetMP_GetRndEI, None, PNEANetMP)
PNEANetMP.GetNIdV = new_instancemethod(_SnapTime.PNEANetMP_GetNIdV, None, PNEANetMP)
PNEANetMP.GetEIdV = new_instancemethod(_SnapTime.PNEANetMP_GetEIdV, None, PNEANetMP)
PNEANetMP.Reserve = new_instancemethod(_SnapTime.PNEANetMP_Reserve, None, PNEANetMP)
PNEANetMP.ReserveAttr = new_instancemethod(_SnapTime.PNEANetMP_ReserveAttr, None, PNEANetMP)
PNEANetMP.Defrag = new_instancemethod(_SnapTime.PNEANetMP_Defrag, None, PNEANetMP)
PNEANetMP.IsOk = new_instancemethod(_SnapTime.PNEANetMP_IsOk, None, PNEANetMP)
PNEANetMP.Dump = new_instancemethod(_SnapTime.PNEANetMP_Dump, None, PNEANetMP)
PNEANetMP.AddIntAttrDatN = new_instancemethod(_SnapTime.PNEANetMP_AddIntAttrDatN, None, PNEANetMP)
PNEANetMP.AddStrAttrDatN = new_instancemethod(_SnapTime.PNEANetMP_AddStrAttrDatN, None, PNEANetMP)
PNEANetMP.AddFltAttrDatN = new_instancemethod(_SnapTime.PNEANetMP_AddFltAttrDatN, None, PNEANetMP)
PNEANetMP.AddIntAttrDatE = new_instancemethod(_SnapTime.PNEANetMP_AddIntAttrDatE, None, PNEANetMP)
PNEANetMP.AddStrAttrDatE = new_instancemethod(_SnapTime.PNEANetMP_AddStrAttrDatE, None, PNEANetMP)
PNEANetMP.AddFltAttrDatE = new_instancemethod(_SnapTime.PNEANetMP_AddFltAttrDatE, None, PNEANetMP)
PNEANetMP.GetIntAttrDatN = new_instancemethod(_SnapTime.PNEANetMP_GetIntAttrDatN, None, PNEANetMP)
PNEANetMP.GetStrAttrDatN = new_instancemethod(_SnapTime.PNEANetMP_GetStrAttrDatN, None, PNEANetMP)
PNEANetMP.GetFltAttrDatN = new_instancemethod(_SnapTime.PNEANetMP_GetFltAttrDatN, None, PNEANetMP)
PNEANetMP.GetIntAttrIndN = new_instancemethod(_SnapTime.PNEANetMP_GetIntAttrIndN, None, PNEANetMP)
PNEANetMP.GetIntAttrIndDatN = new_instancemethod(_SnapTime.PNEANetMP_GetIntAttrIndDatN, None, PNEANetMP)
PNEANetMP.GetIntAttrDatE = new_instancemethod(_SnapTime.PNEANetMP_GetIntAttrDatE, None, PNEANetMP)
PNEANetMP.GetStrAttrDatE = new_instancemethod(_SnapTime.PNEANetMP_GetStrAttrDatE, None, PNEANetMP)
PNEANetMP.GetFltAttrDatE = new_instancemethod(_SnapTime.PNEANetMP_GetFltAttrDatE, None, PNEANetMP)
PNEANetMP.GetIntAttrIndE = new_instancemethod(_SnapTime.PNEANetMP_GetIntAttrIndE, None, PNEANetMP)
PNEANetMP.GetIntAttrIndDatE = new_instancemethod(_SnapTime.PNEANetMP_GetIntAttrIndDatE, None, PNEANetMP)
PNEANetMP.DelAttrDatN = new_instancemethod(_SnapTime.PNEANetMP_DelAttrDatN, None, PNEANetMP)
PNEANetMP.DelAttrDatE = new_instancemethod(_SnapTime.PNEANetMP_DelAttrDatE, None, PNEANetMP)
PNEANetMP.AddIntAttrN = new_instancemethod(_SnapTime.PNEANetMP_AddIntAttrN, None, PNEANetMP)
PNEANetMP.AddStrAttrN = new_instancemethod(_SnapTime.PNEANetMP_AddStrAttrN, None, PNEANetMP)
PNEANetMP.AddFltAttrN = new_instancemethod(_SnapTime.PNEANetMP_AddFltAttrN, None, PNEANetMP)
PNEANetMP.AddIntAttrE = new_instancemethod(_SnapTime.PNEANetMP_AddIntAttrE, None, PNEANetMP)
PNEANetMP.AddStrAttrE = new_instancemethod(_SnapTime.PNEANetMP_AddStrAttrE, None, PNEANetMP)
PNEANetMP.AddFltAttrE = new_instancemethod(_SnapTime.PNEANetMP_AddFltAttrE, None, PNEANetMP)
PNEANetMP.NodeAttrIsDeleted = new_instancemethod(_SnapTime.PNEANetMP_NodeAttrIsDeleted, None, PNEANetMP)
PNEANetMP.NodeAttrIsIntDeleted = new_instancemethod(_SnapTime.PNEANetMP_NodeAttrIsIntDeleted, None, PNEANetMP)
PNEANetMP.NodeAttrIsStrDeleted = new_instancemethod(_SnapTime.PNEANetMP_NodeAttrIsStrDeleted, None, PNEANetMP)
PNEANetMP.NodeAttrIsFltDeleted = new_instancemethod(_SnapTime.PNEANetMP_NodeAttrIsFltDeleted, None, PNEANetMP)
PNEANetMP.EdgeAttrIsDeleted = new_instancemethod(_SnapTime.PNEANetMP_EdgeAttrIsDeleted, None, PNEANetMP)
PNEANetMP.EdgeAttrIsIntDeleted = new_instancemethod(_SnapTime.PNEANetMP_EdgeAttrIsIntDeleted, None, PNEANetMP)
PNEANetMP.EdgeAttrIsStrDeleted = new_instancemethod(_SnapTime.PNEANetMP_EdgeAttrIsStrDeleted, None, PNEANetMP)
PNEANetMP.EdgeAttrIsFltDeleted = new_instancemethod(_SnapTime.PNEANetMP_EdgeAttrIsFltDeleted, None, PNEANetMP)
PNEANetMP.GetNodeAttrValue = new_instancemethod(_SnapTime.PNEANetMP_GetNodeAttrValue, None, PNEANetMP)
PNEANetMP.GetEdgeAttrValue = new_instancemethod(_SnapTime.PNEANetMP_GetEdgeAttrValue, None, PNEANetMP)
PNEANetMP.GetWeightOutEdges = new_instancemethod(_SnapTime.PNEANetMP_GetWeightOutEdges, None, PNEANetMP)
PNEANetMP.IsFltAttrE = new_instancemethod(_SnapTime.PNEANetMP_IsFltAttrE, None, PNEANetMP)
PNEANetMP.IsIntAttrE = new_instancemethod(_SnapTime.PNEANetMP_IsIntAttrE, None, PNEANetMP)
PNEANetMP.IsStrAttrE = new_instancemethod(_SnapTime.PNEANetMP_IsStrAttrE, None, PNEANetMP)
PNEANetMP.GetFltAttrVecE = new_instancemethod(_SnapTime.PNEANetMP_GetFltAttrVecE, None, PNEANetMP)
PNEANetMP.GetFltKeyIdE = new_instancemethod(_SnapTime.PNEANetMP_GetFltKeyIdE, None, PNEANetMP)
PNEANetMP.GetWeightOutEdgesV = new_instancemethod(_SnapTime.PNEANetMP_GetWeightOutEdgesV, None, PNEANetMP)
PNEANetMP_swigregister = _SnapTime.PNEANetMP_swigregister
PNEANetMP_swigregister(PNEANetMP)

def PNEANetMP_New():
    """PNEANetMP_New() -> PNEANetMP"""
    return _SnapTime.PNEANetMP_New()


def PrintInfo_PNEANetMP(*args):
    """
    PrintInfo_PNEANetMP(PNEANetMP Graph, TStr Desc, TStr OutFNm, bool const & Fast=True)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    Desc: TStr const &
    OutFNm: TStr const &
    Fast: bool const &

    PrintInfo_PNEANetMP(PNEANetMP Graph, TStr Desc, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    Desc: TStr const &
    OutFNm: TStr const &

    PrintInfo_PNEANetMP(PNEANetMP Graph, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    Desc: TStr const &

    PrintInfo_PNEANetMP(PNEANetMP Graph)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.PrintInfo_PNEANetMP(*args)

def GetNodeWcc_PNEANetMP(Graph, NId, CnCom):
    """
    GetNodeWcc_PNEANetMP(PNEANetMP Graph, int64 const & NId, TInt64V CnCom)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId: int64 const &
    CnCom: TInt64V &

    """
    return _SnapTime.GetNodeWcc_PNEANetMP(Graph, NId, CnCom)

def IsConnected_PNEANetMP(Graph):
    """
    IsConnected_PNEANetMP(PNEANetMP Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.IsConnected_PNEANetMP(Graph)

def IsWeaklyConn_PNEANetMP(Graph):
    """
    IsWeaklyConn_PNEANetMP(PNEANetMP Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.IsWeaklyConn_PNEANetMP(Graph)

def GetWccSzCnt_PNEANetMP(Graph, WccSzCnt):
    """
    GetWccSzCnt_PNEANetMP(PNEANetMP Graph, TIntPr64V WccSzCnt)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    WccSzCnt: TIntPr64V &

    """
    return _SnapTime.GetWccSzCnt_PNEANetMP(Graph, WccSzCnt)

def GetWccs_PNEANetMP(Graph, CnComV):
    """
    GetWccs_PNEANetMP(PNEANetMP Graph, TCnComV CnComV)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    CnComV: TCnComV &

    """
    return _SnapTime.GetWccs_PNEANetMP(Graph, CnComV)

def GetSccSzCnt_PNEANetMP(Graph, SccSzCnt):
    """
    GetSccSzCnt_PNEANetMP(PNEANetMP Graph, TIntPr64V SccSzCnt)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    SccSzCnt: TIntPr64V &

    """
    return _SnapTime.GetSccSzCnt_PNEANetMP(Graph, SccSzCnt)

def GetSccs_PNEANetMP(Graph, CnComV):
    """
    GetSccs_PNEANetMP(PNEANetMP Graph, TCnComV CnComV)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    CnComV: TCnComV &

    """
    return _SnapTime.GetSccs_PNEANetMP(Graph, CnComV)

def GetMxWccSz_PNEANetMP(Graph):
    """
    GetMxWccSz_PNEANetMP(PNEANetMP Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.GetMxWccSz_PNEANetMP(Graph)

def GetMxSccSz_PNEANetMP(Graph):
    """
    GetMxSccSz_PNEANetMP(PNEANetMP Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.GetMxSccSz_PNEANetMP(Graph)

def GetMxWcc_PNEANetMP(Graph):
    """
    GetMxWcc_PNEANetMP(PNEANetMP Graph) -> PNEANetMP

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.GetMxWcc_PNEANetMP(Graph)

def GetMxScc_PNEANetMP(Graph):
    """
    GetMxScc_PNEANetMP(PNEANetMP Graph) -> PNEANetMP

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.GetMxScc_PNEANetMP(Graph)

def GetMxBiCon_PNEANetMP(Graph):
    """
    GetMxBiCon_PNEANetMP(PNEANetMP Graph) -> PNEANetMP

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.GetMxBiCon_PNEANetMP(Graph)

def GetNodeEcc_PNEANetMP(Graph, NId, IsDir=False):
    """
    GetNodeEcc_PNEANetMP(PNEANetMP Graph, int64 const & NId, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId: int64 const &
    IsDir: bool const &

    GetNodeEcc_PNEANetMP(PNEANetMP Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId: int64 const &

    """
    return _SnapTime.GetNodeEcc_PNEANetMP(Graph, NId, IsDir)

def GetPageRank_PNEANetMP(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRank_PNEANetMP(PNEANetMP Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRank_PNEANetMP(PNEANetMP Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRank_PNEANetMP(PNEANetMP Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRank_PNEANetMP(PNEANetMP Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRank_PNEANetMP(Graph, PRankH, C, Eps, MaxIter)

def GetPageRank_v1_PNEANetMP(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRank_v1_PNEANetMP(PNEANetMP Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRank_v1_PNEANetMP(PNEANetMP Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRank_v1_PNEANetMP(PNEANetMP Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRank_v1_PNEANetMP(PNEANetMP Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRank_v1_PNEANetMP(Graph, PRankH, C, Eps, MaxIter)

def GetHits_PNEANetMP(Graph, NIdHubH, NIdAuthH, MaxIter=20):
    """
    GetHits_PNEANetMP(PNEANetMP Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH, int64 const & MaxIter=20)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &
    MaxIter: int64 const &

    GetHits_PNEANetMP(PNEANetMP Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &

    """
    return _SnapTime.GetHits_PNEANetMP(Graph, NIdHubH, NIdAuthH, MaxIter)

def GetBetweennessCentr_PNEANetMP(*args):
    """
    GetBetweennessCentr_PNEANetMP(PNEANetMP Graph, TIntFlt64H NIdBtwH, double const & NodeFrac=1.0, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdBtwH: TIntFlt64H &
    NodeFrac: double const &
    IsDir: bool const &

    GetBetweennessCentr_PNEANetMP(PNEANetMP Graph, TIntFlt64H NIdBtwH, double const & NodeFrac=1.0)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdBtwH: TIntFlt64H &
    NodeFrac: double const &

    GetBetweennessCentr_PNEANetMP(PNEANetMP Graph, TIntFlt64H NIdBtwH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdBtwH: TIntFlt64H &

    GetBetweennessCentr_PNEANetMP(PNEANetMP Graph, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &
    IsDir: bool const &

    GetBetweennessCentr_PNEANetMP(PNEANetMP Graph, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &

    GetBetweennessCentr_PNEANetMP(PNEANetMP Graph, TIntPrFlt64H EdgeBtwH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    EdgeBtwH: TIntPrFlt64H &

    GetBetweennessCentr_PNEANetMP(PNEANetMP Graph, TIntFlt64H NIdBtwH, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdBtwH: TIntFlt64H &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &
    IsDir: bool const &

    GetBetweennessCentr_PNEANetMP(PNEANetMP Graph, TIntFlt64H NIdBtwH, TIntPrFlt64H EdgeBtwH, double const & NodeFrac=1.0)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdBtwH: TIntFlt64H &
    EdgeBtwH: TIntPrFlt64H &
    NodeFrac: double const &

    GetBetweennessCentr_PNEANetMP(PNEANetMP Graph, TIntFlt64H NIdBtwH, TIntPrFlt64H EdgeBtwH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdBtwH: TIntFlt64H &
    EdgeBtwH: TIntPrFlt64H &

    GetBetweennessCentr_PNEANetMP(PNEANetMP Graph, TInt64V BtwNIdV, TIntFlt64H NodeBtwH, bool const & DoNodeCent, TIntPrFlt64H EdgeBtwH, bool const & DoEdgeCent, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    BtwNIdV: TInt64V const &
    NodeBtwH: TIntFlt64H &
    DoNodeCent: bool const &
    EdgeBtwH: TIntPrFlt64H &
    DoEdgeCent: bool const &
    IsDir: bool const &

    """
    return _SnapTime.GetBetweennessCentr_PNEANetMP(*args)

def GetClosenessCentr_PNEANetMP(Graph, NId, Normalized=True, IsDir=False):
    """
    GetClosenessCentr_PNEANetMP(PNEANetMP Graph, int64 const & NId, bool const & Normalized=True, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId: int64 const &
    Normalized: bool const &
    IsDir: bool const &

    GetClosenessCentr_PNEANetMP(PNEANetMP Graph, int64 const & NId, bool const & Normalized=True) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId: int64 const &
    Normalized: bool const &

    GetClosenessCentr_PNEANetMP(PNEANetMP Graph, int64 const & NId) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId: int64 const &

    """
    return _SnapTime.GetClosenessCentr_PNEANetMP(Graph, NId, Normalized, IsDir)

def GetFarnessCentr_PNEANetMP(Graph, NId, Normalized=True, IsDir=False):
    """
    GetFarnessCentr_PNEANetMP(PNEANetMP Graph, int64 const & NId, bool const & Normalized=True, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId: int64 const &
    Normalized: bool const &
    IsDir: bool const &

    GetFarnessCentr_PNEANetMP(PNEANetMP Graph, int64 const & NId, bool const & Normalized=True) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId: int64 const &
    Normalized: bool const &

    GetFarnessCentr_PNEANetMP(PNEANetMP Graph, int64 const & NId) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId: int64 const &

    """
    return _SnapTime.GetFarnessCentr_PNEANetMP(Graph, NId, Normalized, IsDir)

def GetPageRankMP_PNEANetMP(Graph, PRankH, C=0.85, Eps=1e-4, MaxIter=100):
    """
    GetPageRankMP_PNEANetMP(PNEANetMP Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4, int64 const & MaxIter=100)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &
    MaxIter: int64 const &

    GetPageRankMP_PNEANetMP(PNEANetMP Graph, TIntFlt64H PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    PRankH: TIntFlt64H &
    C: double const &
    Eps: double const &

    GetPageRankMP_PNEANetMP(PNEANetMP Graph, TIntFlt64H PRankH, double const & C=0.85)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    PRankH: TIntFlt64H &
    C: double const &

    GetPageRankMP_PNEANetMP(PNEANetMP Graph, TIntFlt64H PRankH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    PRankH: TIntFlt64H &

    """
    return _SnapTime.GetPageRankMP_PNEANetMP(Graph, PRankH, C, Eps, MaxIter)

def GetHitsMP_PNEANetMP(Graph, NIdHubH, NIdAuthH, MaxIter=20):
    """
    GetHitsMP_PNEANetMP(PNEANetMP Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH, int64 const & MaxIter=20)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &
    MaxIter: int64 const &

    GetHitsMP_PNEANetMP(PNEANetMP Graph, TIntFlt64H NIdHubH, TIntFlt64H NIdAuthH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdHubH: TIntFlt64H &
    NIdAuthH: TIntFlt64H &

    """
    return _SnapTime.GetHitsMP_PNEANetMP(Graph, NIdHubH, NIdAuthH, MaxIter)

def CntInDegNodes_PNEANetMP(Graph, NodeInDeg):
    """
    CntInDegNodes_PNEANetMP(PNEANetMP Graph, int64 const & NodeInDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NodeInDeg: int64 const &

    """
    return _SnapTime.CntInDegNodes_PNEANetMP(Graph, NodeInDeg)

def CntOutDegNodes_PNEANetMP(Graph, NodeOutDeg):
    """
    CntOutDegNodes_PNEANetMP(PNEANetMP Graph, int64 const & NodeOutDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NodeOutDeg: int64 const &

    """
    return _SnapTime.CntOutDegNodes_PNEANetMP(Graph, NodeOutDeg)

def CntDegNodes_PNEANetMP(Graph, NodeDeg):
    """
    CntDegNodes_PNEANetMP(PNEANetMP Graph, int64 const & NodeDeg) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NodeDeg: int64 const &

    """
    return _SnapTime.CntDegNodes_PNEANetMP(Graph, NodeDeg)

def CntNonZNodes_PNEANetMP(Graph):
    """
    CntNonZNodes_PNEANetMP(PNEANetMP Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.CntNonZNodes_PNEANetMP(Graph)

def CntEdgesToSet_PNEANetMP(Graph, NId, NodeSet):
    """
    CntEdgesToSet_PNEANetMP(PNEANetMP Graph, int64 const & NId, TInt64Set NodeSet) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId: int64 const &
    NodeSet: TInt64Set const &

    """
    return _SnapTime.CntEdgesToSet_PNEANetMP(Graph, NId, NodeSet)

def GetMxDegNId_PNEANetMP(Graph):
    """
    GetMxDegNId_PNEANetMP(PNEANetMP Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.GetMxDegNId_PNEANetMP(Graph)

def GetMxInDegNId_PNEANetMP(Graph):
    """
    GetMxInDegNId_PNEANetMP(PNEANetMP Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.GetMxInDegNId_PNEANetMP(Graph)

def GetMxOutDegNId_PNEANetMP(Graph):
    """
    GetMxOutDegNId_PNEANetMP(PNEANetMP Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.GetMxOutDegNId_PNEANetMP(Graph)

def GetInDegCnt_PNEANetMP(*args):
    """
    GetInDegCnt_PNEANetMP(PNEANetMP Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    DegToCntV: TIntPr64V &

    GetInDegCnt_PNEANetMP(PNEANetMP Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetInDegCnt_PNEANetMP(*args)

def GetOutDegCnt_PNEANetMP(*args):
    """
    GetOutDegCnt_PNEANetMP(PNEANetMP Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    DegToCntV: TIntPr64V &

    GetOutDegCnt_PNEANetMP(PNEANetMP Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetOutDegCnt_PNEANetMP(*args)

def GetDegCnt_PNEANetMP(*args):
    """
    GetDegCnt_PNEANetMP(PNEANetMP Graph, TIntPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    DegToCntV: TIntPr64V &

    GetDegCnt_PNEANetMP(PNEANetMP Graph, TFltPr64V DegToCntV)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    DegToCntV: TFltPr64V &

    """
    return _SnapTime.GetDegCnt_PNEANetMP(*args)

def GetDegSeqV_PNEANetMP(*args):
    """
    GetDegSeqV_PNEANetMP(PNEANetMP Graph, TInt64V DegV)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    DegV: TInt64V &

    GetDegSeqV_PNEANetMP(PNEANetMP Graph, TInt64V InDegV, TInt64V OutDegV)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    InDegV: TInt64V &
    OutDegV: TInt64V &

    """
    return _SnapTime.GetDegSeqV_PNEANetMP(*args)

def GetNodeInDegV_PNEANetMP(Graph, NIdInDegV):
    """
    GetNodeInDegV_PNEANetMP(PNEANetMP Graph, TIntPr64V NIdInDegV)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdInDegV: TIntPr64V &

    """
    return _SnapTime.GetNodeInDegV_PNEANetMP(Graph, NIdInDegV)

def GetNodeOutDegV_PNEANetMP(Graph, NIdOutDegV):
    """
    GetNodeOutDegV_PNEANetMP(PNEANetMP Graph, TIntPr64V NIdOutDegV)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdOutDegV: TIntPr64V &

    """
    return _SnapTime.GetNodeOutDegV_PNEANetMP(Graph, NIdOutDegV)

def CntUniqUndirEdges_PNEANetMP(Graph):
    """
    CntUniqUndirEdges_PNEANetMP(PNEANetMP Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.CntUniqUndirEdges_PNEANetMP(Graph)

def CntUniqDirEdges_PNEANetMP(Graph):
    """
    CntUniqDirEdges_PNEANetMP(PNEANetMP Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.CntUniqDirEdges_PNEANetMP(Graph)

def CntUniqBiDirEdges_PNEANetMP(Graph):
    """
    CntUniqBiDirEdges_PNEANetMP(PNEANetMP Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.CntUniqBiDirEdges_PNEANetMP(Graph)

def CntSelfEdges_PNEANetMP(Graph):
    """
    CntSelfEdges_PNEANetMP(PNEANetMP Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.CntSelfEdges_PNEANetMP(Graph)

def GetUnDir_PNEANetMP(Graph):
    """
    GetUnDir_PNEANetMP(PNEANetMP Graph) -> PNEANetMP

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.GetUnDir_PNEANetMP(Graph)

def MakeUnDir_PNEANetMP(Graph):
    """
    MakeUnDir_PNEANetMP(PNEANetMP Graph)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.MakeUnDir_PNEANetMP(Graph)

def AddSelfEdges_PNEANetMP(Graph):
    """
    AddSelfEdges_PNEANetMP(PNEANetMP Graph)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.AddSelfEdges_PNEANetMP(Graph)

def IsTree_PNEANetMP(Graph):
    """
    IsTree_PNEANetMP(PNEANetMP Graph) -> bool

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.IsTree_PNEANetMP(Graph)

def GetTreeRootNId_PNEANetMP(Graph):
    """
    GetTreeRootNId_PNEANetMP(PNEANetMP Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.GetTreeRootNId_PNEANetMP(Graph)

def GetTreeSig_PNEANetMP(*args):
    """
    GetTreeSig_PNEANetMP(PNEANetMP Graph, int64 const & RootNId, TInt64V Sig)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    RootNId: int64 const &
    Sig: TInt64V &

    GetTreeSig_PNEANetMP(PNEANetMP Graph, int64 const & RootNId, TInt64V Sig, TIntPr64V NodeMap)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    RootNId: int64 const &
    Sig: TInt64V &
    NodeMap: TIntPr64V &

    """
    return _SnapTime.GetTreeSig_PNEANetMP(*args)

def GetBfsTree_PNEANetMP(Graph, StartNId, FollowOut, FollowIn):
    """
    GetBfsTree_PNEANetMP(PNEANetMP Graph, int64 const & StartNId, bool const & FollowOut, bool const & FollowIn) -> PNGraph

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    StartNId: int64 const &
    FollowOut: bool const &
    FollowIn: bool const &

    """
    return _SnapTime.GetBfsTree_PNEANetMP(Graph, StartNId, FollowOut, FollowIn)

def GetSubTreeSz_PNEANetMP(Graph, StartNId, FollowOut, FollowIn):
    """
    GetSubTreeSz_PNEANetMP(PNEANetMP Graph, int64 const & StartNId, bool const & FollowOut, bool const & FollowIn) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    StartNId: int64 const &
    FollowOut: bool const &
    FollowIn: bool const &

    """
    return _SnapTime.GetSubTreeSz_PNEANetMP(Graph, StartNId, FollowOut, FollowIn)

def GetNodesAtHop_PNEANetMP(Graph, StartNId, Hop, NIdV, IsDir=False):
    """
    GetNodesAtHop_PNEANetMP(PNEANetMP Graph, int64 const & StartNId, int64 const & Hop, TInt64V NIdV, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    StartNId: int64 const &
    Hop: int64 const &
    NIdV: TInt64V &
    IsDir: bool const &

    GetNodesAtHop_PNEANetMP(PNEANetMP Graph, int64 const & StartNId, int64 const & Hop, TInt64V NIdV) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    StartNId: int64 const &
    Hop: int64 const &
    NIdV: TInt64V &

    """
    return _SnapTime.GetNodesAtHop_PNEANetMP(Graph, StartNId, Hop, NIdV, IsDir)

def GetNodesAtHops_PNEANetMP(Graph, StartNId, HopCntV, IsDir=False):
    """
    GetNodesAtHops_PNEANetMP(PNEANetMP Graph, int64 const & StartNId, TIntPr64V HopCntV, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    StartNId: int64 const &
    HopCntV: TIntPr64V &
    IsDir: bool const &

    GetNodesAtHops_PNEANetMP(PNEANetMP Graph, int64 const & StartNId, TIntPr64V HopCntV) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    StartNId: int64 const &
    HopCntV: TIntPr64V &

    """
    return _SnapTime.GetNodesAtHops_PNEANetMP(Graph, StartNId, HopCntV, IsDir)

def GetShortPath_PNEANetMP(*args):
    """
    GetShortPath_PNEANetMP(PNEANetMP Graph, int64 const & SrcNId, int64 const & DstNId, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    SrcNId: int64 const &
    DstNId: int64 const &
    IsDir: bool const &

    GetShortPath_PNEANetMP(PNEANetMP Graph, int64 const & SrcNId, int64 const & DstNId) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    SrcNId: int64 const &
    DstNId: int64 const &

    GetShortPath_PNEANetMP(PNEANetMP Graph, int64 const & SrcNId, TInt64H NIdToDistH, bool const & IsDir=False, int64 const & MaxDist) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &
    IsDir: bool const &
    MaxDist: int64 const &

    GetShortPath_PNEANetMP(PNEANetMP Graph, int64 const & SrcNId, TInt64H NIdToDistH, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &
    IsDir: bool const &

    GetShortPath_PNEANetMP(PNEANetMP Graph, int64 const & SrcNId, TInt64H NIdToDistH) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    SrcNId: int64 const &
    NIdToDistH: TInt64H &

    """
    return _SnapTime.GetShortPath_PNEANetMP(*args)

def GetBfsFullDiam_PNEANetMP(Graph, NTestNodes, IsDir=False):
    """
    GetBfsFullDiam_PNEANetMP(PNEANetMP Graph, int64 const & NTestNodes, bool const & IsDir=False) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsFullDiam_PNEANetMP(PNEANetMP Graph, int64 const & NTestNodes) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NTestNodes: int64 const &

    """
    return _SnapTime.GetBfsFullDiam_PNEANetMP(Graph, NTestNodes, IsDir)

def GetBfsEffDiam_PNEANetMP(*args):
    """
    GetBfsEffDiam_PNEANetMP(PNEANetMP Graph, int64 const & NTestNodes, bool const & IsDir, double & EffDiam, int64 & FullDiam) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NTestNodes: int64 const &
    IsDir: bool const &
    EffDiam: double &
    FullDiam: int64 &

    GetBfsEffDiam_PNEANetMP(PNEANetMP Graph, int64 const & NTestNodes, bool const & IsDir=False) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsEffDiam_PNEANetMP(PNEANetMP Graph, int64 const & NTestNodes) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NTestNodes: int64 const &

    GetBfsEffDiam_PNEANetMP(PNEANetMP Graph, int64 const & NTestNodes, bool const & IsDir) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NTestNodes: int64 const &
    IsDir: bool const &

    GetBfsEffDiam_PNEANetMP(PNEANetMP Graph, int64 const & NTestNodes, TInt64V SubGraphNIdV, bool const & IsDir) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NTestNodes: int64 const &
    SubGraphNIdV: TInt64V const &
    IsDir: bool const &

    """
    return _SnapTime.GetBfsEffDiam_PNEANetMP(*args)

def DrawGViz_PNEANetMP(*args):
    """
    DrawGViz_PNEANetMP(PNEANetMP Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, bool const & NodeLabels=False, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &
    NIdColorH: TIntStr64H const &

    DrawGViz_PNEANetMP(PNEANetMP Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, bool const & NodeLabels=False)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &

    DrawGViz_PNEANetMP(PNEANetMP Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &

    DrawGViz_PNEANetMP(PNEANetMP Graph, TGVizLayout const & Layout, TStr PltFNm)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &

    DrawGViz_PNEANetMP(PNEANetMP Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, TIntStr64H NodeLabelH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    Layout: TGVizLayout const &
    PltFNm: TStr const &
    Desc: TStr const &
    NodeLabelH: TIntStr64H const &

    """
    return _SnapTime.DrawGViz_PNEANetMP(*args)

def GenGrid_PNEANetMP(Rows, Cols, IsDir=True):
    """
    GenGrid_PNEANetMP(int64 const & Rows, int64 const & Cols, bool const & IsDir=True) -> PNEANetMP

    Parameters
    ----------
    Rows: int64 const &
    Cols: int64 const &
    IsDir: bool const &

    GenGrid_PNEANetMP(int64 const & Rows, int64 const & Cols) -> PNEANetMP

    Parameters
    ----------
    Rows: int64 const &
    Cols: int64 const &

    """
    return _SnapTime.GenGrid_PNEANetMP(Rows, Cols, IsDir)

def GenStar_PNEANetMP(Nodes, IsDir=True):
    """
    GenStar_PNEANetMP(int64 const & Nodes, bool const & IsDir=True) -> PNEANetMP

    Parameters
    ----------
    Nodes: int64 const &
    IsDir: bool const &

    GenStar_PNEANetMP(int64 const & Nodes) -> PNEANetMP

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenStar_PNEANetMP(Nodes, IsDir)

def GenCircle_PNEANetMP(Nodes, NodeOutDeg=1, IsDir=True):
    """
    GenCircle_PNEANetMP(int64 const & Nodes, int64 const & NodeOutDeg=1, bool const & IsDir=True) -> PNEANetMP

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &
    IsDir: bool const &

    GenCircle_PNEANetMP(int64 const & Nodes, int64 const & NodeOutDeg=1) -> PNEANetMP

    Parameters
    ----------
    Nodes: int64 const &
    NodeOutDeg: int64 const &

    GenCircle_PNEANetMP(int64 const & Nodes) -> PNEANetMP

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenCircle_PNEANetMP(Nodes, NodeOutDeg, IsDir)

def GenFull_PNEANetMP(Nodes):
    """
    GenFull_PNEANetMP(int64 const & Nodes) -> PNEANetMP

    Parameters
    ----------
    Nodes: int64 const &

    """
    return _SnapTime.GenFull_PNEANetMP(Nodes)

def GenTree_PNEANetMP(Fanout, Levels, IsDir=True, ChildPointsToParent=True):
    """
    GenTree_PNEANetMP(int64 const & Fanout, int64 const & Levels, bool const & IsDir=True, bool const & ChildPointsToParent=True) -> PNEANetMP

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &
    IsDir: bool const &
    ChildPointsToParent: bool const &

    GenTree_PNEANetMP(int64 const & Fanout, int64 const & Levels, bool const & IsDir=True) -> PNEANetMP

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &
    IsDir: bool const &

    GenTree_PNEANetMP(int64 const & Fanout, int64 const & Levels) -> PNEANetMP

    Parameters
    ----------
    Fanout: int64 const &
    Levels: int64 const &

    """
    return _SnapTime.GenTree_PNEANetMP(Fanout, Levels, IsDir, ChildPointsToParent)

def GenBaraHierar_PNEANetMP(Levels, IsDir=True):
    """
    GenBaraHierar_PNEANetMP(int64 const & Levels, bool const & IsDir=True) -> PNEANetMP

    Parameters
    ----------
    Levels: int64 const &
    IsDir: bool const &

    GenBaraHierar_PNEANetMP(int64 const & Levels) -> PNEANetMP

    Parameters
    ----------
    Levels: int64 const &

    """
    return _SnapTime.GenBaraHierar_PNEANetMP(Levels, IsDir)

def GenRndGnm_PNEANetMP(*args):
    """
    GenRndGnm_PNEANetMP(int64 const & Nodes, int64 const & Edges, bool const & IsDir=True, TRnd Rnd) -> PNEANetMP

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &
    IsDir: bool const &
    Rnd: TRnd &

    GenRndGnm_PNEANetMP(int64 const & Nodes, int64 const & Edges, bool const & IsDir=True) -> PNEANetMP

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &
    IsDir: bool const &

    GenRndGnm_PNEANetMP(int64 const & Nodes, int64 const & Edges) -> PNEANetMP

    Parameters
    ----------
    Nodes: int64 const &
    Edges: int64 const &

    """
    return _SnapTime.GenRndGnm_PNEANetMP(*args)

def LoadEdgeList_PNEANetMP(*args):
    """
    LoadEdgeList_PNEANetMP(TStr InFNm, int64 const & SrcColId=0, int64 const & DstColId=1) -> PNEANetMP

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &

    LoadEdgeList_PNEANetMP(TStr InFNm, int64 const & SrcColId=0) -> PNEANetMP

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &

    LoadEdgeList_PNEANetMP(TStr InFNm) -> PNEANetMP

    Parameters
    ----------
    InFNm: TStr const &

    LoadEdgeList_PNEANetMP(TStr InFNm, int64 const & SrcColId, int64 const & DstColId, char const & Separator) -> PNEANetMP

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &
    Separator: char const &

    """
    return _SnapTime.LoadEdgeList_PNEANetMP(*args)

def LoadEdgeListStr_PNEANetMP(*args):
    """
    LoadEdgeListStr_PNEANetMP(TStr InFNm, int64 const & SrcColId=0, int64 const & DstColId=1) -> PNEANetMP

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &

    LoadEdgeListStr_PNEANetMP(TStr InFNm, int64 const & SrcColId=0) -> PNEANetMP

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &

    LoadEdgeListStr_PNEANetMP(TStr InFNm) -> PNEANetMP

    Parameters
    ----------
    InFNm: TStr const &

    LoadEdgeListStr_PNEANetMP(TStr InFNm, int64 const & SrcColId, int64 const & DstColId, TStrInt64SH StrToNIdH) -> PNEANetMP

    Parameters
    ----------
    InFNm: TStr const &
    SrcColId: int64 const &
    DstColId: int64 const &
    StrToNIdH: TStrHash< TInt64,TStrPool,int64 > &

    """
    return _SnapTime.LoadEdgeListStr_PNEANetMP(*args)

def LoadConnList_PNEANetMP(InFNm):
    """
    LoadConnList_PNEANetMP(TStr InFNm) -> PNEANetMP

    Parameters
    ----------
    InFNm: TStr const &

    """
    return _SnapTime.LoadConnList_PNEANetMP(InFNm)

def LoadConnListStr_PNEANetMP(InFNm, StrToNIdH):
    """
    LoadConnListStr_PNEANetMP(TStr InFNm, TStrInt64SH StrToNIdH) -> PNEANetMP

    Parameters
    ----------
    InFNm: TStr const &
    StrToNIdH: TStrHash< TInt64,TStrPool,int64 > &

    """
    return _SnapTime.LoadConnListStr_PNEANetMP(InFNm, StrToNIdH)

def LoadPajek_PNEANetMP(InFNm):
    """
    LoadPajek_PNEANetMP(TStr InFNm) -> PNEANetMP

    Parameters
    ----------
    InFNm: TStr const &

    """
    return _SnapTime.LoadPajek_PNEANetMP(InFNm)

def SaveEdgeList_PNEANetMP(*args):
    """
    SaveEdgeList_PNEANetMP(PNEANetMP Graph, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    OutFNm: TStr const &
    Desc: TStr const &

    SaveEdgeList_PNEANetMP(PNEANetMP Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    OutFNm: TStr const &

    """
    return _SnapTime.SaveEdgeList_PNEANetMP(*args)

def SavePajek_PNEANetMP(*args):
    """
    SavePajek_PNEANetMP(PNEANetMP Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    OutFNm: TStr const &

    SavePajek_PNEANetMP(PNEANetMP Graph, TStr OutFNm, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &

    SavePajek_PNEANetMP(PNEANetMP Graph, TStr OutFNm, TIntStr64H NIdColorH, TIntStr64H NIdLabelH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &
    NIdLabelH: TIntStr64H const &

    SavePajek_PNEANetMP(PNEANetMP Graph, TStr OutFNm, TIntStr64H NIdColorH, TIntStr64H NIdLabelH, TIntStr64H EIdColorH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    OutFNm: TStr const &
    NIdColorH: TIntStr64H const &
    NIdLabelH: TIntStr64H const &
    EIdColorH: TIntStr64H const &

    """
    return _SnapTime.SavePajek_PNEANetMP(*args)

def SaveMatlabSparseMtx_PNEANetMP(Graph, OutFNm):
    """
    SaveMatlabSparseMtx_PNEANetMP(PNEANetMP Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    OutFNm: TStr const &

    """
    return _SnapTime.SaveMatlabSparseMtx_PNEANetMP(Graph, OutFNm)

def SaveGViz_PNEANetMP(*args):
    """
    SaveGViz_PNEANetMP(PNEANetMP Graph, TStr OutFNm, TStr Desc, bool const & NodeLabels=False, TIntStr64H NIdColorH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &
    NIdColorH: TIntStr64H const &

    SaveGViz_PNEANetMP(PNEANetMP Graph, TStr OutFNm, TStr Desc, bool const & NodeLabels=False)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NodeLabels: bool const &

    SaveGViz_PNEANetMP(PNEANetMP Graph, TStr OutFNm, TStr Desc)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    OutFNm: TStr const &
    Desc: TStr const &

    SaveGViz_PNEANetMP(PNEANetMP Graph, TStr OutFNm)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    OutFNm: TStr const &

    SaveGViz_PNEANetMP(PNEANetMP Graph, TStr OutFNm, TStr Desc, TIntStr64H NIdLabelH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    OutFNm: TStr const &
    Desc: TStr const &
    NIdLabelH: TIntStr64H const &

    """
    return _SnapTime.SaveGViz_PNEANetMP(*args)

def GetKCore_PNEANetMP(Graph, K):
    """
    GetKCore_PNEANetMP(PNEANetMP Graph, int64 const & K) -> PNEANetMP

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    K: int64 const &

    """
    return _SnapTime.GetKCore_PNEANetMP(Graph, K)

def GetKCoreEdges_PNEANetMP(Graph, CoreIdSzV):
    """
    GetKCoreEdges_PNEANetMP(PNEANetMP Graph, TIntPr64V CoreIdSzV) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    CoreIdSzV: TIntPr64V &

    """
    return _SnapTime.GetKCoreEdges_PNEANetMP(Graph, CoreIdSzV)

def GetKCoreNodes_PNEANetMP(Graph, CoreIdSzV):
    """
    GetKCoreNodes_PNEANetMP(PNEANetMP Graph, TIntPr64V CoreIdSzV) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    CoreIdSzV: TIntPr64V &

    """
    return _SnapTime.GetKCoreNodes_PNEANetMP(Graph, CoreIdSzV)

def ConvertGraph_PNEANetMP_PNEANetMP(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PNEANetMP_PNEANetMP(PNEANetMP InGraph, bool const & RenumberNodes=False) -> PNEANetMP

    Parameters
    ----------
    InGraph: TPt< TNEANetMP > const &
    RenumberNodes: bool const &

    ConvertGraph_PNEANetMP_PNEANetMP(PNEANetMP InGraph) -> PNEANetMP

    Parameters
    ----------
    InGraph: TPt< TNEANetMP > const &

    """
    return _SnapTime.ConvertGraph_PNEANetMP_PNEANetMP(InGraph, RenumberNodes)

def ConvertGraph_PNEANetMP_PNGraph(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PNEANetMP_PNGraph(PNGraph InGraph, bool const & RenumberNodes=False) -> PNEANetMP

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &
    RenumberNodes: bool const &

    ConvertGraph_PNEANetMP_PNGraph(PNGraph InGraph) -> PNEANetMP

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &

    """
    return _SnapTime.ConvertGraph_PNEANetMP_PNGraph(InGraph, RenumberNodes)

def ConvertGraph_PNEANetMP_PUNGraph(InGraph, RenumberNodes=False):
    """
    ConvertGraph_PNEANetMP_PUNGraph(PUNGraph InGraph, bool const & RenumberNodes=False) -> PNEANetMP

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &
    RenumberNodes: bool const &

    ConvertGraph_PNEANetMP_PUNGraph(PUNGraph InGraph) -> PNEANetMP

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &

    """
    return _SnapTime.ConvertGraph_PNEANetMP_PUNGraph(InGraph, RenumberNodes)

def ConvertSubGraph_PNEANetMP_PNEANetMP(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PNEANetMP_PNEANetMP(PNEANetMP InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PNEANetMP

    Parameters
    ----------
    InGraph: TPt< TNEANetMP > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PNEANetMP_PNEANetMP(PNEANetMP InGraph, TInt64V NIdV) -> PNEANetMP

    Parameters
    ----------
    InGraph: TPt< TNEANetMP > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PNEANetMP_PNEANetMP(InGraph, NIdV, RenumberNodes)

def ConvertSubGraph_PNEANetMP_PNGraph(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PNEANetMP_PNGraph(PNGraph InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PNEANetMP

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PNEANetMP_PNGraph(PNGraph InGraph, TInt64V NIdV) -> PNEANetMP

    Parameters
    ----------
    InGraph: TPt< TNGraph > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PNEANetMP_PNGraph(InGraph, NIdV, RenumberNodes)

def ConvertSubGraph_PNEANetMP_PUNGraph(InGraph, NIdV, RenumberNodes=False):
    """
    ConvertSubGraph_PNEANetMP_PUNGraph(PUNGraph InGraph, TInt64V NIdV, bool const & RenumberNodes=False) -> PNEANetMP

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &
    NIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertSubGraph_PNEANetMP_PUNGraph(PUNGraph InGraph, TInt64V NIdV) -> PNEANetMP

    Parameters
    ----------
    InGraph: TPt< TUNGraph > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.ConvertSubGraph_PNEANetMP_PUNGraph(InGraph, NIdV, RenumberNodes)

def ConvertESubGraph_PNEANetMP_PNEANetMP(InGraph, EIdV, RenumberNodes=False):
    """
    ConvertESubGraph_PNEANetMP_PNEANetMP(PNEANetMP InGraph, TInt64V EIdV, bool const & RenumberNodes=False) -> PNEANetMP

    Parameters
    ----------
    InGraph: TPt< TNEANetMP > const &
    EIdV: TInt64V const &
    RenumberNodes: bool const &

    ConvertESubGraph_PNEANetMP_PNEANetMP(PNEANetMP InGraph, TInt64V EIdV) -> PNEANetMP

    Parameters
    ----------
    InGraph: TPt< TNEANetMP > const &
    EIdV: TInt64V const &

    """
    return _SnapTime.ConvertESubGraph_PNEANetMP_PNEANetMP(InGraph, EIdV, RenumberNodes)

def GetSubGraph_PNEANetMP(Graph, NIdV):
    """
    GetSubGraph_PNEANetMP(PNEANetMP Graph, TInt64V NIdV) -> PNEANetMP

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.GetSubGraph_PNEANetMP(Graph, NIdV)

def GetESubGraph_PNEANetMP(*args):
    """
    GetESubGraph_PNEANetMP(PNEANetMP Graph, TInt64V EIdV) -> PNEANetMP

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    EIdV: TInt64V const &

    GetESubGraph_PNEANetMP(PNEANetMP Graph, TIntPr64V EdgeV) -> PNEANetMP

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    EdgeV: TIntPr64V const &

    """
    return _SnapTime.GetESubGraph_PNEANetMP(*args)

def GetRndSubGraph_PNEANetMP(Graph, NNodes):
    """
    GetRndSubGraph_PNEANetMP(PNEANetMP Graph, int64 const & NNodes) -> PNEANetMP

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NNodes: int64 const &

    """
    return _SnapTime.GetRndSubGraph_PNEANetMP(Graph, NNodes)

def GetRndESubGraph_PNEANetMP(Graph, NEdges):
    """
    GetRndESubGraph_PNEANetMP(PNEANetMP Graph, int64 const & NEdges) -> PNEANetMP

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NEdges: int64 const &

    """
    return _SnapTime.GetRndESubGraph_PNEANetMP(Graph, NEdges)

def GetClustCf_PNEANetMP(*args):
    """
    GetClustCf_PNEANetMP(PNEANetMP Graph, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    SampleNodes: int64

    GetClustCf_PNEANetMP(PNEANetMP Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    GetClustCf_PNEANetMP(PNEANetMP Graph, TFltPr64V DegToCCfV, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    DegToCCfV: TFltPr64V &
    SampleNodes: int64

    GetClustCf_PNEANetMP(PNEANetMP Graph, TFltPr64V DegToCCfV) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    DegToCCfV: TFltPr64V &

    GetClustCf_PNEANetMP(PNEANetMP Graph, TFltPr64V DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX, int64 SampleNodes=-1) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    DegToCCfV: TFltPr64V &
    ClosedTriadsX: int64 &
    OpenTriadsX: int64 &
    SampleNodes: int64

    GetClustCf_PNEANetMP(PNEANetMP Graph, TFltPr64V DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    DegToCCfV: TFltPr64V &
    ClosedTriadsX: int64 &
    OpenTriadsX: int64 &

    """
    return _SnapTime.GetClustCf_PNEANetMP(*args)

def GetNodeClustCf_PNEANetMP(*args):
    """
    GetNodeClustCf_PNEANetMP(PNEANetMP Graph, int64 const & NId) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId: int64 const &

    GetNodeClustCf_PNEANetMP(PNEANetMP Graph, TIntFlt64H NIdCCfH)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdCCfH: TIntFlt64H &

    """
    return _SnapTime.GetNodeClustCf_PNEANetMP(*args)

def GetTriads_PNEANetMP(*args):
    """
    GetTriads_PNEANetMP(PNEANetMP Graph, int64 & ClosedTriads, int64 & OpenTriads, int64 SampleNodes=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    ClosedTriads: int64 &
    OpenTriads: int64 &
    SampleNodes: int64

    GetTriads_PNEANetMP(PNEANetMP Graph, int64 & ClosedTriads, int64 & OpenTriads) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    ClosedTriads: int64 &
    OpenTriads: int64 &

    GetTriads_PNEANetMP(PNEANetMP Graph, int64 SampleNodes=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    SampleNodes: int64

    GetTriads_PNEANetMP(PNEANetMP Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    GetTriads_PNEANetMP(PNEANetMP Graph, TIntTr64V & NIdCOTriadV, int64 SampleNodes=-1)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdCOTriadV: TIntTr64V &
    SampleNodes: int64

    GetTriads_PNEANetMP(PNEANetMP Graph, TIntTr64V & NIdCOTriadV)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdCOTriadV: TIntTr64V &

    """
    return _SnapTime.GetTriads_PNEANetMP(*args)

def GetTriadEdges_PNEANetMP(Graph, SampleEdges=-1):
    """
    GetTriadEdges_PNEANetMP(PNEANetMP Graph, int64 SampleEdges=-1) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    SampleEdges: int64

    GetTriadEdges_PNEANetMP(PNEANetMP Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.GetTriadEdges_PNEANetMP(Graph, SampleEdges)

def GetNodeTriads_PNEANetMP(*args):
    """
    GetNodeTriads_PNEANetMP(PNEANetMP Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId: int64 const &

    GetNodeTriads_PNEANetMP(PNEANetMP Graph, int64 const & NId) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId: int64 const &

    GetNodeTriads_PNEANetMP(PNEANetMP Graph, int64 const & NId, TInt64Set GroupSet, int64 & OutGroupEdgesX) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId: int64 const &
    GroupSet: TInt64Set const &
    OutGroupEdgesX: int64 &

    """
    return _SnapTime.GetNodeTriads_PNEANetMP(*args)

def GetTriadParticip_PNEANetMP(Graph, TriadCntV):
    """
    GetTriadParticip_PNEANetMP(PNEANetMP Graph, TIntPr64V TriadCntV)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    TriadCntV: TIntPr64V &

    """
    return _SnapTime.GetTriadParticip_PNEANetMP(Graph, TriadCntV)

def GetTriangleCnt_PNEANetMP(Graph):
    """
    GetTriangleCnt_PNEANetMP(PNEANetMP Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.GetTriangleCnt_PNEANetMP(Graph)

def GetCmnNbrs_PNEANetMP(*args):
    """
    GetCmnNbrs_PNEANetMP(PNEANetMP Graph, int64 const & NId1, int64 const & NId2) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId1: int64 const &
    NId2: int64 const &

    GetCmnNbrs_PNEANetMP(PNEANetMP Graph, int64 const & NId1, int64 const & NId2, TInt64V NbrV) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NId1: int64 const &
    NId2: int64 const &
    NbrV: TInt64V &

    """
    return _SnapTime.GetCmnNbrs_PNEANetMP(*args)

def GetModularity_PNEANetMP(*args):
    """
    GetModularity_PNEANetMP(PNEANetMP G, TInt64V NIdV, int64 GEdges=-1) -> double

    Parameters
    ----------
    G: TPt< TNEANetMP > const &
    NIdV: TInt64V const &
    GEdges: int64

    GetModularity_PNEANetMP(PNEANetMP G, TInt64V NIdV) -> double

    Parameters
    ----------
    G: TPt< TNEANetMP > const &
    NIdV: TInt64V const &

    GetModularity_PNEANetMP(PNEANetMP G, TCnComV CmtyV, int64 GEdges=-1) -> double

    Parameters
    ----------
    G: TPt< TNEANetMP > const &
    CmtyV: TCnComV const &
    GEdges: int64

    GetModularity_PNEANetMP(PNEANetMP G, TCnComV CmtyV) -> double

    Parameters
    ----------
    G: TPt< TNEANetMP > const &
    CmtyV: TCnComV const &

    """
    return _SnapTime.GetModularity_PNEANetMP(*args)

def GetEdgesInOut_PNEANetMP(Graph, NIdV):
    """
    GetEdgesInOut_PNEANetMP(PNEANetMP Graph, TInt64V NIdV)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NIdV: TInt64V const &

    """
    return _SnapTime.GetEdgesInOut_PNEANetMP(Graph, NIdV)

def GetAnf_PNEANetMP(*args):
    """
    GetAnf_PNEANetMP(PNEANetMP Graph, int64 const & SrcNId, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir, int64 const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    SrcNId: int64 const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &
    NApprox: int64 const &

    GetAnf_PNEANetMP(PNEANetMP Graph, int64 const & SrcNId, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    SrcNId: int64 const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &

    GetAnf_PNEANetMP(PNEANetMP Graph, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir, int64 const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &
    NApprox: int64 const &

    GetAnf_PNEANetMP(PNEANetMP Graph, TIntFltKd64V DistNbrsV, int64 const & MxDist, bool const & IsDir)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    DistNbrsV: TIntFltKd64V &
    MxDist: int64 const &
    IsDir: bool const &

    """
    return _SnapTime.GetAnf_PNEANetMP(*args)

def GetAnfEffDiam_PNEANetMP(*args):
    """
    GetAnfEffDiam_PNEANetMP(PNEANetMP Graph, bool const & IsDir, double const & Percentile, int64 const & NApprox) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    IsDir: bool const &
    Percentile: double const &
    NApprox: int64 const &

    GetAnfEffDiam_PNEANetMP(PNEANetMP Graph, int64 const NRuns=1, int64 NApprox=-1) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NRuns: int64 const
    NApprox: int64

    GetAnfEffDiam_PNEANetMP(PNEANetMP Graph, int64 const NRuns=1) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    NRuns: int64 const

    GetAnfEffDiam_PNEANetMP(PNEANetMP Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.GetAnfEffDiam_PNEANetMP(*args)

def TestAnf_PNEANetMP():
    """TestAnf_PNEANetMP()"""
    return _SnapTime.TestAnf_PNEANetMP()

def PlotKCoreEdges_PNEANetMP(*args):
    """
    PlotKCoreEdges_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotKCoreEdges_PNEANetMP(PNEANetMP Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotKCoreEdges_PNEANetMP(*args)

def PlotKCoreNodes_PNEANetMP(*args):
    """
    PlotKCoreNodes_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotKCoreNodes_PNEANetMP(PNEANetMP Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotKCoreNodes_PNEANetMP(*args)

def PlotShortPathDistr_PNEANetMP(*args):
    """
    PlotShortPathDistr_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr, int TestNodes)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr
    TestNodes: int

    PlotShortPathDistr_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotShortPathDistr_PNEANetMP(PNEANetMP Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotShortPathDistr_PNEANetMP(*args)

def PlotHops_PNEANetMP(*args):
    """
    PlotHops_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr, bool const & IsDir=False, int const & NApprox=32)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr
    IsDir: bool const &
    NApprox: int const &

    PlotHops_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr, bool const & IsDir=False)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr
    IsDir: bool const &

    PlotHops_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotHops_PNEANetMP(PNEANetMP Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotHops_PNEANetMP(*args)

def PlotClustCf_PNEANetMP(*args):
    """
    PlotClustCf_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotClustCf_PNEANetMP(PNEANetMP Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotClustCf_PNEANetMP(*args)

def PlotSccDistr_PNEANetMP(*args):
    """
    PlotSccDistr_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotSccDistr_PNEANetMP(PNEANetMP Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotSccDistr_PNEANetMP(*args)

def PlotWccDistr_PNEANetMP(*args):
    """
    PlotWccDistr_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotWccDistr_PNEANetMP(PNEANetMP Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotWccDistr_PNEANetMP(*args)

def PlotOutDegDistr_PNEANetMP(*args):
    """
    PlotOutDegDistr_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &
    PowerFit: bool const &

    PlotOutDegDistr_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &

    PlotOutDegDistr_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotOutDegDistr_PNEANetMP(PNEANetMP Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotOutDegDistr_PNEANetMP(*args)

def PlotInDegDistr_PNEANetMP(*args):
    """
    PlotInDegDistr_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &
    PowerFit: bool const &

    PlotInDegDistr_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr, bool const & PlotCCdf=False)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr
    PlotCCdf: bool const &

    PlotInDegDistr_PNEANetMP(PNEANetMP Graph, TStr FNmPref, TStr DescStr)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &
    DescStr: TStr

    PlotInDegDistr_PNEANetMP(PNEANetMP Graph, TStr FNmPref)

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    FNmPref: TStr const &

    """
    return _SnapTime.PlotInDegDistr_PNEANetMP(*args)

def PercentDegree_PNEANetMP(Graph, Threshold=0):
    """
    PercentDegree_PNEANetMP(PNEANetMP Graph, int64 const Threshold=0) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    Threshold: int64 const

    PercentDegree_PNEANetMP(PNEANetMP Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.PercentDegree_PNEANetMP(Graph, Threshold)

def NodesGTEDegree_PNEANetMP(Graph, Threshold=0):
    """
    NodesGTEDegree_PNEANetMP(PNEANetMP Graph, int64 const Threshold=0) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &
    Threshold: int64 const

    NodesGTEDegree_PNEANetMP(PNEANetMP Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.NodesGTEDegree_PNEANetMP(Graph, Threshold)

def MxDegree_PNEANetMP(Graph):
    """
    MxDegree_PNEANetMP(PNEANetMP Graph) -> int64

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.MxDegree_PNEANetMP(Graph)

def PercentMxWcc_PNEANetMP(Graph):
    """
    PercentMxWcc_PNEANetMP(PNEANetMP Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.PercentMxWcc_PNEANetMP(Graph)

def PercentMxScc_PNEANetMP(Graph):
    """
    PercentMxScc_PNEANetMP(PNEANetMP Graph) -> double

    Parameters
    ----------
    Graph: TPt< TNEANetMP > const &

    """
    return _SnapTime.PercentMxScc_PNEANetMP(Graph)

def ToNetworkMP_PNEANetMP(*args):
    """
    ToNetworkMP_PNEANetMP(PTable Table, TStr SrcCol, TStr DstCol, TStr64V SrcAttrs, TStr64V DstAttrs, TStr64V EdgeAttrs, TAttrAggr AggrPolicy) -> PNEANetMP

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    SrcAttrs: TStr64V &
    DstAttrs: TStr64V &
    EdgeAttrs: TStr64V &
    AggrPolicy: enum TAttrAggr

    ToNetworkMP_PNEANetMP(PTable Table, TStr SrcCol, TStr DstCol, TStr64V EdgeAttrV, TAttrAggr AggrPolicy) -> PNEANetMP

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    EdgeAttrV: TStr64V &
    AggrPolicy: enum TAttrAggr

    ToNetworkMP_PNEANetMP(PTable Table, TStr SrcCol, TStr DstCol, TAttrAggr AggrPolicy) -> PNEANetMP

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    AggrPolicy: enum TAttrAggr

    ToNetworkMP_PNEANetMP(PTable Table, TStr SrcCol, TStr DstCol, TStr64V EdgeAttrV, PTable NodeTable, TStr NodeCol, TStr64V NodeAttrV, TAttrAggr AggrPolicy) -> PNEANetMP

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    EdgeAttrV: TStr64V &
    NodeTable: PTable
    NodeCol: TStr const &
    NodeAttrV: TStr64V &
    AggrPolicy: enum TAttrAggr

    """
    return _SnapTime.ToNetworkMP_PNEANetMP(*args)

def ToNetworkMP2_PNEANetMP(*args):
    """
    ToNetworkMP2_PNEANetMP(PTable Table, TStr SrcCol, TStr DstCol, TStr64V SrcAttrs, TStr64V DstAttrs, TStr64V EdgeAttrs, TAttrAggr AggrPolicy) -> PNEANetMP

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    SrcAttrs: TStr64V &
    DstAttrs: TStr64V &
    EdgeAttrs: TStr64V &
    AggrPolicy: enum TAttrAggr

    ToNetworkMP2_PNEANetMP(PTable Table, TStr SrcCol, TStr DstCol, TAttrAggr AggrPolicy) -> PNEANetMP

    Parameters
    ----------
    Table: PTable
    SrcCol: TStr const &
    DstCol: TStr const &
    AggrPolicy: enum TAttrAggr

    """
    return _SnapTime.ToNetworkMP2_PNEANetMP(*args)


#
# dispatch table for instantiated polymorphic SNAP templates
# BELOW INCLUDE out-*.txt
#

def LoadPajek(tspec, *args):
    if tspec == PUNGraph: return LoadPajek_PUNGraph(*args)
    if tspec == PUndirNet: return LoadPajek_PUndirNet(*args)
    if tspec == PDirNet: return LoadPajek_PDirNet(*args)
    if tspec == PNGraph : return LoadPajek_PNGraph(*args)
    if tspec == PNEANet : return LoadPajek_PNEANet(*args)
    if tspec == PNGraphMP: return LoadPajek_PNGraphMP(*args)
    if tspec == PNEANetMP: return LoadPajek_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def SaveGViz(tspec, *args):
    if type(tspec) == PUNGraph: return SaveGViz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return SaveGViz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return SaveGViz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return SaveGViz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SaveGViz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SaveGViz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SaveGViz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def TestAnf(tspec, *args):
    if type(tspec) == PUNGraph: return TestAnf_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return TestAnf_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return TestAnf_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return TestAnf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return TestAnf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return TestAnf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return TestAnf_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeWcc(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeWcc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeWcc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeWcc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeWcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeWcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeWcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeWcc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def DelNodes(tspec, *args):
    if type(tspec) == PUNGraph: return DelNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return DelNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return DelNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return DelNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntEdgesToSet(tspec, *args):
    if type(tspec) == PUNGraph: return CntEdgesToSet_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntEdgesToSet_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntEdgesToSet_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntEdgesToSet_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntEdgesToSet_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntEdgesToSet_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntEdgesToSet_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetModularity(tspec, *args):
    if type(tspec) == PUNGraph: return GetModularity_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetModularity_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetModularity_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetModularity_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetModularity_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetModularity_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetModularity_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetBfsEffDiam(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsEffDiam_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetBfsEffDiam_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetBfsEffDiam_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsEffDiam_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsEffDiam_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBfsEffDiam_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBfsEffDiam_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PercentMxWcc(tspec, *args):
    if type(tspec) == PUNGraph: return PercentMxWcc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PercentMxWcc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PercentMxWcc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PercentMxWcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PercentMxWcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PercentMxWcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PercentMxWcc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetSubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetSubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetSubGraph_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetSubGraph_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetSubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSubGraph_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSubGraph_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetBfsTree(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsTree_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetBfsTree_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetBfsTree_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsTree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsTree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBfsTree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBfsTree_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PrintGraphStatTable(tspec, *args):
    if type(tspec) == PUNGraph: return PrintGraphStatTable_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PrintGraphStatTable_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PrintGraphStatTable_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PrintGraphStatTable_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PrintGraphStatTable_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PrintGraphStatTable_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PrintGraphStatTable_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetDegSeqV(tspec, *args):
    if type(tspec) == PUNGraph: return GetDegSeqV_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetDegSeqV_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetDegSeqV_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetDegSeqV_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetDegSeqV_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetDegSeqV_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetDegSeqV_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenGrid(tspec, *args):
    if tspec == PUNGraph: return GenGrid_PUNGraph(*args)
    if tspec == PUndirNet: return GenGrid_PUndirNet(*args)
    if tspec == PDirNet: return GenGrid_PDirNet(*args)
    if tspec == PNGraph : return GenGrid_PNGraph(*args)
    if tspec == PNEANet : return GenGrid_PNEANet(*args)
    if tspec == PNGraphMP: return GenGrid_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenGrid_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def LoadEdgeList(tspec, *args):
    if tspec == PUNGraph: return LoadEdgeList_PUNGraph(*args)
    if tspec == PUndirNet: return LoadEdgeList_PUndirNet(*args)
    if tspec == PDirNet: return LoadEdgeList_PDirNet(*args)
    if tspec == PNGraph : return LoadEdgeList_PNGraph(*args)
    if tspec == PNEANet : return LoadEdgeList_PNEANet(*args)
    if tspec == PNGraphMP: return LoadEdgeList_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadEdgeList_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GetUnDir(tspec, *args):
    if type(tspec) == PUNGraph: return GetUnDir_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetUnDir_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetUnDir_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetUnDir_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetUnDir_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetUnDir_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetUnDir_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def DrawGViz(tspec, *args):
    if type(tspec) == PUNGraph: return DrawGViz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return DrawGViz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return DrawGViz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return DrawGViz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DrawGViz_PNEANet(tspec, *args)
    if type(tspec) == PNEANetMP : return DrawGViz_PNEANetMP(tspec, *args)
    if type(tspec) == PNGraphMP: return DrawGViz_PNGraphMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotKCoreNodes(tspec, *args):
    if type(tspec) == PUNGraph: return PlotKCoreNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotKCoreNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotKCoreNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotKCoreNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotKCoreNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotKCoreNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotKCoreNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotOutDegDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotOutDegDistr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotOutDegDistr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotOutDegDistr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotOutDegDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotOutDegDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotOutDegDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotOutDegDistr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntUniqBiDirEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntUniqBiDirEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntUniqBiDirEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntUniqBiDirEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntUniqBiDirEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntUniqBiDirEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntUniqBiDirEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntUniqBiDirEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetKCoreEdges(tspec, *args):
    if type(tspec) == PUNGraph: return GetKCoreEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetKCoreEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetKCoreEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetKCoreEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetKCoreEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetKCoreEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetKCoreEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxDegNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxDegNId_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxDegNId_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxDegNId_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxDegNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxDegNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxDegNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxDegNId_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetBfsFullDiam(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsFullDiam_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetBfsFullDiam_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetBfsFullDiam_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsFullDiam_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsFullDiam_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBfsFullDiam_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBfsFullDiam_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def LoadConnList(tspec, *args):
    if tspec == PUNGraph: return LoadConnList_PUNGraph(*args)
    if tspec == PUndirNet: return LoadConnList_PUndirNet(*args)
    if tspec == PDirNet: return LoadConnList_PDirNet(*args)
    if tspec == PNGraph : return LoadConnList_PNGraph(*args)
    if tspec == PNEANet : return LoadConnList_PNEANet(*args)
    if tspec == PNGraphMP: return LoadConnList_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadConnList_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GetHitsMP(tspec, *args):
    if type(tspec) == PUNGraph: return GetHitsMP_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetHitsMP_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetHitsMP_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetHitsMP_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetHitsMP_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetHitsMP_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetHitsMP_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetPageRank(tspec, *args):
    if type(tspec) == PUNGraph: return GetPageRank_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetPageRank_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetPageRank_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetPageRank_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetPageRank_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetPageRank_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetPageRank_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetPageRank_v1(tspec, *args):
    if type(tspec) == PUNGraph: return GetPageRank_v1_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetPageRank_v1_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetPageRank_v1_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetPageRank_v1_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetPageRank_v1_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetPageRank_v1_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetPageRank_v1_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntInDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntInDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntInDegNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntInDegNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntInDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntInDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntInDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntInDegNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxScc(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxScc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxScc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxScc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxScc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxScc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxScc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxScc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def AddSelfEdges(tspec, *args):
    if type(tspec) == PUNGraph: return AddSelfEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return AddSelfEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return AddSelfEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return AddSelfEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return AddSelfEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return AddSelfEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return AddSelfEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def DelDegKNodes(tspec, *args):
    if type(tspec) == PUNGraph: return DelDegKNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return DelDegKNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return DelDegKNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return DelDegKNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelDegKNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelDegKNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelDegKNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotSccDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotSccDistr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotSccDistr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotSccDistr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotSccDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotSccDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotSccDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotSccDistr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def IsWeaklyConn(tspec, *args):
    if type(tspec) == PUNGraph: return IsWeaklyConn_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return IsWeaklyConn_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return IsWeaklyConn_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return IsWeaklyConn_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return IsWeaklyConn_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return IsWeaklyConn_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return IsWeaklyConn_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxInDegNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxInDegNId_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxInDegNId_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxInDegNId_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxInDegNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxInDegNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxInDegNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxInDegNId_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetSccSzCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetSccSzCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetSccSzCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetSccSzCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetSccSzCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSccSzCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSccSzCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSccSzCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetClosenessCentr(tspec, *args):
    if type(tspec) == PUNGraph: return GetClosenessCentr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetClosenessCentr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetClosenessCentr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetClosenessCentr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetClosenessCentr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetClosenessCentr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetClosenessCentr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def MxWccSz(tspec, *args):
    if type(tspec) == PUNGraph: return MxWccSz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return MxWccSz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return MxWccSz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return MxWccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MxWccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MxWccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MxWccSz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetCmnNbrs(tspec, *args):
    if type(tspec) == PUNGraph: return GetCmnNbrs_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetCmnNbrs_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetCmnNbrs_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetCmnNbrs_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetCmnNbrs_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetCmnNbrs_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetCmnNbrs_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTriadEdges(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriadEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTriadEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTriadEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTriadEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriadEdges_PNEANet(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriadEdges_PNEANetMP(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriadEdges_PNGraphMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def LoadConnListStr(tspec, *args):
    if tspec == PUNGraph: return LoadConnListStr_PUNGraph(*args)
    if tspec == PUndirNet: return LoadConnListStr_PUndirNet(*args)
    if tspec == PDirNet: return LoadConnListStr_PDirNet(*args)
    if tspec == PNGraph : return LoadConnListStr_PNGraph(*args)
    if tspec == PNEANet : return LoadConnListStr_PNEANet(*args)
    if tspec == PNGraphMP: return LoadConnListStr_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadConnListStr_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GetMxWccSz(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxWccSz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxWccSz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxWccSz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxWccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxWccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxWccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxWccSz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxOutDegNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxOutDegNId_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxOutDegNId_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxOutDegNId_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxOutDegNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxOutDegNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxOutDegNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxOutDegNId_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetLen2Paths(tspec, *args):
    if type(tspec) == PUNGraph: return GetLen2Paths_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetLen2Paths_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetLen2Paths_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetLen2Paths_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetLen2Paths_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetLen2Paths_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetLen2Paths_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetPageRankMP(tspec, *args):
    if type(tspec) == PUNGraph: return GetPageRankMP_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetPageRankMP_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetPageRankMP_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetPageRankMP_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetPageRankMP_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetPageRankMP_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetPageRankMP_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PrintInfo(tspec, *args):
    if type(tspec) == PUNGraph: return PrintInfo_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PrintInfo_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PrintInfo_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PrintInfo_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PrintInfo_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PrintInfo_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PrintInfo_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetWccs(tspec, *args):
    if type(tspec) == PUNGraph: return GetWccs_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetWccs_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetWccs_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetWccs_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetWccs_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetWccs_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetWccs_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxWcc(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxWcc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxWcc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxWcc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxWcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxWcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxWcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxWcc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxSccSz(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxSccSz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxSccSz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxSccSz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxSccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxSccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxSccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxSccSz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntSelfEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntSelfEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntSelfEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntSelfEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntSelfEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntSelfEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntSelfEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntSelfEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def NodesGTEDegree(tspec, *args):
    if type(tspec) == PUNGraph: return NodesGTEDegree_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return NodesGTEDegree_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return NodesGTEDegree_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return NodesGTEDegree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return NodesGTEDegree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return NodesGTEDegree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return NodesGTEDegree_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotShortPathDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotShortPathDistr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotShortPathDistr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotShortPathDistr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotShortPathDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotShortPathDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotShortPathDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotShortPathDistr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodesAtHop(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodesAtHop_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodesAtHop_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodesAtHop_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodesAtHop_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodesAtHop_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodesAtHop_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodesAtHop_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotInDegDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotInDegDistr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotInDegDistr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotInDegDistr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotInDegDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotInDegDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotInDegDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotInDegDistr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetHits(tspec, *args):
    if type(tspec) == PUNGraph: return GetHits_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetHits_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetHits_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetHits_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetHits_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetHits_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetHits_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxBiCon(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxBiCon_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxBiCon_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxBiCon_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxBiCon_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxBiCon_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxBiCon_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxBiCon_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def DelZeroDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return DelZeroDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return DelZeroDegNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return DelZeroDegNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return DelZeroDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelZeroDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelZeroDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelZeroDegNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetRndESubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetRndESubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetRndESubGraph_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetRndESubGraph_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetRndESubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetRndESubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNEANetMP : return GetRndESubGraph_PNEANetMP(tspec, *args)
    if type(tspec) == PNGraphMP: return GetRndESubGraph_PNGraphMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetSccs(tspec, *args):
    if type(tspec) == PUNGraph: return GetSccs_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetSccs_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetSccs_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetSccs_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSccs_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSccs_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSccs_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PercentDegree(tspec, *args):
    if type(tspec) == PUNGraph: return PercentDegree_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PercentDegree_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PercentDegree_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PercentDegree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PercentDegree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PercentDegree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PercentDegree_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetSubTreeSz(tspec, *args):
    if type(tspec) == PUNGraph: return GetSubTreeSz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetSubTreeSz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetSubTreeSz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetSubTreeSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSubTreeSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSubTreeSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSubTreeSz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenFull(tspec, *args):
    if tspec == PUNGraph: return GenFull_PUNGraph(*args)
    if tspec == PUndirNet: return GenFull_PUndirNet(*args)
    if tspec == PDirNet: return GenFull_PDirNet(*args)
    if tspec == PNGraph : return GenFull_PNGraph(*args)
    if tspec == PNEANet : return GenFull_PNEANet(*args)
    if tspec == PNGraphMP: return GenFull_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenFull_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def IsConnected(tspec, *args):
    if type(tspec) == PUNGraph: return IsConnected_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return IsConnected_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return IsConnected_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return IsConnected_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return IsConnected_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return IsConnected_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return IsConnected_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeClustCf(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeClustCf_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeClustCf_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeClustCf_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeClustCf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeClustCf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeClustCf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeClustCf_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def MxDegree(tspec, *args):
    if type(tspec) == PUNGraph: return MxDegree_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return MxDegree_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return MxDegree_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return MxDegree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MxDegree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MxDegree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MxDegree_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def SavePajek(tspec, *args):
    if type(tspec) == PUNGraph: return SavePajek_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return SavePajek_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return SavePajek_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return SavePajek_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SavePajek_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SavePajek_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SavePajek_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTreeRootNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetTreeRootNId_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTreeRootNId_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTreeRootNId_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTreeRootNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTreeRootNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTreeRootNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTreeRootNId_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotHops(tspec, *args):
    if type(tspec) == PUNGraph: return PlotHops_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotHops_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotHops_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotHops_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotHops_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotHops_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotHops_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def DelSelfEdges(tspec, *args):
    if type(tspec) == PUNGraph: return DelSelfEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return DelSelfEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return DelSelfEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return DelSelfEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelSelfEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelSelfEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelSelfEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetClustCf(tspec, *args):
    if type(tspec) == PUNGraph: return GetClustCf_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetClustCf_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetClustCf_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetClustCf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetClustCf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetClustCf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetClustCf_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodesAtHops(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodesAtHops_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodesAtHops_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodesAtHops_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodesAtHops_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodesAtHops_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodesAtHops_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodesAtHops_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeOutDegV(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeOutDegV_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeOutDegV_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeOutDegV_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeOutDegV_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeOutDegV_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeOutDegV_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeOutDegV_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetAnf(tspec, *args):
    if type(tspec) == PUNGraph: return GetAnf_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetAnf_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetAnf_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetAnf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetAnf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetAnf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetAnf_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotClustCf(tspec, *args):
    if type(tspec) == PUNGraph: return PlotClustCf_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotClustCf_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotClustCf_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotClustCf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotClustCf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotClustCf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotClustCf_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenCircle(tspec, *args):
    if tspec == PUNGraph: return GenCircle_PUNGraph(*args)
    if tspec == PUndirNet: return GenCircle_PUndirNet(*args)
    if tspec == PDirNet: return GenCircle_PDirNet(*args)
    if tspec == PNGraph : return GenCircle_PNGraph(*args)
    if tspec == PNEANet : return GenCircle_PNEANet(*args)
    if tspec == PNGraphMP: return GenCircle_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenCircle_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def MakeUnDir(tspec, *args):
    if type(tspec) == PUNGraph: return MakeUnDir_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return MakeUnDir_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return MakeUnDir_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return MakeUnDir_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MakeUnDir_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MakeUnDir_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MakeUnDir_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetESubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetESubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetESubGraph_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetESubGraph_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetESubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetESubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetESubGraph_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetESubGraph_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetBetweennessCentr(tspec, *args):
    if type(tspec) == PUNGraph: return GetBetweennessCentr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetBetweennessCentr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetBetweennessCentr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetBetweennessCentr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBetweennessCentr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBetweennessCentr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBetweennessCentr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTriadParticip(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriadParticip_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTriadParticip_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTriadParticip_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTriadParticip_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriadParticip_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriadParticip_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriadParticip_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PercentMxScc(tspec, *args):
    if type(tspec) == PUNGraph: return PercentMxScc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PercentMxScc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PercentMxScc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PercentMxScc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PercentMxScc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PercentMxScc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PercentMxScc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetWccSzCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetWccSzCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetWccSzCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetWccSzCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetWccSzCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetWccSzCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetWccSzCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetWccSzCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntDegNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntDegNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntDegNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def IsTree(tspec, *args):
    if type(tspec) == PUNGraph: return IsTree_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return IsTree_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return IsTree_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return IsTree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return IsTree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return IsTree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return IsTree_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenRndGnm(tspec, *args):
    if tspec == PUNGraph: return GenRndGnm_PUNGraph(*args)
    if tspec == PUndirNet: return GenRndGnm_PUndirNet(*args)
    if tspec == PDirNet: return GenRndGnm_PDirNet(*args)
    if tspec == PNGraph : return GenRndGnm_PNGraph(*args)
    if tspec == PNEANet : return GenRndGnm_PNEANet(*args)
    if tspec == PNGraphMP: return GenRndGnm_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenRndGnm_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GetDegCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetDegCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetDegCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetDegCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetDegCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetDegCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetDegCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetDegCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetFarnessCentr(tspec, *args):
    if type(tspec) == PUNGraph: return GetFarnessCentr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetFarnessCentr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetFarnessCentr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetFarnessCentr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetFarnessCentr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetFarnessCentr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetFarnessCentr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def SaveMatlabSparseMtx(tspec, *args):
    if type(tspec) == PUNGraph: return SaveMatlabSparseMtx_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return SaveMatlabSparseMtx_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return SaveMatlabSparseMtx_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return SaveMatlabSparseMtx_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SaveMatlabSparseMtx_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SaveMatlabSparseMtx_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SaveMatlabSparseMtx_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def MxSccSz(tspec, *args):
    if type(tspec) == PUNGraph: return MxSccSz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return MxSccSz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return MxSccSz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return MxSccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MxSccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MxSccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MxSccSz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetAnfEffDiam(tspec, *args):
    if type(tspec) == PUNGraph: return GetAnfEffDiam_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetAnfEffDiam_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetAnfEffDiam_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetAnfEffDiam_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetAnfEffDiam_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetAnfEffDiam_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetAnfEffDiam_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTreeSig(tspec, *args):
    if type(tspec) == PUNGraph: return GetTreeSig_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTreeSig_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTreeSig_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTreeSig_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTreeSig_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTreeSig_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTreeSig_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntOutDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntOutDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntOutDegNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntOutDegNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntOutDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntOutDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntOutDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntOutDegNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTriangleCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriangleCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTriangleCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTriangleCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTriangleCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriangleCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriangleCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriangleCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetOutDegCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetOutDegCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetOutDegCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetOutDegCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetOutDegCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetOutDegCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetOutDegCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetOutDegCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenBaraHierar(tspec, *args):
    if tspec == PUNGraph: return GenBaraHierar_PUNGraph(*args)
    if tspec == PUndirNet: return GenBaraHierar_PUndirNet(*args)
    if tspec == PDirNet: return GenBaraHierar_PDirNet(*args)
    if tspec == PNGraph : return GenBaraHierar_PNGraph(*args)
    if tspec == PNEANet : return GenBaraHierar_PNEANet(*args)
    if tspec == PNGraphMP: return GenBaraHierar_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenBaraHierar_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GenTree(tspec, *args):
    if tspec == PUNGraph: return GenTree_PUNGraph(*args)
    if tspec == PUndirNet: return GenTree_PUndirNet(*args)
    if tspec == PDirNet: return GenTree_PDirNet(*args)
    if tspec == PNGraph : return GenTree_PNGraph(*args)
    if tspec == PNEANet : return GenTree_PNEANet(*args)
    if tspec == PNGraphMP: return GenTree_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenTree_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GetShortPath(tspec, *args):
    if type(tspec) == PUNGraph: return GetShortPath_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetShortPath_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetShortPath_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetShortPath_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetShortPath_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetShortPath_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetShortPath_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetKCoreNodes(tspec, *args):
    if type(tspec) == PUNGraph: return GetKCoreNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetKCoreNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetKCoreNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetKCoreNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetKCoreNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetKCoreNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetKCoreNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetInDegCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetInDegCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetInDegCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetInDegCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetInDegCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetInDegCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetInDegCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetInDegCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntUniqDirEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntUniqDirEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntUniqDirEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntUniqDirEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntUniqDirEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntUniqDirEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntUniqDirEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntUniqDirEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeInDegV(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeInDegV_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeInDegV_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeInDegV_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeInDegV_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeInDegV_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeInDegV_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeInDegV_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetRndSubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetRndSubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetRndSubGraph_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetRndSubGraph_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetRndSubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetRndSubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetRndSubGraph_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetRndSubGraph_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotWccDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotWccDistr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotWccDistr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotWccDistr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotWccDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotWccDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotWccDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotWccDistr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetEdgesInOut(tspec, *args):
    if type(tspec) == PUNGraph: return GetEdgesInOut_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetEdgesInOut_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetEdgesInOut_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetEdgesInOut_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetEdgesInOut_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetEdgesInOut_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetEdgesInOut_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetKCore(tspec, *args):
    if type(tspec) == PUNGraph: return GetKCore_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetKCore_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetKCore_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetKCore_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetKCore_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetKCore_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetKCore_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntNonZNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntNonZNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntNonZNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntNonZNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntNonZNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntNonZNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntNonZNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntNonZNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenStar(tspec, *args):
    if tspec == PUNGraph: return GenStar_PUNGraph(*args)
    if tspec == PUndirNet: return GenStar_PUndirNet(*args)
    if tspec == PDirNet: return GenStar_PDirNet(*args)
    if tspec == PNGraph : return GenStar_PNGraph(*args)
    if tspec == PNEANet : return GenStar_PNEANet(*args)
    if tspec == PNGraphMP: return GenStar_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenStar_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def PlotKCoreEdges(tspec, *args):
    if type(tspec) == PUNGraph: return PlotKCoreEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotKCoreEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotKCoreEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotKCoreEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotKCoreEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotKCoreEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotKCoreEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def SaveEdgeList(tspec, *args):
    if type(tspec) == PUNGraph: return SaveEdgeList_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return SaveEdgeList_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return SaveEdgeList_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return SaveEdgeList_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SaveEdgeList_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SaveEdgeList_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SaveEdgeList_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeTriads(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeTriads_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeTriads_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeTriads_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeTriads_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeTriads_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeTriads_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeTriads_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeEcc(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeEcc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeEcc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeEcc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeEcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeEcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeEcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeEcc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def LoadEdgeListStr(tspec, *args):
    if tspec == PUNGraph: return LoadEdgeListStr_PUNGraph(*args)
    if tspec == PUndirNet: return LoadEdgeListStr_PUndirNet(*args)
    if tspec == PDirNet: return LoadEdgeListStr_PDirNet(*args)
    if tspec == PNGraph : return LoadEdgeListStr_PNGraph(*args)
    if tspec == PNEANet : return LoadEdgeListStr_PNEANet(*args)
    if tspec == PNGraphMP: return LoadEdgeListStr_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadEdgeListStr_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def CntUniqUndirEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntUniqUndirEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntUniqUndirEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntUniqUndirEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntUniqUndirEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntUniqUndirEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntUniqUndirEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntUniqUndirEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTriads(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriads_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTriads_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTriads_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTriads_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriads_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriads_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriads_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')

#
# BELOW INCLUDE disp-custom.py
#
def ConvertGraph(toutspec, tinspec, *args):
    if toutspec == PUNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PUNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PUNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PUNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PUNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PUNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PUNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PUNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PUndirNet:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PUndirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PUndirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PUndirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PUndirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PUndirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PUndirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PUndirNet_PNEANetMP(tinspec, *args)
    if toutspec == PDirNet:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PDirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PDirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PDirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PDirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PDirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PDirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PDirNet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PNEANet:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNEANet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PNEANet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PNEANet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNEANet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNEANet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNEANet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNEANet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraphMP:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNGraphMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PNGraphMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PNGraphMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNGraphMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNGraphMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNGraphMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNGraphMP_PNEANetMP(tinspec, *args)
    if toutspec == PNEANetMP:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNEANetMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PNEANetMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PNEANetMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNEANetMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNEANetMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNEANetMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNEANetMP_PNEANetMP(tinspec, *args)
    raise TypeError('First argument has invalid type')
def ConvertSubGraph(toutspec, tinspec, *args):
    if toutspec == PUNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PUNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PUNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PUNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PUNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PUNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PUNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PUNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PUndirNet:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PUndirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PUndirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PUndirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PUndirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PUndirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PUndirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PUndirNet_PNEANetMP(tinspec, *args)
    if toutspec == PDirNet:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PDirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PDirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PDirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PDirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PDirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PDirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PDirNet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PNEANet:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNEANet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PNEANet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PNEANet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNEANet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNEANet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNEANet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNEANet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraphMP:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNGraphMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PNGraphMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PNGraphMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNGraphMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNGraphMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNGraphMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNGraphMP_PNEANetMP(tinspec, *args)
    if toutspec == PNEANetMP:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNEANetMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PNEANetMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PNEANetMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNEANetMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNEANetMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNEANetMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNEANetMP_PNEANetMP(tinspec, *args)
    raise TypeError('First argument has invalid type')
def ConvertESubGraph(toutspec, tinspec, *args):
    if toutspec == PUNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PUNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PUNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PUNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PUNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PUNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PUNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PUNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PUndirNet:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PUndirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PUndirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PUndirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PUndirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PUndirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PUndirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PUndirNet_PNEANetMP(tinspec, *args)
    if toutspec == PDirNet:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PDirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PDirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PDirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PDirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PDirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PDirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PDirNet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PNEANet:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNEANet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PNEANet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PNEANet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNEANet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNEANet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNEANet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNEANet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraphMP:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNGraphMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PNGraphMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PNGraphMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNGraphMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNGraphMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNGraphMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNGraphMP_PNEANetMP(tinspec, *args)
    if toutspec == PNEANetMP:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNEANetMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PNEANetMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PNEANetMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNEANetMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNEANetMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNEANetMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNEANetMP_PNEANetMP(tinspec, *args)
    raise TypeError('First argument has invalid type')
def ToNetwork(tspec, *args):
    if tspec == PNEANet : return ToNetwork_PNEANet(*args)
    raise TypeError('First argument has invalid type')
def ToNetworkMP(tspec, *args):
    if tspec == PNEANetMP : return ToNetworkMP_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def ToNetworkMP2(tspec, *args):
    if tspec == PNEANetMP : return ToNetworkMP2_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def ToGraph(tspec, *args):
    if tspec == PUNGraph: return ToGraph_PUNGraph(*args)
    if tspec == PUndirNet: return ToGraph_PUndirNet(*args)
    if tspec == PDirNet: return ToGraph_PDirNet(*args)
    if tspec == PNGraph : return ToGraph_PNGraph(*args)
    raise TypeError('First argument has invalid type')
def ToGraphMP(tspec, *args):
    if tspec == PNGraphMP : return ToGraphMP_PNGraphMP(*args)
    raise TypeError('First argument has invalid type')
def ToGraphMP3(tspec, *args):
    if tspec == PNGraphMP : return ToGraphMP3_PNGraphMP(*args)
    raise TypeError('First argument has invalid type')

#
# generators for nodes and edges
#

# iterate through all the nodes
def Nodes(self):
    NI = self.BegNI()
    while NI < self.EndNI():
        yield NI
        NI.Next()

# iterate through all the edges
def Edges(self):
    EI = self.BegEI()
    while EI < self.EndEI():
        yield EI
        EI.Next()

# iterate through out edges of a node
def GetOutEdges(self):
    for e in range(0, self.GetOutDeg()):
        yield self.GetOutNId(e)

# iterate through in edges of a node
def GetInEdges(self):
    for e in range(0, self.GetInDeg()):
        yield self.GetInNId(e)

#
# generators for nodes and edges
#

# iterate through all the nodes
def MMNodes(self):
    NI = self.BegMMNI()
    while NI < self.EndMMNI():
        yield NI
        NI.Next()

#
# redefine some methods to use T... class not P... class
#

def Clr(self):
    self().Clr()

def Empty(self):
    return self().Empty()

def Save(self,*args):
    self().Save(*args)

#
# define generator and redirection methods
#

PNEANet.Nodes = Nodes
PNEANet.Edges = Edges
PNEANet.Clr = Clr
PNEANet.Empty = Empty
PNEANet.Save = Save

TModeNet.Nodes = MMNodes
TModeNet.Edges = Edges

PMMNet.Save = Save

PUNGraph.Nodes = Nodes
PUNGraph.Edges = Edges
PUNGraph.Clr = Clr
PUNGraph.Empty = Empty
PUNGraph.Save = Save


PUndirNet.Nodes = Nodes
PUndirNet.Edges = Edges
PUndirNet.Clr = Clr
PUndirNet.Empty = Empty
PUndirNet.Save = Save

PDirNet.Nodes = Nodes
PDirNet.Edges = Edges
PDirNet.Clr = Clr
PDirNet.Empty = Empty
PDirNet.Save = Save

PNGraph.Nodes = Nodes
PNGraph.Edges = Edges
PNGraph.Clr = Clr
PNGraph.Empty = Empty
PNGraph.Save = Save

TNGraphNodeI.GetOutEdges = GetOutEdges
TNGraphNodeI.GetInEdges = GetInEdges

TUNGraphNodeI.GetOutEdges = GetOutEdges
TUNGraphNodeI.GetInEdges = GetInEdges

TDirNetNodeI.GetOutEdges = GetOutEdges
TDirNetNodeI.GetInEdges = GetInEdges

TUndirNetNodeI.GetOutEdges = GetOutEdges
TUndirNetNodeI.GetInEdges = GetInEdges

TNEANetNodeI.GetOutEdges = GetOutEdges
TNEANetNodeI.GetInEdges = GetInEdges

TModeNetNodeI.GetOutEdges = GetOutEdges
TModeNetNodeI.GetInEdges = GetInEdges




PNGraphMP.Nodes = Nodes
PNGraphMP.Edges = Edges
PNGraphMP.Clr = Clr
PNGraphMP.Empty = Empty
PNGraphMP.Save = Save

PNEANetMP.Nodes = Nodes
PNEANetMP.Edges = Edges
PNEANetMP.Clr = Clr
PNEANetMP.Empty = Empty
PNEANetMP.Save = Save

TNGraphMPNodeI.GetOutEdges = GetOutEdges
TNGraphMPNodeI.GetInEdges = GetInEdges

TNEANetMPNodeI.GetOutEdges = GetOutEdges
TNEANetMPNodeI.GetInEdges = GetInEdges


class PTable(object):
    """Proxy of C++ TPt<(TTable)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> PTable"""
        return _SnapTime.PTable_New()

    New = staticmethod(New)
    __swig_destroy__ = _SnapTime.delete_PTable

    def Save(self, SOut):
        """
        Save(PTable self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.PTable_Save(self, SOut)


    def __deref__(self):
        """
        __deref__(PTable self) -> TTable

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable___deref__(self)


    def __ref__(self):
        """
        __ref__(PTable self) -> TTable

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable___ref__(self)


    def __call__(self):
        """
        __call__(PTable self) -> TTable

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable___call__(self)


    def Empty(self):
        """
        Empty(PTable self) -> bool

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_Empty(self)


    def Clr(self):
        """
        Clr(PTable self)

        Parameters
        ----------
        self: TPt< TTable > *

        """
        return _SnapTime.PTable_Clr(self)


    def GetRefs(self):
        """
        GetRefs(PTable self) -> int64

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetRefs(self)


    def SetMP(self, Value):
        """
        SetMP(PTable self, TInt64 Value)

        Parameters
        ----------
        Value: TInt64

        """
        return _SnapTime.PTable_SetMP(self, Value)


    def GetMP(self):
        """
        GetMP(PTable self) -> TInt64

        Parameters
        ----------
        self: TPt< TTable > *

        """
        return _SnapTime.PTable_GetMP(self)


    def NormalizeColName(self, ColName):
        """
        NormalizeColName(PTable self, TStr ColName) -> TStr

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.PTable_NormalizeColName(self, ColName)


    def NormalizeColNameV(self, Cols):
        """
        NormalizeColNameV(PTable self, TStr64V Cols) -> TStr64V

        Parameters
        ----------
        Cols: TStr64V const &

        """
        return _SnapTime.PTable_NormalizeColNameV(self, Cols)


    def AddIntCol(self, ColName):
        """
        AddIntCol(PTable self, TStr ColName)

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.PTable_AddIntCol(self, ColName)


    def AddFltCol(self, ColName):
        """
        AddFltCol(PTable self, TStr ColName)

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.PTable_AddFltCol(self, ColName)


    def AddStrCol(self, ColName):
        """
        AddStrCol(PTable self, TStr ColName)

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.PTable_AddStrCol(self, ColName)


    def GroupByIntColMP(self, GroupBy, Grouping, UsePhysicalIds=True):
        """
        GroupByIntColMP(PTable self, TStr GroupBy, THashMP< TInt64,TInt64V,int64 > & Grouping, TBool UsePhysicalIds=True)

        Parameters
        ----------
        GroupBy: TStr const &
        Grouping: THashMP< TInt64,TInt64V,int64 > &
        UsePhysicalIds: TBool

        GroupByIntColMP(PTable self, TStr GroupBy, THashMP< TInt64,TInt64V,int64 > & Grouping)

        Parameters
        ----------
        GroupBy: TStr const &
        Grouping: THashMP< TInt64,TInt64V,int64 > &

        """
        return _SnapTime.PTable_GroupByIntColMP(self, GroupBy, Grouping, UsePhysicalIds)


    def GetSchema(self, *args):
        """
        GetSchema(PTable self, TStr InFNm, Schema S, char const & Separator)

        Parameters
        ----------
        InFNm: TStr const &
        S: Schema &
        Separator: char const &

        GetSchema(PTable self, TStr InFNm, Schema S)

        Parameters
        ----------
        InFNm: TStr const &
        S: Schema &

        GetSchema(PTable self) -> Schema

        Parameters
        ----------
        self: TPt< TTable > *

        """
        return _SnapTime.PTable_GetSchema(self, *args)


    def LoadSS(self, *args):
        """
        LoadSS(PTable self, Schema S, TStr InFNm, TTableContext Context, char const & Separator, TBool HasTitleLine=False) -> PTable

        Parameters
        ----------
        S: Schema const &
        InFNm: TStr const &
        Context: TTableContext *
        Separator: char const &
        HasTitleLine: TBool

        LoadSS(PTable self, Schema S, TStr InFNm, TTableContext Context, char const & Separator) -> PTable

        Parameters
        ----------
        S: Schema const &
        InFNm: TStr const &
        Context: TTableContext *
        Separator: char const &

        LoadSS(PTable self, Schema S, TStr InFNm, TTableContext Context) -> PTable

        Parameters
        ----------
        S: Schema const &
        InFNm: TStr const &
        Context: TTableContext *

        LoadSS(PTable self, Schema S, TStr InFNm, TTableContext Context, TInt64V RelevantCols, char const & Separator, TBool HasTitleLine=False) -> PTable

        Parameters
        ----------
        S: Schema const &
        InFNm: TStr const &
        Context: TTableContext *
        RelevantCols: TInt64V const &
        Separator: char const &
        HasTitleLine: TBool

        LoadSS(PTable self, Schema S, TStr InFNm, TTableContext Context, TInt64V RelevantCols, char const & Separator) -> PTable

        Parameters
        ----------
        S: Schema const &
        InFNm: TStr const &
        Context: TTableContext *
        RelevantCols: TInt64V const &
        Separator: char const &

        LoadSS(PTable self, Schema S, TStr InFNm, TTableContext Context, TInt64V RelevantCols) -> PTable

        Parameters
        ----------
        S: Schema const &
        InFNm: TStr const &
        Context: TTableContext *
        RelevantCols: TInt64V const &

        """
        return _SnapTime.PTable_LoadSS(self, *args)


    def SaveSS(self, OutFNm):
        """
        SaveSS(PTable self, TStr OutFNm)

        Parameters
        ----------
        OutFNm: TStr const &

        """
        return _SnapTime.PTable_SaveSS(self, OutFNm)


    def SaveBin(self, OutFNm):
        """
        SaveBin(PTable self, TStr OutFNm)

        Parameters
        ----------
        OutFNm: TStr const &

        """
        return _SnapTime.PTable_SaveBin(self, OutFNm)


    def Load(self, SIn, Context):
        """
        Load(PTable self, TSIn SIn, TTableContext Context) -> PTable

        Parameters
        ----------
        SIn: TSIn &
        Context: TTableContext *

        """
        return _SnapTime.PTable_Load(self, SIn, Context)


    def LoadShM(self, ShMIn, Context):
        """
        LoadShM(PTable self, TShMIn ShMIn, TTableContext Context) -> PTable

        Parameters
        ----------
        ShMIn: TShMIn &
        Context: TTableContext *

        """
        return _SnapTime.PTable_LoadShM(self, ShMIn, Context)


    def Dump(self, *args):
        """
        Dump(PTable self, FILE * OutF)

        Parameters
        ----------
        OutF: FILE *

        Dump(PTable self)

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_Dump(self, *args)


    def TableFromHashMap(self, *args):
        """
        TableFromHashMap(PTable self, TInt64H H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> PTable

        Parameters
        ----------
        H: THash< TInt64,TInt64,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *
        IsStrKeys: TBool const

        TableFromHashMap(PTable self, TInt64H H, TStr Col1, TStr Col2, TTableContext Context) -> PTable

        Parameters
        ----------
        H: THash< TInt64,TInt64,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *

        TableFromHashMap(PTable self, TIntFlt64H H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> PTable

        Parameters
        ----------
        H: THash< TInt64,TFlt,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *
        IsStrKeys: TBool const

        TableFromHashMap(PTable self, TIntFlt64H H, TStr Col1, TStr Col2, TTableContext Context) -> PTable

        Parameters
        ----------
        H: THash< TInt64,TFlt,int64 > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *

        """
        return _SnapTime.PTable_TableFromHashMap(self, *args)


    def GetContext(self):
        """
        GetContext(PTable self) -> TTableContext

        Parameters
        ----------
        self: TPt< TTable > *

        """
        return _SnapTime.PTable_GetContext(self)


    def ChangeContext(self, Context):
        """
        ChangeContext(PTable self, TTableContext Context) -> TTableContext

        Parameters
        ----------
        Context: TTableContext *

        """
        return _SnapTime.PTable_ChangeContext(self, Context)


    def GetColIdx(self, ColName):
        """
        GetColIdx(PTable self, TStr ColName) -> TInt64

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.PTable_GetColIdx(self, ColName)


    def GetIntVal(self, ColName, RowIdx):
        """
        GetIntVal(PTable self, TStr ColName, TInt64 RowIdx) -> TInt64

        Parameters
        ----------
        ColName: TStr const &
        RowIdx: TInt64 const &

        """
        return _SnapTime.PTable_GetIntVal(self, ColName, RowIdx)


    def GetFltVal(self, ColName, RowIdx):
        """
        GetFltVal(PTable self, TStr ColName, TInt64 RowIdx) -> TFlt

        Parameters
        ----------
        ColName: TStr const &
        RowIdx: TInt64 const &

        """
        return _SnapTime.PTable_GetFltVal(self, ColName, RowIdx)


    def GetStrMapById(self, ColIdx, RowIdx):
        """
        GetStrMapById(PTable self, TInt64 ColIdx, TInt64 RowIdx) -> TInt64

        Parameters
        ----------
        ColIdx: TInt64
        RowIdx: TInt64

        """
        return _SnapTime.PTable_GetStrMapById(self, ColIdx, RowIdx)


    def GetStrMapByName(self, ColName, RowIdx):
        """
        GetStrMapByName(PTable self, TStr ColName, TInt64 RowIdx) -> TInt64

        Parameters
        ----------
        ColName: TStr const &
        RowIdx: TInt64

        """
        return _SnapTime.PTable_GetStrMapByName(self, ColName, RowIdx)


    def GetStrValById(self, ColIdx, RowIdx):
        """
        GetStrValById(PTable self, TInt64 ColIdx, TInt64 RowIdx) -> TStr

        Parameters
        ----------
        ColIdx: TInt64
        RowIdx: TInt64

        """
        return _SnapTime.PTable_GetStrValById(self, ColIdx, RowIdx)


    def GetStrValByName(self, ColName, RowIdx):
        """
        GetStrValByName(PTable self, TStr ColName, TInt64 RowIdx) -> TStr

        Parameters
        ----------
        ColName: TStr const &
        RowIdx: TInt64 const &

        """
        return _SnapTime.PTable_GetStrValByName(self, ColName, RowIdx)


    def GetIntRowIdxByVal(self, ColName, Val):
        """
        GetIntRowIdxByVal(PTable self, TStr ColName, TInt64 Val) -> TInt64V

        Parameters
        ----------
        ColName: TStr const &
        Val: TInt64 const &

        """
        return _SnapTime.PTable_GetIntRowIdxByVal(self, ColName, Val)


    def GetStrRowIdxByMap(self, ColName, Map):
        """
        GetStrRowIdxByMap(PTable self, TStr ColName, TInt64 Map) -> TInt64V

        Parameters
        ----------
        ColName: TStr const &
        Map: TInt64 const &

        """
        return _SnapTime.PTable_GetStrRowIdxByMap(self, ColName, Map)


    def GetFltRowIdxByVal(self, ColName, Val):
        """
        GetFltRowIdxByVal(PTable self, TStr ColName, TFlt Val) -> TInt64V

        Parameters
        ----------
        ColName: TStr const &
        Val: TFlt const &

        """
        return _SnapTime.PTable_GetFltRowIdxByVal(self, ColName, Val)


    def RequestIndexInt(self, ColName):
        """
        RequestIndexInt(PTable self, TStr ColName) -> TInt64

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.PTable_RequestIndexInt(self, ColName)


    def RequestIndexFlt(self, ColName):
        """
        RequestIndexFlt(PTable self, TStr ColName) -> TInt64

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.PTable_RequestIndexFlt(self, ColName)


    def RequestIndexStrMap(self, ColName):
        """
        RequestIndexStrMap(PTable self, TStr ColName) -> TInt64

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.PTable_RequestIndexStrMap(self, ColName)


    def GetStr(self, KeyId):
        """
        GetStr(PTable self, TInt64 KeyId) -> TStr

        Parameters
        ----------
        KeyId: TInt64 const &

        """
        return _SnapTime.PTable_GetStr(self, KeyId)


    def GetIntValAtRowIdx(self, ColIdx, RowIdx):
        """
        GetIntValAtRowIdx(PTable self, TInt64 ColIdx, TInt64 RowIdx) -> TInt64

        Parameters
        ----------
        ColIdx: TInt64 const &
        RowIdx: TInt64 const &

        """
        return _SnapTime.PTable_GetIntValAtRowIdx(self, ColIdx, RowIdx)


    def GetFltValAtRowIdx(self, ColIdx, RowIdx):
        """
        GetFltValAtRowIdx(PTable self, TInt64 ColIdx, TInt64 RowIdx) -> TFlt

        Parameters
        ----------
        ColIdx: TInt64 const &
        RowIdx: TInt64 const &

        """
        return _SnapTime.PTable_GetFltValAtRowIdx(self, ColIdx, RowIdx)


    def ToGraphSequence(self, *args):
        """
        ToGraphSequence(PTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt64 WindowSize, TInt64 JumpSize, TInt64 StartVal, TInt64 EndVal) -> TVec< PNEANet,int64 >

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        WindowSize: TInt64
        JumpSize: TInt64
        StartVal: TInt64
        EndVal: TInt64

        ToGraphSequence(PTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt64 WindowSize, TInt64 JumpSize, TInt64 StartVal) -> TVec< PNEANet,int64 >

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        WindowSize: TInt64
        JumpSize: TInt64
        StartVal: TInt64

        ToGraphSequence(PTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt64 WindowSize, TInt64 JumpSize) -> TVec< PNEANet,int64 >

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        WindowSize: TInt64
        JumpSize: TInt64

        """
        return _SnapTime.PTable_ToGraphSequence(self, *args)


    def ToVarGraphSequence(self, SplitAttr, AggrPolicy, SplitIntervals):
        """
        ToVarGraphSequence(PTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TIntPr64V SplitIntervals) -> TVec< PNEANet,int64 >

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        SplitIntervals: TIntPr64V

        """
        return _SnapTime.PTable_ToVarGraphSequence(self, SplitAttr, AggrPolicy, SplitIntervals)


    def ToGraphPerGroup(self, GroupAttr, AggrPolicy):
        """
        ToGraphPerGroup(PTable self, TStr GroupAttr, TAttrAggr AggrPolicy) -> TVec< PNEANet,int64 >

        Parameters
        ----------
        GroupAttr: TStr
        AggrPolicy: enum TAttrAggr

        """
        return _SnapTime.PTable_ToGraphPerGroup(self, GroupAttr, AggrPolicy)


    def ToGraphSequenceIterator(self, *args):
        """
        ToGraphSequenceIterator(PTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt64 WindowSize, TInt64 JumpSize, TInt64 StartVal, TInt64 EndVal) -> PNEANet

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        WindowSize: TInt64
        JumpSize: TInt64
        StartVal: TInt64
        EndVal: TInt64

        ToGraphSequenceIterator(PTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt64 WindowSize, TInt64 JumpSize, TInt64 StartVal) -> PNEANet

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        WindowSize: TInt64
        JumpSize: TInt64
        StartVal: TInt64

        ToGraphSequenceIterator(PTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt64 WindowSize, TInt64 JumpSize) -> PNEANet

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        WindowSize: TInt64
        JumpSize: TInt64

        """
        return _SnapTime.PTable_ToGraphSequenceIterator(self, *args)


    def ToVarGraphSequenceIterator(self, SplitAttr, AggrPolicy, SplitIntervals):
        """
        ToVarGraphSequenceIterator(PTable self, TStr SplitAttr, TAttrAggr AggrPolicy, TIntPr64V SplitIntervals) -> PNEANet

        Parameters
        ----------
        SplitAttr: TStr
        AggrPolicy: enum TAttrAggr
        SplitIntervals: TIntPr64V

        """
        return _SnapTime.PTable_ToVarGraphSequenceIterator(self, SplitAttr, AggrPolicy, SplitIntervals)


    def ToGraphPerGroupIterator(self, GroupAttr, AggrPolicy):
        """
        ToGraphPerGroupIterator(PTable self, TStr GroupAttr, TAttrAggr AggrPolicy) -> PNEANet

        Parameters
        ----------
        GroupAttr: TStr
        AggrPolicy: enum TAttrAggr

        """
        return _SnapTime.PTable_ToGraphPerGroupIterator(self, GroupAttr, AggrPolicy)


    def NextGraphIterator(self):
        """
        NextGraphIterator(PTable self) -> PNEANet

        Parameters
        ----------
        self: TPt< TTable > *

        """
        return _SnapTime.PTable_NextGraphIterator(self)


    def IsLastGraphOfSequence(self):
        """
        IsLastGraphOfSequence(PTable self) -> TBool

        Parameters
        ----------
        self: TPt< TTable > *

        """
        return _SnapTime.PTable_IsLastGraphOfSequence(self)


    def GetSrcCol(self):
        """
        GetSrcCol(PTable self) -> TStr

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetSrcCol(self)


    def SetSrcCol(self, Src):
        """
        SetSrcCol(PTable self, TStr Src)

        Parameters
        ----------
        Src: TStr const &

        """
        return _SnapTime.PTable_SetSrcCol(self, Src)


    def GetDstCol(self):
        """
        GetDstCol(PTable self) -> TStr

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetDstCol(self)


    def SetDstCol(self, Dst):
        """
        SetDstCol(PTable self, TStr Dst)

        Parameters
        ----------
        Dst: TStr const &

        """
        return _SnapTime.PTable_SetDstCol(self, Dst)


    def AddEdgeAttr(self, *args):
        """
        AddEdgeAttr(PTable self, TStr Attr)

        Parameters
        ----------
        Attr: TStr const &

        AddEdgeAttr(PTable self, TStr64V Attrs)

        Parameters
        ----------
        Attrs: TStr64V &

        """
        return _SnapTime.PTable_AddEdgeAttr(self, *args)


    def AddSrcNodeAttr(self, *args):
        """
        AddSrcNodeAttr(PTable self, TStr Attr)

        Parameters
        ----------
        Attr: TStr const &

        AddSrcNodeAttr(PTable self, TStr64V Attrs)

        Parameters
        ----------
        Attrs: TStr64V &

        """
        return _SnapTime.PTable_AddSrcNodeAttr(self, *args)


    def AddDstNodeAttr(self, *args):
        """
        AddDstNodeAttr(PTable self, TStr Attr)

        Parameters
        ----------
        Attr: TStr const &

        AddDstNodeAttr(PTable self, TStr64V Attrs)

        Parameters
        ----------
        Attrs: TStr64V &

        """
        return _SnapTime.PTable_AddDstNodeAttr(self, *args)


    def AddNodeAttr(self, *args):
        """
        AddNodeAttr(PTable self, TStr Attr)

        Parameters
        ----------
        Attr: TStr const &

        AddNodeAttr(PTable self, TStr64V Attrs)

        Parameters
        ----------
        Attrs: TStr64V &

        """
        return _SnapTime.PTable_AddNodeAttr(self, *args)


    def SetCommonNodeAttrs(self, SrcAttr, DstAttr, CommonAttrName):
        """
        SetCommonNodeAttrs(PTable self, TStr SrcAttr, TStr DstAttr, TStr CommonAttrName)

        Parameters
        ----------
        SrcAttr: TStr const &
        DstAttr: TStr const &
        CommonAttrName: TStr const &

        """
        return _SnapTime.PTable_SetCommonNodeAttrs(self, SrcAttr, DstAttr, CommonAttrName)


    def GetSrcNodeIntAttrV(self):
        """
        GetSrcNodeIntAttrV(PTable self) -> TStr64V

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetSrcNodeIntAttrV(self)


    def GetDstNodeIntAttrV(self):
        """
        GetDstNodeIntAttrV(PTable self) -> TStr64V

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetDstNodeIntAttrV(self)


    def GetEdgeIntAttrV(self):
        """
        GetEdgeIntAttrV(PTable self) -> TStr64V

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetEdgeIntAttrV(self)


    def GetSrcNodeFltAttrV(self):
        """
        GetSrcNodeFltAttrV(PTable self) -> TStr64V

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetSrcNodeFltAttrV(self)


    def GetDstNodeFltAttrV(self):
        """
        GetDstNodeFltAttrV(PTable self) -> TStr64V

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetDstNodeFltAttrV(self)


    def GetEdgeFltAttrV(self):
        """
        GetEdgeFltAttrV(PTable self) -> TStr64V

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetEdgeFltAttrV(self)


    def GetSrcNodeStrAttrV(self):
        """
        GetSrcNodeStrAttrV(PTable self) -> TStr64V

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetSrcNodeStrAttrV(self)


    def GetDstNodeStrAttrV(self):
        """
        GetDstNodeStrAttrV(PTable self) -> TStr64V

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetDstNodeStrAttrV(self)


    def GetEdgeStrAttrV(self):
        """
        GetEdgeStrAttrV(PTable self) -> TStr64V

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetEdgeStrAttrV(self)


    def GetNodeTable(self, Network, Context):
        """
        GetNodeTable(PTable self, PNEANet Network, TTableContext Context) -> PTable

        Parameters
        ----------
        Network: PNEANet const &
        Context: TTableContext *

        """
        return _SnapTime.PTable_GetNodeTable(self, Network, Context)


    def GetEdgeTable(self, Network, Context):
        """
        GetEdgeTable(PTable self, PNEANet Network, TTableContext Context) -> PTable

        Parameters
        ----------
        Network: PNEANet const &
        Context: TTableContext *

        """
        return _SnapTime.PTable_GetEdgeTable(self, Network, Context)


    def GetEdgeTablePN(self, Network, Context):
        """
        GetEdgeTablePN(PTable self, PNGraphMP Network, TTableContext Context) -> PTable

        Parameters
        ----------
        Network: PNGraphMP const &
        Context: TTableContext *

        """
        return _SnapTime.PTable_GetEdgeTablePN(self, Network, Context)


    def GetFltNodePropertyTable(self, Network, Property, NodeAttrName, NodeAttrType, PropertyAttrName, Context):
        """
        GetFltNodePropertyTable(PTable self, PNEANet Network, TIntFlt64H Property, TStr NodeAttrName, TAttrType const & NodeAttrType, TStr PropertyAttrName, TTableContext Context) -> PTable

        Parameters
        ----------
        Network: PNEANet const &
        Property: TIntFlt64H const &
        NodeAttrName: TStr const &
        NodeAttrType: TAttrType const &
        PropertyAttrName: TStr const &
        Context: TTableContext *

        """
        return _SnapTime.PTable_GetFltNodePropertyTable(self, Network, Property, NodeAttrName, NodeAttrType, PropertyAttrName, Context)


    def GetColType(self, ColName):
        """
        GetColType(PTable self, TStr ColName) -> TAttrType

        Parameters
        ----------
        ColName: TStr const &

        """
        return _SnapTime.PTable_GetColType(self, ColName)


    def GetNumRows(self):
        """
        GetNumRows(PTable self) -> TInt64

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetNumRows(self)


    def GetNumValidRows(self):
        """
        GetNumValidRows(PTable self) -> TInt64

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetNumValidRows(self)


    def GetRowIdMap(self):
        """
        GetRowIdMap(PTable self) -> TInt64H

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetRowIdMap(self)


    def BegRI(self):
        """
        BegRI(PTable self) -> TRowIterator

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_BegRI(self)


    def EndRI(self):
        """
        EndRI(PTable self) -> TRowIterator

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_EndRI(self)


    def GetRI(self):
        """
        GetRI(PTable self) -> TRowIteratorWrap

        Parameters
        ----------
        self: TPt< TTable > const *

        """
        return _SnapTime.PTable_GetRI(self)


    def BegRIWR(self):
        """
        BegRIWR(PTable self) -> TRowIteratorWithRemove

        Parameters
        ----------
        self: TPt< TTable > *

        """
        return _SnapTime.PTable_BegRIWR(self)


    def EndRIWR(self):
        """
        EndRIWR(PTable self) -> TRowIteratorWithRemove

        Parameters
        ----------
        self: TPt< TTable > *

        """
        return _SnapTime.PTable_EndRIWR(self)


    def GetRIWR(self):
        """
        GetRIWR(PTable self) -> TRowIteratorWithRemoveWrap

        Parameters
        ----------
        self: TPt< TTable > *

        """
        return _SnapTime.PTable_GetRIWR(self)


    def GetPartitionRanges(self, Partitions, NumPartitions):
        """
        GetPartitionRanges(PTable self, TIntPr64V Partitions, TInt64 NumPartitions)

        Parameters
        ----------
        Partitions: TIntPr64V &
        NumPartitions: TInt64

        """
        return _SnapTime.PTable_GetPartitionRanges(self, Partitions, NumPartitions)


    def Rename(self, Column, NewLabel):
        """
        Rename(PTable self, TStr Column, TStr NewLabel)

        Parameters
        ----------
        Column: TStr const &
        NewLabel: TStr const &

        """
        return _SnapTime.PTable_Rename(self, Column, NewLabel)


    def Unique(self, *args):
        """
        Unique(PTable self, TStr Col)

        Parameters
        ----------
        Col: TStr const &

        Unique(PTable self, TStr64V Cols, TBool Ordered=True)

        Parameters
        ----------
        Cols: TStr64V const &
        Ordered: TBool

        Unique(PTable self, TStr64V Cols)

        Parameters
        ----------
        Cols: TStr64V const &

        """
        return _SnapTime.PTable_Unique(self, *args)


    def Select(self, *args):
        """
        Select(PTable self, TPredicate Predicate, TInt64V SelectedRows, TBool Remove=True)

        Parameters
        ----------
        Predicate: TPredicate &
        SelectedRows: TInt64V &
        Remove: TBool

        Select(PTable self, TPredicate Predicate, TInt64V SelectedRows)

        Parameters
        ----------
        Predicate: TPredicate &
        SelectedRows: TInt64V &

        Select(PTable self, TPredicate Predicate)

        Parameters
        ----------
        Predicate: TPredicate &

        """
        return _SnapTime.PTable_Select(self, *args)


    def Classify(self, Predicate, LabelName, PositiveLabel=1, NegativeLabel=0):
        """
        Classify(PTable self, TPredicate Predicate, TStr LabelName, TInt64 PositiveLabel=1, TInt64 NegativeLabel=0)

        Parameters
        ----------
        Predicate: TPredicate &
        LabelName: TStr const &
        PositiveLabel: TInt64 const &
        NegativeLabel: TInt64 const &

        Classify(PTable self, TPredicate Predicate, TStr LabelName, TInt64 PositiveLabel=1)

        Parameters
        ----------
        Predicate: TPredicate &
        LabelName: TStr const &
        PositiveLabel: TInt64 const &

        Classify(PTable self, TPredicate Predicate, TStr LabelName)

        Parameters
        ----------
        Predicate: TPredicate &
        LabelName: TStr const &

        """
        return _SnapTime.PTable_Classify(self, Predicate, LabelName, PositiveLabel, NegativeLabel)


    def SelectAtomic(self, *args):
        """
        SelectAtomic(PTable self, TStr Col1, TStr Col2, TPredComp Cmp, TInt64V SelectedRows, TBool Remove=True)

        Parameters
        ----------
        Col1: TStr const &
        Col2: TStr const &
        Cmp: enum TPredComp
        SelectedRows: TInt64V &
        Remove: TBool

        SelectAtomic(PTable self, TStr Col1, TStr Col2, TPredComp Cmp, TInt64V SelectedRows)

        Parameters
        ----------
        Col1: TStr const &
        Col2: TStr const &
        Cmp: enum TPredComp
        SelectedRows: TInt64V &

        SelectAtomic(PTable self, TStr Col1, TStr Col2, TPredComp Cmp)

        Parameters
        ----------
        Col1: TStr const &
        Col2: TStr const &
        Cmp: enum TPredComp

        """
        return _SnapTime.PTable_SelectAtomic(self, *args)


    def ClassifyAtomic(self, Col1, Col2, Cmp, LabelName, PositiveLabel=1, NegativeLabel=0):
        """
        ClassifyAtomic(PTable self, TStr Col1, TStr Col2, TPredComp Cmp, TStr LabelName, TInt64 PositiveLabel=1, TInt64 NegativeLabel=0)

        Parameters
        ----------
        Col1: TStr const &
        Col2: TStr const &
        Cmp: enum TPredComp
        LabelName: TStr const &
        PositiveLabel: TInt64 const &
        NegativeLabel: TInt64 const &

        ClassifyAtomic(PTable self, TStr Col1, TStr Col2, TPredComp Cmp, TStr LabelName, TInt64 PositiveLabel=1)

        Parameters
        ----------
        Col1: TStr const &
        Col2: TStr const &
        Cmp: enum TPredComp
        LabelName: TStr const &
        PositiveLabel: TInt64 const &

        ClassifyAtomic(PTable self, TStr Col1, TStr Col2, TPredComp Cmp, TStr LabelName)

        Parameters
        ----------
        Col1: TStr const &
        Col2: TStr const &
        Cmp: enum TPredComp
        LabelName: TStr const &

        """
        return _SnapTime.PTable_ClassifyAtomic(self, Col1, Col2, Cmp, LabelName, PositiveLabel, NegativeLabel)


    def SelectAtomicConst(self, Col, Val, Cmp, SelectedRows, SelectedTable, Remove=True, Table=True):
        """
        SelectAtomicConst(PTable self, TStr Col, TPrimitive Val, TPredComp Cmp, TInt64V SelectedRows, PTable SelectedTable, TBool Remove=True, TBool Table=True)

        Parameters
        ----------
        Col: TStr const &
        Val: TPrimitive const &
        Cmp: enum TPredComp
        SelectedRows: TInt64V &
        SelectedTable: PTable &
        Remove: TBool
        Table: TBool

        SelectAtomicConst(PTable self, TStr Col, TPrimitive Val, TPredComp Cmp, TInt64V SelectedRows, PTable SelectedTable, TBool Remove=True)

        Parameters
        ----------
        Col: TStr const &
        Val: TPrimitive const &
        Cmp: enum TPredComp
        SelectedRows: TInt64V &
        SelectedTable: PTable &
        Remove: TBool

        SelectAtomicConst(PTable self, TStr Col, TPrimitive Val, TPredComp Cmp, TInt64V SelectedRows, PTable SelectedTable)

        Parameters
        ----------
        Col: TStr const &
        Val: TPrimitive const &
        Cmp: enum TPredComp
        SelectedRows: TInt64V &
        SelectedTable: PTable &

        """
        return _SnapTime.PTable_SelectAtomicConst(self, Col, Val, Cmp, SelectedRows, SelectedTable, Remove, Table)


    def SelectAtomicIntConst(self, *args):
        """
        SelectAtomicIntConst(PTable self, TStr Col, TInt64 Val, TPredComp Cmp)

        Parameters
        ----------
        Col: TStr const &
        Val: TInt64 const &
        Cmp: enum TPredComp

        SelectAtomicIntConst(PTable self, TStr Col, TInt64 Val, TPredComp Cmp, PTable SelectedTable)

        Parameters
        ----------
        Col: TStr const &
        Val: TInt64 const &
        Cmp: enum TPredComp
        SelectedTable: PTable &

        """
        return _SnapTime.PTable_SelectAtomicIntConst(self, *args)


    def SelectAtomicStrConst(self, *args):
        """
        SelectAtomicStrConst(PTable self, TStr Col, TStr Val, TPredComp Cmp)

        Parameters
        ----------
        Col: TStr const &
        Val: TStr const &
        Cmp: enum TPredComp

        SelectAtomicStrConst(PTable self, TStr Col, TStr Val, TPredComp Cmp, PTable SelectedTable)

        Parameters
        ----------
        Col: TStr const &
        Val: TStr const &
        Cmp: enum TPredComp
        SelectedTable: PTable &

        """
        return _SnapTime.PTable_SelectAtomicStrConst(self, *args)


    def SelectAtomicFltConst(self, *args):
        """
        SelectAtomicFltConst(PTable self, TStr Col, TFlt Val, TPredComp Cmp)

        Parameters
        ----------
        Col: TStr const &
        Val: TFlt const &
        Cmp: enum TPredComp

        SelectAtomicFltConst(PTable self, TStr Col, TFlt Val, TPredComp Cmp, PTable SelectedTable)

        Parameters
        ----------
        Col: TStr const &
        Val: TFlt const &
        Cmp: enum TPredComp
        SelectedTable: PTable &

        """
        return _SnapTime.PTable_SelectAtomicFltConst(self, *args)


    def Group(self, GroupBy, GroupColName, Ordered=True, UsePhysicalIds=True):
        """
        Group(PTable self, TStr64V GroupBy, TStr GroupColName, TBool Ordered=True, TBool UsePhysicalIds=True)

        Parameters
        ----------
        GroupBy: TStr64V const &
        GroupColName: TStr const &
        Ordered: TBool
        UsePhysicalIds: TBool

        Group(PTable self, TStr64V GroupBy, TStr GroupColName, TBool Ordered=True)

        Parameters
        ----------
        GroupBy: TStr64V const &
        GroupColName: TStr const &
        Ordered: TBool

        Group(PTable self, TStr64V GroupBy, TStr GroupColName)

        Parameters
        ----------
        GroupBy: TStr64V const &
        GroupColName: TStr const &

        """
        return _SnapTime.PTable_Group(self, GroupBy, GroupColName, Ordered, UsePhysicalIds)


    def Count(self, CountColName, Col):
        """
        Count(PTable self, TStr CountColName, TStr Col)

        Parameters
        ----------
        CountColName: TStr const &
        Col: TStr const &

        """
        return _SnapTime.PTable_Count(self, CountColName, Col)


    def Order(self, *args):
        """
        Order(PTable self, TStr64V OrderBy, TStr OrderColName, TBool ResetRankByMSC=False, TBool Asc=True)

        Parameters
        ----------
        OrderBy: TStr64V const &
        OrderColName: TStr
        ResetRankByMSC: TBool
        Asc: TBool

        Order(PTable self, TStr64V OrderBy, TStr OrderColName, TBool ResetRankByMSC=False)

        Parameters
        ----------
        OrderBy: TStr64V const &
        OrderColName: TStr
        ResetRankByMSC: TBool

        Order(PTable self, TStr64V OrderBy, TStr OrderColName)

        Parameters
        ----------
        OrderBy: TStr64V const &
        OrderColName: TStr

        Order(PTable self, TStr64V OrderBy)

        Parameters
        ----------
        OrderBy: TStr64V const &

        """
        return _SnapTime.PTable_Order(self, *args)


    def Aggregate(self, GroupByAttrs, AggOp, ValAttr, ResAttr, Ordered=True):
        """
        Aggregate(PTable self, TStr64V GroupByAttrs, TAttrAggr AggOp, TStr ValAttr, TStr ResAttr, TBool Ordered=True)

        Parameters
        ----------
        GroupByAttrs: TStr64V const &
        AggOp: enum TAttrAggr
        ValAttr: TStr const &
        ResAttr: TStr const &
        Ordered: TBool

        Aggregate(PTable self, TStr64V GroupByAttrs, TAttrAggr AggOp, TStr ValAttr, TStr ResAttr)

        Parameters
        ----------
        GroupByAttrs: TStr64V const &
        AggOp: enum TAttrAggr
        ValAttr: TStr const &
        ResAttr: TStr const &

        """
        return _SnapTime.PTable_Aggregate(self, GroupByAttrs, AggOp, ValAttr, ResAttr, Ordered)


    def AggregateCols(self, AggrAttrs, AggOp, ResAttr):
        """
        AggregateCols(PTable self, TStr64V AggrAttrs, TAttrAggr AggOp, TStr ResAttr)

        Parameters
        ----------
        AggrAttrs: TStr64V const &
        AggOp: enum TAttrAggr
        ResAttr: TStr const &

        """
        return _SnapTime.PTable_AggregateCols(self, AggrAttrs, AggOp, ResAttr)


    def SpliceByGroup(self, GroupByAttrs, Ordered=True):
        """
        SpliceByGroup(PTable self, TStr64V GroupByAttrs, TBool Ordered=True) -> TVec< PTable,int64 >

        Parameters
        ----------
        GroupByAttrs: TStr64V const &
        Ordered: TBool

        SpliceByGroup(PTable self, TStr64V GroupByAttrs) -> TVec< PTable,int64 >

        Parameters
        ----------
        GroupByAttrs: TStr64V const &

        """
        return _SnapTime.PTable_SpliceByGroup(self, GroupByAttrs, Ordered)


    def Join(self, *args):
        """
        Join(PTable self, TStr Col1, TTable Table, TStr Col2) -> PTable

        Parameters
        ----------
        Col1: TStr const &
        Table: TTable const &
        Col2: TStr const &

        Join(PTable self, TStr Col1, PTable Table, TStr Col2) -> PTable

        Parameters
        ----------
        Col1: TStr const &
        Table: PTable const &
        Col2: TStr const &

        """
        return _SnapTime.PTable_Join(self, *args)


    def ThresholdJoin(self, KeyCol1, JoinCol1, Table, KeyCol2, JoinCol2, Threshold, PerJoinKey=False):
        """
        ThresholdJoin(PTable self, TStr KeyCol1, TStr JoinCol1, TTable Table, TStr KeyCol2, TStr JoinCol2, TInt64 Threshold, TBool PerJoinKey=False) -> PTable

        Parameters
        ----------
        KeyCol1: TStr const &
        JoinCol1: TStr const &
        Table: TTable const &
        KeyCol2: TStr const &
        JoinCol2: TStr const &
        Threshold: TInt64
        PerJoinKey: TBool

        ThresholdJoin(PTable self, TStr KeyCol1, TStr JoinCol1, TTable Table, TStr KeyCol2, TStr JoinCol2, TInt64 Threshold) -> PTable

        Parameters
        ----------
        KeyCol1: TStr const &
        JoinCol1: TStr const &
        Table: TTable const &
        KeyCol2: TStr const &
        JoinCol2: TStr const &
        Threshold: TInt64

        """
        return _SnapTime.PTable_ThresholdJoin(self, KeyCol1, JoinCol1, Table, KeyCol2, JoinCol2, Threshold, PerJoinKey)


    def SelfJoin(self, Col):
        """
        SelfJoin(PTable self, TStr Col) -> PTable

        Parameters
        ----------
        Col: TStr const &

        """
        return _SnapTime.PTable_SelfJoin(self, Col)


    def SelfSimJoin(self, Cols, DistanceColName, SimType, Threshold):
        """
        SelfSimJoin(PTable self, TStr64V Cols, TStr DistanceColName, TSimType const & SimType, TFlt Threshold) -> PTable

        Parameters
        ----------
        Cols: TStr64V const &
        DistanceColName: TStr const &
        SimType: TSimType const &
        Threshold: TFlt const &

        """
        return _SnapTime.PTable_SelfSimJoin(self, Cols, DistanceColName, SimType, Threshold)


    def SelfSimJoinPerGroup(self, *args):
        """
        SelfSimJoinPerGroup(PTable self, TStr GroupAttr, TStr SimCol, TStr DistanceColName, TSimType const & SimType, TFlt Threshold) -> PTable

        Parameters
        ----------
        GroupAttr: TStr const &
        SimCol: TStr const &
        DistanceColName: TStr const &
        SimType: TSimType const &
        Threshold: TFlt const &

        SelfSimJoinPerGroup(PTable self, TStr64V GroupBy, TStr SimCol, TStr DistanceColName, TSimType const & SimType, TFlt Threshold) -> PTable

        Parameters
        ----------
        GroupBy: TStr64V const &
        SimCol: TStr const &
        DistanceColName: TStr const &
        SimType: TSimType const &
        Threshold: TFlt const &

        """
        return _SnapTime.PTable_SelfSimJoinPerGroup(self, *args)


    def SimJoin(self, Cols1, Table, Cols2, DistanceColName, SimType, Threshold):
        """
        SimJoin(PTable self, TStr64V Cols1, TTable Table, TStr64V Cols2, TStr DistanceColName, TSimType const & SimType, TFlt Threshold) -> PTable

        Parameters
        ----------
        Cols1: TStr64V const &
        Table: TTable const &
        Cols2: TStr64V const &
        DistanceColName: TStr const &
        SimType: TSimType const &
        Threshold: TFlt const &

        """
        return _SnapTime.PTable_SimJoin(self, Cols1, Table, Cols2, DistanceColName, SimType, Threshold)


    def SelectFirstNRows(self, N):
        """
        SelectFirstNRows(PTable self, TInt64 N)

        Parameters
        ----------
        N: TInt64 const &

        """
        return _SnapTime.PTable_SelectFirstNRows(self, N)


    def Defrag(self):
        """
        Defrag(PTable self)

        Parameters
        ----------
        self: TPt< TTable > *

        """
        return _SnapTime.PTable_Defrag(self)


    def StoreIntCol(self, ColName, ColVals):
        """
        StoreIntCol(PTable self, TStr ColName, TInt64V ColVals)

        Parameters
        ----------
        ColName: TStr const &
        ColVals: TInt64V const &

        """
        return _SnapTime.PTable_StoreIntCol(self, ColName, ColVals)


    def StoreFltCol(self, ColName, ColVals):
        """
        StoreFltCol(PTable self, TStr ColName, TFlt64V ColVals)

        Parameters
        ----------
        ColName: TStr const &
        ColVals: TFlt64V const &

        """
        return _SnapTime.PTable_StoreFltCol(self, ColName, ColVals)


    def StoreStrCol(self, ColName, ColVals):
        """
        StoreStrCol(PTable self, TStr ColName, TStr64V ColVals)

        Parameters
        ----------
        ColName: TStr const &
        ColVals: TStr64V const &

        """
        return _SnapTime.PTable_StoreStrCol(self, ColName, ColVals)


    def UpdateFltFromTable(self, KeyAttr, UpdateAttr, Table, FKeyAttr, ReadAttr, DefaultFltVal=0.0):
        """
        UpdateFltFromTable(PTable self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, TStr ReadAttr, TFlt DefaultFltVal=0.0)

        Parameters
        ----------
        KeyAttr: TStr const &
        UpdateAttr: TStr const &
        Table: TTable const &
        FKeyAttr: TStr const &
        ReadAttr: TStr const &
        DefaultFltVal: TFlt

        UpdateFltFromTable(PTable self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, TStr ReadAttr)

        Parameters
        ----------
        KeyAttr: TStr const &
        UpdateAttr: TStr const &
        Table: TTable const &
        FKeyAttr: TStr const &
        ReadAttr: TStr const &

        """
        return _SnapTime.PTable_UpdateFltFromTable(self, KeyAttr, UpdateAttr, Table, FKeyAttr, ReadAttr, DefaultFltVal)


    def UpdateFltFromTableMP(self, KeyAttr, UpdateAttr, Table, FKeyAttr, ReadAttr, DefaultFltVal=0.0):
        """
        UpdateFltFromTableMP(PTable self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, TStr ReadAttr, TFlt DefaultFltVal=0.0)

        Parameters
        ----------
        KeyAttr: TStr const &
        UpdateAttr: TStr const &
        Table: TTable const &
        FKeyAttr: TStr const &
        ReadAttr: TStr const &
        DefaultFltVal: TFlt

        UpdateFltFromTableMP(PTable self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, TStr ReadAttr)

        Parameters
        ----------
        KeyAttr: TStr const &
        UpdateAttr: TStr const &
        Table: TTable const &
        FKeyAttr: TStr const &
        ReadAttr: TStr const &

        """
        return _SnapTime.PTable_UpdateFltFromTableMP(self, KeyAttr, UpdateAttr, Table, FKeyAttr, ReadAttr, DefaultFltVal)


    def SetFltColToConstMP(self, UpdateColIdx, DefaultFltVal):
        """
        SetFltColToConstMP(PTable self, TInt64 UpdateColIdx, TFlt DefaultFltVal)

        Parameters
        ----------
        UpdateColIdx: TInt64
        DefaultFltVal: TFlt

        """
        return _SnapTime.PTable_SetFltColToConstMP(self, UpdateColIdx, DefaultFltVal)


    def Union(self, *args):
        """
        Union(PTable self, TTable Table) -> PTable

        Parameters
        ----------
        Table: TTable const &

        Union(PTable self, PTable Table) -> PTable

        Parameters
        ----------
        Table: PTable const &

        """
        return _SnapTime.PTable_Union(self, *args)


    def UnionAll(self, *args):
        """
        UnionAll(PTable self, TTable Table) -> PTable

        Parameters
        ----------
        Table: TTable const &

        UnionAll(PTable self, PTable Table) -> PTable

        Parameters
        ----------
        Table: PTable const &

        """
        return _SnapTime.PTable_UnionAll(self, *args)


    def UnionAllInPlace(self, *args):
        """
        UnionAllInPlace(PTable self, TTable Table)

        Parameters
        ----------
        Table: TTable const &

        UnionAllInPlace(PTable self, PTable Table)

        Parameters
        ----------
        Table: PTable const &

        """
        return _SnapTime.PTable_UnionAllInPlace(self, *args)


    def Intersection(self, *args):
        """
        Intersection(PTable self, TTable Table) -> PTable

        Parameters
        ----------
        Table: TTable const &

        Intersection(PTable self, PTable Table) -> PTable

        Parameters
        ----------
        Table: PTable const &

        """
        return _SnapTime.PTable_Intersection(self, *args)


    def Minus(self, *args):
        """
        Minus(PTable self, TTable Table) -> PTable

        Parameters
        ----------
        Table: TTable &

        Minus(PTable self, PTable Table) -> PTable

        Parameters
        ----------
        Table: PTable const &

        """
        return _SnapTime.PTable_Minus(self, *args)


    def Project(self, ProjectCols):
        """
        Project(PTable self, TStr64V ProjectCols) -> PTable

        Parameters
        ----------
        ProjectCols: TStr64V const &

        """
        return _SnapTime.PTable_Project(self, ProjectCols)


    def ProjectInPlace(self, ProjectCols):
        """
        ProjectInPlace(PTable self, TStr64V ProjectCols)

        Parameters
        ----------
        ProjectCols: TStr64V const &

        """
        return _SnapTime.PTable_ProjectInPlace(self, ProjectCols)


    def ColGenericOp(self, *args):
        """
        ColGenericOp(PTable self, TStr Attr1, TStr Attr2, TStr ResAttr, TArithOp op)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResAttr: TStr const &
        op: enum TArithOp

        ColGenericOp(PTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr, TArithOp op, TBool AddToFirstTable)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &
        op: enum TArithOp
        AddToFirstTable: TBool

        ColGenericOp(PTable self, TStr Attr1, TFlt Num, TStr ResAttr, TArithOp op, TBool floatCast)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResAttr: TStr const &
        op: enum TArithOp
        floatCast: TBool const

        """
        return _SnapTime.PTable_ColGenericOp(self, *args)


    def ColGenericOpMP(self, *args):
        """
        ColGenericOpMP(PTable self, TInt64 ArgColIdx1, TInt64 ArgColIdx2, TAttrType ArgType1, TAttrType ArgType2, TInt64 ResColIdx, TArithOp op)

        Parameters
        ----------
        ArgColIdx1: TInt64
        ArgColIdx2: TInt64
        ArgType1: enum TAttrType
        ArgType2: enum TAttrType
        ResColIdx: TInt64
        op: enum TArithOp

        ColGenericOpMP(PTable self, TInt64 ColIdx1, TInt64 ColIdx2, TAttrType ArgType, TFlt Num, TArithOp op, TBool ShouldCast)

        Parameters
        ----------
        ColIdx1: TInt64 const &
        ColIdx2: TInt64 const &
        ArgType: enum TAttrType
        Num: TFlt const &
        op: enum TArithOp
        ShouldCast: TBool

        """
        return _SnapTime.PTable_ColGenericOpMP(self, *args)


    def ColAdd(self, *args):
        """
        ColAdd(PTable self, TStr Attr1, TStr Attr2, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResultAttrName: TStr const &

        ColAdd(PTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        ColAdd(PTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr, TBool AddToFirstTable=True)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &
        AddToFirstTable: TBool

        ColAdd(PTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &

        ColAdd(PTable self, TStr Attr1, TTable Table, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &

        ColAdd(PTable self, TStr Attr1, TFlt Num, TStr ResultAttrName, TBool floatCast=False)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &
        floatCast: TBool const

        ColAdd(PTable self, TStr Attr1, TFlt Num, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &

        ColAdd(PTable self, TStr Attr1, TFlt Num)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &

        """
        return _SnapTime.PTable_ColAdd(self, *args)


    def ColSub(self, *args):
        """
        ColSub(PTable self, TStr Attr1, TStr Attr2, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResultAttrName: TStr const &

        ColSub(PTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        ColSub(PTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr, TBool AddToFirstTable=True)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &
        AddToFirstTable: TBool

        ColSub(PTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &

        ColSub(PTable self, TStr Attr1, TTable Table, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &

        ColSub(PTable self, TStr Attr1, TFlt Num, TStr ResultAttrName, TBool floatCast=False)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &
        floatCast: TBool const

        ColSub(PTable self, TStr Attr1, TFlt Num, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &

        ColSub(PTable self, TStr Attr1, TFlt Num)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &

        """
        return _SnapTime.PTable_ColSub(self, *args)


    def ColMul(self, *args):
        """
        ColMul(PTable self, TStr Attr1, TStr Attr2, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResultAttrName: TStr const &

        ColMul(PTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        ColMul(PTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr, TBool AddToFirstTable=True)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &
        AddToFirstTable: TBool

        ColMul(PTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &

        ColMul(PTable self, TStr Attr1, TTable Table, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &

        ColMul(PTable self, TStr Attr1, TFlt Num, TStr ResultAttrName, TBool floatCast=False)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &
        floatCast: TBool const

        ColMul(PTable self, TStr Attr1, TFlt Num, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &

        ColMul(PTable self, TStr Attr1, TFlt Num)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &

        """
        return _SnapTime.PTable_ColMul(self, *args)


    def ColDiv(self, *args):
        """
        ColDiv(PTable self, TStr Attr1, TStr Attr2, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResultAttrName: TStr const &

        ColDiv(PTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        ColDiv(PTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr, TBool AddToFirstTable=True)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &
        AddToFirstTable: TBool

        ColDiv(PTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &

        ColDiv(PTable self, TStr Attr1, TTable Table, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &

        ColDiv(PTable self, TStr Attr1, TFlt Num, TStr ResultAttrName, TBool floatCast=False)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &
        floatCast: TBool const

        ColDiv(PTable self, TStr Attr1, TFlt Num, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &

        ColDiv(PTable self, TStr Attr1, TFlt Num)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &

        """
        return _SnapTime.PTable_ColDiv(self, *args)


    def ColMod(self, *args):
        """
        ColMod(PTable self, TStr Attr1, TStr Attr2, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResultAttrName: TStr const &

        ColMod(PTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        ColMod(PTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr, TBool AddToFirstTable=True)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &
        AddToFirstTable: TBool

        ColMod(PTable self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        ResAttr: TStr const &

        ColMod(PTable self, TStr Attr1, TTable Table, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &

        ColMod(PTable self, TStr Attr1, TFlt Num, TStr ResultAttrName, TBool floatCast=False)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &
        floatCast: TBool const

        ColMod(PTable self, TStr Attr1, TFlt Num, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &
        ResultAttrName: TStr const &

        ColMod(PTable self, TStr Attr1, TFlt Num)

        Parameters
        ----------
        Attr1: TStr const &
        Num: TFlt const &

        """
        return _SnapTime.PTable_ColMod(self, *args)


    def ColMin(self, *args):
        """
        ColMin(PTable self, TStr Attr1, TStr Attr2, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResultAttrName: TStr const &

        ColMin(PTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        """
        return _SnapTime.PTable_ColMin(self, *args)


    def ColMax(self, *args):
        """
        ColMax(PTable self, TStr Attr1, TStr Attr2, TStr ResultAttrName)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        ResultAttrName: TStr const &

        ColMax(PTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        """
        return _SnapTime.PTable_ColMax(self, *args)


    def ColConcat(self, *args):
        """
        ColConcat(PTable self, TStr Attr1, TStr Attr2, TStr Sep, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        Sep: TStr const &
        ResAttr: TStr const &

        ColConcat(PTable self, TStr Attr1, TStr Attr2, TStr Sep)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &
        Sep: TStr const &

        ColConcat(PTable self, TStr Attr1, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Attr2: TStr const &

        ColConcat(PTable self, TStr Attr1, TTable Table, TStr Attr2, TStr Sep, TStr ResAttr, TBool AddToFirstTable=True)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        Sep: TStr const &
        ResAttr: TStr const &
        AddToFirstTable: TBool

        ColConcat(PTable self, TStr Attr1, TTable Table, TStr Attr2, TStr Sep, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        Sep: TStr const &
        ResAttr: TStr const &

        ColConcat(PTable self, TStr Attr1, TTable Table, TStr Attr2, TStr Sep)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &
        Sep: TStr const &

        ColConcat(PTable self, TStr Attr1, TTable Table, TStr Attr2)

        Parameters
        ----------
        Attr1: TStr const &
        Table: TTable &
        Attr2: TStr const &

        """
        return _SnapTime.PTable_ColConcat(self, *args)


    def ColConcatConst(self, *args):
        """
        ColConcatConst(PTable self, TStr Attr1, TStr Val, TStr Sep, TStr ResAttr)

        Parameters
        ----------
        Attr1: TStr const &
        Val: TStr const &
        Sep: TStr const &
        ResAttr: TStr const &

        ColConcatConst(PTable self, TStr Attr1, TStr Val, TStr Sep)

        Parameters
        ----------
        Attr1: TStr const &
        Val: TStr const &
        Sep: TStr const &

        ColConcatConst(PTable self, TStr Attr1, TStr Val)

        Parameters
        ----------
        Attr1: TStr const &
        Val: TStr const &

        """
        return _SnapTime.PTable_ColConcatConst(self, *args)


    def ReadIntCol(self, ColName, Result):
        """
        ReadIntCol(PTable self, TStr ColName, TInt64V Result)

        Parameters
        ----------
        ColName: TStr const &
        Result: TInt64V &

        """
        return _SnapTime.PTable_ReadIntCol(self, ColName, Result)


    def ReadFltCol(self, ColName, Result):
        """
        ReadFltCol(PTable self, TStr ColName, TFlt64V Result)

        Parameters
        ----------
        ColName: TStr const &
        Result: TFlt64V &

        """
        return _SnapTime.PTable_ReadFltCol(self, ColName, Result)


    def ReadStrCol(self, ColName, Result):
        """
        ReadStrCol(PTable self, TStr ColName, TStr64V Result)

        Parameters
        ----------
        ColName: TStr const &
        Result: TStr64V &

        """
        return _SnapTime.PTable_ReadStrCol(self, ColName, Result)


    def InitIds(self):
        """
        InitIds(PTable self)

        Parameters
        ----------
        self: TPt< TTable > *

        """
        return _SnapTime.PTable_InitIds(self)


    def IsNextK(self, *args):
        """
        IsNextK(PTable self, TStr OrderCol, TInt64 K, TStr GroupBy, TStr RankColName) -> PTable

        Parameters
        ----------
        OrderCol: TStr const &
        K: TInt64
        GroupBy: TStr const &
        RankColName: TStr const &

        IsNextK(PTable self, TStr OrderCol, TInt64 K, TStr GroupBy) -> PTable

        Parameters
        ----------
        OrderCol: TStr const &
        K: TInt64
        GroupBy: TStr const &

        """
        return _SnapTime.PTable_IsNextK(self, *args)


    def PrintSize(self):
        """
        PrintSize(PTable self)

        Parameters
        ----------
        self: TPt< TTable > *

        """
        return _SnapTime.PTable_PrintSize(self)


    def PrintContextSize(self):
        """
        PrintContextSize(PTable self)

        Parameters
        ----------
        self: TPt< TTable > *

        """
        return _SnapTime.PTable_PrintContextSize(self)


    def GetMemUsedKB(self):
        """
        GetMemUsedKB(PTable self) -> TSize

        Parameters
        ----------
        self: TPt< TTable > *

        """
        return _SnapTime.PTable_GetMemUsedKB(self)


    def GetContextMemUsedKB(self):
        """
        GetContextMemUsedKB(PTable self) -> TSize

        Parameters
        ----------
        self: TPt< TTable > *

        """
        return _SnapTime.PTable_GetContextMemUsedKB(self)

PTable.Save = new_instancemethod(_SnapTime.PTable_Save, None, PTable)
PTable.__deref__ = new_instancemethod(_SnapTime.PTable___deref__, None, PTable)
PTable.__ref__ = new_instancemethod(_SnapTime.PTable___ref__, None, PTable)
PTable.__call__ = new_instancemethod(_SnapTime.PTable___call__, None, PTable)
PTable.Empty = new_instancemethod(_SnapTime.PTable_Empty, None, PTable)
PTable.Clr = new_instancemethod(_SnapTime.PTable_Clr, None, PTable)
PTable.GetRefs = new_instancemethod(_SnapTime.PTable_GetRefs, None, PTable)
PTable.SetMP = new_instancemethod(_SnapTime.PTable_SetMP, None, PTable)
PTable.GetMP = new_instancemethod(_SnapTime.PTable_GetMP, None, PTable)
PTable.NormalizeColName = new_instancemethod(_SnapTime.PTable_NormalizeColName, None, PTable)
PTable.NormalizeColNameV = new_instancemethod(_SnapTime.PTable_NormalizeColNameV, None, PTable)
PTable.AddIntCol = new_instancemethod(_SnapTime.PTable_AddIntCol, None, PTable)
PTable.AddFltCol = new_instancemethod(_SnapTime.PTable_AddFltCol, None, PTable)
PTable.AddStrCol = new_instancemethod(_SnapTime.PTable_AddStrCol, None, PTable)
PTable.GroupByIntColMP = new_instancemethod(_SnapTime.PTable_GroupByIntColMP, None, PTable)
PTable.GetSchema = new_instancemethod(_SnapTime.PTable_GetSchema, None, PTable)
PTable.LoadSS = new_instancemethod(_SnapTime.PTable_LoadSS, None, PTable)
PTable.SaveSS = new_instancemethod(_SnapTime.PTable_SaveSS, None, PTable)
PTable.SaveBin = new_instancemethod(_SnapTime.PTable_SaveBin, None, PTable)
PTable.Load = new_instancemethod(_SnapTime.PTable_Load, None, PTable)
PTable.LoadShM = new_instancemethod(_SnapTime.PTable_LoadShM, None, PTable)
PTable.Dump = new_instancemethod(_SnapTime.PTable_Dump, None, PTable)
PTable.TableFromHashMap = new_instancemethod(_SnapTime.PTable_TableFromHashMap, None, PTable)
PTable.GetContext = new_instancemethod(_SnapTime.PTable_GetContext, None, PTable)
PTable.ChangeContext = new_instancemethod(_SnapTime.PTable_ChangeContext, None, PTable)
PTable.GetColIdx = new_instancemethod(_SnapTime.PTable_GetColIdx, None, PTable)
PTable.GetIntVal = new_instancemethod(_SnapTime.PTable_GetIntVal, None, PTable)
PTable.GetFltVal = new_instancemethod(_SnapTime.PTable_GetFltVal, None, PTable)
PTable.GetStrMapById = new_instancemethod(_SnapTime.PTable_GetStrMapById, None, PTable)
PTable.GetStrMapByName = new_instancemethod(_SnapTime.PTable_GetStrMapByName, None, PTable)
PTable.GetStrValById = new_instancemethod(_SnapTime.PTable_GetStrValById, None, PTable)
PTable.GetStrValByName = new_instancemethod(_SnapTime.PTable_GetStrValByName, None, PTable)
PTable.GetIntRowIdxByVal = new_instancemethod(_SnapTime.PTable_GetIntRowIdxByVal, None, PTable)
PTable.GetStrRowIdxByMap = new_instancemethod(_SnapTime.PTable_GetStrRowIdxByMap, None, PTable)
PTable.GetFltRowIdxByVal = new_instancemethod(_SnapTime.PTable_GetFltRowIdxByVal, None, PTable)
PTable.RequestIndexInt = new_instancemethod(_SnapTime.PTable_RequestIndexInt, None, PTable)
PTable.RequestIndexFlt = new_instancemethod(_SnapTime.PTable_RequestIndexFlt, None, PTable)
PTable.RequestIndexStrMap = new_instancemethod(_SnapTime.PTable_RequestIndexStrMap, None, PTable)
PTable.GetStr = new_instancemethod(_SnapTime.PTable_GetStr, None, PTable)
PTable.GetIntValAtRowIdx = new_instancemethod(_SnapTime.PTable_GetIntValAtRowIdx, None, PTable)
PTable.GetFltValAtRowIdx = new_instancemethod(_SnapTime.PTable_GetFltValAtRowIdx, None, PTable)
PTable.ToGraphSequence = new_instancemethod(_SnapTime.PTable_ToGraphSequence, None, PTable)
PTable.ToVarGraphSequence = new_instancemethod(_SnapTime.PTable_ToVarGraphSequence, None, PTable)
PTable.ToGraphPerGroup = new_instancemethod(_SnapTime.PTable_ToGraphPerGroup, None, PTable)
PTable.ToGraphSequenceIterator = new_instancemethod(_SnapTime.PTable_ToGraphSequenceIterator, None, PTable)
PTable.ToVarGraphSequenceIterator = new_instancemethod(_SnapTime.PTable_ToVarGraphSequenceIterator, None, PTable)
PTable.ToGraphPerGroupIterator = new_instancemethod(_SnapTime.PTable_ToGraphPerGroupIterator, None, PTable)
PTable.NextGraphIterator = new_instancemethod(_SnapTime.PTable_NextGraphIterator, None, PTable)
PTable.IsLastGraphOfSequence = new_instancemethod(_SnapTime.PTable_IsLastGraphOfSequence, None, PTable)
PTable.GetSrcCol = new_instancemethod(_SnapTime.PTable_GetSrcCol, None, PTable)
PTable.SetSrcCol = new_instancemethod(_SnapTime.PTable_SetSrcCol, None, PTable)
PTable.GetDstCol = new_instancemethod(_SnapTime.PTable_GetDstCol, None, PTable)
PTable.SetDstCol = new_instancemethod(_SnapTime.PTable_SetDstCol, None, PTable)
PTable.AddEdgeAttr = new_instancemethod(_SnapTime.PTable_AddEdgeAttr, None, PTable)
PTable.AddSrcNodeAttr = new_instancemethod(_SnapTime.PTable_AddSrcNodeAttr, None, PTable)
PTable.AddDstNodeAttr = new_instancemethod(_SnapTime.PTable_AddDstNodeAttr, None, PTable)
PTable.AddNodeAttr = new_instancemethod(_SnapTime.PTable_AddNodeAttr, None, PTable)
PTable.SetCommonNodeAttrs = new_instancemethod(_SnapTime.PTable_SetCommonNodeAttrs, None, PTable)
PTable.GetSrcNodeIntAttrV = new_instancemethod(_SnapTime.PTable_GetSrcNodeIntAttrV, None, PTable)
PTable.GetDstNodeIntAttrV = new_instancemethod(_SnapTime.PTable_GetDstNodeIntAttrV, None, PTable)
PTable.GetEdgeIntAttrV = new_instancemethod(_SnapTime.PTable_GetEdgeIntAttrV, None, PTable)
PTable.GetSrcNodeFltAttrV = new_instancemethod(_SnapTime.PTable_GetSrcNodeFltAttrV, None, PTable)
PTable.GetDstNodeFltAttrV = new_instancemethod(_SnapTime.PTable_GetDstNodeFltAttrV, None, PTable)
PTable.GetEdgeFltAttrV = new_instancemethod(_SnapTime.PTable_GetEdgeFltAttrV, None, PTable)
PTable.GetSrcNodeStrAttrV = new_instancemethod(_SnapTime.PTable_GetSrcNodeStrAttrV, None, PTable)
PTable.GetDstNodeStrAttrV = new_instancemethod(_SnapTime.PTable_GetDstNodeStrAttrV, None, PTable)
PTable.GetEdgeStrAttrV = new_instancemethod(_SnapTime.PTable_GetEdgeStrAttrV, None, PTable)
PTable.GetNodeTable = new_instancemethod(_SnapTime.PTable_GetNodeTable, None, PTable)
PTable.GetEdgeTable = new_instancemethod(_SnapTime.PTable_GetEdgeTable, None, PTable)
PTable.GetEdgeTablePN = new_instancemethod(_SnapTime.PTable_GetEdgeTablePN, None, PTable)
PTable.GetFltNodePropertyTable = new_instancemethod(_SnapTime.PTable_GetFltNodePropertyTable, None, PTable)
PTable.GetColType = new_instancemethod(_SnapTime.PTable_GetColType, None, PTable)
PTable.GetNumRows = new_instancemethod(_SnapTime.PTable_GetNumRows, None, PTable)
PTable.GetNumValidRows = new_instancemethod(_SnapTime.PTable_GetNumValidRows, None, PTable)
PTable.GetRowIdMap = new_instancemethod(_SnapTime.PTable_GetRowIdMap, None, PTable)
PTable.BegRI = new_instancemethod(_SnapTime.PTable_BegRI, None, PTable)
PTable.EndRI = new_instancemethod(_SnapTime.PTable_EndRI, None, PTable)
PTable.GetRI = new_instancemethod(_SnapTime.PTable_GetRI, None, PTable)
PTable.BegRIWR = new_instancemethod(_SnapTime.PTable_BegRIWR, None, PTable)
PTable.EndRIWR = new_instancemethod(_SnapTime.PTable_EndRIWR, None, PTable)
PTable.GetRIWR = new_instancemethod(_SnapTime.PTable_GetRIWR, None, PTable)
PTable.GetPartitionRanges = new_instancemethod(_SnapTime.PTable_GetPartitionRanges, None, PTable)
PTable.Rename = new_instancemethod(_SnapTime.PTable_Rename, None, PTable)
PTable.Unique = new_instancemethod(_SnapTime.PTable_Unique, None, PTable)
PTable.Select = new_instancemethod(_SnapTime.PTable_Select, None, PTable)
PTable.Classify = new_instancemethod(_SnapTime.PTable_Classify, None, PTable)
PTable.SelectAtomic = new_instancemethod(_SnapTime.PTable_SelectAtomic, None, PTable)
PTable.ClassifyAtomic = new_instancemethod(_SnapTime.PTable_ClassifyAtomic, None, PTable)
PTable.SelectAtomicConst = new_instancemethod(_SnapTime.PTable_SelectAtomicConst, None, PTable)
PTable.SelectAtomicIntConst = new_instancemethod(_SnapTime.PTable_SelectAtomicIntConst, None, PTable)
PTable.SelectAtomicStrConst = new_instancemethod(_SnapTime.PTable_SelectAtomicStrConst, None, PTable)
PTable.SelectAtomicFltConst = new_instancemethod(_SnapTime.PTable_SelectAtomicFltConst, None, PTable)
PTable.Group = new_instancemethod(_SnapTime.PTable_Group, None, PTable)
PTable.Count = new_instancemethod(_SnapTime.PTable_Count, None, PTable)
PTable.Order = new_instancemethod(_SnapTime.PTable_Order, None, PTable)
PTable.Aggregate = new_instancemethod(_SnapTime.PTable_Aggregate, None, PTable)
PTable.AggregateCols = new_instancemethod(_SnapTime.PTable_AggregateCols, None, PTable)
PTable.SpliceByGroup = new_instancemethod(_SnapTime.PTable_SpliceByGroup, None, PTable)
PTable.Join = new_instancemethod(_SnapTime.PTable_Join, None, PTable)
PTable.ThresholdJoin = new_instancemethod(_SnapTime.PTable_ThresholdJoin, None, PTable)
PTable.SelfJoin = new_instancemethod(_SnapTime.PTable_SelfJoin, None, PTable)
PTable.SelfSimJoin = new_instancemethod(_SnapTime.PTable_SelfSimJoin, None, PTable)
PTable.SelfSimJoinPerGroup = new_instancemethod(_SnapTime.PTable_SelfSimJoinPerGroup, None, PTable)
PTable.SimJoin = new_instancemethod(_SnapTime.PTable_SimJoin, None, PTable)
PTable.SelectFirstNRows = new_instancemethod(_SnapTime.PTable_SelectFirstNRows, None, PTable)
PTable.Defrag = new_instancemethod(_SnapTime.PTable_Defrag, None, PTable)
PTable.StoreIntCol = new_instancemethod(_SnapTime.PTable_StoreIntCol, None, PTable)
PTable.StoreFltCol = new_instancemethod(_SnapTime.PTable_StoreFltCol, None, PTable)
PTable.StoreStrCol = new_instancemethod(_SnapTime.PTable_StoreStrCol, None, PTable)
PTable.UpdateFltFromTable = new_instancemethod(_SnapTime.PTable_UpdateFltFromTable, None, PTable)
PTable.UpdateFltFromTableMP = new_instancemethod(_SnapTime.PTable_UpdateFltFromTableMP, None, PTable)
PTable.SetFltColToConstMP = new_instancemethod(_SnapTime.PTable_SetFltColToConstMP, None, PTable)
PTable.Union = new_instancemethod(_SnapTime.PTable_Union, None, PTable)
PTable.UnionAll = new_instancemethod(_SnapTime.PTable_UnionAll, None, PTable)
PTable.UnionAllInPlace = new_instancemethod(_SnapTime.PTable_UnionAllInPlace, None, PTable)
PTable.Intersection = new_instancemethod(_SnapTime.PTable_Intersection, None, PTable)
PTable.Minus = new_instancemethod(_SnapTime.PTable_Minus, None, PTable)
PTable.Project = new_instancemethod(_SnapTime.PTable_Project, None, PTable)
PTable.ProjectInPlace = new_instancemethod(_SnapTime.PTable_ProjectInPlace, None, PTable)
PTable.ColGenericOp = new_instancemethod(_SnapTime.PTable_ColGenericOp, None, PTable)
PTable.ColGenericOpMP = new_instancemethod(_SnapTime.PTable_ColGenericOpMP, None, PTable)
PTable.ColAdd = new_instancemethod(_SnapTime.PTable_ColAdd, None, PTable)
PTable.ColSub = new_instancemethod(_SnapTime.PTable_ColSub, None, PTable)
PTable.ColMul = new_instancemethod(_SnapTime.PTable_ColMul, None, PTable)
PTable.ColDiv = new_instancemethod(_SnapTime.PTable_ColDiv, None, PTable)
PTable.ColMod = new_instancemethod(_SnapTime.PTable_ColMod, None, PTable)
PTable.ColMin = new_instancemethod(_SnapTime.PTable_ColMin, None, PTable)
PTable.ColMax = new_instancemethod(_SnapTime.PTable_ColMax, None, PTable)
PTable.ColConcat = new_instancemethod(_SnapTime.PTable_ColConcat, None, PTable)
PTable.ColConcatConst = new_instancemethod(_SnapTime.PTable_ColConcatConst, None, PTable)
PTable.ReadIntCol = new_instancemethod(_SnapTime.PTable_ReadIntCol, None, PTable)
PTable.ReadFltCol = new_instancemethod(_SnapTime.PTable_ReadFltCol, None, PTable)
PTable.ReadStrCol = new_instancemethod(_SnapTime.PTable_ReadStrCol, None, PTable)
PTable.InitIds = new_instancemethod(_SnapTime.PTable_InitIds, None, PTable)
PTable.IsNextK = new_instancemethod(_SnapTime.PTable_IsNextK, None, PTable)
PTable.PrintSize = new_instancemethod(_SnapTime.PTable_PrintSize, None, PTable)
PTable.PrintContextSize = new_instancemethod(_SnapTime.PTable_PrintContextSize, None, PTable)
PTable.GetMemUsedKB = new_instancemethod(_SnapTime.PTable_GetMemUsedKB, None, PTable)
PTable.GetContextMemUsedKB = new_instancemethod(_SnapTime.PTable_GetContextMemUsedKB, None, PTable)
PTable_swigregister = _SnapTime.PTable_swigregister
PTable_swigregister(PTable)

def PTable_New():
    """PTable_New() -> PTable"""
    return _SnapTime.PTable_New()




#
# redefine some methods to use T... class not P... class
#

def Save(self,*args):
    self().Save(*args)

#
# define generator and redirection methods
#

PTable.Save = Save


class SnapTimeConfiguration(object):
    """Proxy of C++ SnapTimeConfiguration class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    InputRawDirectory = _swig_property(_SnapTime.SnapTimeConfiguration_InputRawDirectory_get, _SnapTime.SnapTimeConfiguration_InputRawDirectory_set)
    PrimaryDirectory = _swig_property(_SnapTime.SnapTimeConfiguration_PrimaryDirectory_get, _SnapTime.SnapTimeConfiguration_PrimaryDirectory_set)
    SymbolicDirectory = _swig_property(_SnapTime.SnapTimeConfiguration_SymbolicDirectory_get, _SnapTime.SnapTimeConfiguration_SymbolicDirectory_set)
    SchemaFile = _swig_property(_SnapTime.SnapTimeConfiguration_SchemaFile_get, _SnapTime.SnapTimeConfiguration_SchemaFile_set)
    ModHierarchy = _swig_property(_SnapTime.SnapTimeConfiguration_ModHierarchy_get, _SnapTime.SnapTimeConfiguration_ModHierarchy_set)
    SymbolicSplit = _swig_property(_SnapTime.SnapTimeConfiguration_SymbolicSplit_get, _SnapTime.SnapTimeConfiguration_SymbolicSplit_set)
    NumThreads = _swig_property(_SnapTime.SnapTimeConfiguration_NumThreads_get, _SnapTime.SnapTimeConfiguration_NumThreads_set)

    def __init__(self):
        """__init__(SnapTimeConfiguration self) -> SnapTimeConfiguration"""
        _SnapTime.SnapTimeConfiguration_swiginit(self, _SnapTime.new_SnapTimeConfiguration())
    __swig_destroy__ = _SnapTime.delete_SnapTimeConfiguration
SnapTimeConfiguration_swigregister = _SnapTime.SnapTimeConfiguration_swigregister
SnapTimeConfiguration_swigregister(SnapTimeConfiguration)

class QueryObject(object):
    """Proxy of C++ QueryObject class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Queries = _swig_property(_SnapTime.QueryObject_Queries_get, _SnapTime.QueryObject_Queries_set)
    InitialTimestamp = _swig_property(_SnapTime.QueryObject_InitialTimestamp_get, _SnapTime.QueryObject_InitialTimestamp_set)
    FinalTimestamp = _swig_property(_SnapTime.QueryObject_FinalTimestamp_get, _SnapTime.QueryObject_FinalTimestamp_set)

    def __init__(self):
        """__init__(QueryObject self) -> QueryObject"""
        _SnapTime.QueryObject_swiginit(self, _SnapTime.new_QueryObject())
    __swig_destroy__ = _SnapTime.delete_QueryObject
QueryObject_swigregister = _SnapTime.QueryObject_swigregister
QueryObject_swigregister(QueryObject)


def GeneratePrimaryDirectories(config):
    """
    GeneratePrimaryDirectories(SnapTimeConfiguration config)

    Parameters
    ----------
    config: SnapTimeConfiguration

    """
    return _SnapTime.GeneratePrimaryDirectories(config)

def GenerateSymbolicIndex(config):
    """
    GenerateSymbolicIndex(SnapTimeConfiguration config)

    Parameters
    ----------
    config: SnapTimeConfiguration

    """
    return _SnapTime.GenerateSymbolicIndex(config)

def Query(config, Query, OutputFile):
    """
    Query(SnapTimeConfiguration config, QueryObject Query, std::string OutputFile) -> TTimeCollection

    Parameters
    ----------
    config: SnapTimeConfiguration
    Query: QueryObject &
    OutputFile: std::string

    """
    return _SnapTime.Query(config, Query, OutputFile)

def LoadQuery(InputFile):
    """
    LoadQuery(std::string InputFile) -> TTimeCollection

    Parameters
    ----------
    InputFile: std::string

    """
    return _SnapTime.LoadQuery(InputFile)

def InflateQuery(config, r, initTS, duration, granularity):
    """
    InflateQuery(SnapTimeConfiguration config, TTimeCollection r, std::string initTS, double duration, double granularity) -> VectorVectorDouble

    Parameters
    ----------
    config: SnapTimeConfiguration
    r: TTimeCollection
    initTS: std::string
    duration: double
    granularity: double

    """
    return _SnapTime.InflateQuery(config, r, initTS, duration, granularity)

def PerformSummaryStats(config, output_file):
    """
    PerformSummaryStats(SnapTimeConfiguration config, std::string output_file)

    Parameters
    ----------
    config: SnapTimeConfiguration
    output_file: std::string

    """
    return _SnapTime.PerformSummaryStats(config, output_file)
class TUnsortedTime(object):
    """Proxy of C++ TUnsortedTime class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    KeyIds = _swig_property(_SnapTime.TUnsortedTime_KeyIds_get, _SnapTime.TUnsortedTime_KeyIds_set)
    TimeData = _swig_property(_SnapTime.TUnsortedTime_TimeData_get, _SnapTime.TUnsortedTime_TimeData_set)

    def __init__(self, *args):
        """
        __init__(TUnsortedTime self) -> TUnsortedTime
        __init__(TUnsortedTime self, TStrV ids) -> TUnsortedTime

        Parameters
        ----------
        ids: TStrV &

        __init__(TUnsortedTime self, TStrV ids, TVec< TRawData > t_data) -> TUnsortedTime

        Parameters
        ----------
        ids: TStrV
        t_data: TVec< TRawData >

        """
        _SnapTime.TUnsortedTime_swiginit(self, _SnapTime.new_TUnsortedTime(*args))

    def Save(self, SOut):
        """
        Save(TUnsortedTime self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TUnsortedTime_Save(self, SOut)


    def Load(self, SIn):
        """
        Load(TUnsortedTime self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TUnsortedTime_Load(self, SIn)

    __swig_destroy__ = _SnapTime.delete_TUnsortedTime
TUnsortedTime.Save = new_instancemethod(_SnapTime.TUnsortedTime_Save, None, TUnsortedTime)
TUnsortedTime.Load = new_instancemethod(_SnapTime.TUnsortedTime_Load, None, TUnsortedTime)
TUnsortedTime_swigregister = _SnapTime.TUnsortedTime_swigregister
TUnsortedTime_swigregister(TUnsortedTime)

class TSTime(object):
    """Proxy of C++ TSTime class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Type = _swig_property(_SnapTime.TSTime_Type_get, _SnapTime.TSTime_Type_set)
    KeyIds = _swig_property(_SnapTime.TSTime_KeyIds_get, _SnapTime.TSTime_KeyIds_set)
    __swig_destroy__ = _SnapTime.delete_TSTime

    def AddUnsortedTime(self, RawData):
        """
        AddUnsortedTime(TSTime self, TUnsortedTime RawData)

        Parameters
        ----------
        RawData: TUnsortedTime &

        """
        return _SnapTime.TSTime_AddUnsortedTime(self, RawData)


    def Sort(self):
        """
        Sort(TSTime self)

        Parameters
        ----------
        self: TSTime *

        """
        return _SnapTime.TSTime_Sort(self)


    def TypedTimeGenerator(type, key_ids):
        """
        TypedTimeGenerator(TType type, TStrV key_ids) -> TPt< TSTime >

        Parameters
        ----------
        type: enum TType
        key_ids: TStrV &

        """
        return _SnapTime.TSTime_TypedTimeGenerator(type, key_ids)

    TypedTimeGenerator = staticmethod(TypedTimeGenerator)

    def LoadSTime(SIn, ShouldLoadData=True):
        """
        LoadSTime(TSIn SIn, bool ShouldLoadData=True) -> TPt< TSTime >

        Parameters
        ----------
        SIn: TSIn &
        ShouldLoadData: bool

        LoadSTime(TSIn SIn) -> TPt< TSTime >

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TSTime_LoadSTime(SIn, ShouldLoadData)

    LoadSTime = staticmethod(LoadSTime)

    def Save(self, SOut):
        """
        Save(TSTime self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TSTime_Save(self, SOut)


    def LoadData(self, SIn):
        """
        LoadData(TSTime self, TSIn SIn)

        Parameters
        ----------
        SIn: TSIn &

        """
        return _SnapTime.TSTime_LoadData(self, SIn)


    def SaveData(self, SOut):
        """
        SaveData(TSTime self, TSOut SOut)

        Parameters
        ----------
        SOut: TSOut &

        """
        return _SnapTime.TSTime_SaveData(self, SOut)


    def DirectAccessTime(self, i):
        """
        DirectAccessTime(TSTime self, int i) -> TFlt

        Parameters
        ----------
        i: int

        """
        return _SnapTime.TSTime_DirectAccessTime(self, i)


    def DirectAccessValue(self, i):
        """
        DirectAccessValue(TSTime self, int i) -> void *

        Parameters
        ----------
        i: int

        """
        return _SnapTime.TSTime_DirectAccessValue(self, i)


    def Len(self):
        """
        Len(TSTime self) -> TInt

        Parameters
        ----------
        self: TSTime *

        """
        return _SnapTime.TSTime_Len(self)


    def TruncateVectorByTime(self, firstTime, lastTime):
        """
        TruncateVectorByTime(TSTime self, TFlt firstTime, TFlt lastTime)

        Parameters
        ----------
        firstTime: TTime
        lastTime: TTime

        """
        return _SnapTime.TSTime_TruncateVectorByTime(self, firstTime, lastTime)


    def GetBool(self, i):
        """
        GetBool(TSTime self, int i) -> TBool

        Parameters
        ----------
        i: int

        """
        return _SnapTime.TSTime_GetBool(self, i)


    def GetFloat(self, i):
        """
        GetFloat(TSTime self, int i) -> TFlt

        Parameters
        ----------
        i: int

        """
        return _SnapTime.TSTime_GetFloat(self, i)


    def GetInt(self, i):
        """
        GetInt(TSTime self, int i) -> TInt64

        Parameters
        ----------
        i: int

        """
        return _SnapTime.TSTime_GetInt(self, i)


    def GetStr(self, i):
        """
        GetStr(TSTime self, int i) -> TStr

        Parameters
        ----------
        i: int

        """
        return _SnapTime.TSTime_GetStr(self, i)

TSTime.AddUnsortedTime = new_instancemethod(_SnapTime.TSTime_AddUnsortedTime, None, TSTime)
TSTime.Sort = new_instancemethod(_SnapTime.TSTime_Sort, None, TSTime)
TSTime.Save = new_instancemethod(_SnapTime.TSTime_Save, None, TSTime)
TSTime.LoadData = new_instancemethod(_SnapTime.TSTime_LoadData, None, TSTime)
TSTime.SaveData = new_instancemethod(_SnapTime.TSTime_SaveData, None, TSTime)
TSTime.DirectAccessTime = new_instancemethod(_SnapTime.TSTime_DirectAccessTime, None, TSTime)
TSTime.DirectAccessValue = new_instancemethod(_SnapTime.TSTime_DirectAccessValue, None, TSTime)
TSTime.Len = new_instancemethod(_SnapTime.TSTime_Len, None, TSTime)
TSTime.TruncateVectorByTime = new_instancemethod(_SnapTime.TSTime_TruncateVectorByTime, None, TSTime)
TSTime.GetBool = new_instancemethod(_SnapTime.TSTime_GetBool, None, TSTime)
TSTime.GetFloat = new_instancemethod(_SnapTime.TSTime_GetFloat, None, TSTime)
TSTime.GetInt = new_instancemethod(_SnapTime.TSTime_GetInt, None, TSTime)
TSTime.GetStr = new_instancemethod(_SnapTime.TSTime_GetStr, None, TSTime)
TSTime_swigregister = _SnapTime.TSTime_swigregister
TSTime_swigregister(TSTime)

def TSTime_TypedTimeGenerator(type, key_ids):
    """
    TSTime_TypedTimeGenerator(TType type, TStrV key_ids) -> TPt< TSTime >

    Parameters
    ----------
    type: enum TType
    key_ids: TStrV &

    """
    return _SnapTime.TSTime_TypedTimeGenerator(type, key_ids)

def TSTime_LoadSTime(SIn, ShouldLoadData=True):
    """
    LoadSTime(TSIn SIn, bool ShouldLoadData=True) -> TPt< TSTime >

    Parameters
    ----------
    SIn: TSIn &
    ShouldLoadData: bool

    TSTime_LoadSTime(TSIn SIn) -> TPt< TSTime >

    Parameters
    ----------
    SIn: TSIn &

    """
    return _SnapTime.TSTime_LoadSTime(SIn, ShouldLoadData)

class TTimeCollection(object):
    """Proxy of C++ TTimeCollection class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TimeCollection = _swig_property(_SnapTime.TTimeCollection_TimeCollection_get, _SnapTime.TTimeCollection_TimeCollection_set)

    def __init__(self):
        """__init__(TTimeCollection self) -> TTimeCollection"""
        _SnapTime.TTimeCollection_swiginit(self, _SnapTime.new_TTimeCollection())

    def Add(self, t):
        """
        Add(TTimeCollection self, TPt< TSTime > t)

        Parameters
        ----------
        t: TPt< TSTime >

        """
        return _SnapTime.TTimeCollection_Add(self, t)


    def Len(self):
        """
        Len(TTimeCollection self) -> int

        Parameters
        ----------
        self: TTimeCollection *

        """
        return _SnapTime.TTimeCollection_Len(self)


    def GetIds(self, rowNum):
        """
        GetIds(TTimeCollection self, int rowNum) -> TStrV

        Parameters
        ----------
        rowNum: int

        """
        return _SnapTime.TTimeCollection_GetIds(self, rowNum)


    def GetType(self, rowNum):
        """
        GetType(TTimeCollection self, int rowNum) -> TType

        Parameters
        ----------
        rowNum: int

        """
        return _SnapTime.TTimeCollection_GetType(self, rowNum)


    def GetTime(self, rowNum, elemNum):
        """
        GetTime(TTimeCollection self, int rowNum, int elemNum) -> TFlt

        Parameters
        ----------
        rowNum: int
        elemNum: int

        """
        return _SnapTime.TTimeCollection_GetTime(self, rowNum, elemNum)


    def GetBool(self, rowNum, elemNum):
        """
        GetBool(TTimeCollection self, int rowNum, int elemNum) -> TBool

        Parameters
        ----------
        rowNum: int
        elemNum: int

        """
        return _SnapTime.TTimeCollection_GetBool(self, rowNum, elemNum)


    def GetFloat(self, rowNum, elemNum):
        """
        GetFloat(TTimeCollection self, int rowNum, int elemNum) -> TFlt

        Parameters
        ----------
        rowNum: int
        elemNum: int

        """
        return _SnapTime.TTimeCollection_GetFloat(self, rowNum, elemNum)


    def GetInt(self, rowNum, elemNum):
        """
        GetInt(TTimeCollection self, int rowNum, int elemNum) -> TInt64

        Parameters
        ----------
        rowNum: int
        elemNum: int

        """
        return _SnapTime.TTimeCollection_GetInt(self, rowNum, elemNum)


    def GetStr(self, rowNum, elemNum):
        """
        GetStr(TTimeCollection self, int rowNum, int elemNum) -> TStr

        Parameters
        ----------
        rowNum: int
        elemNum: int

        """
        return _SnapTime.TTimeCollection_GetStr(self, rowNum, elemNum)


    def GetSTimeLen(self, rowNum):
        """
        GetSTimeLen(TTimeCollection self, int rowNum) -> int

        Parameters
        ----------
        rowNum: int

        """
        return _SnapTime.TTimeCollection_GetSTimeLen(self, rowNum)

    __swig_destroy__ = _SnapTime.delete_TTimeCollection
TTimeCollection.Add = new_instancemethod(_SnapTime.TTimeCollection_Add, None, TTimeCollection)
TTimeCollection.Len = new_instancemethod(_SnapTime.TTimeCollection_Len, None, TTimeCollection)
TTimeCollection.GetIds = new_instancemethod(_SnapTime.TTimeCollection_GetIds, None, TTimeCollection)
TTimeCollection.GetType = new_instancemethod(_SnapTime.TTimeCollection_GetType, None, TTimeCollection)
TTimeCollection.GetTime = new_instancemethod(_SnapTime.TTimeCollection_GetTime, None, TTimeCollection)
TTimeCollection.GetBool = new_instancemethod(_SnapTime.TTimeCollection_GetBool, None, TTimeCollection)
TTimeCollection.GetFloat = new_instancemethod(_SnapTime.TTimeCollection_GetFloat, None, TTimeCollection)
TTimeCollection.GetInt = new_instancemethod(_SnapTime.TTimeCollection_GetInt, None, TTimeCollection)
TTimeCollection.GetStr = new_instancemethod(_SnapTime.TTimeCollection_GetStr, None, TTimeCollection)
TTimeCollection.GetSTimeLen = new_instancemethod(_SnapTime.TTimeCollection_GetSTimeLen, None, TTimeCollection)
TTimeCollection_swigregister = _SnapTime.TTimeCollection_swigregister
TTimeCollection_swigregister(TTimeCollection)

BOOLEAN = _SnapTime.BOOLEAN
STRING = _SnapTime.STRING
INTEGER = _SnapTime.INTEGER
FLOAT = _SnapTime.FLOAT
TIME = _SnapTime.TIME
SENSOR = _SnapTime.SENSOR
ID = _SnapTime.ID
NO_ID = _SnapTime.NO_ID
class StringVector(object):
    """Proxy of C++ std::vector<(std::string)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(StringVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _SnapTime.StringVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(StringVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _SnapTime.StringVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(StringVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _SnapTime.StringVector___bool__(self)


    def __len__(self):
        """
        __len__(StringVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _SnapTime.StringVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StringVector

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _SnapTime.StringVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StringVector v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _SnapTime.StringVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _SnapTime.StringVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(StringVector self, std::vector< std::string >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(StringVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SnapTime.StringVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(StringVector self, PySliceObject * slice) -> StringVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(StringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _SnapTime.StringVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(StringVector self, PySliceObject * slice, StringVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(StringVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _SnapTime.StringVector___setitem__(self, *args)


    def pop(self):
        """
        pop(StringVector self) -> std::vector< std::string >::value_type

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _SnapTime.StringVector_pop(self)


    def append(self, x):
        """
        append(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _SnapTime.StringVector_append(self, x)


    def empty(self):
        """
        empty(StringVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _SnapTime.StringVector_empty(self)


    def size(self):
        """
        size(StringVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _SnapTime.StringVector_size(self)


    def swap(self, v):
        """
        swap(StringVector self, StringVector v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _SnapTime.StringVector_swap(self, v)


    def begin(self):
        """
        begin(StringVector self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _SnapTime.StringVector_begin(self)


    def end(self):
        """
        end(StringVector self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _SnapTime.StringVector_end(self)


    def rbegin(self):
        """
        rbegin(StringVector self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _SnapTime.StringVector_rbegin(self)


    def rend(self):
        """
        rend(StringVector self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _SnapTime.StringVector_rend(self)


    def clear(self):
        """
        clear(StringVector self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _SnapTime.StringVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(StringVector self) -> std::vector< std::string >::allocator_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _SnapTime.StringVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(StringVector self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _SnapTime.StringVector_pop_back(self)


    def erase(self, *args):
        """
        erase(StringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(StringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _SnapTime.StringVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> StringVector
        __init__(std::vector<(std::string)> self, StringVector arg2) -> StringVector

        Parameters
        ----------
        arg2: std::vector< std::string > const &

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        _SnapTime.StringVector_swiginit(self, _SnapTime.new_StringVector(*args))

    def push_back(self, x):
        """
        push_back(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _SnapTime.StringVector_push_back(self, x)


    def front(self):
        """
        front(StringVector self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _SnapTime.StringVector_front(self)


    def back(self):
        """
        back(StringVector self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _SnapTime.StringVector_back(self)


    def assign(self, n, x):
        """
        assign(StringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _SnapTime.StringVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(StringVector self, std::vector< std::string >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(StringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _SnapTime.StringVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _SnapTime.StringVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(StringVector self, std::vector< std::string >::size_type n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _SnapTime.StringVector_reserve(self, n)


    def capacity(self):
        """
        capacity(StringVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _SnapTime.StringVector_capacity(self)

    __swig_destroy__ = _SnapTime.delete_StringVector
StringVector.iterator = new_instancemethod(_SnapTime.StringVector_iterator, None, StringVector)
StringVector.__nonzero__ = new_instancemethod(_SnapTime.StringVector___nonzero__, None, StringVector)
StringVector.__bool__ = new_instancemethod(_SnapTime.StringVector___bool__, None, StringVector)
StringVector.__len__ = new_instancemethod(_SnapTime.StringVector___len__, None, StringVector)
StringVector.__getslice__ = new_instancemethod(_SnapTime.StringVector___getslice__, None, StringVector)
StringVector.__setslice__ = new_instancemethod(_SnapTime.StringVector___setslice__, None, StringVector)
StringVector.__delslice__ = new_instancemethod(_SnapTime.StringVector___delslice__, None, StringVector)
StringVector.__delitem__ = new_instancemethod(_SnapTime.StringVector___delitem__, None, StringVector)
StringVector.__getitem__ = new_instancemethod(_SnapTime.StringVector___getitem__, None, StringVector)
StringVector.__setitem__ = new_instancemethod(_SnapTime.StringVector___setitem__, None, StringVector)
StringVector.pop = new_instancemethod(_SnapTime.StringVector_pop, None, StringVector)
StringVector.append = new_instancemethod(_SnapTime.StringVector_append, None, StringVector)
StringVector.empty = new_instancemethod(_SnapTime.StringVector_empty, None, StringVector)
StringVector.size = new_instancemethod(_SnapTime.StringVector_size, None, StringVector)
StringVector.swap = new_instancemethod(_SnapTime.StringVector_swap, None, StringVector)
StringVector.begin = new_instancemethod(_SnapTime.StringVector_begin, None, StringVector)
StringVector.end = new_instancemethod(_SnapTime.StringVector_end, None, StringVector)
StringVector.rbegin = new_instancemethod(_SnapTime.StringVector_rbegin, None, StringVector)
StringVector.rend = new_instancemethod(_SnapTime.StringVector_rend, None, StringVector)
StringVector.clear = new_instancemethod(_SnapTime.StringVector_clear, None, StringVector)
StringVector.get_allocator = new_instancemethod(_SnapTime.StringVector_get_allocator, None, StringVector)
StringVector.pop_back = new_instancemethod(_SnapTime.StringVector_pop_back, None, StringVector)
StringVector.erase = new_instancemethod(_SnapTime.StringVector_erase, None, StringVector)
StringVector.push_back = new_instancemethod(_SnapTime.StringVector_push_back, None, StringVector)
StringVector.front = new_instancemethod(_SnapTime.StringVector_front, None, StringVector)
StringVector.back = new_instancemethod(_SnapTime.StringVector_back, None, StringVector)
StringVector.assign = new_instancemethod(_SnapTime.StringVector_assign, None, StringVector)
StringVector.resize = new_instancemethod(_SnapTime.StringVector_resize, None, StringVector)
StringVector.insert = new_instancemethod(_SnapTime.StringVector_insert, None, StringVector)
StringVector.reserve = new_instancemethod(_SnapTime.StringVector_reserve, None, StringVector)
StringVector.capacity = new_instancemethod(_SnapTime.StringVector_capacity, None, StringVector)
StringVector_swigregister = _SnapTime.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntVector(object):
    """Proxy of C++ std::vector<(int)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(IntVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _SnapTime.IntVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(IntVector self) -> bool

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _SnapTime.IntVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(IntVector self) -> bool

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _SnapTime.IntVector___bool__(self)


    def __len__(self):
        """
        __len__(IntVector self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _SnapTime.IntVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _SnapTime.IntVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type
        v: std::vector< int,std::allocator< int > > const &

        """
        return _SnapTime.IntVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _SnapTime.IntVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(IntVector self, std::vector< int >::difference_type i)

        Parameters
        ----------
        i: std::vector< int >::difference_type

        __delitem__(IntVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SnapTime.IntVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &

        Parameters
        ----------
        i: std::vector< int >::difference_type

        """
        return _SnapTime.IntVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< int,std::allocator< int > > const &

        __setitem__(IntVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        x: std::vector< int >::value_type const &

        """
        return _SnapTime.IntVector___setitem__(self, *args)


    def pop(self):
        """
        pop(IntVector self) -> std::vector< int >::value_type

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _SnapTime.IntVector_pop(self)


    def append(self, x):
        """
        append(IntVector self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _SnapTime.IntVector_append(self, x)


    def empty(self):
        """
        empty(IntVector self) -> bool

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _SnapTime.IntVector_empty(self)


    def size(self):
        """
        size(IntVector self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _SnapTime.IntVector_size(self)


    def swap(self, v):
        """
        swap(IntVector self, IntVector v)

        Parameters
        ----------
        v: std::vector< int > &

        """
        return _SnapTime.IntVector_swap(self, v)


    def begin(self):
        """
        begin(IntVector self) -> std::vector< int >::iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _SnapTime.IntVector_begin(self)


    def end(self):
        """
        end(IntVector self) -> std::vector< int >::iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _SnapTime.IntVector_end(self)


    def rbegin(self):
        """
        rbegin(IntVector self) -> std::vector< int >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _SnapTime.IntVector_rbegin(self)


    def rend(self):
        """
        rend(IntVector self) -> std::vector< int >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _SnapTime.IntVector_rend(self)


    def clear(self):
        """
        clear(IntVector self)

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _SnapTime.IntVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(IntVector self) -> std::vector< int >::allocator_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _SnapTime.IntVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(IntVector self)

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _SnapTime.IntVector_pop_back(self)


    def erase(self, *args):
        """
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator

        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator

        Parameters
        ----------
        first: std::vector< int >::iterator
        last: std::vector< int >::iterator

        """
        return _SnapTime.IntVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> IntVector
        __init__(std::vector<(int)> self, IntVector arg2) -> IntVector

        Parameters
        ----------
        arg2: std::vector< int > const &

        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> IntVector

        Parameters
        ----------
        size: std::vector< int >::size_type

        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector

        Parameters
        ----------
        size: std::vector< int >::size_type
        value: std::vector< int >::value_type const &

        """
        _SnapTime.IntVector_swiginit(self, _SnapTime.new_IntVector(*args))

    def push_back(self, x):
        """
        push_back(IntVector self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _SnapTime.IntVector_push_back(self, x)


    def front(self):
        """
        front(IntVector self) -> std::vector< int >::value_type const &

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _SnapTime.IntVector_front(self)


    def back(self):
        """
        back(IntVector self) -> std::vector< int >::value_type const &

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _SnapTime.IntVector_back(self)


    def assign(self, n, x):
        """
        assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _SnapTime.IntVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(IntVector self, std::vector< int >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< int >::size_type

        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _SnapTime.IntVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator
        x: std::vector< int >::value_type const &

        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< int >::iterator
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _SnapTime.IntVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(IntVector self, std::vector< int >::size_type n)

        Parameters
        ----------
        n: std::vector< int >::size_type

        """
        return _SnapTime.IntVector_reserve(self, n)


    def capacity(self):
        """
        capacity(IntVector self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _SnapTime.IntVector_capacity(self)

    __swig_destroy__ = _SnapTime.delete_IntVector
IntVector.iterator = new_instancemethod(_SnapTime.IntVector_iterator, None, IntVector)
IntVector.__nonzero__ = new_instancemethod(_SnapTime.IntVector___nonzero__, None, IntVector)
IntVector.__bool__ = new_instancemethod(_SnapTime.IntVector___bool__, None, IntVector)
IntVector.__len__ = new_instancemethod(_SnapTime.IntVector___len__, None, IntVector)
IntVector.__getslice__ = new_instancemethod(_SnapTime.IntVector___getslice__, None, IntVector)
IntVector.__setslice__ = new_instancemethod(_SnapTime.IntVector___setslice__, None, IntVector)
IntVector.__delslice__ = new_instancemethod(_SnapTime.IntVector___delslice__, None, IntVector)
IntVector.__delitem__ = new_instancemethod(_SnapTime.IntVector___delitem__, None, IntVector)
IntVector.__getitem__ = new_instancemethod(_SnapTime.IntVector___getitem__, None, IntVector)
IntVector.__setitem__ = new_instancemethod(_SnapTime.IntVector___setitem__, None, IntVector)
IntVector.pop = new_instancemethod(_SnapTime.IntVector_pop, None, IntVector)
IntVector.append = new_instancemethod(_SnapTime.IntVector_append, None, IntVector)
IntVector.empty = new_instancemethod(_SnapTime.IntVector_empty, None, IntVector)
IntVector.size = new_instancemethod(_SnapTime.IntVector_size, None, IntVector)
IntVector.swap = new_instancemethod(_SnapTime.IntVector_swap, None, IntVector)
IntVector.begin = new_instancemethod(_SnapTime.IntVector_begin, None, IntVector)
IntVector.end = new_instancemethod(_SnapTime.IntVector_end, None, IntVector)
IntVector.rbegin = new_instancemethod(_SnapTime.IntVector_rbegin, None, IntVector)
IntVector.rend = new_instancemethod(_SnapTime.IntVector_rend, None, IntVector)
IntVector.clear = new_instancemethod(_SnapTime.IntVector_clear, None, IntVector)
IntVector.get_allocator = new_instancemethod(_SnapTime.IntVector_get_allocator, None, IntVector)
IntVector.pop_back = new_instancemethod(_SnapTime.IntVector_pop_back, None, IntVector)
IntVector.erase = new_instancemethod(_SnapTime.IntVector_erase, None, IntVector)
IntVector.push_back = new_instancemethod(_SnapTime.IntVector_push_back, None, IntVector)
IntVector.front = new_instancemethod(_SnapTime.IntVector_front, None, IntVector)
IntVector.back = new_instancemethod(_SnapTime.IntVector_back, None, IntVector)
IntVector.assign = new_instancemethod(_SnapTime.IntVector_assign, None, IntVector)
IntVector.resize = new_instancemethod(_SnapTime.IntVector_resize, None, IntVector)
IntVector.insert = new_instancemethod(_SnapTime.IntVector_insert, None, IntVector)
IntVector.reserve = new_instancemethod(_SnapTime.IntVector_reserve, None, IntVector)
IntVector.capacity = new_instancemethod(_SnapTime.IntVector_capacity, None, IntVector)
IntVector_swigregister = _SnapTime.IntVector_swigregister
IntVector_swigregister(IntVector)

class StringPair(object):
    """Proxy of C++ std::pair<(std::string,std::string)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(std::pair<(std::string,std::string)> self) -> StringPair
        __init__(std::pair<(std::string,std::string)> self, std::string first, std::string second) -> StringPair

        Parameters
        ----------
        first: std::string
        second: std::string

        __init__(std::pair<(std::string,std::string)> self, StringPair p) -> StringPair

        Parameters
        ----------
        p: std::pair< std::string,std::string > const &

        """
        _SnapTime.StringPair_swiginit(self, _SnapTime.new_StringPair(*args))
    first = _swig_property(_SnapTime.StringPair_first_get, _SnapTime.StringPair_first_set)
    second = _swig_property(_SnapTime.StringPair_second_get, _SnapTime.StringPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _SnapTime.delete_StringPair
StringPair_swigregister = _SnapTime.StringPair_swigregister
StringPair_swigregister(StringPair)

class StringPairVector(object):
    """Proxy of C++ std::vector<(std::pair<(std::string,std::string)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(StringPairVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > *

        """
        return _SnapTime.StringPairVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(StringPairVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > const *

        """
        return _SnapTime.StringPairVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(StringPairVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > const *

        """
        return _SnapTime.StringPairVector___bool__(self)


    def __len__(self):
        """
        __len__(StringPairVector self) -> std::vector< std::pair< std::string,std::string > >::size_type

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > const *

        """
        return _SnapTime.StringPairVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(StringPairVector self, std::vector< std::pair< std::string,std::string > >::difference_type i, std::vector< std::pair< std::string,std::string > >::difference_type j) -> StringPairVector

        Parameters
        ----------
        i: std::vector< std::pair< std::string,std::string > >::difference_type
        j: std::vector< std::pair< std::string,std::string > >::difference_type

        """
        return _SnapTime.StringPairVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(StringPairVector self, std::vector< std::pair< std::string,std::string > >::difference_type i, std::vector< std::pair< std::string,std::string > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::pair< std::string,std::string > >::difference_type
        j: std::vector< std::pair< std::string,std::string > >::difference_type

        __setslice__(StringPairVector self, std::vector< std::pair< std::string,std::string > >::difference_type i, std::vector< std::pair< std::string,std::string > >::difference_type j, StringPairVector v)

        Parameters
        ----------
        i: std::vector< std::pair< std::string,std::string > >::difference_type
        j: std::vector< std::pair< std::string,std::string > >::difference_type
        v: std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > const &

        """
        return _SnapTime.StringPairVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(StringPairVector self, std::vector< std::pair< std::string,std::string > >::difference_type i, std::vector< std::pair< std::string,std::string > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::pair< std::string,std::string > >::difference_type
        j: std::vector< std::pair< std::string,std::string > >::difference_type

        """
        return _SnapTime.StringPairVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(StringPairVector self, std::vector< std::pair< std::string,std::string > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::pair< std::string,std::string > >::difference_type

        __delitem__(StringPairVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SnapTime.StringPairVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(StringPairVector self, PySliceObject * slice) -> StringPairVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(StringPairVector self, std::vector< std::pair< std::string,std::string > >::difference_type i) -> StringPair

        Parameters
        ----------
        i: std::vector< std::pair< std::string,std::string > >::difference_type

        """
        return _SnapTime.StringPairVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(StringPairVector self, PySliceObject * slice, StringPairVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > const &

        __setitem__(StringPairVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(StringPairVector self, std::vector< std::pair< std::string,std::string > >::difference_type i, StringPair x)

        Parameters
        ----------
        i: std::vector< std::pair< std::string,std::string > >::difference_type
        x: std::vector< std::pair< std::string,std::string > >::value_type const &

        """
        return _SnapTime.StringPairVector___setitem__(self, *args)


    def pop(self):
        """
        pop(StringPairVector self) -> StringPair

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > *

        """
        return _SnapTime.StringPairVector_pop(self)


    def append(self, x):
        """
        append(StringPairVector self, StringPair x)

        Parameters
        ----------
        x: std::vector< std::pair< std::string,std::string > >::value_type const &

        """
        return _SnapTime.StringPairVector_append(self, x)


    def empty(self):
        """
        empty(StringPairVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > const *

        """
        return _SnapTime.StringPairVector_empty(self)


    def size(self):
        """
        size(StringPairVector self) -> std::vector< std::pair< std::string,std::string > >::size_type

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > const *

        """
        return _SnapTime.StringPairVector_size(self)


    def swap(self, v):
        """
        swap(StringPairVector self, StringPairVector v)

        Parameters
        ----------
        v: std::vector< std::pair< std::string,std::string > > &

        """
        return _SnapTime.StringPairVector_swap(self, v)


    def begin(self):
        """
        begin(StringPairVector self) -> std::vector< std::pair< std::string,std::string > >::iterator

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > *

        """
        return _SnapTime.StringPairVector_begin(self)


    def end(self):
        """
        end(StringPairVector self) -> std::vector< std::pair< std::string,std::string > >::iterator

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > *

        """
        return _SnapTime.StringPairVector_end(self)


    def rbegin(self):
        """
        rbegin(StringPairVector self) -> std::vector< std::pair< std::string,std::string > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > *

        """
        return _SnapTime.StringPairVector_rbegin(self)


    def rend(self):
        """
        rend(StringPairVector self) -> std::vector< std::pair< std::string,std::string > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > *

        """
        return _SnapTime.StringPairVector_rend(self)


    def clear(self):
        """
        clear(StringPairVector self)

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > *

        """
        return _SnapTime.StringPairVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(StringPairVector self) -> std::vector< std::pair< std::string,std::string > >::allocator_type

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > const *

        """
        return _SnapTime.StringPairVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(StringPairVector self)

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > *

        """
        return _SnapTime.StringPairVector_pop_back(self)


    def erase(self, *args):
        """
        erase(StringPairVector self, std::vector< std::pair< std::string,std::string > >::iterator pos) -> std::vector< std::pair< std::string,std::string > >::iterator

        Parameters
        ----------
        pos: std::vector< std::pair< std::string,std::string > >::iterator

        erase(StringPairVector self, std::vector< std::pair< std::string,std::string > >::iterator first, std::vector< std::pair< std::string,std::string > >::iterator last) -> std::vector< std::pair< std::string,std::string > >::iterator

        Parameters
        ----------
        first: std::vector< std::pair< std::string,std::string > >::iterator
        last: std::vector< std::pair< std::string,std::string > >::iterator

        """
        return _SnapTime.StringPairVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::pair<(std::string,std::string)>)> self) -> StringPairVector
        __init__(std::vector<(std::pair<(std::string,std::string)>)> self, StringPairVector arg2) -> StringPairVector

        Parameters
        ----------
        arg2: std::vector< std::pair< std::string,std::string > > const &

        __init__(std::vector<(std::pair<(std::string,std::string)>)> self, std::vector< std::pair< std::string,std::string > >::size_type size) -> StringPairVector

        Parameters
        ----------
        size: std::vector< std::pair< std::string,std::string > >::size_type

        __init__(std::vector<(std::pair<(std::string,std::string)>)> self, std::vector< std::pair< std::string,std::string > >::size_type size, StringPair value) -> StringPairVector

        Parameters
        ----------
        size: std::vector< std::pair< std::string,std::string > >::size_type
        value: std::vector< std::pair< std::string,std::string > >::value_type const &

        """
        _SnapTime.StringPairVector_swiginit(self, _SnapTime.new_StringPairVector(*args))

    def push_back(self, x):
        """
        push_back(StringPairVector self, StringPair x)

        Parameters
        ----------
        x: std::vector< std::pair< std::string,std::string > >::value_type const &

        """
        return _SnapTime.StringPairVector_push_back(self, x)


    def front(self):
        """
        front(StringPairVector self) -> StringPair

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > const *

        """
        return _SnapTime.StringPairVector_front(self)


    def back(self):
        """
        back(StringPairVector self) -> StringPair

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > const *

        """
        return _SnapTime.StringPairVector_back(self)


    def assign(self, n, x):
        """
        assign(StringPairVector self, std::vector< std::pair< std::string,std::string > >::size_type n, StringPair x)

        Parameters
        ----------
        n: std::vector< std::pair< std::string,std::string > >::size_type
        x: std::vector< std::pair< std::string,std::string > >::value_type const &

        """
        return _SnapTime.StringPairVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(StringPairVector self, std::vector< std::pair< std::string,std::string > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::pair< std::string,std::string > >::size_type

        resize(StringPairVector self, std::vector< std::pair< std::string,std::string > >::size_type new_size, StringPair x)

        Parameters
        ----------
        new_size: std::vector< std::pair< std::string,std::string > >::size_type
        x: std::vector< std::pair< std::string,std::string > >::value_type const &

        """
        return _SnapTime.StringPairVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(StringPairVector self, std::vector< std::pair< std::string,std::string > >::iterator pos, StringPair x) -> std::vector< std::pair< std::string,std::string > >::iterator

        Parameters
        ----------
        pos: std::vector< std::pair< std::string,std::string > >::iterator
        x: std::vector< std::pair< std::string,std::string > >::value_type const &

        insert(StringPairVector self, std::vector< std::pair< std::string,std::string > >::iterator pos, std::vector< std::pair< std::string,std::string > >::size_type n, StringPair x)

        Parameters
        ----------
        pos: std::vector< std::pair< std::string,std::string > >::iterator
        n: std::vector< std::pair< std::string,std::string > >::size_type
        x: std::vector< std::pair< std::string,std::string > >::value_type const &

        """
        return _SnapTime.StringPairVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(StringPairVector self, std::vector< std::pair< std::string,std::string > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::pair< std::string,std::string > >::size_type

        """
        return _SnapTime.StringPairVector_reserve(self, n)


    def capacity(self):
        """
        capacity(StringPairVector self) -> std::vector< std::pair< std::string,std::string > >::size_type

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::string > > const *

        """
        return _SnapTime.StringPairVector_capacity(self)

    __swig_destroy__ = _SnapTime.delete_StringPairVector
StringPairVector.iterator = new_instancemethod(_SnapTime.StringPairVector_iterator, None, StringPairVector)
StringPairVector.__nonzero__ = new_instancemethod(_SnapTime.StringPairVector___nonzero__, None, StringPairVector)
StringPairVector.__bool__ = new_instancemethod(_SnapTime.StringPairVector___bool__, None, StringPairVector)
StringPairVector.__len__ = new_instancemethod(_SnapTime.StringPairVector___len__, None, StringPairVector)
StringPairVector.__getslice__ = new_instancemethod(_SnapTime.StringPairVector___getslice__, None, StringPairVector)
StringPairVector.__setslice__ = new_instancemethod(_SnapTime.StringPairVector___setslice__, None, StringPairVector)
StringPairVector.__delslice__ = new_instancemethod(_SnapTime.StringPairVector___delslice__, None, StringPairVector)
StringPairVector.__delitem__ = new_instancemethod(_SnapTime.StringPairVector___delitem__, None, StringPairVector)
StringPairVector.__getitem__ = new_instancemethod(_SnapTime.StringPairVector___getitem__, None, StringPairVector)
StringPairVector.__setitem__ = new_instancemethod(_SnapTime.StringPairVector___setitem__, None, StringPairVector)
StringPairVector.pop = new_instancemethod(_SnapTime.StringPairVector_pop, None, StringPairVector)
StringPairVector.append = new_instancemethod(_SnapTime.StringPairVector_append, None, StringPairVector)
StringPairVector.empty = new_instancemethod(_SnapTime.StringPairVector_empty, None, StringPairVector)
StringPairVector.size = new_instancemethod(_SnapTime.StringPairVector_size, None, StringPairVector)
StringPairVector.swap = new_instancemethod(_SnapTime.StringPairVector_swap, None, StringPairVector)
StringPairVector.begin = new_instancemethod(_SnapTime.StringPairVector_begin, None, StringPairVector)
StringPairVector.end = new_instancemethod(_SnapTime.StringPairVector_end, None, StringPairVector)
StringPairVector.rbegin = new_instancemethod(_SnapTime.StringPairVector_rbegin, None, StringPairVector)
StringPairVector.rend = new_instancemethod(_SnapTime.StringPairVector_rend, None, StringPairVector)
StringPairVector.clear = new_instancemethod(_SnapTime.StringPairVector_clear, None, StringPairVector)
StringPairVector.get_allocator = new_instancemethod(_SnapTime.StringPairVector_get_allocator, None, StringPairVector)
StringPairVector.pop_back = new_instancemethod(_SnapTime.StringPairVector_pop_back, None, StringPairVector)
StringPairVector.erase = new_instancemethod(_SnapTime.StringPairVector_erase, None, StringPairVector)
StringPairVector.push_back = new_instancemethod(_SnapTime.StringPairVector_push_back, None, StringPairVector)
StringPairVector.front = new_instancemethod(_SnapTime.StringPairVector_front, None, StringPairVector)
StringPairVector.back = new_instancemethod(_SnapTime.StringPairVector_back, None, StringPairVector)
StringPairVector.assign = new_instancemethod(_SnapTime.StringPairVector_assign, None, StringPairVector)
StringPairVector.resize = new_instancemethod(_SnapTime.StringPairVector_resize, None, StringPairVector)
StringPairVector.insert = new_instancemethod(_SnapTime.StringPairVector_insert, None, StringPairVector)
StringPairVector.reserve = new_instancemethod(_SnapTime.StringPairVector_reserve, None, StringPairVector)
StringPairVector.capacity = new_instancemethod(_SnapTime.StringPairVector_capacity, None, StringPairVector)
StringPairVector_swigregister = _SnapTime.StringPairVector_swigregister
StringPairVector_swigregister(StringPairVector)

class DoubleVector(object):
    """Proxy of C++ std::vector<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(DoubleVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _SnapTime.DoubleVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(DoubleVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _SnapTime.DoubleVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(DoubleVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _SnapTime.DoubleVector___bool__(self)


    def __len__(self):
        """
        __len__(DoubleVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _SnapTime.DoubleVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _SnapTime.DoubleVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleVector v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _SnapTime.DoubleVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _SnapTime.DoubleVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SnapTime.DoubleVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _SnapTime.DoubleVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _SnapTime.DoubleVector___setitem__(self, *args)


    def pop(self):
        """
        pop(DoubleVector self) -> std::vector< double >::value_type

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _SnapTime.DoubleVector_pop(self)


    def append(self, x):
        """
        append(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _SnapTime.DoubleVector_append(self, x)


    def empty(self):
        """
        empty(DoubleVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _SnapTime.DoubleVector_empty(self)


    def size(self):
        """
        size(DoubleVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _SnapTime.DoubleVector_size(self)


    def swap(self, v):
        """
        swap(DoubleVector self, DoubleVector v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _SnapTime.DoubleVector_swap(self, v)


    def begin(self):
        """
        begin(DoubleVector self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _SnapTime.DoubleVector_begin(self)


    def end(self):
        """
        end(DoubleVector self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _SnapTime.DoubleVector_end(self)


    def rbegin(self):
        """
        rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _SnapTime.DoubleVector_rbegin(self)


    def rend(self):
        """
        rend(DoubleVector self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _SnapTime.DoubleVector_rend(self)


    def clear(self):
        """
        clear(DoubleVector self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _SnapTime.DoubleVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(DoubleVector self) -> std::vector< double >::allocator_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _SnapTime.DoubleVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(DoubleVector self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _SnapTime.DoubleVector_pop_back(self)


    def erase(self, *args):
        """
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _SnapTime.DoubleVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> DoubleVector
        __init__(std::vector<(double)> self, DoubleVector arg2) -> DoubleVector

        Parameters
        ----------
        arg2: std::vector< double > const &

        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        _SnapTime.DoubleVector_swiginit(self, _SnapTime.new_DoubleVector(*args))

    def push_back(self, x):
        """
        push_back(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _SnapTime.DoubleVector_push_back(self, x)


    def front(self):
        """
        front(DoubleVector self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _SnapTime.DoubleVector_front(self)


    def back(self):
        """
        back(DoubleVector self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _SnapTime.DoubleVector_back(self)


    def assign(self, n, x):
        """
        assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _SnapTime.DoubleVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(DoubleVector self, std::vector< double >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _SnapTime.DoubleVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _SnapTime.DoubleVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(DoubleVector self, std::vector< double >::size_type n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _SnapTime.DoubleVector_reserve(self, n)


    def capacity(self):
        """
        capacity(DoubleVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _SnapTime.DoubleVector_capacity(self)

    __swig_destroy__ = _SnapTime.delete_DoubleVector
DoubleVector.iterator = new_instancemethod(_SnapTime.DoubleVector_iterator, None, DoubleVector)
DoubleVector.__nonzero__ = new_instancemethod(_SnapTime.DoubleVector___nonzero__, None, DoubleVector)
DoubleVector.__bool__ = new_instancemethod(_SnapTime.DoubleVector___bool__, None, DoubleVector)
DoubleVector.__len__ = new_instancemethod(_SnapTime.DoubleVector___len__, None, DoubleVector)
DoubleVector.__getslice__ = new_instancemethod(_SnapTime.DoubleVector___getslice__, None, DoubleVector)
DoubleVector.__setslice__ = new_instancemethod(_SnapTime.DoubleVector___setslice__, None, DoubleVector)
DoubleVector.__delslice__ = new_instancemethod(_SnapTime.DoubleVector___delslice__, None, DoubleVector)
DoubleVector.__delitem__ = new_instancemethod(_SnapTime.DoubleVector___delitem__, None, DoubleVector)
DoubleVector.__getitem__ = new_instancemethod(_SnapTime.DoubleVector___getitem__, None, DoubleVector)
DoubleVector.__setitem__ = new_instancemethod(_SnapTime.DoubleVector___setitem__, None, DoubleVector)
DoubleVector.pop = new_instancemethod(_SnapTime.DoubleVector_pop, None, DoubleVector)
DoubleVector.append = new_instancemethod(_SnapTime.DoubleVector_append, None, DoubleVector)
DoubleVector.empty = new_instancemethod(_SnapTime.DoubleVector_empty, None, DoubleVector)
DoubleVector.size = new_instancemethod(_SnapTime.DoubleVector_size, None, DoubleVector)
DoubleVector.swap = new_instancemethod(_SnapTime.DoubleVector_swap, None, DoubleVector)
DoubleVector.begin = new_instancemethod(_SnapTime.DoubleVector_begin, None, DoubleVector)
DoubleVector.end = new_instancemethod(_SnapTime.DoubleVector_end, None, DoubleVector)
DoubleVector.rbegin = new_instancemethod(_SnapTime.DoubleVector_rbegin, None, DoubleVector)
DoubleVector.rend = new_instancemethod(_SnapTime.DoubleVector_rend, None, DoubleVector)
DoubleVector.clear = new_instancemethod(_SnapTime.DoubleVector_clear, None, DoubleVector)
DoubleVector.get_allocator = new_instancemethod(_SnapTime.DoubleVector_get_allocator, None, DoubleVector)
DoubleVector.pop_back = new_instancemethod(_SnapTime.DoubleVector_pop_back, None, DoubleVector)
DoubleVector.erase = new_instancemethod(_SnapTime.DoubleVector_erase, None, DoubleVector)
DoubleVector.push_back = new_instancemethod(_SnapTime.DoubleVector_push_back, None, DoubleVector)
DoubleVector.front = new_instancemethod(_SnapTime.DoubleVector_front, None, DoubleVector)
DoubleVector.back = new_instancemethod(_SnapTime.DoubleVector_back, None, DoubleVector)
DoubleVector.assign = new_instancemethod(_SnapTime.DoubleVector_assign, None, DoubleVector)
DoubleVector.resize = new_instancemethod(_SnapTime.DoubleVector_resize, None, DoubleVector)
DoubleVector.insert = new_instancemethod(_SnapTime.DoubleVector_insert, None, DoubleVector)
DoubleVector.reserve = new_instancemethod(_SnapTime.DoubleVector_reserve, None, DoubleVector)
DoubleVector.capacity = new_instancemethod(_SnapTime.DoubleVector_capacity, None, DoubleVector)
DoubleVector_swigregister = _SnapTime.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class VectorVectorDouble(object):
    """Proxy of C++ std::vector<(std::vector<(double)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(VectorVectorDouble self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _SnapTime.VectorVectorDouble_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(VectorVectorDouble self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _SnapTime.VectorVectorDouble___nonzero__(self)


    def __bool__(self):
        """
        __bool__(VectorVectorDouble self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _SnapTime.VectorVectorDouble___bool__(self)


    def __len__(self):
        """
        __len__(VectorVectorDouble self) -> std::vector< std::vector< double > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _SnapTime.VectorVectorDouble___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(VectorVectorDouble self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> VectorVectorDouble

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        """
        return _SnapTime.VectorVectorDouble___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorVectorDouble self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        __setslice__(VectorVectorDouble self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, VectorVectorDouble v)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type
        v: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &

        """
        return _SnapTime.VectorVectorDouble___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(VectorVectorDouble self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        """
        return _SnapTime.VectorVectorDouble___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorVectorDouble self, std::vector< std::vector< double > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type

        __delitem__(VectorVectorDouble self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SnapTime.VectorVectorDouble___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorVectorDouble self, PySliceObject * slice) -> VectorVectorDouble

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(VectorVectorDouble self, std::vector< std::vector< double > >::difference_type i) -> DoubleVector

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type

        """
        return _SnapTime.VectorVectorDouble___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorVectorDouble self, PySliceObject * slice, VectorVectorDouble v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &

        __setitem__(VectorVectorDouble self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(VectorVectorDouble self, std::vector< std::vector< double > >::difference_type i, DoubleVector x)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _SnapTime.VectorVectorDouble___setitem__(self, *args)


    def pop(self):
        """
        pop(VectorVectorDouble self) -> DoubleVector

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _SnapTime.VectorVectorDouble_pop(self)


    def append(self, x):
        """
        append(VectorVectorDouble self, DoubleVector x)

        Parameters
        ----------
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _SnapTime.VectorVectorDouble_append(self, x)


    def empty(self):
        """
        empty(VectorVectorDouble self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _SnapTime.VectorVectorDouble_empty(self)


    def size(self):
        """
        size(VectorVectorDouble self) -> std::vector< std::vector< double > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _SnapTime.VectorVectorDouble_size(self)


    def swap(self, v):
        """
        swap(VectorVectorDouble self, VectorVectorDouble v)

        Parameters
        ----------
        v: std::vector< std::vector< double,std::allocator< double > > > &

        """
        return _SnapTime.VectorVectorDouble_swap(self, v)


    def begin(self):
        """
        begin(VectorVectorDouble self) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _SnapTime.VectorVectorDouble_begin(self)


    def end(self):
        """
        end(VectorVectorDouble self) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _SnapTime.VectorVectorDouble_end(self)


    def rbegin(self):
        """
        rbegin(VectorVectorDouble self) -> std::vector< std::vector< double > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _SnapTime.VectorVectorDouble_rbegin(self)


    def rend(self):
        """
        rend(VectorVectorDouble self) -> std::vector< std::vector< double > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _SnapTime.VectorVectorDouble_rend(self)


    def clear(self):
        """
        clear(VectorVectorDouble self)

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _SnapTime.VectorVectorDouble_clear(self)


    def get_allocator(self):
        """
        get_allocator(VectorVectorDouble self) -> std::vector< std::vector< double > >::allocator_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _SnapTime.VectorVectorDouble_get_allocator(self)


    def pop_back(self):
        """
        pop_back(VectorVectorDouble self)

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _SnapTime.VectorVectorDouble_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorVectorDouble self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator

        erase(VectorVectorDouble self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        first: std::vector< std::vector< double > >::iterator
        last: std::vector< std::vector< double > >::iterator

        """
        return _SnapTime.VectorVectorDouble_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(double)>)> self) -> VectorVectorDouble
        __init__(std::vector<(std::vector<(double)>)> self, VectorVectorDouble arg2) -> VectorVectorDouble

        Parameters
        ----------
        arg2: std::vector< std::vector< double,std::allocator< double > > > const &

        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size) -> VectorVectorDouble

        Parameters
        ----------
        size: std::vector< std::vector< double > >::size_type

        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size, DoubleVector value) -> VectorVectorDouble

        Parameters
        ----------
        size: std::vector< std::vector< double > >::size_type
        value: std::vector< std::vector< double > >::value_type const &

        """
        _SnapTime.VectorVectorDouble_swiginit(self, _SnapTime.new_VectorVectorDouble(*args))

    def push_back(self, x):
        """
        push_back(VectorVectorDouble self, DoubleVector x)

        Parameters
        ----------
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _SnapTime.VectorVectorDouble_push_back(self, x)


    def front(self):
        """
        front(VectorVectorDouble self) -> DoubleVector

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _SnapTime.VectorVectorDouble_front(self)


    def back(self):
        """
        back(VectorVectorDouble self) -> DoubleVector

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _SnapTime.VectorVectorDouble_back(self)


    def assign(self, n, x):
        """
        assign(VectorVectorDouble self, std::vector< std::vector< double > >::size_type n, DoubleVector x)

        Parameters
        ----------
        n: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _SnapTime.VectorVectorDouble_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorVectorDouble self, std::vector< std::vector< double > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::vector< double > >::size_type

        resize(VectorVectorDouble self, std::vector< std::vector< double > >::size_type new_size, DoubleVector x)

        Parameters
        ----------
        new_size: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _SnapTime.VectorVectorDouble_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorVectorDouble self, std::vector< std::vector< double > >::iterator pos, DoubleVector x) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator
        x: std::vector< std::vector< double > >::value_type const &

        insert(VectorVectorDouble self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, DoubleVector x)

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator
        n: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _SnapTime.VectorVectorDouble_insert(self, *args)


    def reserve(self, n):
        """
        reserve(VectorVectorDouble self, std::vector< std::vector< double > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::vector< double > >::size_type

        """
        return _SnapTime.VectorVectorDouble_reserve(self, n)


    def capacity(self):
        """
        capacity(VectorVectorDouble self) -> std::vector< std::vector< double > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _SnapTime.VectorVectorDouble_capacity(self)

    __swig_destroy__ = _SnapTime.delete_VectorVectorDouble
VectorVectorDouble.iterator = new_instancemethod(_SnapTime.VectorVectorDouble_iterator, None, VectorVectorDouble)
VectorVectorDouble.__nonzero__ = new_instancemethod(_SnapTime.VectorVectorDouble___nonzero__, None, VectorVectorDouble)
VectorVectorDouble.__bool__ = new_instancemethod(_SnapTime.VectorVectorDouble___bool__, None, VectorVectorDouble)
VectorVectorDouble.__len__ = new_instancemethod(_SnapTime.VectorVectorDouble___len__, None, VectorVectorDouble)
VectorVectorDouble.__getslice__ = new_instancemethod(_SnapTime.VectorVectorDouble___getslice__, None, VectorVectorDouble)
VectorVectorDouble.__setslice__ = new_instancemethod(_SnapTime.VectorVectorDouble___setslice__, None, VectorVectorDouble)
VectorVectorDouble.__delslice__ = new_instancemethod(_SnapTime.VectorVectorDouble___delslice__, None, VectorVectorDouble)
VectorVectorDouble.__delitem__ = new_instancemethod(_SnapTime.VectorVectorDouble___delitem__, None, VectorVectorDouble)
VectorVectorDouble.__getitem__ = new_instancemethod(_SnapTime.VectorVectorDouble___getitem__, None, VectorVectorDouble)
VectorVectorDouble.__setitem__ = new_instancemethod(_SnapTime.VectorVectorDouble___setitem__, None, VectorVectorDouble)
VectorVectorDouble.pop = new_instancemethod(_SnapTime.VectorVectorDouble_pop, None, VectorVectorDouble)
VectorVectorDouble.append = new_instancemethod(_SnapTime.VectorVectorDouble_append, None, VectorVectorDouble)
VectorVectorDouble.empty = new_instancemethod(_SnapTime.VectorVectorDouble_empty, None, VectorVectorDouble)
VectorVectorDouble.size = new_instancemethod(_SnapTime.VectorVectorDouble_size, None, VectorVectorDouble)
VectorVectorDouble.swap = new_instancemethod(_SnapTime.VectorVectorDouble_swap, None, VectorVectorDouble)
VectorVectorDouble.begin = new_instancemethod(_SnapTime.VectorVectorDouble_begin, None, VectorVectorDouble)
VectorVectorDouble.end = new_instancemethod(_SnapTime.VectorVectorDouble_end, None, VectorVectorDouble)
VectorVectorDouble.rbegin = new_instancemethod(_SnapTime.VectorVectorDouble_rbegin, None, VectorVectorDouble)
VectorVectorDouble.rend = new_instancemethod(_SnapTime.VectorVectorDouble_rend, None, VectorVectorDouble)
VectorVectorDouble.clear = new_instancemethod(_SnapTime.VectorVectorDouble_clear, None, VectorVectorDouble)
VectorVectorDouble.get_allocator = new_instancemethod(_SnapTime.VectorVectorDouble_get_allocator, None, VectorVectorDouble)
VectorVectorDouble.pop_back = new_instancemethod(_SnapTime.VectorVectorDouble_pop_back, None, VectorVectorDouble)
VectorVectorDouble.erase = new_instancemethod(_SnapTime.VectorVectorDouble_erase, None, VectorVectorDouble)
VectorVectorDouble.push_back = new_instancemethod(_SnapTime.VectorVectorDouble_push_back, None, VectorVectorDouble)
VectorVectorDouble.front = new_instancemethod(_SnapTime.VectorVectorDouble_front, None, VectorVectorDouble)
VectorVectorDouble.back = new_instancemethod(_SnapTime.VectorVectorDouble_back, None, VectorVectorDouble)
VectorVectorDouble.assign = new_instancemethod(_SnapTime.VectorVectorDouble_assign, None, VectorVectorDouble)
VectorVectorDouble.resize = new_instancemethod(_SnapTime.VectorVectorDouble_resize, None, VectorVectorDouble)
VectorVectorDouble.insert = new_instancemethod(_SnapTime.VectorVectorDouble_insert, None, VectorVectorDouble)
VectorVectorDouble.reserve = new_instancemethod(_SnapTime.VectorVectorDouble_reserve, None, VectorVectorDouble)
VectorVectorDouble.capacity = new_instancemethod(_SnapTime.VectorVectorDouble_capacity, None, VectorVectorDouble)
VectorVectorDouble_swigregister = _SnapTime.VectorVectorDouble_swigregister
VectorVectorDouble_swigregister(VectorVectorDouble)



