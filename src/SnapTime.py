# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _SnapTime.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SnapTime', [dirname(__file__)])
        except ImportError:
            import _SnapTime
            return _SnapTime
        if fp is not None:
            try:
                _mod = imp.load_module('_SnapTime', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SnapTime = swig_import_helper()
    del swig_import_helper
else:
    import _SnapTime
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SnapTimeConfiguration(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    InputRawDirectory = _swig_property(_SnapTime.SnapTimeConfiguration_InputRawDirectory_get, _SnapTime.SnapTimeConfiguration_InputRawDirectory_set)
    PrimaryDirectory = _swig_property(_SnapTime.SnapTimeConfiguration_PrimaryDirectory_get, _SnapTime.SnapTimeConfiguration_PrimaryDirectory_set)
    SymbolicDirectory = _swig_property(_SnapTime.SnapTimeConfiguration_SymbolicDirectory_get, _SnapTime.SnapTimeConfiguration_SymbolicDirectory_set)
    SchemaFile = _swig_property(_SnapTime.SnapTimeConfiguration_SchemaFile_get, _SnapTime.SnapTimeConfiguration_SchemaFile_set)
    ModHierarchy = _swig_property(_SnapTime.SnapTimeConfiguration_ModHierarchy_get, _SnapTime.SnapTimeConfiguration_ModHierarchy_set)
    SymbolicSplit = _swig_property(_SnapTime.SnapTimeConfiguration_SymbolicSplit_get, _SnapTime.SnapTimeConfiguration_SymbolicSplit_set)
    NumThreads = _swig_property(_SnapTime.SnapTimeConfiguration_NumThreads_get, _SnapTime.SnapTimeConfiguration_NumThreads_set)
    def __init__(self): 
        _SnapTime.SnapTimeConfiguration_swiginit(self,_SnapTime.new_SnapTimeConfiguration())
    __swig_destroy__ = _SnapTime.delete_SnapTimeConfiguration
SnapTimeConfiguration_swigregister = _SnapTime.SnapTimeConfiguration_swigregister
SnapTimeConfiguration_swigregister(SnapTimeConfiguration)

class QueryObject(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Queries = _swig_property(_SnapTime.QueryObject_Queries_get, _SnapTime.QueryObject_Queries_set)
    InitialTimestamp = _swig_property(_SnapTime.QueryObject_InitialTimestamp_get, _SnapTime.QueryObject_InitialTimestamp_set)
    FinalTimestamp = _swig_property(_SnapTime.QueryObject_FinalTimestamp_get, _SnapTime.QueryObject_FinalTimestamp_set)
    def __init__(self): 
        _SnapTime.QueryObject_swiginit(self,_SnapTime.new_QueryObject())
    __swig_destroy__ = _SnapTime.delete_QueryObject
QueryObject_swigregister = _SnapTime.QueryObject_swigregister
QueryObject_swigregister(QueryObject)


def GeneratePrimaryDirectories(*args):
  return _SnapTime.GeneratePrimaryDirectories(*args)
GeneratePrimaryDirectories = _SnapTime.GeneratePrimaryDirectories

def GenerateSymbolicIndex(*args):
  return _SnapTime.GenerateSymbolicIndex(*args)
GenerateSymbolicIndex = _SnapTime.GenerateSymbolicIndex

def Query(*args):
  return _SnapTime.Query(*args)
Query = _SnapTime.Query

def LoadQuery(*args):
  return _SnapTime.LoadQuery(*args)
LoadQuery = _SnapTime.LoadQuery

def InflateQuery(*args):
  return _SnapTime.InflateQuery(*args)
InflateQuery = _SnapTime.InflateQuery


